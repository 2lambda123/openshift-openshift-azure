// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// data/BuildConfig.openshift.io/test-bc.yaml
// data/Deployment.apps/simple-deployment.yaml
// data/Namespaces/test.yaml
package extended

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _buildconfigOpenshiftIoTestBcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xc1\x4a\xc4\x40\x0c\x40\xef\xf3\x15\xf9\x81\xb6\xba\x17\x61\x8e\x2a\x88\x37\x61\xc1\x8b\x78\x98\x9d\x66\x67\xc3\x4e\x27\x25\xc9\x28\x45\xfc\x77\x69\x07\x8b\xde\x92\xbc\x84\x97\x90\x30\xd3\x2b\x8a\x12\x17\x0f\xa7\x4a\x79\xec\x79\xc6\xa2\x17\x3a\x5b\x4f\x3c\x7c\xdc\xba\x2b\x95\xd1\xc3\xfd\xca\x1e\xb8\x9c\x29\xb9\x09\x2d\x8c\xc1\x82\x77\x00\x25\x4c\xe8\xc1\x50\xad\xdb\xc6\x63\x6b\xd1\x19\xe3\x8a\xb9\xda\x5c\xcd\xc3\xd7\xb7\x03\x90\x5a\x5e\x38\x53\x5c\x3c\x1c\x51\x28\x64\x07\xa0\x5c\x25\xe2\xda\x0a\x90\xc8\x5a\x00\x50\x85\xfc\x96\x0f\x43\x22\xbb\xd4\x53\x1f\x79\x1a\xf6\xd5\x06\xa9\xa7\xa5\xbb\x60\xce\xdc\x7d\xb2\xe4\xb1\x4f\x64\xdb\xa8\x62\x14\x34\xf5\x50\x6a\xce\x5b\xc5\x96\x19\x3d\x3c\x6d\x5c\x4d\x82\x61\x5a\x9a\xa6\xb9\x8f\xff\x6a\x00\x67\xe1\xe9\x37\x06\x68\xd7\x3f\x72\xbc\xa2\x3c\x4f\x21\xe1\x4e\xda\xe5\x11\x8b\xb1\xb6\x7d\x0e\x87\xae\xa5\x77\x7f\xc4\xc7\x4d\xe2\x00\x4c\x28\x25\x14\xf5\xf0\xf6\xee\xd4\x82\x55\x5d\x35\x39\xa8\xed\x1f\xb8\x71\x3f\x01\x00\x00\xff\xff\x55\x99\x75\xff\x90\x01\x00\x00")

func buildconfigOpenshiftIoTestBcYamlBytes() ([]byte, error) {
	return bindataRead(
		_buildconfigOpenshiftIoTestBcYaml,
		"BuildConfig.openshift.io/test-bc.yaml",
	)
}

func buildconfigOpenshiftIoTestBcYaml() (*asset, error) {
	bytes, err := buildconfigOpenshiftIoTestBcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "BuildConfig.openshift.io/test-bc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deploymentAppsSimpleDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcd\x6e\xdb\x40\x0c\x84\xef\x7a\x0a\xc2\x77\x57\xf6\xcd\xd8\x73\x81\xb6\x40\x51\x08\x85\x91\x3b\xbd\x1a\x5b\x0b\xef\x0f\xb1\x64\x8c\xe8\xed\x03\xc5\xb1\x25\x1d\x12\x1e\x87\x33\xf3\x91\x2c\xe1\x05\x55\x43\xc9\x8e\x58\x44\xdb\xdb\xbe\xb9\x86\xdc\x3b\xfa\x09\x89\x65\x4c\xc8\xd6\x24\x18\xf7\x6c\xec\x1a\xa2\xcc\x09\x8e\xfa\x79\x79\x97\x54\xd8\xc3\x91\x41\x6d\xbb\x5a\x46\x3e\x21\xea\x94\x7c\x64\x35\x24\x89\x58\xba\x54\xe0\x27\x47\x85\xc4\xe0\x59\x1d\xed\x1b\x22\x45\x84\xb7\x52\xef\xd9\xc4\xe6\x87\xbf\x8b\xb2\xaf\xeb\x88\xd4\x2a\x1b\x2e\xe3\xdd\x69\xa3\xc0\xd1\x7f\xf8\x0a\x36\x34\x44\x86\x24\x91\x0d\x9f\xcd\x8b\xef\xa6\x89\x2b\xc8\x77\x18\xa2\xc7\xe5\xd3\xf8\x92\x8d\x43\x46\x7d\x66\xb7\x14\x12\x5f\xe0\x68\xd3\x17\x7f\x45\xfd\x11\x4a\x5b\x04\x59\x87\x70\xb6\x76\xae\xda\xe2\x8d\xa7\x76\x77\xdb\x6f\x9e\xd8\x8f\x68\xf7\x1a\x63\x57\x62\xf0\xa3\xa3\x3f\xe7\x7f\xc5\xba\x0a\x7d\xc0\xe7\xe3\xd2\xc8\x22\x4f\xad\x82\xfb\x90\xa1\xda\xd5\x72\xc2\xfc\x08\xd1\x60\x26\xbf\x60\x4b\x89\x48\xd8\x06\x47\xed\x5a\x2b\xd5\x1c\x1d\x76\x87\xdd\x4a\x56\x3f\x60\xe2\xfd\x3e\x1e\xbb\xe6\x3d\x00\x00\xff\xff\x29\xec\x63\x9c\x3b\x02\x00\x00")

func deploymentAppsSimpleDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_deploymentAppsSimpleDeploymentYaml,
		"Deployment.apps/simple-deployment.yaml",
	)
}

func deploymentAppsSimpleDeploymentYaml() (*asset, error) {
	bytes, err := deploymentAppsSimpleDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Deployment.apps/simple-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _namespacesTestYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xb1\xae\xc2\x30\x0c\x46\xe1\xdd\x4f\x61\x75\xef\xbd\x62\xcd\x43\x30\xb2\x9b\xe6\x2f\x58\x6d\xec\x28\x36\x0c\x3c\x3d\x6a\x37\xc6\x33\x9c\x4f\xba\xde\x30\x42\xdd\x0a\xbf\x2f\xb4\xa9\xd5\xc2\x57\x69\x88\x2e\x0b\xa8\x21\xa5\x4a\x4a\x21\x66\x31\xf3\x94\x54\xb7\x38\x92\xd9\x3b\x2c\x9e\xba\xe6\x9f\xfa\xbf\x79\xc5\x1c\xd8\xb1\xa4\x8f\xc2\xd3\x44\xcc\x26\x0d\x85\x13\x91\x14\x1d\xcb\x71\xad\x6a\xb2\xeb\x07\xe3\x34\x66\xde\x5e\x77\x0c\x43\x22\xce\xfc\x21\x7d\xe8\x43\x8d\xbe\x01\x00\x00\xff\xff\xfc\xb3\xa7\x49\xa3\x00\x00\x00")

func namespacesTestYamlBytes() ([]byte, error) {
	return bindataRead(
		_namespacesTestYaml,
		"Namespaces/test.yaml",
	)
}

func namespacesTestYaml() (*asset, error) {
	bytes, err := namespacesTestYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Namespaces/test.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"BuildConfig.openshift.io/test-bc.yaml":  buildconfigOpenshiftIoTestBcYaml,
	"Deployment.apps/simple-deployment.yaml": deploymentAppsSimpleDeploymentYaml,
	"Namespaces/test.yaml":                   namespacesTestYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"BuildConfig.openshift.io": {nil, map[string]*bintree{
		"test-bc.yaml": {buildconfigOpenshiftIoTestBcYaml, map[string]*bintree{}},
	}},
	"Deployment.apps": {nil, map[string]*bintree{
		"simple-deployment.yaml": {deploymentAppsSimpleDeploymentYaml, map[string]*bintree{}},
	}},
	"Namespaces": {nil, map[string]*bintree{
		"test.yaml": {namespacesTestYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
