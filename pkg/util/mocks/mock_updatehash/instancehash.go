// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/openshift-azure/pkg/cluster/updatehash (interfaces: UpdateHash)

// Package mock_updatehash is a generated GoMock package.
package mock_updatehash

import (
	reflect "reflect"

	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2018-06-01/compute"
	gomock "github.com/golang/mock/gomock"

	api "github.com/openshift/openshift-azure/pkg/api"
	updateblob "github.com/openshift/openshift-azure/pkg/cluster/updateblob"
	storage "github.com/openshift/openshift-azure/pkg/util/azureclient/storage"
)

// MockUpdateHash is a mock of UpdateHash interface
type MockUpdateHash struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateHashMockRecorder
}

// MockUpdateHashMockRecorder is the mock recorder for MockUpdateHash
type MockUpdateHashMockRecorder struct {
	mock *MockUpdateHash
}

// NewMockUpdateHash creates a new mock instance
func NewMockUpdateHash(ctrl *gomock.Controller) *MockUpdateHash {
	mock := &MockUpdateHash{ctrl: ctrl}
	mock.recorder = &MockUpdateHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateHash) EXPECT() *MockUpdateHashMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockUpdateHash) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUpdateHashMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUpdateHash)(nil).Delete))
}

// DeleteAllBut mocks base method
func (m *MockUpdateHash) DeleteAllBut(arg0 map[updateblob.InstanceName]struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAllBut", arg0)
}

// DeleteAllBut indicates an expected call of DeleteAllBut
func (mr *MockUpdateHashMockRecorder) DeleteAllBut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllBut", reflect.TypeOf((*MockUpdateHash)(nil).DeleteAllBut), arg0)
}

// DeleteInstanceHash mocks base method
func (m *MockUpdateHash) DeleteInstanceHash(arg0 updateblob.InstanceName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteInstanceHash", arg0)
}

// DeleteInstanceHash indicates an expected call of DeleteInstanceHash
func (mr *MockUpdateHashMockRecorder) DeleteInstanceHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceHash", reflect.TypeOf((*MockUpdateHash)(nil).DeleteInstanceHash), arg0)
}

// FilterOldVMs mocks base method
func (m *MockUpdateHash) FilterOldVMs(arg0 []compute.VirtualMachineScaleSetVM) ([]compute.VirtualMachineScaleSetVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOldVMs", arg0)
	ret0, _ := ret[0].([]compute.VirtualMachineScaleSetVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOldVMs indicates an expected call of FilterOldVMs
func (mr *MockUpdateHashMockRecorder) FilterOldVMs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOldVMs", reflect.TypeOf((*MockUpdateHash)(nil).FilterOldVMs), arg0)
}

// GenerateNewHashes mocks base method
func (m *MockUpdateHash) GenerateNewHashes(arg0 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewHashes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateNewHashes indicates an expected call of GenerateNewHashes
func (mr *MockUpdateHashMockRecorder) GenerateNewHashes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewHashes", reflect.TypeOf((*MockUpdateHash)(nil).GenerateNewHashes), arg0)
}

// Initialize mocks base method
func (m *MockUpdateHash) Initialize(arg0 *api.OpenShiftManagedCluster, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockUpdateHashMockRecorder) Initialize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockUpdateHash)(nil).Initialize), arg0, arg1)
}

// Reload mocks base method
func (m *MockUpdateHash) Reload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload
func (mr *MockUpdateHashMockRecorder) Reload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockUpdateHash)(nil).Reload))
}

// Save mocks base method
func (m *MockUpdateHash) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockUpdateHashMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUpdateHash)(nil).Save))
}

// SetContainer mocks base method
func (m *MockUpdateHash) SetContainer(arg0 storage.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContainer indicates an expected call of SetContainer
func (mr *MockUpdateHashMockRecorder) SetContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainer", reflect.TypeOf((*MockUpdateHash)(nil).SetContainer), arg0)
}

// UpdateInstanceHash mocks base method
func (m *MockUpdateHash) UpdateInstanceHash(arg0 *compute.VirtualMachineScaleSetVM) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateInstanceHash", arg0)
}

// UpdateInstanceHash indicates an expected call of UpdateInstanceHash
func (mr *MockUpdateHashMockRecorder) UpdateInstanceHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceHash", reflect.TypeOf((*MockUpdateHash)(nil).UpdateInstanceHash), arg0)
}
