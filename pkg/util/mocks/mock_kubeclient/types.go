// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/openshift-azure/pkg/cluster/kubeclient (interfaces: Kubeclient)

// Package mock_kubeclient is a generated GoMock package.
package mock_kubeclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/openshift/openshift-azure/pkg/api"
	kubeclient "github.com/openshift/openshift-azure/pkg/cluster/kubeclient"
)

// MockKubeclient is a mock of Kubeclient interface
type MockKubeclient struct {
	ctrl     *gomock.Controller
	recorder *MockKubeclientMockRecorder
}

// MockKubeclientMockRecorder is the mock recorder for MockKubeclient
type MockKubeclientMockRecorder struct {
	mock *MockKubeclient
}

// NewMockKubeclient creates a new mock instance
func NewMockKubeclient(ctrl *gomock.Controller) *MockKubeclient {
	mock := &MockKubeclient{ctrl: ctrl}
	mock.recorder = &MockKubeclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeclient) EXPECT() *MockKubeclientMockRecorder {
	return m.recorder
}

// DeleteMaster mocks base method
func (m *MockKubeclient) DeleteMaster(arg0 kubeclient.ComputerName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMaster", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMaster indicates an expected call of DeleteMaster
func (mr *MockKubeclientMockRecorder) DeleteMaster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMaster", reflect.TypeOf((*MockKubeclient)(nil).DeleteMaster), arg0)
}

// DrainAndDeleteWorker mocks base method
func (m *MockKubeclient) DrainAndDeleteWorker(arg0 context.Context, arg1 kubeclient.ComputerName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrainAndDeleteWorker", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DrainAndDeleteWorker indicates an expected call of DrainAndDeleteWorker
func (mr *MockKubeclientMockRecorder) DrainAndDeleteWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainAndDeleteWorker", reflect.TypeOf((*MockKubeclient)(nil).DrainAndDeleteWorker), arg0, arg1)
}

// WaitForInfraServices mocks base method
func (m *MockKubeclient) WaitForInfraServices(arg0 context.Context) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForInfraServices", arg0)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// WaitForInfraServices indicates an expected call of WaitForInfraServices
func (mr *MockKubeclientMockRecorder) WaitForInfraServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForInfraServices", reflect.TypeOf((*MockKubeclient)(nil).WaitForInfraServices), arg0)
}

// WaitForReadyMaster mocks base method
func (m *MockKubeclient) WaitForReadyMaster(arg0 context.Context, arg1 kubeclient.ComputerName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForReadyMaster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForReadyMaster indicates an expected call of WaitForReadyMaster
func (mr *MockKubeclientMockRecorder) WaitForReadyMaster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReadyMaster", reflect.TypeOf((*MockKubeclient)(nil).WaitForReadyMaster), arg0, arg1)
}

// WaitForReadyWorker mocks base method
func (m *MockKubeclient) WaitForReadyWorker(arg0 context.Context, arg1 kubeclient.ComputerName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForReadyWorker", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForReadyWorker indicates an expected call of WaitForReadyWorker
func (mr *MockKubeclientMockRecorder) WaitForReadyWorker(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReadyWorker", reflect.TypeOf((*MockKubeclient)(nil).WaitForReadyWorker), arg0, arg1)
}
