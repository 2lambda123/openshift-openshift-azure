// Code generated by MockGen. DO NOT EDIT.
// Source: wait.go

// Package mock_wait is a generated GoMock package.
package mock_wait

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSimpleHttpClient is a mock of SimpleHttpClient interface
type MockSimpleHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleHttpClientMockRecorder
}

// MockSimpleHttpClientMockRecorder is the mock recorder for MockSimpleHttpClient
type MockSimpleHttpClientMockRecorder struct {
	mock *MockSimpleHttpClient
}

// NewMockSimpleHttpClient creates a new mock instance
func NewMockSimpleHttpClient(ctrl *gomock.Controller) *MockSimpleHttpClient {
	mock := &MockSimpleHttpClient{ctrl: ctrl}
	mock.recorder = &MockSimpleHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSimpleHttpClient) EXPECT() *MockSimpleHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockSimpleHttpClient) Do(req *http.Request) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockSimpleHttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockSimpleHttpClient)(nil).Do), req)
}
