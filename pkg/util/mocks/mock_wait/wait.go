// Code generated by MockGen. DO NOT EDIT.
// Source: wait.go

// Package mock_wait is a generated GoMock package.
package mock_wait

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSimpleHTTPClient is a mock of SimpleHTTPClient interface
type MockSimpleHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleHTTPClientMockRecorder
}

// MockSimpleHTTPClientMockRecorder is the mock recorder for MockSimpleHTTPClient
type MockSimpleHTTPClientMockRecorder struct {
	mock *MockSimpleHTTPClient
}

// NewMockSimpleHTTPClient creates a new mock instance
func NewMockSimpleHTTPClient(ctrl *gomock.Controller) *MockSimpleHTTPClient {
	mock := &MockSimpleHTTPClient{ctrl: ctrl}
	mock.recorder = &MockSimpleHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSimpleHTTPClient) EXPECT() *MockSimpleHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockSimpleHTTPClient) Do(req *http.Request) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockSimpleHTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockSimpleHTTPClient)(nil).Do), req)
}
