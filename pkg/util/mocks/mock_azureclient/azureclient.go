// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/openshift-azure/pkg/util/azureclient (interfaces: AccountsClient,ActivityLogsClient,ApplicationsClient,Client,DeploymentOperationsClient,DeploymentsClient,GroupsClient,KeyVaultClient,MarketPlaceAgreementsClient,RBACApplicationsClient,RBACGroupsClient,RecordSetsClient,ResourcesClient,ServicePrincipalsClient,VaultMgmtClient,VirtualMachineScaleSetExtensionsClient,VirtualMachineScaleSetsClient,VirtualMachineScaleSetVMsClient,VirtualNetworksClient,VirtualNetworksPeeringsClient,ZonesClient)

// Package mock_azureclient is a generated GoMock package.
package mock_azureclient

import (
	context "context"
	reflect "reflect"

	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2018-10-01/compute"
	dns "github.com/Azure/azure-sdk-for-go/services/dns/mgmt/2017-10-01/dns"
	graphrbac "github.com/Azure/azure-sdk-for-go/services/graphrbac/1.6/graphrbac"
	keyvault "github.com/Azure/azure-sdk-for-go/services/keyvault/2016-10-01/keyvault"
	keyvault0 "github.com/Azure/azure-sdk-for-go/services/keyvault/mgmt/2016-10-01/keyvault"
	marketplaceordering "github.com/Azure/azure-sdk-for-go/services/marketplaceordering/mgmt/2015-06-01/marketplaceordering"
	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2018-06-01/network"
	insights "github.com/Azure/azure-sdk-for-go/services/preview/monitor/mgmt/2018-09-01/insights"
	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-05-01/resources"
	managedapplications "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/managedapplications"
	storage "github.com/Azure/azure-sdk-for-go/services/storage/mgmt/2018-02-01/storage"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountsClient is a mock of AccountsClient interface
type MockAccountsClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsClientMockRecorder
}

// MockAccountsClientMockRecorder is the mock recorder for MockAccountsClient
type MockAccountsClientMockRecorder struct {
	mock *MockAccountsClient
}

// NewMockAccountsClient creates a new mock instance
func NewMockAccountsClient(ctrl *gomock.Controller) *MockAccountsClient {
	mock := &MockAccountsClient{ctrl: ctrl}
	mock.recorder = &MockAccountsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountsClient) EXPECT() *MockAccountsClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAccountsClient) Create(arg0 context.Context, arg1, arg2 string, arg3 storage.AccountCreateParameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAccountsClientMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountsClient)(nil).Create), arg0, arg1, arg2, arg3)
}

// ListByResourceGroup mocks base method
func (m *MockAccountsClient) ListByResourceGroup(arg0 context.Context, arg1 string) (storage.AccountListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", arg0, arg1)
	ret0, _ := ret[0].(storage.AccountListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockAccountsClientMockRecorder) ListByResourceGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockAccountsClient)(nil).ListByResourceGroup), arg0, arg1)
}

// ListKeys mocks base method
func (m *MockAccountsClient) ListKeys(arg0 context.Context, arg1, arg2 string) (storage.AccountListKeysResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", arg0, arg1, arg2)
	ret0, _ := ret[0].(storage.AccountListKeysResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockAccountsClientMockRecorder) ListKeys(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockAccountsClient)(nil).ListKeys), arg0, arg1, arg2)
}

// MockActivityLogsClient is a mock of ActivityLogsClient interface
type MockActivityLogsClient struct {
	ctrl     *gomock.Controller
	recorder *MockActivityLogsClientMockRecorder
}

// MockActivityLogsClientMockRecorder is the mock recorder for MockActivityLogsClient
type MockActivityLogsClientMockRecorder struct {
	mock *MockActivityLogsClient
}

// NewMockActivityLogsClient creates a new mock instance
func NewMockActivityLogsClient(ctrl *gomock.Controller) *MockActivityLogsClient {
	mock := &MockActivityLogsClient{ctrl: ctrl}
	mock.recorder = &MockActivityLogsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActivityLogsClient) EXPECT() *MockActivityLogsClientMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockActivityLogsClient) List(arg0 context.Context, arg1, arg2 string) (insights.EventDataCollectionPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(insights.EventDataCollectionPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockActivityLogsClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockActivityLogsClient)(nil).List), arg0, arg1, arg2)
}

// MockApplicationsClient is a mock of ApplicationsClient interface
type MockApplicationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationsClientMockRecorder
}

// MockApplicationsClientMockRecorder is the mock recorder for MockApplicationsClient
type MockApplicationsClientMockRecorder struct {
	mock *MockApplicationsClient
}

// NewMockApplicationsClient creates a new mock instance
func NewMockApplicationsClient(ctrl *gomock.Controller) *MockApplicationsClient {
	mock := &MockApplicationsClient{ctrl: ctrl}
	mock.recorder = &MockApplicationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationsClient) EXPECT() *MockApplicationsClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockApplicationsClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockApplicationsClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockApplicationsClient)(nil).Client))
}

// Get mocks base method
func (m *MockApplicationsClient) Get(arg0 context.Context, arg1, arg2 string) (managedapplications.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(managedapplications.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockApplicationsClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplicationsClient)(nil).Get), arg0, arg1, arg2)
}

// GetByID mocks base method
func (m *MockApplicationsClient) GetByID(arg0 context.Context, arg1 string) (managedapplications.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(managedapplications.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockApplicationsClientMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockApplicationsClient)(nil).GetByID), arg0, arg1)
}

// ListByResourceGroup mocks base method
func (m *MockApplicationsClient) ListByResourceGroup(arg0 context.Context, arg1 string) (managedapplications.ApplicationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", arg0, arg1)
	ret0, _ := ret[0].(managedapplications.ApplicationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockApplicationsClientMockRecorder) ListByResourceGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockApplicationsClient)(nil).ListByResourceGroup), arg0, arg1)
}

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClient)(nil).Client))
}

// MockDeploymentOperationsClient is a mock of DeploymentOperationsClient interface
type MockDeploymentOperationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentOperationsClientMockRecorder
}

// MockDeploymentOperationsClientMockRecorder is the mock recorder for MockDeploymentOperationsClient
type MockDeploymentOperationsClientMockRecorder struct {
	mock *MockDeploymentOperationsClient
}

// NewMockDeploymentOperationsClient creates a new mock instance
func NewMockDeploymentOperationsClient(ctrl *gomock.Controller) *MockDeploymentOperationsClient {
	mock := &MockDeploymentOperationsClient{ctrl: ctrl}
	mock.recorder = &MockDeploymentOperationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentOperationsClient) EXPECT() *MockDeploymentOperationsClientMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockDeploymentOperationsClient) List(arg0 context.Context, arg1, arg2 string, arg3 *int32) ([]resources.DeploymentOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]resources.DeploymentOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockDeploymentOperationsClientMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeploymentOperationsClient)(nil).List), arg0, arg1, arg2, arg3)
}

// MockDeploymentsClient is a mock of DeploymentsClient interface
type MockDeploymentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentsClientMockRecorder
}

// MockDeploymentsClientMockRecorder is the mock recorder for MockDeploymentsClient
type MockDeploymentsClientMockRecorder struct {
	mock *MockDeploymentsClient
}

// NewMockDeploymentsClient creates a new mock instance
func NewMockDeploymentsClient(ctrl *gomock.Controller) *MockDeploymentsClient {
	mock := &MockDeploymentsClient{ctrl: ctrl}
	mock.recorder = &MockDeploymentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentsClient) EXPECT() *MockDeploymentsClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockDeploymentsClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockDeploymentsClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDeploymentsClient)(nil).Client))
}

// CreateOrUpdate mocks base method
func (m *MockDeploymentsClient) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 resources.Deployment) (resources.DeploymentsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(resources.DeploymentsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockDeploymentsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDeploymentsClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// CreateOrUpdateAndWait mocks base method
func (m *MockDeploymentsClient) CreateOrUpdateAndWait(arg0 context.Context, arg1, arg2 string, arg3 resources.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait
func (mr *MockDeploymentsClientMockRecorder) CreateOrUpdateAndWait(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockDeploymentsClient)(nil).CreateOrUpdateAndWait), arg0, arg1, arg2, arg3)
}

// MockGroupsClient is a mock of GroupsClient interface
type MockGroupsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsClientMockRecorder
}

// MockGroupsClientMockRecorder is the mock recorder for MockGroupsClient
type MockGroupsClientMockRecorder struct {
	mock *MockGroupsClient
}

// NewMockGroupsClient creates a new mock instance
func NewMockGroupsClient(ctrl *gomock.Controller) *MockGroupsClient {
	mock := &MockGroupsClient{ctrl: ctrl}
	mock.recorder = &MockGroupsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroupsClient) EXPECT() *MockGroupsClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockGroupsClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockGroupsClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockGroupsClient)(nil).Client))
}

// CreateOrUpdate mocks base method
func (m *MockGroupsClient) CreateOrUpdate(arg0 context.Context, arg1 string, arg2 resources.Group) (resources.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockGroupsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockGroupsClient)(nil).CreateOrUpdate), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockGroupsClient) Delete(arg0 context.Context, arg1 string) (resources.GroupsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(resources.GroupsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockGroupsClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupsClient)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (m *MockGroupsClient) List(arg0 context.Context, arg1 string, arg2 *int32) (resources.GroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.GroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockGroupsClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGroupsClient)(nil).List), arg0, arg1, arg2)
}

// MockKeyVaultClient is a mock of KeyVaultClient interface
type MockKeyVaultClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyVaultClientMockRecorder
}

// MockKeyVaultClientMockRecorder is the mock recorder for MockKeyVaultClient
type MockKeyVaultClientMockRecorder struct {
	mock *MockKeyVaultClient
}

// NewMockKeyVaultClient creates a new mock instance
func NewMockKeyVaultClient(ctrl *gomock.Controller) *MockKeyVaultClient {
	mock := &MockKeyVaultClient{ctrl: ctrl}
	mock.recorder = &MockKeyVaultClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyVaultClient) EXPECT() *MockKeyVaultClientMockRecorder {
	return m.recorder
}

// GetSecret mocks base method
func (m *MockKeyVaultClient) GetSecret(arg0 context.Context, arg1, arg2, arg3 string) (keyvault.SecretBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(keyvault.SecretBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockKeyVaultClientMockRecorder) GetSecret(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockKeyVaultClient)(nil).GetSecret), arg0, arg1, arg2, arg3)
}

// ImportCertificate mocks base method
func (m *MockKeyVaultClient) ImportCertificate(arg0 context.Context, arg1, arg2 string, arg3 keyvault.CertificateImportParameters) (keyvault.CertificateBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCertificate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(keyvault.CertificateBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCertificate indicates an expected call of ImportCertificate
func (mr *MockKeyVaultClientMockRecorder) ImportCertificate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificate", reflect.TypeOf((*MockKeyVaultClient)(nil).ImportCertificate), arg0, arg1, arg2, arg3)
}

// MockMarketPlaceAgreementsClient is a mock of MarketPlaceAgreementsClient interface
type MockMarketPlaceAgreementsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMarketPlaceAgreementsClientMockRecorder
}

// MockMarketPlaceAgreementsClientMockRecorder is the mock recorder for MockMarketPlaceAgreementsClient
type MockMarketPlaceAgreementsClientMockRecorder struct {
	mock *MockMarketPlaceAgreementsClient
}

// NewMockMarketPlaceAgreementsClient creates a new mock instance
func NewMockMarketPlaceAgreementsClient(ctrl *gomock.Controller) *MockMarketPlaceAgreementsClient {
	mock := &MockMarketPlaceAgreementsClient{ctrl: ctrl}
	mock.recorder = &MockMarketPlaceAgreementsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketPlaceAgreementsClient) EXPECT() *MockMarketPlaceAgreementsClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMarketPlaceAgreementsClient) Create(arg0 context.Context, arg1, arg2, arg3 string, arg4 marketplaceordering.AgreementTerms) (marketplaceordering.AgreementTerms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMarketPlaceAgreementsClientMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMarketPlaceAgreementsClient)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Get mocks base method
func (m *MockMarketPlaceAgreementsClient) Get(arg0 context.Context, arg1, arg2, arg3 string) (marketplaceordering.AgreementTerms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(marketplaceordering.AgreementTerms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMarketPlaceAgreementsClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMarketPlaceAgreementsClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// MockRBACApplicationsClient is a mock of RBACApplicationsClient interface
type MockRBACApplicationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRBACApplicationsClientMockRecorder
}

// MockRBACApplicationsClientMockRecorder is the mock recorder for MockRBACApplicationsClient
type MockRBACApplicationsClientMockRecorder struct {
	mock *MockRBACApplicationsClient
}

// NewMockRBACApplicationsClient creates a new mock instance
func NewMockRBACApplicationsClient(ctrl *gomock.Controller) *MockRBACApplicationsClient {
	mock := &MockRBACApplicationsClient{ctrl: ctrl}
	mock.recorder = &MockRBACApplicationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRBACApplicationsClient) EXPECT() *MockRBACApplicationsClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRBACApplicationsClient) Create(arg0 context.Context, arg1 graphrbac.ApplicationCreateParameters) (graphrbac.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(graphrbac.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRBACApplicationsClientMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRBACApplicationsClient)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockRBACApplicationsClient) Delete(arg0 context.Context, arg1 string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockRBACApplicationsClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRBACApplicationsClient)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (m *MockRBACApplicationsClient) List(arg0 context.Context, arg1 string) (graphrbac.ApplicationListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(graphrbac.ApplicationListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRBACApplicationsClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRBACApplicationsClient)(nil).List), arg0, arg1)
}

// Patch mocks base method
func (m *MockRBACApplicationsClient) Patch(arg0 context.Context, arg1 string, arg2 graphrbac.ApplicationUpdateParameters) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1, arg2)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockRBACApplicationsClientMockRecorder) Patch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRBACApplicationsClient)(nil).Patch), arg0, arg1, arg2)
}

// MockRBACGroupsClient is a mock of RBACGroupsClient interface
type MockRBACGroupsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRBACGroupsClientMockRecorder
}

// MockRBACGroupsClientMockRecorder is the mock recorder for MockRBACGroupsClient
type MockRBACGroupsClientMockRecorder struct {
	mock *MockRBACGroupsClient
}

// NewMockRBACGroupsClient creates a new mock instance
func NewMockRBACGroupsClient(ctrl *gomock.Controller) *MockRBACGroupsClient {
	mock := &MockRBACGroupsClient{ctrl: ctrl}
	mock.recorder = &MockRBACGroupsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRBACGroupsClient) EXPECT() *MockRBACGroupsClientMockRecorder {
	return m.recorder
}

// GetGroupMembers mocks base method
func (m *MockRBACGroupsClient) GetGroupMembers(arg0 context.Context, arg1 string) ([]graphrbac.BasicDirectoryObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", arg0, arg1)
	ret0, _ := ret[0].([]graphrbac.BasicDirectoryObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers
func (mr *MockRBACGroupsClientMockRecorder) GetGroupMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockRBACGroupsClient)(nil).GetGroupMembers), arg0, arg1)
}

// MockRecordSetsClient is a mock of RecordSetsClient interface
type MockRecordSetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRecordSetsClientMockRecorder
}

// MockRecordSetsClientMockRecorder is the mock recorder for MockRecordSetsClient
type MockRecordSetsClientMockRecorder struct {
	mock *MockRecordSetsClient
}

// NewMockRecordSetsClient creates a new mock instance
func NewMockRecordSetsClient(ctrl *gomock.Controller) *MockRecordSetsClient {
	mock := &MockRecordSetsClient{ctrl: ctrl}
	mock.recorder = &MockRecordSetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecordSetsClient) EXPECT() *MockRecordSetsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockRecordSetsClient) CreateOrUpdate(arg0 context.Context, arg1, arg2, arg3 string, arg4 dns.RecordType, arg5 dns.RecordSet, arg6, arg7 string) (dns.RecordSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(dns.RecordSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockRecordSetsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockRecordSetsClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// Delete mocks base method
func (m *MockRecordSetsClient) Delete(arg0 context.Context, arg1, arg2, arg3 string, arg4 dns.RecordType, arg5 string) (autorest.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(autorest.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockRecordSetsClientMockRecorder) Delete(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordSetsClient)(nil).Delete), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Get mocks base method
func (m *MockRecordSetsClient) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 dns.RecordType) (dns.RecordSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(dns.RecordSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRecordSetsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRecordSetsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// MockResourcesClient is a mock of ResourcesClient interface
type MockResourcesClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesClientMockRecorder
}

// MockResourcesClientMockRecorder is the mock recorder for MockResourcesClient
type MockResourcesClientMockRecorder struct {
	mock *MockResourcesClient
}

// NewMockResourcesClient creates a new mock instance
func NewMockResourcesClient(ctrl *gomock.Controller) *MockResourcesClient {
	mock := &MockResourcesClient{ctrl: ctrl}
	mock.recorder = &MockResourcesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourcesClient) EXPECT() *MockResourcesClientMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method
func (m *MockResourcesClient) DeleteByID(arg0 context.Context, arg1 string) (resources.DeleteByIDFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(resources.DeleteByIDFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockResourcesClientMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockResourcesClient)(nil).DeleteByID), arg0, arg1)
}

// ListByResourceGroup mocks base method
func (m *MockResourcesClient) ListByResourceGroup(arg0 context.Context, arg1, arg2, arg3 string, arg4 *int32) (resources.ListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResourceGroup", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(resources.ListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByResourceGroup indicates an expected call of ListByResourceGroup
func (mr *MockResourcesClientMockRecorder) ListByResourceGroup(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResourceGroup", reflect.TypeOf((*MockResourcesClient)(nil).ListByResourceGroup), arg0, arg1, arg2, arg3, arg4)
}

// MockServicePrincipalsClient is a mock of ServicePrincipalsClient interface
type MockServicePrincipalsClient struct {
	ctrl     *gomock.Controller
	recorder *MockServicePrincipalsClientMockRecorder
}

// MockServicePrincipalsClientMockRecorder is the mock recorder for MockServicePrincipalsClient
type MockServicePrincipalsClientMockRecorder struct {
	mock *MockServicePrincipalsClient
}

// NewMockServicePrincipalsClient creates a new mock instance
func NewMockServicePrincipalsClient(ctrl *gomock.Controller) *MockServicePrincipalsClient {
	mock := &MockServicePrincipalsClient{ctrl: ctrl}
	mock.recorder = &MockServicePrincipalsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServicePrincipalsClient) EXPECT() *MockServicePrincipalsClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockServicePrincipalsClient) Create(arg0 context.Context, arg1 graphrbac.ServicePrincipalCreateParameters) (graphrbac.ServicePrincipal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(graphrbac.ServicePrincipal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServicePrincipalsClientMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServicePrincipalsClient)(nil).Create), arg0, arg1)
}

// List mocks base method
func (m *MockServicePrincipalsClient) List(arg0 context.Context, arg1 string) (graphrbac.ServicePrincipalListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(graphrbac.ServicePrincipalListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServicePrincipalsClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServicePrincipalsClient)(nil).List), arg0, arg1)
}

// MockVaultMgmtClient is a mock of VaultMgmtClient interface
type MockVaultMgmtClient struct {
	ctrl     *gomock.Controller
	recorder *MockVaultMgmtClientMockRecorder
}

// MockVaultMgmtClientMockRecorder is the mock recorder for MockVaultMgmtClient
type MockVaultMgmtClientMockRecorder struct {
	mock *MockVaultMgmtClient
}

// NewMockVaultMgmtClient creates a new mock instance
func NewMockVaultMgmtClient(ctrl *gomock.Controller) *MockVaultMgmtClient {
	mock := &MockVaultMgmtClient{ctrl: ctrl}
	mock.recorder = &MockVaultMgmtClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVaultMgmtClient) EXPECT() *MockVaultMgmtClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVaultMgmtClient) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 keyvault0.VaultCreateOrUpdateParameters) (keyvault0.Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(keyvault0.Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVaultMgmtClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVaultMgmtClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// MockVirtualMachineScaleSetExtensionsClient is a mock of VirtualMachineScaleSetExtensionsClient interface
type MockVirtualMachineScaleSetExtensionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetExtensionsClientMockRecorder
}

// MockVirtualMachineScaleSetExtensionsClientMockRecorder is the mock recorder for MockVirtualMachineScaleSetExtensionsClient
type MockVirtualMachineScaleSetExtensionsClientMockRecorder struct {
	mock *MockVirtualMachineScaleSetExtensionsClient
}

// NewMockVirtualMachineScaleSetExtensionsClient creates a new mock instance
func NewMockVirtualMachineScaleSetExtensionsClient(ctrl *gomock.Controller) *MockVirtualMachineScaleSetExtensionsClient {
	mock := &MockVirtualMachineScaleSetExtensionsClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetExtensionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineScaleSetExtensionsClient) EXPECT() *MockVirtualMachineScaleSetExtensionsClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockVirtualMachineScaleSetExtensionsClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockVirtualMachineScaleSetExtensionsClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClient)(nil).Client))
}

// CreateOrUpdate mocks base method
func (m *MockVirtualMachineScaleSetExtensionsClient) CreateOrUpdate(arg0 context.Context, arg1, arg2, arg3 string, arg4 compute.VirtualMachineScaleSetExtension) (compute.VirtualMachineScaleSetExtensionsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtensionsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualMachineScaleSetExtensionsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3, arg4)
}

// Get mocks base method
func (m *MockVirtualMachineScaleSetExtensionsClient) Get(arg0 context.Context, arg1, arg2, arg3, arg4 string) (compute.VirtualMachineScaleSetExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualMachineScaleSetExtensionsClientMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClient)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// List mocks base method
func (m *MockVirtualMachineScaleSetExtensionsClient) List(arg0 context.Context, arg1, arg2 string) (compute.VirtualMachineScaleSetExtensionListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.VirtualMachineScaleSetExtensionListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualMachineScaleSetExtensionsClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetExtensionsClient)(nil).List), arg0, arg1, arg2)
}

// MockVirtualMachineScaleSetsClient is a mock of VirtualMachineScaleSetsClient interface
type MockVirtualMachineScaleSetsClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetsClientMockRecorder
}

// MockVirtualMachineScaleSetsClientMockRecorder is the mock recorder for MockVirtualMachineScaleSetsClient
type MockVirtualMachineScaleSetsClientMockRecorder struct {
	mock *MockVirtualMachineScaleSetsClient
}

// NewMockVirtualMachineScaleSetsClient creates a new mock instance
func NewMockVirtualMachineScaleSetsClient(ctrl *gomock.Controller) *MockVirtualMachineScaleSetsClient {
	mock := &MockVirtualMachineScaleSetsClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineScaleSetsClient) EXPECT() *MockVirtualMachineScaleSetsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockVirtualMachineScaleSetsClient) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 compute.VirtualMachineScaleSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualMachineScaleSetsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualMachineScaleSetsClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockVirtualMachineScaleSetsClient) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualMachineScaleSetsClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineScaleSetsClient)(nil).Delete), arg0, arg1, arg2)
}

// List mocks base method
func (m *MockVirtualMachineScaleSetsClient) List(arg0 context.Context, arg1 string) ([]compute.VirtualMachineScaleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]compute.VirtualMachineScaleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualMachineScaleSetsClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetsClient)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockVirtualMachineScaleSetsClient) Update(arg0 context.Context, arg1, arg2 string, arg3 compute.VirtualMachineScaleSetUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockVirtualMachineScaleSetsClientMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineScaleSetsClient)(nil).Update), arg0, arg1, arg2, arg3)
}

// UpdateInstances mocks base method
func (m *MockVirtualMachineScaleSetsClient) UpdateInstances(arg0 context.Context, arg1, arg2 string, arg3 compute.VirtualMachineScaleSetVMInstanceRequiredIDs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstances", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstances indicates an expected call of UpdateInstances
func (mr *MockVirtualMachineScaleSetsClientMockRecorder) UpdateInstances(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstances", reflect.TypeOf((*MockVirtualMachineScaleSetsClient)(nil).UpdateInstances), arg0, arg1, arg2, arg3)
}

// MockVirtualMachineScaleSetVMsClient is a mock of VirtualMachineScaleSetVMsClient interface
type MockVirtualMachineScaleSetVMsClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineScaleSetVMsClientMockRecorder
}

// MockVirtualMachineScaleSetVMsClientMockRecorder is the mock recorder for MockVirtualMachineScaleSetVMsClient
type MockVirtualMachineScaleSetVMsClientMockRecorder struct {
	mock *MockVirtualMachineScaleSetVMsClient
}

// NewMockVirtualMachineScaleSetVMsClient creates a new mock instance
func NewMockVirtualMachineScaleSetVMsClient(ctrl *gomock.Controller) *MockVirtualMachineScaleSetVMsClient {
	mock := &MockVirtualMachineScaleSetVMsClient{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineScaleSetVMsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineScaleSetVMsClient) EXPECT() *MockVirtualMachineScaleSetVMsClientMockRecorder {
	return m.recorder
}

// Deallocate mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Deallocate(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deallocate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deallocate indicates an expected call of Deallocate
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Deallocate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deallocate", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Deallocate), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Delete(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Delete), arg0, arg1, arg2, arg3)
}

// List mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) List(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string) ([]compute.VirtualMachineScaleSetVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]compute.VirtualMachineScaleSetVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Reimage mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Reimage(arg0 context.Context, arg1, arg2, arg3 string, arg4 *compute.VirtualMachineScaleSetVMReimageParameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reimage", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reimage indicates an expected call of Reimage
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Reimage(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reimage", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Reimage), arg0, arg1, arg2, arg3, arg4)
}

// Restart mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Restart(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Restart(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Restart), arg0, arg1, arg2, arg3)
}

// RunCommand mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) RunCommand(arg0 context.Context, arg1, arg2, arg3 string, arg4 compute.RunCommandInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommand indicates an expected call of RunCommand
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) RunCommand(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).RunCommand), arg0, arg1, arg2, arg3, arg4)
}

// Start mocks base method
func (m *MockVirtualMachineScaleSetVMsClient) Start(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockVirtualMachineScaleSetVMsClientMockRecorder) Start(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualMachineScaleSetVMsClient)(nil).Start), arg0, arg1, arg2, arg3)
}

// MockVirtualNetworksClient is a mock of VirtualNetworksClient interface
type MockVirtualNetworksClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworksClientMockRecorder
}

// MockVirtualNetworksClientMockRecorder is the mock recorder for MockVirtualNetworksClient
type MockVirtualNetworksClientMockRecorder struct {
	mock *MockVirtualNetworksClient
}

// NewMockVirtualNetworksClient creates a new mock instance
func NewMockVirtualNetworksClient(ctrl *gomock.Controller) *MockVirtualNetworksClient {
	mock := &MockVirtualNetworksClient{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNetworksClient) EXPECT() *MockVirtualNetworksClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockVirtualNetworksClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockVirtualNetworksClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockVirtualNetworksClient)(nil).Client))
}

// CreateOrUpdate mocks base method
func (m *MockVirtualNetworksClient) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 network.VirtualNetwork) (network.VirtualNetworksCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.VirtualNetworksCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockVirtualNetworksClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualNetworksClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockVirtualNetworksClient) Delete(arg0 context.Context, arg1, arg2 string) (network.VirtualNetworksDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.VirtualNetworksDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualNetworksClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualNetworksClient)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockVirtualNetworksClient) Get(arg0 context.Context, arg1, arg2, arg3 string) (network.VirtualNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.VirtualNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVirtualNetworksClientMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualNetworksClient)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method
func (m *MockVirtualNetworksClient) List(arg0 context.Context, arg1 string) (network.VirtualNetworkListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(network.VirtualNetworkListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualNetworksClientMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualNetworksClient)(nil).List), arg0, arg1)
}

// MockVirtualNetworksPeeringsClient is a mock of VirtualNetworksPeeringsClient interface
type MockVirtualNetworksPeeringsClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworksPeeringsClientMockRecorder
}

// MockVirtualNetworksPeeringsClientMockRecorder is the mock recorder for MockVirtualNetworksPeeringsClient
type MockVirtualNetworksPeeringsClientMockRecorder struct {
	mock *MockVirtualNetworksPeeringsClient
}

// NewMockVirtualNetworksPeeringsClient creates a new mock instance
func NewMockVirtualNetworksPeeringsClient(ctrl *gomock.Controller) *MockVirtualNetworksPeeringsClient {
	mock := &MockVirtualNetworksPeeringsClient{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworksPeeringsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualNetworksPeeringsClient) EXPECT() *MockVirtualNetworksPeeringsClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockVirtualNetworksPeeringsClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockVirtualNetworksPeeringsClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockVirtualNetworksPeeringsClient)(nil).Client))
}

// Delete mocks base method
func (m *MockVirtualNetworksPeeringsClient) Delete(arg0 context.Context, arg1, arg2, arg3 string) (network.VirtualNetworkPeeringsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.VirtualNetworkPeeringsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockVirtualNetworksPeeringsClientMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualNetworksPeeringsClient)(nil).Delete), arg0, arg1, arg2, arg3)
}

// List mocks base method
func (m *MockVirtualNetworksPeeringsClient) List(arg0 context.Context, arg1, arg2 string) (network.VirtualNetworkPeeringListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.VirtualNetworkPeeringListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockVirtualNetworksPeeringsClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualNetworksPeeringsClient)(nil).List), arg0, arg1, arg2)
}

// MockZonesClient is a mock of ZonesClient interface
type MockZonesClient struct {
	ctrl     *gomock.Controller
	recorder *MockZonesClientMockRecorder
}

// MockZonesClientMockRecorder is the mock recorder for MockZonesClient
type MockZonesClientMockRecorder struct {
	mock *MockZonesClient
}

// NewMockZonesClient creates a new mock instance
func NewMockZonesClient(ctrl *gomock.Controller) *MockZonesClient {
	mock := &MockZonesClient{ctrl: ctrl}
	mock.recorder = &MockZonesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZonesClient) EXPECT() *MockZonesClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockZonesClient) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 dns.Zone, arg4, arg5 string) (dns.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(dns.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockZonesClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockZonesClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Delete mocks base method
func (m *MockZonesClient) Delete(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockZonesClientMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockZonesClient)(nil).Delete), arg0, arg1, arg2, arg3)
}
