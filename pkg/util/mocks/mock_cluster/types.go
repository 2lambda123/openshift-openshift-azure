// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_cluster is a generated GoMock package.
package mock_cluster

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/openshift/openshift-azure/pkg/api"
	updateblob "github.com/openshift/openshift-azure/pkg/cluster/updateblob"
)

// MockUpgrader is a mock of Upgrader interface
type MockUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockUpgraderMockRecorder
}

// MockUpgraderMockRecorder is the mock recorder for MockUpgrader
type MockUpgraderMockRecorder struct {
	mock *MockUpgrader
}

// NewMockUpgrader creates a new mock instance
func NewMockUpgrader(ctrl *gomock.Controller) *MockUpgrader {
	mock := &MockUpgrader{ctrl: ctrl}
	mock.recorder = &MockUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpgrader) EXPECT() *MockUpgraderMockRecorder {
	return m.recorder
}

// CreateClients mocks base method
func (m *MockUpgrader) CreateClients(ctx context.Context, cs *api.OpenShiftManagedCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClients", ctx, cs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClients indicates an expected call of CreateClients
func (mr *MockUpgraderMockRecorder) CreateClients(ctx, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClients", reflect.TypeOf((*MockUpgrader)(nil).CreateClients), ctx, cs)
}

// Initialize mocks base method
func (m *MockUpgrader) Initialize(ctx context.Context, cs *api.OpenShiftManagedCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx, cs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockUpgraderMockRecorder) Initialize(ctx, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockUpgrader)(nil).Initialize), ctx, cs)
}

// WriteUpdateBlob mocks base method
func (m *MockUpgrader) WriteUpdateBlob(ublob *updateblob.UpdateBlob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteUpdateBlob", ublob)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteUpdateBlob indicates an expected call of WriteUpdateBlob
func (mr *MockUpgraderMockRecorder) WriteUpdateBlob(ublob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteUpdateBlob", reflect.TypeOf((*MockUpgrader)(nil).WriteUpdateBlob), ublob)
}

// ReadUpdateBlob mocks base method
func (m *MockUpgrader) ReadUpdateBlob() (*updateblob.UpdateBlob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUpdateBlob")
	ret0, _ := ret[0].(*updateblob.UpdateBlob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUpdateBlob indicates an expected call of ReadUpdateBlob
func (mr *MockUpgraderMockRecorder) ReadUpdateBlob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUpdateBlob", reflect.TypeOf((*MockUpgrader)(nil).ReadUpdateBlob))
}

// InitializeUpdateBlob mocks base method
func (m *MockUpgrader) InitializeUpdateBlob(cs *api.OpenShiftManagedCluster, suffix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeUpdateBlob", cs, suffix)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeUpdateBlob indicates an expected call of InitializeUpdateBlob
func (mr *MockUpgraderMockRecorder) InitializeUpdateBlob(cs, suffix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeUpdateBlob", reflect.TypeOf((*MockUpgrader)(nil).InitializeUpdateBlob), cs, suffix)
}

// WaitForHealthzStatusOk mocks base method
func (m *MockUpgrader) WaitForHealthzStatusOk(ctx context.Context, cs *api.OpenShiftManagedCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForHealthzStatusOk", ctx, cs)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForHealthzStatusOk indicates an expected call of WaitForHealthzStatusOk
func (mr *MockUpgraderMockRecorder) WaitForHealthzStatusOk(ctx, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForHealthzStatusOk", reflect.TypeOf((*MockUpgrader)(nil).WaitForHealthzStatusOk), ctx, cs)
}

// HealthCheck mocks base method
func (m *MockUpgrader) HealthCheck(ctx context.Context, cs *api.OpenShiftManagedCluster) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx, cs)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockUpgraderMockRecorder) HealthCheck(ctx, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockUpgrader)(nil).HealthCheck), ctx, cs)
}

// WaitForInfraServices mocks base method
func (m *MockUpgrader) WaitForInfraServices(ctx context.Context, cs *api.OpenShiftManagedCluster) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForInfraServices", ctx, cs)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// WaitForInfraServices indicates an expected call of WaitForInfraServices
func (mr *MockUpgraderMockRecorder) WaitForInfraServices(ctx, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForInfraServices", reflect.TypeOf((*MockUpgrader)(nil).WaitForInfraServices), ctx, cs)
}

// WaitForMasters mocks base method
func (m *MockUpgrader) WaitForMasters(ctx context.Context, cs *api.OpenShiftManagedCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForMasters", ctx, cs)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForMasters indicates an expected call of WaitForMasters
func (mr *MockUpgraderMockRecorder) WaitForMasters(ctx, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForMasters", reflect.TypeOf((*MockUpgrader)(nil).WaitForMasters), ctx, cs)
}

// WaitForNodes mocks base method
func (m *MockUpgrader) WaitForNodes(ctx context.Context, cs *api.OpenShiftManagedCluster, suffix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForNodes", ctx, cs, suffix)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForNodes indicates an expected call of WaitForNodes
func (mr *MockUpgraderMockRecorder) WaitForNodes(ctx, cs, suffix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForNodes", reflect.TypeOf((*MockUpgrader)(nil).WaitForNodes), ctx, cs, suffix)
}

// UpdateMasterAgentPool mocks base method
func (m *MockUpgrader) UpdateMasterAgentPool(ctx context.Context, cs *api.OpenShiftManagedCluster, app *api.AgentPoolProfile) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMasterAgentPool", ctx, cs, app)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// UpdateMasterAgentPool indicates an expected call of UpdateMasterAgentPool
func (mr *MockUpgraderMockRecorder) UpdateMasterAgentPool(ctx, cs, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMasterAgentPool", reflect.TypeOf((*MockUpgrader)(nil).UpdateMasterAgentPool), ctx, cs, app)
}

// UpdateWorkerAgentPool mocks base method
func (m *MockUpgrader) UpdateWorkerAgentPool(ctx context.Context, cs *api.OpenShiftManagedCluster, app *api.AgentPoolProfile, suffix string) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerAgentPool", ctx, cs, app, suffix)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// UpdateWorkerAgentPool indicates an expected call of UpdateWorkerAgentPool
func (mr *MockUpgraderMockRecorder) UpdateWorkerAgentPool(ctx, cs, app, suffix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerAgentPool", reflect.TypeOf((*MockUpgrader)(nil).UpdateWorkerAgentPool), ctx, cs, app, suffix)
}

// Evacuate mocks base method
func (m *MockUpgrader) Evacuate(ctx context.Context, cs *api.OpenShiftManagedCluster) *api.PluginError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evacuate", ctx, cs)
	ret0, _ := ret[0].(*api.PluginError)
	return ret0
}

// Evacuate indicates an expected call of Evacuate
func (mr *MockUpgraderMockRecorder) Evacuate(ctx, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evacuate", reflect.TypeOf((*MockUpgrader)(nil).Evacuate), ctx, cs)
}
