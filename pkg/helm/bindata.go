// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x4d\x8f\xe3\x36\x0c\xbd\xe7\x57\x18\xd8\x4b\x73\xe8\x9c\x8a\x1e\x7a\x73\xdc\x6c\x67\x30\x3b\x6d\xd0\x04\x28\x7a\x94\x65\xc6\x23\xac\x2d\x06\xfa\x98\x6e\xba\xd8\xff\x5e\x48\xb6\x6c\x49\x96\xb3\xa3\xf4\x14\x80\x7c\xef\x89\x12\x4d\x52\xca\x87\xa2\x2a\xe5\x66\xaf\x68\x53\x91\x0a\x84\xfa\xa5\xf8\xfa\xb5\xd8\x11\x09\x3f\xff\xb4\xe7\x14\x1b\x28\x7e\x30\xe6\x52\xee\xae\x0a\x64\xf1\x50\x21\x3f\xb3\xf6\x61\x26\x6c\x8b\x6f\xdf\x36\x15\x79\x86\x6b\x82\x7a\x10\xec\x8d\x28\x78\x86\x6b\x2c\x60\x19\x23\x37\x63\x5d\x6f\xcd\x8f\x02\xb9\x3a\x08\xfc\x72\xcd\x52\x88\x69\x56\xeb\x08\xe2\x8d\x51\x38\xb2\x96\x33\xde\xe6\xef\x26\xc1\x4f\xea\x66\xc4\x99\xa2\xfa\x9a\x15\x51\xa4\xc3\xbb\x34\x03\xaa\xd5\xdc\x7c\x28\x28\x72\x45\x18\x07\x51\xb0\x9e\xb4\x20\x8b\x33\x8a\xe2\x82\x8d\xdc\xbc\x10\xa9\x40\x98\x8c\x3f\x19\x8f\x5d\xcb\x29\x46\x3e\xa3\x35\x98\xca\xc3\xd3\x1a\xda\xb9\x66\x70\x85\x5c\x09\xec\x3a\x10\x72\x8d\x14\x43\x0c\xf9\x77\x6c\x60\x89\x9f\xac\xcb\xc3\x5a\x82\x13\x7e\x4b\xbb\x72\x9a\x00\x3b\xab\x81\x9c\x34\xe7\xd0\x2d\x41\x9e\xdd\xc0\x0e\x02\x7b\x50\xaf\xa0\xa5\x89\x6b\xff\xe5\x82\x42\x81\x58\xd2\x6e\xe0\x8c\xcc\x9f\xd0\x32\xa9\xc4\x75\x49\x0c\x3c\x16\x8a\x3a\xb9\x82\x67\x37\xb0\xf2\x5f\x2d\xa0\xfa\x94\xc8\x52\xe0\xf1\x17\xaf\x90\x4b\xec\x12\x47\x9e\x02\xd8\x35\xb8\x64\x75\x07\xe3\x21\xef\x04\x7e\x4e\x05\xb6\x8a\x32\x12\x7f\x41\xbd\xba\x6c\xe4\x33\xf0\x3f\x4a\xad\x5e\x6d\x75\x2f\xe1\x91\x2f\xcc\xce\xad\x8c\x24\xe0\x65\x07\x42\xed\xf4\xf9\x7c\x3b\x97\x31\x2c\x21\xf2\x42\x38\x69\xdf\xa1\xe2\xe3\xc6\x92\x05\x45\x9b\x82\x82\x50\xec\xcc\x28\x51\x30\xf4\x71\x73\x8e\x20\x72\x3b\x58\xc0\xb4\x3d\x61\xb6\x64\xce\x85\x99\x34\xe9\x1c\xe0\xbe\x88\x46\x5e\xa0\x93\x19\x8d\xa3\x4c\x1a\x55\xc7\x80\xab\x7b\xa2\x99\x98\x91\x56\xee\xdc\x9c\x48\x7e\xef\x15\xd8\x15\x97\x8e\x70\x08\x33\x3a\x74\xbf\xfb\x72\x1a\x71\xb7\x73\xc3\xcd\xce\x6b\x4c\xdb\xce\x2d\x30\x37\xaa\x89\xe5\x69\x64\x44\x32\x13\x2c\xbf\x6c\x5b\x01\x2d\x51\x28\xe6\xc1\x9e\x1b\xd1\x8a\xc6\xaa\x7e\x46\xb4\x6b\x74\x2f\x17\xcf\xba\x86\x0e\xd4\x7d\x9f\x65\x5a\x62\x4d\x3d\x3b\xe1\x0b\xb6\xa7\x3c\xec\xe5\x7f\x44\x1d\x0a\xa4\x95\xb3\x23\x8e\xb8\x43\x85\x85\x53\xfe\xbe\x62\x5a\xd1\x48\x5c\xc9\xb2\x8b\x6b\x8d\xee\xda\x43\x6f\x77\xf6\x23\xb5\xe8\x62\xf8\xd1\x82\xd4\x1d\x48\x3b\xed\xcd\xfd\xd0\x1a\x8f\xba\x6e\xb0\x27\x8c\x0f\x83\xe4\x85\x70\x76\x06\xa9\x1e\xd2\x20\x3b\x8c\x74\xdd\x31\xfa\x88\x52\x71\xd2\x43\x44\x0b\x9d\x06\x6e\xa7\xcf\x20\xf3\x11\x45\x4f\x54\x30\xb1\x16\x5e\x17\x3f\x93\x34\xee\x71\xc1\x26\xc6\x03\x28\x29\x45\x6d\x8a\xc4\xe5\xe0\x9e\x04\x8d\x22\x51\x6a\x9c\xb4\xdd\xd1\x8a\xb2\xf3\x7d\x57\xf8\x61\x82\x8e\x4b\x48\xc9\x90\x1f\x81\x0a\x50\xe6\x8e\xb1\x14\x9f\xa5\x22\xe8\x82\xbf\xe7\xf4\x9d\xf4\x3d\xa7\x86\xfd\xa8\x0e\x44\xca\x7f\x9a\x75\x96\x43\x8c\xd9\xf8\xac\x6b\x18\x8e\x5f\x6e\xca\xa6\x67\xfc\x79\x32\x24\x4e\xe5\x6f\xd2\x77\x2f\x44\xc8\x57\xd2\xcd\x4d\x2d\x64\x45\xdd\x26\x4b\x2a\xa6\x25\xca\xa9\x3c\x3c\x65\xcb\xde\x50\xb0\x2b\xec\x10\x95\x54\x82\x5c\x4a\xad\x90\x5c\x2e\x02\xdf\xee\x08\xfe\x3b\x2a\xae\x7c\x89\xb9\x4f\x8f\x5f\xfc\xe6\x04\x9c\x70\xf5\xf4\x6b\x54\x6a\xce\x6c\xb7\xaf\x6b\x49\x05\xbb\x28\x86\x7c\x01\x0c\x9d\xf6\xfd\x6c\x9b\xdd\x02\xe8\xcc\x33\x64\xf8\x6c\x92\xb0\xc1\x35\xdc\xf5\x25\x6a\x41\xe1\x37\x81\xfa\x12\xb7\x11\xdf\x67\xc0\x9f\x90\x12\x13\x48\x84\x73\xe6\x71\xff\x1c\xa0\x81\xa6\xa8\xaf\x05\xeb\xcd\xb3\x66\x7a\x4f\x1c\x15\x0a\xd2\xba\xc2\x4a\xbe\x28\x42\x88\xff\x18\x79\x3c\x9d\x0e\xde\x8e\x92\x5f\xfe\x12\x6b\x47\xba\x77\x9d\xb6\xe3\x22\x28\xab\x75\xb5\xdb\xbc\x49\x59\x66\x6b\x26\x18\xe1\x43\x21\x47\xf1\x16\x2b\xf1\xf7\x41\xa7\x4d\x01\xba\xaf\x27\xfd\x3f\x81\xc3\xf8\xc7\x9f\xdb\x9d\x3d\xde\x36\x78\x53\xbe\x7f\x4c\xfa\x94\xed\xfc\xd2\xcd\x8e\xc4\xb1\x3c\x8d\x9c\x28\x26\xc2\x50\xdf\xc3\x7d\x34\x9c\xa0\xc1\x55\xd5\x9f\x9f\xff\x05\x00\x00\xff\xff\x9c\x4e\xe4\x96\x6e\x13\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
