// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\xcd\x8e\xdb\x36\x10\xc7\xef\x7e\x0a\x01\xb9\xd4\x87\xfa\x54\xf4\xd0\x9b\xec\x3a\xcd\x62\xb3\x5d\x21\x5e\xa0\xe8\x91\xa6\xc6\x32\x11\x8a\x54\x87\xe4\x36\x4e\x9a\x77\x2f\x28\x59\x36\xbf\x24\x2f\xdd\x9e\x0c\x68\xe6\xff\x9b\xe1\xd7\x70\xe8\x77\xc5\xa6\x54\x8b\xad\xa6\xf5\x86\x6c\x00\xf5\x2f\xc5\xb7\x6f\xc5\x9a\x28\xf8\xf9\xa7\xad\xa0\xb2\x86\xe2\x07\xfb\xb9\x54\xeb\x93\x06\x55\xac\x36\x52\x1c\x58\xb3\xba\x0a\x96\xc5\x3f\xc5\x5f\x46\x6a\x28\xbe\x7f\x5f\x6c\xc8\x23\x9c\x12\x88\x0a\xd9\x2b\xd1\xf0\x08\xa7\x10\xd4\x2b\x02\x46\x46\x1e\x89\x1c\xde\xa3\x14\xba\x42\xf9\xe5\x94\x45\x0a\x65\x1e\x73\x07\xf8\xca\x28\xec\x58\x23\x98\x68\xf2\x47\x99\xd0\xcf\xf2\x33\xf2\x4e\x49\x53\xec\x0d\xd1\x84\xcb\xbb\xd8\x9e\xd4\x63\x2f\xde\x15\x54\x0a\x4d\x98\x00\x2c\x58\x4b\x1a\x50\xc5\x41\x62\xd1\xc9\x5a\x2d\x9e\x88\xd2\x80\x76\xa7\x3c\x58\x4b\x1f\x73\x24\x07\x36\x6f\xfd\xa5\xd0\x28\x79\xc5\x89\x80\x58\x18\x59\x5d\xe9\xef\xb2\x4e\x48\x2e\x5f\xa7\x67\x25\x16\x25\xec\x9e\xfc\x24\x68\x42\x34\x7e\x75\x5d\x5f\x8c\x10\xc0\x63\x67\xe7\xbb\xeb\x5e\xa1\x6c\x41\x1f\xc1\x28\x9b\xf7\xf6\x4b\x27\x51\x03\xc6\xf2\x19\x3f\x17\xf7\x09\x1a\xa6\x34\x9e\x62\x80\x67\xf1\x24\xd2\x24\x23\x3a\xdf\x5d\xf7\xf2\xab\x41\xd8\x7c\x7c\x88\x05\x9e\x25\x95\xd4\x46\x0a\x25\x79\x62\xc9\x52\x0e\x5e\x4c\xa1\xd8\x9e\xc3\x79\x91\xd6\x28\x3f\xa7\x12\x9e\xf4\xf2\x96\x07\xda\x8e\x13\x7d\x8b\x35\xed\xe6\xc2\xfe\x80\xfd\xe4\x98\x02\x9b\x2b\x7b\x2e\x8d\x3e\xf6\xb5\x27\x96\x05\xb6\xf4\x56\x99\xdb\x1e\x33\xb2\x92\x03\xea\xb5\x39\x1c\xe6\x37\x58\xe8\x36\x03\x7b\x22\x82\x34\x6f\xa0\xb9\x7e\x41\x41\x01\x4d\xeb\x82\x02\x6a\x76\x60\x94\x68\x18\x6e\x27\x3b\xef\x80\xb9\x75\xd7\x53\x7a\x95\xeb\x6a\xc9\xbc\xf5\xae\xa2\x88\x57\xc1\x7d\x19\x9e\x75\x49\x5e\x66\x76\xa3\x24\x62\x6d\x38\x03\xa1\xef\xc9\xee\xa2\x9c\x60\xe6\x76\x0d\x17\x51\xea\x26\x41\xc9\x8b\xce\xd6\x76\x7f\x07\x0c\xd7\xc5\x7d\x7b\x20\xd0\x7a\x51\x5d\x5b\xc6\x38\x42\xd9\x32\xae\xf7\xb9\x59\x5e\x54\x09\x56\x46\x66\x57\x81\xc7\x29\x9b\x06\xa1\x21\x5a\xe2\xb5\xcd\xc9\xcd\x70\x82\x71\x33\x4e\x46\xf6\x53\xf2\xc4\x9a\x3d\x9a\x3d\x70\xd0\xf7\x6d\xeb\x34\xe2\x56\x94\xec\x0d\x12\xa9\x13\x11\x86\x31\xfe\x87\x51\xf8\x80\xf9\x08\xd9\x23\x08\xb4\xfe\x89\xf5\x5b\xa4\xfb\x0e\xe7\x04\x63\xa6\x81\xcd\x3e\xac\x53\xf2\xb0\xfc\xb4\xfd\x88\x7f\xa4\xbd\xaa\x18\x7e\x0c\x92\x3d\x07\xd5\xb7\x44\xb6\xbb\xee\x3f\xee\xcc\xbe\x96\x2d\x61\xe2\x72\xc1\x0d\x0d\xf0\x39\x90\xbd\xea\x3a\x5b\xbc\x40\xad\x9e\x91\x1e\x41\x69\xb4\x5b\xba\x42\x79\x60\x1c\x56\xcf\x1d\x88\xdd\x91\x1d\xb4\xd3\x56\xc5\x6c\xef\x8e\x35\x7b\xce\xe8\x07\xa9\xb4\x20\x2d\xfc\x3f\x51\x7d\xa6\x1b\xad\xbf\x93\x07\xaf\xf7\x12\x5b\xa2\xbd\x7b\x3c\xb2\x86\xb3\xc8\x14\x0d\x2b\xb9\x37\x95\xe7\x7c\x4b\x4a\xa5\xb1\x47\x7c\xdc\x19\xf7\x6c\x9b\x33\x64\x62\xc3\x8c\x21\xfa\x91\x4e\x44\x18\x6d\x37\x03\xac\x2e\xae\x41\x28\xa5\x98\x14\x3b\xa0\x08\xda\x76\x6a\x71\x90\x2b\x32\x70\x9d\xe4\x6c\x05\x7d\x23\x66\x2b\xa8\x4b\xf9\xa0\x2b\xa2\xd4\xdf\xf5\xb4\x7a\xf4\x08\x56\xed\xb3\xd9\xc3\xb0\x4c\x6a\x51\xd6\x2d\x13\x8f\x97\x0f\x89\x59\xfb\x93\xb4\xfc\x89\xa0\x3a\x12\x7e\x2d\xdd\xbe\x6a\xa2\x96\x66\x21\x43\xd9\x4c\x51\x28\xab\x87\x6c\xfc\x0c\xc1\x8b\xb4\x96\x52\xdb\xc3\xd4\x95\x46\x4b\xd2\x75\x28\x5f\xef\x18\xcc\x0d\xca\x32\x7c\x5c\xe6\x0f\xc7\x13\x85\xc5\x8d\xd8\xa7\xd8\xf9\x24\x2e\x5e\x40\x10\xa1\x1f\x7e\xbd\x5d\x49\xca\xaf\x63\xfd\x18\x35\x5e\x9e\x66\xaf\x28\xb2\x4e\x33\x29\xf2\x68\xbe\xd2\x7b\xfd\xf7\x97\xcd\x5b\x68\xe7\x4f\x15\x32\x41\x59\x47\xf8\xc8\x1e\x09\x31\x75\x38\x33\xf7\x93\x07\xbd\xff\x90\x55\xd2\x20\x85\xdf\x50\x9a\x2e\x67\x02\x3c\xa1\x4b\xfc\x28\x29\xb1\xb3\x32\x01\x1b\xcd\xc1\xf2\x0a\x80\x1a\xea\x62\x7f\x2a\x58\xdb\x49\xd4\x97\x17\xf6\x4e\x4b\x24\xcd\x58\xc7\x92\x6f\x6c\xdf\x25\xf5\x4c\xff\xf0\xf2\x52\x39\x73\x97\x2c\x2c\xb1\xaf\xd7\x17\x3a\x6f\xbe\xbe\xa7\xf0\xaa\xd8\x34\x75\x5e\x17\x45\x50\xd9\xec\x84\x22\xfd\xba\xcd\x21\xcf\xa9\x66\xfe\x99\xe3\xc6\xd6\x3b\x67\xeb\x27\xfe\x82\x1b\x7d\x56\x3b\x8d\x4c\x34\xa9\xd5\xca\xbd\x4b\x1d\xdd\x32\xf9\x27\xcd\xdb\x5b\x2d\x57\xb2\x8c\xff\x52\xca\xce\x6c\x54\x25\x58\x39\x59\x5d\x04\x7e\x55\x1c\xde\x4a\x51\x5b\x75\x7d\x46\xa5\xba\xa3\xc5\x27\x23\x6c\xa9\xb5\x07\x91\xfb\xe7\xc9\x31\xb8\x8a\x7f\x03\x00\x00\xff\xff\x77\x9d\xcf\x75\x62\x17\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
