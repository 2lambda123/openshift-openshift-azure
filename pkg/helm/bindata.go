// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\x4b\x6f\xe3\x36\x10\xc7\xef\xfe\x14\x02\x72\xa9\x0f\xf5\xa9\xe8\xa1\x37\x59\xf5\x36\x41\x36\x89\x50\x07\x28\x7a\xa4\xa9\xb1\x4c\x84\x22\x55\x3e\xd2\xf5\x6e\xf7\xbb\x17\x92\x2c\x99\x4f\x39\x54\x7b\x12\x40\xce\xff\x37\xc3\xd7\x70\xa8\xbb\xac\xc8\xe5\x6a\xa7\x70\x55\xa0\x02\x84\xfa\x25\xfb\xf6\x2d\xdb\x22\x09\x3f\xff\xb4\x63\x98\x57\x90\xfd\xd0\x35\xe7\x72\x7b\x56\x20\xb3\x4d\xc1\xd9\x91\xd4\x9b\xab\x60\x9d\xfd\x93\xfd\xa5\xb9\x82\xec\xfb\xf7\x55\x81\x1e\xe1\x1c\x40\x94\x82\xbc\x23\x05\x8f\x70\x76\x41\xbd\xc2\x61\x24\xc4\x11\x88\xe1\x93\xe0\x4c\x95\x82\x7f\x39\x27\x91\x5c\x99\xc5\xdc\x83\x78\x27\x18\xf6\xa4\x66\x84\xd5\xe9\xa3\x0c\xe8\x67\xf9\x09\x71\x87\xa4\x21\x76\x81\x14\xa2\x7c\x11\xdb\x92\x5a\xec\xd5\x5d\x86\x39\x53\x88\x30\x10\x19\x69\x50\x0d\x32\x3b\x72\x91\xb5\xbc\x92\xab\x27\x24\x15\x88\x6e\xa7\x3c\x74\x3d\xbd\xcf\x91\xec\xf4\x99\xcc\xa1\x2b\x2f\x1f\x62\xaa\xb1\xcb\x17\x15\x9c\x29\xc1\x29\x05\x21\x63\x62\xd7\xc4\x84\x3c\xf3\x0a\x7c\xdd\xd4\x1a\x9f\x54\x5f\x14\xe8\xb7\xe4\x67\x86\x03\xa2\xb1\xd5\x34\x7d\xd5\x8c\x01\xf5\x8d\x8d\x76\xd3\xbc\x14\xbc\x01\x75\x02\x2d\xbb\xb8\x77\x5f\x5a\x2e\x14\x08\x5f\x3e\x63\x67\xe2\x7e\x87\x9a\x48\x25\xce\x3e\xc0\xea\xb1\x24\x5c\x07\x3d\x1a\xed\xa6\x79\xfe\x55\x0b\x28\x3e\x07\x56\xdb\xea\x09\x05\x55\x70\x26\x39\x0d\x2c\x59\xc8\xc0\xf2\xc9\x24\x39\x50\xb8\x2c\xd2\x56\xf0\xb7\x50\xc0\x51\x2b\x13\xf5\x07\x1c\xa2\x61\x38\x7d\xa6\xec\x25\xd7\xea\xd4\x67\x1b\x5f\xe6\xf4\x85\x57\x77\x6e\x45\x67\x64\x39\x05\xa1\xb6\xfa\x78\x9c\xdf\x13\xae\xd9\x0c\xec\x09\x31\x54\x7f\x80\x66\xda\x39\x29\x04\x14\xae\x32\x0c\x42\x91\x23\xc1\x48\xc1\x70\x1f\x75\xf3\x0e\x22\x35\xd3\x5a\x4a\x2b\x57\x5d\x7b\x12\xef\xb9\xab\xc8\xe3\x95\xb0\x2c\xc2\x8b\x2e\xc8\x4b\x8c\x6e\x94\x78\xac\x82\x12\x60\x6a\x49\x74\x93\x32\xc2\x4c\xad\x13\x26\x51\xe8\xee\x10\x9c\x66\x2d\x45\x0c\xec\x1d\x30\x64\xeb\x65\x7b\xc0\xd1\xae\xfd\x8b\x22\x79\x1f\xb8\xb2\xb5\x9f\xa2\x53\xa3\x9c\x54\x01\x56\x42\x64\x57\x81\xc5\xc9\xeb\x5a\x40\x8d\x14\x17\xd7\xc2\x26\x35\xc2\x08\xe3\xa6\x9f\x84\xe8\x63\xf2\xc0\x9a\x3d\xea\x03\x50\x50\xcb\xb6\x75\x18\x71\xcb\x4b\xf2\x06\xf1\xd4\x01\x0f\xc3\x18\xff\xc3\x28\x6c\xc0\xbc\x87\xe4\x11\x38\x5a\xfb\xc4\xda\x55\xcd\xb2\xc3\x19\x61\xcc\x94\xac\xc9\x87\x35\x26\x77\xd3\x4f\xd3\x8f\xf8\x47\xdc\xab\xb2\xe1\xa3\x05\x3a\x50\x90\x7d\x15\xd3\xd5\xd3\x7d\xe3\x5e\x1f\x2a\xde\x20\xc2\xa6\x0b\x6e\x28\x79\x2f\x8e\xba\xab\xae\xed\x92\x17\xc8\xcd\x8b\xc0\x27\x90\x4a\x74\x5b\xba\x14\xfc\x48\x28\x6c\x5e\x5a\x60\xfb\x13\x39\x2a\xa3\x12\xf2\xd9\xd6\x1d\xab\x0f\x94\xe0\x7b\x2e\x15\x43\x0d\xfc\x3f\x5e\x6d\xa6\xe9\xad\xbf\x93\x07\xab\x4f\x5c\x34\x48\x59\xf7\xb8\xd7\xeb\xce\x22\x91\xd8\xcd\xe4\xd6\x54\x5e\xe2\xcd\x31\xe6\xba\x3b\xe2\xe3\xce\x58\xb2\x6d\x2e\x90\xc8\x86\x19\x5d\xf4\x23\x8d\x78\x18\xfb\x6e\x3a\xd8\x4c\xa6\x8e\x2b\x29\x09\x67\x7b\xc0\x02\x54\x57\xa9\xf9\x4e\xae\x48\xc7\x34\xca\xd9\x31\xfc\x41\xcc\x8e\x61\x93\x72\xaf\x4a\x24\xe5\xdf\x55\x5c\x3d\x5a\x38\xab\xf6\xa6\x0f\x30\x2c\x93\x5c\xe5\x55\x43\xd8\xe3\xd4\x10\x98\xb5\x3f\x51\x43\x9f\x90\x90\x27\x44\xaf\xa9\xdb\x56\x45\x72\x69\x12\xd2\x95\xcd\x24\x85\xbc\x7c\x48\xc6\xcf\x10\x2c\x4f\x5b\xce\x55\x77\x98\xda\x5c\x2b\x8e\xda\x56\xf0\xf7\x05\x83\xb9\x41\x71\x93\x11\xea\x5e\x3b\x97\x93\xb3\x7a\x05\x86\x98\x7a\xf8\xf5\xf6\xc9\xcf\xbf\x8e\xe7\x7d\xd4\x58\x73\xa6\x0f\x12\x0b\xd2\x2a\xc2\x59\x1a\xcd\x56\x5a\xff\x67\xfa\xcb\xe1\x23\xb4\x4b\x53\x29\x08\xc3\xa4\x45\x74\x64\x8f\x04\x9f\x3a\xec\xf1\xe5\xe4\x41\x6f\xbf\x15\x25\xd7\x02\xc3\x6f\x82\xeb\x36\x65\x02\x2c\xa1\x49\xfc\xcc\x31\xea\x66\x25\x02\x1b\xbb\x9d\xe5\x65\x00\x15\x54\xd9\xe1\x9c\x91\xa6\x7b\x6b\x4f\x8f\xd8\xbd\xe2\x02\xd5\x63\xde\x09\x3e\x63\x6d\x93\xd0\x4b\xf8\xfe\xf5\xb5\x34\xe6\x2e\x98\x08\x7c\x5b\xab\x8e\x33\xde\x68\x7d\x0d\x60\x65\x9d\x38\x75\x5e\xe7\x79\x90\xc9\xec\x80\x22\xfc\x1a\x4d\x21\xcf\xa9\x66\xfe\x9d\x51\xdd\xe5\x27\x63\xeb\x07\x7e\x92\x8d\x36\x9b\xbd\x12\x84\xd5\xa1\xd5\x4a\xbd\xfb\x0c\xdd\x3a\xf8\x1f\xe4\xe3\xa5\x91\x29\x59\xfb\x7f\x6d\x92\x23\x1b\x55\x01\x56\x4a\x54\x93\xc0\xce\x8a\xc3\xdb\xc6\x2b\x83\xae\xcf\x9e\x50\x35\xb3\xba\xcb\xee\x8b\xd2\xa9\x41\x9e\x51\x03\xb2\x45\xd8\xf9\xb5\x37\xb6\xba\xef\xdc\x2d\xc2\x6f\xba\x9d\x39\x9a\x31\xa3\x30\x68\x4a\x12\xcf\xee\x30\x22\x36\x26\xe6\xdf\x00\x00\x00\xff\xff\xd8\xf2\xd9\x6e\xa2\x17\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
