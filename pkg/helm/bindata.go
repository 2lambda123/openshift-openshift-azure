// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xc1\x8e\xfb\x26\x10\xc6\xef\x79\x0a\x4b\xff\x4b\xf7\xd0\x3d\x55\x3d\xf4\x96\x4d\xb3\xdd\x68\x1b\xd5\xda\xe4\xd2\x23\xc1\x13\x07\xd5\x06\x0b\x86\x6d\xd3\xd5\xbe\x7b\x05\x18\x1b\x63\xbc\x2d\xee\x29\x12\xf3\xfd\x3e\xc6\x30\x9e\x89\xbf\x15\xbb\xad\xda\xec\x91\x56\x3b\xf2\x0a\xf7\x9f\x8a\x8f\x8f\xe2\x89\x28\xf8\xf1\x87\x3d\xa7\xa2\x82\xe2\xbb\x52\xb2\x77\x82\xf0\x0a\xf7\xad\x7a\xba\x23\xa8\xe2\x71\x27\xf8\x95\xd5\x8f\x03\xf5\x50\x7c\x7e\xf6\x1e\x3b\x90\x98\x30\x31\xcb\x69\xdc\x44\x2c\x9f\xbf\xff\xb8\x77\xd6\xbe\xc1\x9e\xcf\x52\x70\x2c\xa5\xf8\xeb\x9e\xbf\x7b\xc4\xce\xfc\x32\x32\x8a\x31\xeb\x75\x02\xf9\xce\x28\x9c\x58\xcd\x19\xaf\xf3\xf3\x4b\xf0\x49\xdf\x8c\x3c\x53\x68\xe8\xb9\x23\x48\x1a\xb1\x3e\xd7\x90\x4f\xfa\xe6\xe7\x3a\x41\xad\xe7\xe6\x5b\x41\x05\x47\xc2\x38\xc8\x82\xb5\xa4\x06\x55\x5c\x85\x2c\x3a\x51\xa9\xcd\x91\x28\x04\x69\x2a\xf3\x60\x22\x76\x2f\xef\x18\xc5\x8c\x97\x5b\xda\x96\x87\x25\xb5\x0f\x8d\xe2\x9d\xe0\x28\x45\xd3\x80\x54\x4b\x50\x2c\x31\xf0\x93\x10\xa8\x50\x92\x6e\xab\x51\x90\xae\x93\xe2\x1d\xe4\xdc\x60\x59\x36\x3f\xce\x39\x9d\x88\x5b\xec\xce\x69\x42\xec\x57\x8d\xe4\xac\x39\x87\x66\x2e\x0a\xd6\xfb\xb3\x07\xa4\x55\x41\x41\x22\xbb\x32\x4a\x10\x5c\xf3\x31\x3b\x83\x5c\xd3\x80\x06\x72\x68\x42\x6e\x25\xb3\x11\x8d\xd0\xe0\x53\xc2\xba\x8c\x7a\x6e\xe2\x93\x99\x8d\x47\xc6\xc6\xda\x30\xe0\xb8\xaa\x41\x7b\x32\xf2\xca\x6d\xd4\x03\x14\xbe\x44\x52\x34\x45\xd7\x10\x0e\xd3\x1b\x75\x65\xbc\xee\x4e\x23\xf6\x61\x7c\x73\xb2\xef\x35\xc6\xac\xd7\xb6\x6a\x19\xcf\x4d\xca\x43\xa3\x43\x46\x1a\x83\xde\xd1\x75\x2d\xa1\x26\x28\xe4\xd8\xf5\xb3\xd3\x49\x7b\x2c\xfa\xe7\x24\xbb\x80\x07\xf7\xf0\xaa\x2f\xd0\x00\xae\x2b\xc9\xb4\xc5\x92\x7b\xf6\x65\xcf\xe8\xc0\xd9\x3d\xcb\xff\xc8\x7a\x6a\x90\x76\xce\xce\x38\x62\xad\xeb\x6f\x1d\xf0\xd3\x8d\x5d\xb1\x7f\xa8\xcc\x6c\xe7\x78\xca\x35\x23\xd3\x04\xe9\xba\xc0\x74\x60\xac\x7b\xe1\x17\x3c\x12\xf3\x3f\xbb\x01\x2c\xe1\xbe\x85\xb5\xf6\x71\xbe\xa7\x56\x5d\xb8\x1f\x2d\xc9\xa5\x01\xb5\x79\x13\x1a\xcd\x9f\x1c\xbb\x78\xd2\x97\x4a\xb4\x84\x71\x37\xdc\x8e\x84\xb3\x2b\x28\x7c\x4c\x8b\x8c\x7b\xa9\x2f\x0d\xa3\x2f\x42\x21\x27\x2d\x44\xd8\x34\x68\xe4\x76\x42\x3a\x9b\x67\x21\x5b\x82\x93\x29\x3a\x8b\xfa\xfc\x99\xa2\x71\x1f\x9e\x3c\x44\x7f\x00\x5b\x4a\x85\x36\x2f\xb3\xbf\x83\x35\x17\x34\x33\x09\x6f\xc8\x07\xed\x83\x2d\x6c\xe0\x63\xff\xe2\xef\x65\xbd\xbd\x52\x4c\xf0\x13\x50\x09\xb8\xd5\x78\x9b\x1b\x8f\x36\x91\x74\xc6\xef\x39\xfd\x8f\xf8\x9e\x53\x43\xbf\x60\x49\x94\xfa\xb3\x5a\xa6\xbc\xa2\xbf\x90\x3f\xf4\x05\xdc\x0d\xa8\x7e\xd0\x0c\x0b\x89\x13\xf9\x9d\xb4\xcd\x91\x48\x75\x23\x4d\x34\x69\x06\x2a\x6a\x8c\x59\x56\x31\xe6\xab\x9e\xfc\xad\xa5\x2f\x94\xcd\x19\x38\xe1\x78\xf8\x39\xaa\x50\xbf\x6c\xcf\x50\x5f\x14\x95\xac\x43\x26\xf8\x4c\x38\x0d\xda\x6f\x31\xdb\xcb\x66\x42\xbf\x3c\x4a\xdc\x51\x27\x65\x2e\x64\xa4\x6f\xa0\x84\x96\x14\x7e\x91\x42\x77\xf1\xdb\x17\xc6\x8c\xf8\x57\x41\x89\x49\x24\xd2\xf9\xe5\xfe\xf9\x39\x40\x05\x55\x71\xb9\x17\xac\xed\x84\xc4\xcd\x1b\xd4\x4c\xa1\xbc\x9f\x50\x48\x52\xfb\x42\x9c\xbc\x81\x69\x89\x4b\xb0\x8f\xb8\x2a\x3e\x94\x69\xce\x47\x43\xe4\xe5\x7c\x2e\x83\x43\x48\x16\xd8\x5c\x6b\x87\x7c\x03\x12\x8f\x84\x93\xba\x1f\x20\x93\xea\x5d\x76\xfb\x9a\x1b\x9c\x55\xb6\x67\x82\xb0\x5d\x50\x8a\x16\xf0\x06\x3a\xcb\xf1\x2b\x2a\xf1\x55\xd8\x68\x53\xe7\xbe\xe0\xd2\x9f\x7f\x5e\x13\x1e\x7f\x6e\x1f\x0c\xb8\x87\xd0\x27\x63\x20\x85\x88\xf3\x10\x7a\xc5\x80\x1f\xa8\xc0\x23\x27\x8b\x01\x70\x2d\xc1\x7d\xa4\x4d\x67\xd5\xe4\xfb\x2d\x9c\x54\xff\x04\x00\x00\xff\xff\x7a\x69\xb3\xc0\x31\x12\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
