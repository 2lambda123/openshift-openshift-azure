// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x98\xcd\x6e\xe3\x36\x10\xc7\xef\x7e\x0a\x02\x7b\x69\x0e\xf5\xa9\xe8\xa1\x37\x59\xf5\x36\x41\x36\xad\x51\x07\x28\x7a\xa4\xa8\xb1\x42\xac\xc4\x71\xf9\x91\xae\xbb\xdd\x77\x2f\x24\x59\x36\x3f\x46\x4a\xe8\x9e\x0c\x70\xe6\xf7\x9f\xa1\x48\x0e\x87\xfe\xc0\xca\xc2\xac\xb6\x56\xd4\x25\x2f\x41\xdb\x9f\xd8\xd7\xaf\x6c\xc3\x0d\xfc\xf8\xc3\x56\x09\xac\x81\x7d\xd7\x0f\x17\x66\x73\xb2\x60\xd8\xba\x44\x75\x90\xcd\xfa\x0a\xdc\xb1\x7f\xd9\x5f\x0e\x2d\xb0\x6f\xdf\x56\x25\x7f\x84\x13\x21\xb1\xd3\xf2\x95\x5b\x78\x84\x53\x2c\x34\x10\x91\x46\x46\x1e\x44\x0e\x1f\x35\x2a\xbb\xd3\xf8\xe5\x94\xa5\x14\x63\x81\xe6\x1e\xf4\xab\x14\xb0\x97\x8d\x92\xaa\xc9\x9f\x25\xc1\x2f\xea\x67\xe4\x4d\xa1\x94\x76\xc9\x2d\x6f\xf1\x26\xed\x00\x0d\xb4\x57\x1f\x98\x40\x65\xb9\x54\xa0\x99\xec\x78\x03\x86\x1d\x50\xb3\x23\xd6\x66\xf5\xc4\x8d\x05\xdd\xef\x94\x87\xde\x32\xc4\x9c\x94\x23\x9b\xaf\x39\x9a\x8a\xdd\xc3\x1c\x35\x99\x52\xa8\x44\x65\x35\xb6\x2d\x68\x33\x07\xc7\x2e\xbe\xc8\xaf\x58\x43\xca\x5d\x46\xe7\x3f\x6a\x0a\x11\xf6\x00\x3f\x29\x41\x40\xd3\xa8\xef\xfa\xec\x94\x82\x36\x75\xf6\xc6\x7d\xf7\x9d\xc6\x0e\xec\x0b\x38\xd3\xe7\xbd\xfd\x72\x44\x6d\x41\xa7\xf8\x82\x9f\x2f\xf7\x3b\x34\xd2\x58\x7d\x4a\x05\x02\x4b\x80\xa0\x23\x23\x7a\xe3\xbe\x7b\xf1\x8f\xd3\x50\x7e\x22\x56\x3b\xb0\x50\x49\x95\xa8\x0c\xb6\xc4\x92\x51\x0e\x41\x4c\x65\x64\xd5\xc2\x79\x91\x36\x1a\x3f\x53\x09\xcf\x7a\xf9\x52\x7f\x40\x35\x9b\x46\x64\xf3\xb1\xdf\x0a\x67\x5f\x86\x6a\x93\x62\x91\x8d\x5e\xdd\xa5\x15\x5d\xc0\x8a\x16\xb4\xdd\xb8\xc3\x61\x79\x4f\xc4\x6e\x0b\x62\x4f\x5c\xf1\xe6\x1d\x6a\xbe\x5f\x54\x42\xc0\x8a\x9a\x09\xd0\x56\x1e\xa4\xe0\x16\xc6\xfb\xa8\xff\xee\xa0\x73\x2b\x6d\x40\x06\xb5\xea\x6a\xc9\xbc\xe7\xae\x50\xa2\xb7\x83\xdb\x32\x3c\x73\xa4\x5e\x66\x76\x13\x92\x68\x95\xad\x04\x65\x6f\xc9\xee\x42\xce\x68\xe6\xf6\x09\x17\x88\xba\x3b\x34\xb6\xec\xd8\x72\x05\xe1\x0e\x18\xab\xf5\x6d\x7b\x20\x62\xef\xd2\x8b\x22\x7b\x1f\xc4\xd8\x5d\x5a\xa2\x73\xb3\xbc\x50\x84\x56\x46\x66\x57\x20\xd0\x29\x9a\x46\x43\xc3\x2d\xea\x6b\x63\x93\x9b\xe1\x8c\xc6\x9b\x71\x32\xb2\x9f\xc3\x89\x35\x7b\x74\x15\xb4\x60\x6f\xdb\xd6\xb4\xc4\x5b\x51\xb2\x37\x48\x42\x13\x11\xc6\x39\xfe\x8f\x59\x84\x02\xcb\x11\xb2\x67\x10\xb1\xe1\x89\x0d\xbb\x9a\xdb\x0e\xe7\x8c\xc6\x42\xcb\x9a\x7d\x58\xe7\xf0\xb8\xfc\x74\xc3\x8c\xbf\x17\x03\xc5\xc6\x1f\xa7\x79\xd5\x82\x19\xba\x98\xbe\x9f\x1e\x06\xf7\xae\xaa\xb1\xe3\x52\x8d\x17\xdc\x13\x57\xf2\x00\xc6\xae\x69\xa7\xe0\xb2\x74\x55\x2b\xc5\x3d\x1a\xab\x78\x07\x11\x1e\x1a\x7d\x6c\xb8\x25\x47\xd9\x8f\xa8\x3b\x6e\x83\x9b\x35\xb1\xc6\xf3\x92\x46\xc4\xb5\x35\x98\xdc\xf9\x03\x15\x42\xa0\xeb\x0f\xdd\xb4\x56\xb7\x2c\xe4\x59\x64\x66\x09\xa7\x10\xc3\x4c\x67\x22\x4c\xb6\x37\x03\xac\x2f\xae\x51\x28\x63\x24\xaa\x3d\x08\x0d\xb6\xef\x9d\xd2\x20\x57\xc9\xc8\x75\x56\x67\xab\xc4\x3b\x65\xb6\x4a\xf8\x2a\xf7\x76\xc7\x8d\xf9\xbb\x9e\xa7\x27\x8f\x68\xd5\x3e\xbb\x0a\xc6\x65\x32\xab\xa2\xee\xa4\x7a\xbc\x0c\x10\x5f\xed\x4f\xde\xb5\x4f\x5c\x9b\x17\xde\x5e\x8b\x69\x48\xcd\x54\xb7\x2c\xc9\x18\x5b\x38\xa6\xc5\xee\x21\x5b\x7e\x41\x21\x88\xb4\x41\xb4\xc6\x6a\x7e\x2c\x9c\x45\x7e\x3c\x6a\x7c\xbd\x61\x32\x6f\xa8\xc4\xe5\x81\xf7\xef\x8f\xf3\xc9\x59\x3d\x83\xe2\xca\x3e\xfc\x1c\x1d\xe1\x69\x38\xf8\x2c\xae\x32\x42\xcb\xa3\x95\xa8\x12\x20\x34\x06\xff\x7b\x0c\x45\x37\x01\xa6\xe1\xd4\x75\xdc\x7e\xa4\xfb\x68\x0a\xdf\x4c\x06\x9d\x16\xf0\x8b\x46\x77\x8c\xcb\x98\x6f\xf3\xa1\x4f\x28\x78\x9f\x68\xe4\x3f\x0d\x47\xdf\x4b\x01\xd4\x50\xb3\xea\xc4\x64\xd7\x3f\x27\x2f\xef\xb4\xbd\x45\xcd\x9b\xe9\x20\x93\x2f\xb5\xd0\x85\x7a\xec\xdd\x3f\x3f\xef\xbc\x19\x93\x27\x2b\xf5\x0d\x5a\x15\xef\x19\x32\x5c\x73\xc1\x31\x9e\x57\x5d\xe6\x92\x08\x26\x5b\x9b\x20\xe8\x07\x57\x8e\xf2\x12\xb5\xf0\xf7\x50\xeb\xfa\x03\x3f\xed\x42\xfa\x7f\xa0\xc9\x67\xbd\xb7\x5a\xaa\x86\x5a\xad\xdc\xcb\xc4\xe3\xee\xc8\xa7\xfe\xfb\x6f\x7f\x1f\xb9\x4b\xff\x98\xc8\xce\x6c\xa2\x08\xad\x9c\xac\x2e\x40\x58\x66\xc6\xf6\x3d\x6c\x10\x82\xce\x9e\x6a\x0f\xfe\x0b\x00\x00\xff\xff\x9c\x86\x62\xed\xb5\x15\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
