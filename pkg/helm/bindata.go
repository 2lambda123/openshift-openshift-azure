// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xc1\x72\xfb\x26\x10\xc6\xef\x7e\x0a\xcd\xfc\x2f\xcd\xa1\x39\x75\x7a\xe8\xcd\x71\x9d\xc6\x93\x7a\xaa\x89\x7d\xe9\x11\xa3\xb5\xcc\x54\x02\x0d\x2c\x69\xdd\x4c\xde\xbd\x03\x08\x09\x21\x94\x16\xf5\x94\x19\xf6\xfb\x7d\xac\x60\xd9\x8d\xbf\x15\xbb\xad\xda\xec\x91\x56\x3b\xf2\x0a\xf7\x9f\x8a\x8f\x8f\xe2\x89\x28\xf8\xf1\x87\x3d\xa7\xa2\x82\xe2\xbb\x52\xb2\x77\x82\xf0\x0a\xf7\xad\x7a\xba\x23\xa8\xe2\x71\x27\xf8\x95\xd5\x8f\x03\xf5\x50\x7c\x7e\xf6\x1e\x3b\x90\x98\x30\x31\xcb\x69\xdc\x44\x2c\x9f\xbf\xff\xb8\x77\xd6\xbe\xc1\x9e\xcf\x52\x70\x2c\xa5\xf8\xeb\x9e\xbf\x7b\xc4\xce\xfc\x32\x32\x8a\x31\xeb\x75\x02\xf9\xce\x28\x9c\x58\xcd\x19\xaf\xf3\xf3\x4b\xf0\x49\xdf\x8c\x3c\x53\x68\xe8\xb9\x23\x48\x1a\xb1\x3e\xd7\x90\x4f\xfa\xe6\xe7\x3a\x41\xad\xe7\xe6\x5b\x41\x05\x47\xc2\x38\xc8\x82\xb5\xa4\x06\x55\x5c\x85\x2c\x3a\x51\xa9\xcd\x91\x28\x04\x69\x2a\xf3\x60\x22\x76\x2f\xef\x18\xc5\x8c\x97\x5b\xda\x96\x87\x25\xb5\x0f\x8d\xe2\x9d\xe0\x28\x45\xd3\x80\x54\x4b\x50\x2c\x31\xf0\x93\x10\xa8\x50\x92\x6e\xab\x51\x90\xae\x93\xe2\x1d\xe4\xdc\x60\x59\x36\x3f\xce\x39\x9d\x88\x5b\xec\xce\x69\x42\xec\x57\x8d\xe4\xac\x39\x87\x66\x2e\x0a\xd6\xfb\xb3\x07\xa4\x55\x41\x41\x22\xbb\x32\x4a\x10\x5c\xf3\x31\x3b\x83\x5c\xd3\x80\x06\x72\x68\x42\x6e\x25\xb3\x11\x8d\xd0\xe0\x53\xc2\xba\x8c\x7a\x6e\xe2\x93\x99\x8d\x47\xc6\xc6\xda\x30\xe0\xb8\xaa\x41\x7b\x32\xf2\xca\x6d\xd4\x03\x14\x3e\x22\x29\x9a\xa2\x6b\x08\x87\xe9\x8d\xba\x32\x5e\x77\xa7\x11\xfb\x30\xbe\x9c\xec\x7b\x8d\x31\xeb\xb5\xad\x5a\xc6\x73\x93\xf2\xd0\xe8\x90\x91\xc6\xa0\x77\x74\x5d\x4b\xa8\x09\x0a\x39\x76\xfd\xec\x74\xd2\x1e\x8b\xfe\x39\xc9\x2e\xe0\xc1\x3d\xbc\xea\x0b\x34\x80\xeb\x4a\x32\x6d\xb1\xe4\x9e\x7d\xd9\x33\x3a\x70\x76\xdf\xf2\x3f\xb2\x9e\x1a\xa4\x9d\xb3\x33\x8e\x58\xeb\xfa\x5b\x07\xfc\x74\x63\x57\xec\x3f\x2a\x33\xdb\x39\x9e\x72\xcd\xc8\x34\x41\xba\x2e\x30\x1d\x18\xeb\x1e\xfc\x82\x47\x62\xfe\x67\x37\x80\x25\xdc\xb7\xb0\xd6\x7e\xce\xf7\xd4\xaa\x0b\xf7\x47\x4b\x72\x69\x40\x6d\xde\x84\x46\xf3\x4f\x8e\x5d\x3c\xe9\x4b\x25\x5a\xc2\xb8\x1b\x6e\x47\xc2\xd9\x15\x14\x3e\xa6\x45\xc6\xbd\xd4\x97\x86\xd1\x17\xa1\x90\x93\x16\x22\x6c\x1a\x34\x72\x3b\x21\x9d\xcd\xb3\x90\x2d\xc1\xc9\x14\x9d\x45\x7d\xfe\x4c\xd1\xb8\x0f\x4f\x3e\xa2\x3f\x80\x2d\xa5\x42\x9b\xc7\xec\xef\x60\xcd\x05\xcd\x4c\xc2\x1b\xf2\x41\xfb\x61\x0b\x1b\xf8\xd8\xbf\xf8\x7b\x59\x6f\xaf\x14\x13\xfc\x04\x54\x02\x6e\x35\xde\xe6\xc6\xa3\x4d\x24\x9d\xf1\x7b\x4e\xff\x23\xbe\xe7\xd4\xd0\x2f\x58\x12\xa5\xfe\xac\x96\x29\xaf\xe8\x2f\xe4\x0f\x7d\x01\x77\x03\xaa\x1f\x34\xc3\x42\xe2\x44\x7e\x27\x6d\x73\x24\x52\xdd\x48\x13\x4d\x9a\x81\x8a\x1a\x63\x96\x55\x8c\xf9\xaa\x27\x7f\x6b\xe9\x0b\x65\x73\x06\x4e\x38\x1e\x7e\x8e\x2a\xd4\x2f\xdb\x33\xd4\x17\x45\x25\xeb\x90\x09\x3e\x13\x4e\x83\xf6\xb7\x98\xed\x65\x33\xa1\x5f\x1e\x25\xee\xa8\x93\x32\x17\x32\xd2\x37\x50\x42\x4b\x0a\xbf\x48\xa1\xbb\xf8\xf5\x85\x31\x23\xfe\x55\x50\x62\x12\x89\x74\x7e\xb9\xff\x7e\x0e\x50\x41\x55\x5c\xee\x05\x6b\x3b\x21\x71\xf3\x06\x35\x53\x28\xef\x27\x14\x92\xd4\xbe\x10\x27\x2f\x30\x2d\x71\x09\xf6\x11\x57\xc5\x87\x32\xcd\xf9\x68\x88\xbc\x9c\xcf\x65\x70\x08\xc9\x02\x9b\x6b\xed\x90\x6f\x40\xe2\x91\x70\x52\xf7\x03\x64\x52\xbd\xcb\x6e\x5f\x73\x83\xb3\xca\xf6\x4c\x10\xb6\x0b\x4a\xd1\x02\xde\x40\x67\x39\x7e\x45\x25\x7e\x15\x36\xda\xd4\xb9\x2f\xb8\xf4\xcf\x3f\xaf\x09\x8f\x3f\xb7\x0f\x06\xdc\x43\xe8\x93\x31\x90\x42\xc4\x79\x08\xbd\x62\xc0\x0f\x54\xe0\x91\x93\xc5\x00\x58\xfe\x9f\x00\x00\x00\xff\xff\xa6\x49\x4b\xf1\x03\x12\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
