// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\xcd\x8e\xdb\x36\x10\xc7\xef\x7e\x0a\x01\xb9\xd4\x87\xfa\x54\xf4\xd0\x9b\xac\x3a\xcd\x62\xb3\x5d\x21\x5e\xa0\xe8\x91\xa6\xc6\x32\x11\x8a\x54\x87\xe4\x36\x4e\x9a\x77\x2f\x24\x59\x36\xbf\x24\x2f\xd5\x9e\x0c\x88\xf3\xff\xcd\x90\x1c\x0e\x87\x7e\x97\x15\xb9\x5a\xed\x34\xad\x0a\x52\x00\xea\x5f\xb2\x6f\xdf\xb2\x2d\x51\xf0\xf3\x4f\x3b\x41\x65\x05\xd9\x0f\xdd\xe7\x5c\x6d\xcf\x1a\x54\xb6\x29\xa4\x38\xb2\x7a\x73\x13\xac\xb3\x7f\xb2\xbf\x8c\xd4\x90\x7d\xff\xbe\x2a\xc8\x23\x9c\x23\x88\x12\xd9\x2b\xd1\xf0\x08\x67\x1f\xd4\x2b\x3c\x46\x42\x1c\x91\x18\xde\xa3\x14\xba\x44\xf9\xe5\x9c\x44\xf2\x65\x0e\x73\x0f\xf8\xca\x28\xec\x59\x2d\x98\xa8\xd3\x67\x19\xd1\xcf\xf2\x13\xe2\x8e\x49\x63\xec\x82\x68\xc2\xe5\x22\xb6\x23\x75\xd8\xab\x77\x19\x95\x42\x13\x26\x00\x33\xd6\x90\x1a\x54\x76\x94\x98\xb5\xb2\x52\xab\x27\xa2\x34\x60\x97\x29\x0f\xdd\x48\xef\x73\x24\x7b\x63\x36\x73\x18\xca\xcb\x87\x29\xd5\x38\x14\x8a\x0a\x29\x34\x4a\xce\x01\xd5\x94\xd8\x37\xb1\x21\xbf\xcb\x0a\x42\xdd\xf5\xeb\xf4\xa2\x86\xa2\xc8\xb8\x23\x3f\x0b\x1a\x11\x8d\x5f\x6d\xd3\x17\x23\x04\xf0\xd0\xd8\xfa\x6e\x9b\x97\x28\x1b\xd0\x27\x30\xaa\x8b\x7b\xf7\xa5\x95\xa8\x01\x43\xf9\x8c\x9d\x8d\xfb\x04\x35\x53\x1a\xcf\x21\xc0\x19\x71\x24\xd2\x44\x3d\x5a\xdf\x6d\xf3\xfc\xab\x41\x28\x3e\x46\x76\xdb\x19\x89\x05\x55\x48\xa1\x24\x8f\x6c\x59\xcc\xc0\xf1\x29\x14\x3b\x70\xb8\x6c\xd2\x16\xe5\xe7\x58\xc0\x93\x56\xce\xf6\x40\xd3\x72\xa2\xef\xb1\xa6\xcd\x6c\xd8\x1f\x70\x98\x9c\x93\x37\x66\xcb\x9e\x73\xa3\x4f\x7d\xe9\x0a\x65\xde\x58\x3c\x55\xe6\xd2\x63\x46\x96\x73\x40\xbd\x35\xc7\xe3\x7c\x82\xf9\x66\x33\xb0\x27\x22\x48\xfd\x06\x9a\x6d\xe7\xd5\x23\xd0\xb4\xca\x28\xa0\x66\x47\x46\x89\x86\xe1\x72\xeb\xd6\x1d\x30\xb5\x6c\x3b\x4a\xa7\xf0\xdd\x46\x12\x2f\xcd\x9b\x28\xe0\x95\xb0\x2c\xc2\x8b\x2e\xca\x4b\x8c\x6e\x94\x04\xac\x82\x33\x10\x7a\x49\x74\x57\xe5\x04\x33\xb5\xe9\xb8\x8a\x62\x17\x11\x4a\x9e\xb5\x9c\x08\x70\x33\x60\x28\xfd\xcb\x72\xc0\xd3\xae\xc3\x5b\x27\x39\x0f\x7c\xd9\x3a\xac\xf7\xa9\x51\x5e\x55\x11\x56\x42\x64\x37\x81\xc3\xc9\xeb\x1a\xa1\x26\x5a\xe2\xad\x4b\x4a\x8d\x70\x82\x71\xd7\x4f\x42\xf4\x53\xf2\xc8\x9e\x3d\x9a\x03\x70\xd0\xcb\xd2\x3a\x8e\xb8\xe7\x25\x39\x41\x02\x75\xc4\xc3\x30\xc7\xff\x30\x0b\x17\x30\xef\x21\x79\x06\x9e\xd6\x3d\xb1\x6e\x8b\xb4\xec\x70\x4e\x30\x66\xfa\xdf\xe4\xc3\x3a\x25\xf7\xcb\x4f\xd3\xcf\xf8\x47\xda\xab\xb2\xe1\xc7\x20\x39\x70\x50\x7d\x4b\xd4\x35\xe7\xfd\xc7\xbd\x39\x54\xb2\x21\x4c\x5c\x2f\xb8\xa1\x7f\xbe\x38\xea\xae\xba\xb6\x2b\x5e\xa0\x36\xcf\x48\x4f\xa0\x34\x76\x29\x5d\xa2\x3c\x32\x0e\x9b\xe7\x16\xc4\xfe\xc4\x8e\xda\x6a\xab\x42\xb6\x73\xc7\x9a\x03\x67\xf4\x83\x54\x5a\x90\x06\xfe\x1f\xaf\x2e\xd3\xf6\xd6\xdf\xc9\x83\xd5\x7b\x89\x0d\xd1\xce\x3d\x1e\x8c\xfa\xab\xc8\x14\xf5\x2b\xb9\xb3\x94\x97\x78\x73\x4a\xa5\xe9\x8e\xf8\x98\x19\x4b\xd2\xe6\x02\x99\x48\x98\xd1\x45\x3f\xd3\x09\x0f\xe3\xd8\x5d\x07\x9b\xab\xa9\xe7\x4a\x29\x26\xc5\x1e\x28\x82\xee\x3a\xb5\xd0\xc9\x0d\xe9\x99\x4e\x72\x76\x82\xbe\x11\xb3\x13\xd4\xa6\x7c\xd0\x25\x51\xea\xef\x6a\x5a\x3d\x5a\x78\xbb\xf6\xd9\x1c\x60\xd8\x26\xb5\xca\xab\x86\x89\xc7\xeb\x87\xc8\xaa\xfd\x49\x1a\xfe\x44\x50\x9d\x08\xbf\x95\x6e\x57\x35\x51\x4b\x93\x90\xbe\x6c\xa6\x28\xe4\xe5\x43\x32\x7e\x86\xe0\x78\xda\x4a\xa9\xbb\xc3\xd4\xe6\x46\x4b\xd2\xb6\x28\x5f\x17\x4c\xe6\x0e\x65\xed\x3f\x2e\xd3\xa7\xe3\x88\xfc\xe2\x46\xba\xa7\xd8\xe5\x24\xae\x5e\x40\x10\xa1\x1f\x7e\xbd\x5f\x49\xf2\xaf\x63\xfd\x18\x35\x4e\x9c\xe6\xa0\x28\xb2\x56\x33\x29\xd2\x68\xae\xd2\xf9\xf3\xa8\xbf\x6c\xde\x42\xbb\x7c\x2a\x91\x09\xca\x5a\xc2\x47\xf6\x48\x08\xa9\xc3\x99\x59\x4e\x1e\xf4\xee\x43\x56\x49\x83\x14\x7e\x43\x69\xda\x94\x05\x70\x84\x36\xf1\xa3\xa4\xa4\x5b\x95\x09\xd8\x38\xec\x6d\xaf\x00\xa8\xa0\xca\x0e\xe7\x8c\x35\xad\x44\x7d\x7d\x61\xef\xb5\x44\x52\x8f\x75\x2c\xfa\xc6\x76\x4d\x62\xcf\xf4\x0f\x2f\x2f\xa5\xb5\x76\xd1\xc2\x12\xda\x3a\x7d\xa1\xf5\xe6\xeb\x7b\x0a\xa7\x8a\x4d\x53\xe7\x75\x81\x07\x95\xcc\x8e\x28\xe2\xaf\xdb\x14\xf2\x9c\x6a\xe6\x8f\x3d\x6e\xba\x7a\x67\xa5\x7e\xe4\x1f\xbc\xd1\x66\xb3\xd7\xc8\x44\x1d\xdb\xad\xd4\xbb\xd4\xd2\xad\xa3\x7f\xd2\xbc\xbd\xd5\xb2\x25\xeb\xf0\x2f\xa5\xe4\xc8\x46\x55\x84\x95\x12\xd5\x55\xe0\x56\xc5\xe1\xad\x14\xb4\x55\xb7\x67\x54\xac\x3b\x5a\x7d\x32\xa2\x2b\xb5\xdd\x41\xe4\xee\x79\xb2\x06\x6c\xc5\xbf\x01\x00\x00\xff\xff\x50\xc1\x53\xa3\xa1\x17\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
