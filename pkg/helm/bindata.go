// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\x4d\x8f\xeb\x26\x14\x86\xf7\xfe\x15\x96\xee\xa6\x59\x74\x56\x55\x17\xdd\x79\xdc\xdc\x4e\x94\x46\xb2\x26\xd9\x74\x49\xf0\x89\x07\xd5\x06\x0b\x0e\xd3\xa6\x57\xf7\xbf\x57\x80\xf1\x07\xc6\x33\x25\x5d\x45\x82\xf7\x7d\x38\x7c\x9c\x73\xe2\x2f\x79\x59\xa8\x6c\x8f\xb4\x2e\x49\x09\x12\x7f\xc9\xbf\x7d\xcb\x9f\x89\x82\x9f\x7f\xda\x73\x2a\x6a\xc8\x7f\x30\xc3\x85\x7a\xbe\x23\xa8\xfc\xa9\x14\xfc\xc6\x9a\xa7\xc9\xb0\xcb\xbf\x7f\xcf\x4a\x72\x84\x7b\xc4\x5a\x49\xf6\x4e\x10\x8e\x70\x0f\x01\xd6\x31\x78\x13\xd6\x9d\xad\xf9\x55\x0a\x8e\x95\x14\x7f\xdf\x93\x08\xa1\xcd\xb2\xce\x20\xdf\x19\x85\x33\x6b\x38\xe3\x4d\xfa\x6e\x22\xfe\x28\x37\x21\xce\x98\x75\xce\x2c\x09\x92\x56\x3c\xc4\x5c\x58\x2d\x33\xfb\x92\x53\xc1\x91\x30\x0e\x32\x67\x1d\x69\x40\xe5\x37\x21\xf3\x5e\xd4\x2a\x3b\x11\x85\x20\xcd\x8d\x1f\xcc\x8c\x5d\xcb\x13\x83\x39\xc3\x72\x43\x45\x75\xd8\x52\xfb\xa9\x49\x5c\x0a\x8e\x52\xb4\x2d\x48\xb5\x65\x0a\x25\xc6\xfc\x2c\x04\x2a\x94\xa4\x2f\x34\x0a\xd2\xf7\x52\xbc\x83\x5c\x03\xb6\x65\xeb\xe3\x5c\xbb\x23\xf3\xd6\x76\xe7\x34\x22\xf6\xa3\x46\x72\xd1\x9c\x43\xbb\x16\xcd\xc6\x87\xb3\x07\xa4\x75\x4e\x41\x22\xbb\x31\x4a\x10\x5c\x42\x9a\x95\x41\xa6\x3e\xc5\x85\xd3\x5e\xee\x34\x92\x98\xe0\x93\x69\xe4\x54\xf0\x58\x44\x83\x6f\xc1\x49\x8c\xc6\x5b\x46\x46\xd9\x32\xe0\xf8\x48\x34\xa3\x33\x60\xa5\x16\xc0\xd1\x34\x4f\x22\x29\xda\xbc\x6f\x09\x87\xe5\x8d\xba\x67\xfc\xd8\x9d\x06\xde\xdd\x94\x39\xc9\xf7\x1a\xda\x76\xd3\x4b\x4d\x8d\x6a\x74\xcd\x18\x09\x91\x4c\x06\xeb\x2f\x9a\x46\x42\x43\x50\xc8\xa9\x42\xa7\x46\xb4\xc1\xd8\xe4\x27\x44\xbb\x65\x9f\xdd\xc5\x51\x5f\xa1\x05\x7c\xec\x59\xc6\x11\x5b\xf4\xe4\x0b\x5f\xb9\x67\x64\xb7\x97\xff\x11\xf5\x12\x10\x27\x27\x47\x1c\x78\x5d\x86\x2d\x8b\xf1\x63\xc9\xb4\xc1\x88\xf4\xd6\xe4\xe4\xda\xb2\xfb\xf2\xd0\xd9\x9d\xfd\x48\xad\x3a\x77\x3f\x5a\x92\x6b\x0b\x2a\x7b\x15\x1a\x4d\xa3\xb7\x83\x67\x7d\xad\x45\x47\x18\x77\x8d\xe3\x44\x38\xbb\x81\xc2\xa7\xb8\xc8\xd0\x2b\x7d\x6d\x19\x7d\x11\x0a\x39\xe9\x20\xb0\x2d\x27\x8d\xdc\x76\x1f\x87\xf9\x2a\x64\x47\x70\xd1\xa1\x56\xb3\x3e\x7e\xa6\x68\x58\xe3\x16\x9b\x18\x0e\xa0\xa0\x54\x68\x93\x24\xfe\x0e\x1e\xb9\xa0\x01\x12\x5c\x8d\x47\xdb\x1d\x6d\x90\xfd\xdc\xa7\xe0\xa7\x51\x3a\x2c\xa1\x14\x13\xfc\x0c\x54\x02\x16\x1a\xdf\xd6\xf0\x09\x15\x48\x57\xfe\x3d\xa7\xff\xd1\xbe\xe7\xd4\xb8\x5f\xb0\x22\x4a\xfd\x55\x6f\xbb\xbc\x62\xb8\x8d\x3f\xf5\x15\xdc\xf1\xab\xac\xa8\x3b\xc6\x8f\xe3\x40\xe4\x54\xfe\x20\x5d\x7b\x22\x52\xbd\x91\x76\x2a\x6a\x4b\x57\x50\x6d\x92\x50\xa1\x2d\x92\x4e\x45\x75\x48\xc6\x7e\x40\xd8\x6d\xfe\x05\x4c\x5e\xe5\x13\x8a\x4f\x5f\xf2\x8f\x96\xfe\xc5\x67\x17\xe0\x84\xe3\xe1\xd7\x20\xd5\xfc\xb0\xdd\xbe\xbe\x2a\x2a\x59\x8f\x4c\xf0\x95\x70\x39\x69\x3f\x84\x6c\xb1\x5b\x09\xfd\xf0\x24\x71\xcf\x26\x2a\x73\x53\x46\xfa\x0a\x4a\x68\x49\xe1\x37\x29\x74\x1f\x96\x91\xf9\x9c\x11\xff\x2e\x28\x31\x81\x04\x3a\x3f\x3c\xec\x9f\x03\xd4\x50\xe7\xd7\x7b\xce\xba\x5e\x48\xcc\x5e\xa1\x61\x0a\xe5\xfd\x8c\x42\x92\xc6\x27\xd6\xa2\x94\xc4\x25\x2e\x40\x37\xf3\x72\xb9\x54\xb3\x1d\x45\x5f\xfe\x5a\x6b\x5b\x7a\x0b\x12\x4f\x84\x93\x66\x68\x17\x8b\xb4\xda\xa6\x7d\xec\x1b\xc9\x2a\x99\x19\x71\xd8\xda\x2c\x45\x07\xf8\x06\x3a\x89\xf8\x91\x2b\xf2\x1d\xd8\x6a\x93\x80\xfe\xf5\xc4\x3f\xf8\xbc\x66\x7e\xfc\xa9\xd5\x79\xe6\xdb\xcd\x39\x09\x6d\x72\x6e\x71\x0c\xa1\x31\xbd\x91\x8f\xae\x19\x23\x25\x8a\xd1\xe0\xf2\xdb\xfd\x1f\x5d\x76\xd0\xc5\x5f\xd5\x79\xff\xfc\x37\x00\x00\xff\xff\xe2\x92\x30\x11\x37\x11\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
