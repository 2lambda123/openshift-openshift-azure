// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\x3f\x6f\xf3\x36\x10\xc6\x77\x7f\x0a\x01\x59\x9a\xa1\x99\x8a\x0e\xdd\x1c\xd7\x69\x8c\xd4\xa8\x10\x67\xe9\x48\x53\x67\x99\xa8\x44\x0a\xc7\x53\x5a\x37\xc8\x77\x2f\x48\x89\x12\x45\x51\xe9\x4b\xbd\x93\x01\xde\xf3\x7b\x78\xfc\x73\x47\xf9\x2e\xdb\x6d\xf5\x66\x4f\xbc\xd8\xb1\x17\xb8\xfd\x92\x7d\x7c\x64\x8f\x4c\xc3\xcf\x3f\xed\x25\x57\x05\x64\x3f\xe4\x28\xde\x19\xc1\x0b\xdc\xb6\xfa\xf1\x46\xa0\xb3\x87\x9d\x92\x17\x51\x3e\x0c\xd4\x7d\xf6\xf9\xd9\x7b\xec\x00\x29\x62\x62\x86\xe3\xb8\x89\x58\x3e\x7d\xfe\x71\xee\xa4\x79\xbd\x39\x9f\x50\x49\xca\x51\xfd\x73\x4b\x9f\x3d\x60\x67\x7e\x09\x19\x85\x98\xf5\x3a\x01\xbe\x0b\x0e\x27\x51\x4a\x21\xcb\xf4\xfc\x22\x7c\xd4\x37\x21\xcf\x18\xea\x7b\xee\x18\xb1\x4a\xad\xcf\xd5\xe7\xa3\xbe\xe9\xb9\x4e\x50\xeb\xb9\xb9\xcb\xb8\x92\xc4\x84\x04\xcc\x44\xcd\x4a\xd0\xd9\x45\x61\xd6\xa8\x42\x6f\x8e\x4c\x13\xa0\xb9\x99\x07\x13\xb1\x73\x39\xc7\x20\x66\xbc\xba\xa1\x6d\x7e\x58\x52\xbb\xd0\x28\xde\x29\x49\xa8\xaa\x0a\x50\x2f\x41\xa1\xc4\xc0\x8f\x4a\x91\x26\x64\xcd\xb6\x25\xc5\x9a\x06\xd5\x3b\xe0\xdc\x60\x59\x36\xdf\xce\x39\x1d\x89\x5b\xec\x26\x79\x44\xec\x46\xfb\x4d\x05\xe2\x45\xc6\x01\x49\x5c\x04\x67\x04\x5d\x57\x31\x96\x80\x6b\x3a\xcb\x40\x0e\xdd\xa5\x1b\x49\xec\x30\x23\x34\xf8\xe4\xb0\x2e\xa3\x9e\x9b\xf8\x24\x66\xe3\x90\xb1\x63\x56\x02\x24\xad\xea\xbc\x8e\x0c\xbc\x52\x3b\xf0\x00\xf9\xd5\x81\xaa\xca\x9a\x8a\x49\x98\x9e\x68\x77\x3f\xd7\x9d\x69\xc0\xde\x8f\x25\x91\x7c\xae\x21\x66\xbd\xb6\x45\x2d\x64\x6a\x52\x0e\x1a\x1d\x12\xd2\x18\xf4\x1d\x5d\x96\x08\x25\x23\x85\x63\x3b\x4f\x4e\x27\xee\xb1\xe8\x9f\x92\xec\x02\xee\x9d\xc3\x4b\x7b\x86\x0a\x68\xdd\x95\x8c\x5b\x2c\xb9\x27\x1f\xf6\x8c\xf6\x9c\xbb\xb5\x7c\x47\xd6\x53\x83\xb8\x73\x72\xc6\x01\x6b\x5d\xff\x68\x40\x9e\xae\xe2\x42\xfd\xa2\x12\xb3\x9d\xe3\x31\xd7\x84\x4c\x23\x64\xd7\x05\xa6\x2f\xc1\xba\x82\x5f\xf0\x88\x3c\xec\xc9\x0d\x60\x09\x77\x2d\xac\xb6\xcb\xf9\x91\x5b\x75\xd6\xfd\xb4\xc8\xce\x15\xe8\xcd\xab\x6a\xc9\x7c\xbd\xd8\xc1\x53\x7b\x2e\x54\xcd\x84\xec\x9e\xb6\x23\x93\xe2\x02\x9a\x1e\xe2\x22\xe3\x9e\xb7\xe7\x4a\xf0\x67\xa5\x49\xb2\x1a\x02\x6c\x1a\x34\x72\xfb\x42\x76\x36\x4f\x0a\x6b\x46\x93\x37\x74\x16\x75\xf9\x0b\xcd\xc3\x3e\x3c\x59\x44\xbf\x01\x5b\xce\x55\x6b\x8a\xd9\x9d\xc1\x9a\x03\x9a\x99\xf8\x27\xe4\x82\x76\x61\x0b\x13\xb8\xd8\xff\xf8\x3b\x59\x6f\xaf\xb5\x50\xf2\x04\x1c\x81\xb6\x2d\x5d\xe7\xc6\xa3\x4d\x20\x9d\xf1\x7b\xc9\xbf\x11\xdf\x4b\x6e\xe8\x67\xca\x99\xd6\x7f\x17\xcb\x94\x53\xf4\x07\xf2\x57\x7b\x86\xee\x04\x74\xff\xd0\x0c\x03\x91\x1d\xf9\x93\xd5\xd5\x91\xa1\xbe\xb2\x2a\x78\x69\x06\x2a\x68\x8c\x49\x56\x21\xe6\x6e\x3d\xfb\xb7\x45\x77\x51\x36\x6f\x20\x99\xa4\xc3\xaf\xc1\x0d\x75\xc3\x76\x0f\xdb\xb3\xe6\x28\x1a\x12\x4a\xce\x84\xd3\xa0\xfd\x93\x65\x7b\xd9\x4c\xe8\x86\x47\x49\xb7\xd5\x51\x59\x17\x32\xd2\x57\xd0\xaa\x45\x0e\xbf\xa1\x6a\x9b\xb0\xfa\xfc\x98\x11\xff\xae\x38\x33\x89\x04\x3a\x37\xdc\xaf\x5f\x02\x14\x50\x64\xe7\x5b\x26\xea\x46\x21\xd9\x52\x07\x3c\xe4\x93\x9a\x73\x83\xee\xab\x69\x5a\xca\xde\x97\x91\x5f\xc6\xaf\x50\x0a\x4d\x78\x3b\x91\x42\x56\xba\x2b\x3d\xf5\x8d\x4a\x7c\xb8\x1f\x72\x55\x14\x82\x63\x78\x32\x63\x57\x44\xe1\x22\xc2\xa8\x8f\x3c\xbf\xbd\xe5\xde\x19\x44\xef\xf7\x5c\x6b\xbf\x31\x2a\x40\x3a\x32\xc9\xca\xfe\xfd\x9a\x14\xcf\xb2\xdb\xd7\xdc\xe0\xac\x93\x3d\x23\x84\x6d\xc2\xa8\x6a\xa0\x2b\xb4\x49\x8e\x5f\x51\x91\x7f\x9b\x55\x6b\xca\xcc\xdd\xf7\xf8\xdf\x4a\xa7\xf1\xb7\x3f\xb5\x0d\x7b\xdc\xbd\xef\x93\xf0\x1e\xfa\x48\xe7\x61\x2f\x79\x72\x26\x8e\xf2\x3c\x52\xb2\x18\x00\xcb\xff\x17\x00\x00\xff\xff\x88\x76\x12\x69\x5b\x12\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
