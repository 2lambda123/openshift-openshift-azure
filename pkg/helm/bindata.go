// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\x41\x6f\xec\x26\x10\xc7\xef\xfe\x14\x96\xde\xa5\x7b\x68\x4e\x55\x0f\xbd\x39\x6e\x5e\xb3\x4a\x23\x59\xd9\x5c\x7a\x64\xf1\xac\x83\x6a\x83\x05\x43\xda\xed\xd3\xfb\xee\x15\x60\x6c\x8c\x71\x52\xb6\xa7\x95\xe0\xff\xfb\x33\x30\xcc\xe0\xfd\x52\xd6\x95\x2a\x1e\x90\xb6\x35\xa9\x41\xe2\x2f\xe5\xb7\x6f\xe5\x3d\x51\xf0\xf3\x4f\x0f\x9c\x8a\x16\xca\x1f\xcc\x70\xa5\xee\xaf\x08\xaa\xbc\xab\x05\xbf\xb0\xee\x6e\x01\x0e\xe5\xf7\xef\x45\x4d\x9e\xe0\x9a\x40\x1b\xc9\xde\x09\xc2\x13\x5c\x63\x03\x4b\x4c\x6c\xc6\xba\xc1\x9a\x5f\xa5\xe0\xd8\x48\xf1\xf7\x35\xcb\x21\xc6\xac\xd7\x09\xe4\x3b\xa3\x70\x62\x1d\x67\xbc\xcb\xdf\x4d\x82\x4f\xfa\x66\xc4\x99\x42\x43\xcf\x9a\x20\xe9\xc5\x4d\x9e\x2b\xd4\x7a\x16\x5f\x4a\x2a\x38\x12\xc6\x41\x96\x6c\x20\x1d\xa8\xf2\x22\x64\x39\x8a\x56\x15\xcf\x44\x21\x48\x93\xf1\xa3\x99\xb1\x6b\x79\xc7\x68\xce\x78\xb9\xa1\xaa\x39\xee\xa9\xfd\xd4\x22\xae\x05\x47\x29\xfa\x1e\xa4\xda\x83\x62\x89\x81\xef\x85\x40\x85\x92\x8c\x95\x46\x41\xc6\x51\x8a\x77\x90\x5b\x83\x7d\xd9\xf6\x38\xb7\x74\x62\xde\x62\x57\x4e\x13\x62\x3f\x6a\x24\xaf\x9a\x73\xe8\xb7\xa2\x60\x7c\x3a\x7b\x40\xda\x96\x14\x24\xb2\x0b\xa3\x04\xc1\x15\xa4\x59\x19\x64\xee\x55\x5c\x91\x36\xb9\xcb\x48\x66\x81\x2f\xd0\xec\xd3\xc0\x6d\x11\x4d\xdc\xca\x27\x33\x1a\x8f\xcc\x1e\x75\xcf\x80\xe3\x2d\xd1\xcc\x64\xe4\x95\xdb\x00\x67\x28\x2c\x22\x29\xfa\x72\xec\x09\x87\x75\x46\xdd\x35\xbe\x2d\xa7\x11\x7b\x58\x2a\x27\x3b\xaf\x31\x76\x58\x6e\x6a\x6e\x54\x33\x15\x78\x64\x44\xb2\x00\x96\xaf\xba\x4e\x42\x47\x50\xc8\xa5\x43\xe7\x46\xb4\xe3\xb1\xeb\x9f\x11\xed\x1e\x1e\xe4\xe2\x49\x9f\xa1\x07\xbc\xed\x5a\xa6\x2d\xf6\xdc\xb3\x13\xbe\xa1\x03\x67\xb7\x97\xff\x11\xf5\xda\x20\xed\x9c\x1d\x71\xc4\xba\x0a\x5b\x37\xe3\xdb\x8a\x69\xc7\x23\xf1\xb6\x66\x17\xd7\x1e\xee\xdb\xc3\x60\x77\xf6\x23\xb5\xea\xd2\xfd\x68\x49\xce\x3d\xa8\xe2\x45\x68\x34\x0f\xbd\x1d\x3c\xe9\x73\x2b\x06\xc2\xb8\x7b\x38\x9e\x09\x67\x17\x50\x78\x97\x16\x19\xf7\x46\x9f\x7b\x46\x1f\x85\x42\x4e\x06\x88\xb0\xf5\xa4\x91\xdb\xd7\xc7\xd9\x7c\x15\x72\x20\xb8\x7a\xa1\x36\xb3\x3e\x7e\xa6\x68\xdc\xe3\x56\x9b\x98\x0e\xa0\xa2\x54\x68\x53\x24\x3e\x07\xb7\x24\x68\x32\x89\x52\xe3\xad\xed\x8e\x76\x9c\xfd\xdc\xa7\xc6\x77\xb3\x74\x5a\x42\x29\x26\xf8\x09\xa8\x04\xac\x34\xbe\x6d\xcd\x17\xab\x48\xba\xe1\x1f\x38\xfd\x8f\xf8\x03\xa7\x86\x7e\xc4\x86\x28\xf5\x57\xbb\x4f\x79\xc5\x94\x8d\x3f\xf5\x19\xdc\xf1\xab\xa2\x6a\x07\xc6\x9f\xe6\x81\xc4\xa9\xfc\x41\x86\xfe\x99\x48\xf5\x46\xfa\xa5\xa9\xad\xa9\xa8\xdb\x64\x59\xc5\x58\xa2\x9c\xaa\xe6\x98\x6d\xfb\x81\xc3\x61\xf7\x13\x30\x7b\x95\x4f\x5c\x7c\xf9\x92\x7f\xb4\xf4\x37\xbe\x78\x05\x4e\x38\x1e\x7f\x8d\x4a\xcd\x0f\xdb\xed\xeb\xb3\xa2\x92\x8d\xc8\x04\xdf\x08\xd7\x93\xf6\x8f\x90\x6d\x76\x1b\xa1\x1f\x5e\x24\xee\xda\x24\x65\x6e\xca\x48\x5f\x40\x09\x2d\x29\xfc\x26\x85\x1e\xe3\x36\x12\xce\x19\xf1\xef\x82\x12\x13\x48\xa4\xf3\xc3\xd3\xfe\x39\x40\x0b\x6d\x79\xbe\x96\x6c\x18\x85\xc4\xe2\x05\x3a\xa6\x50\x5e\x4f\x28\x24\xe9\x7c\x61\xad\x5a\x49\x5a\xe2\x02\x9c\x66\x5c\x8a\x8f\x4d\x9a\xf3\xb3\x21\xf2\xf8\xfa\xda\x04\x87\x90\x2c\x96\xad\xd6\x7e\x05\xf4\x20\xf1\x99\x70\xd2\x4d\x2f\xcc\xaa\x12\xf7\xdd\x3e\xe6\x66\x67\x95\xed\x99\x20\x6c\x3b\x97\x62\x00\x7c\x03\x9d\xe5\xf8\x11\x95\xf8\xeb\xd8\x6b\x53\xb3\xfe\xc2\xa5\xff\x23\x7a\x4d\x78\xfc\xb9\x0d\x3d\xe0\x0e\xa1\x4f\xc6\xcb\x1a\x22\xce\x43\x68\xcc\x7f\xfb\x67\x2a\xf0\xc8\x89\x62\x06\x5c\x4b\x70\x9f\xb0\xeb\x47\x77\xf5\x75\x1b\x3e\xb9\xff\x06\x00\x00\xff\xff\x8f\x55\x38\x9d\x6a\x11\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
