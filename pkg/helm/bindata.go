// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x98\xcd\x6e\xe3\x36\x10\xc7\xef\x7e\x0a\x02\x7b\xa9\x0f\xf5\xa9\xe8\xa1\x37\x59\xf5\x36\x41\x36\x5b\xa3\x0e\x5a\xf4\x48\x51\x63\x85\x58\x8a\xe3\xf2\x23\x5d\x77\x9b\x77\x2f\x24\x59\x32\xbf\xa4\x84\x6e\x2e\x01\x38\xf3\xfb\xcf\xd0\x43\x0e\x49\x7d\x20\x65\xa1\x57\x3b\xc3\xea\x92\x96\xa0\xcc\x4f\xe4\xdb\x37\xb2\xa5\x1a\x7e\xfc\x61\x27\x19\xd6\x40\xbe\xeb\x86\x0b\xbd\x3d\x1b\xd0\x64\x53\xa2\x3c\xf2\x66\x73\x05\xd6\xe4\x5f\xf2\x97\x45\x03\xe4\xf5\x75\x55\xd2\x07\x38\x27\x24\xf6\x8a\xbf\x50\x03\x0f\x70\x0e\x85\x7a\x22\xd0\xc8\xc8\x23\x91\xc3\x47\x85\xd2\xec\x15\x7e\x3d\x67\x29\x85\x98\xa7\x79\x00\xf5\xc2\x19\x1c\x78\x23\xb9\x6c\xf2\x67\x99\xe0\x17\xf5\x33\xf2\x4e\xa1\x29\xed\x92\x1a\x2a\xf0\x26\x6d\x0f\xf5\xb4\x57\x1f\x08\x43\x69\x28\x97\xa0\x08\x6f\x69\x03\x9a\x1c\x51\x91\x13\xd6\x7a\xf5\x48\xb5\x01\xd5\xad\x94\xfb\xce\xd2\xc7\x1c\x95\x03\x9b\xab\x39\x98\x8a\xfd\xfd\x1c\x35\x9a\x62\xa8\x44\x69\x14\x0a\x01\x4a\xcf\xc1\xa1\x8b\x2b\xf2\x19\x6b\x88\xb9\x69\x74\xfe\x47\x8d\xa1\x84\xdd\xc3\xcf\x92\x25\xa0\x71\xd4\x75\x7d\xb2\x52\x82\x88\x9d\x9d\x71\xd7\x7d\xaf\xb0\x05\xf3\x0c\x56\x77\x79\xef\xbe\x9e\x50\x19\x50\x31\xbe\xe0\xe7\xca\xfd\x06\x0d\xd7\x46\x9d\x63\x01\xcf\xe2\x21\x68\x93\x11\x9d\x71\xd7\xbd\xf8\xc7\x2a\x28\x3f\x25\xaa\xed\x59\x52\x49\x95\x28\x35\x8a\x44\xc9\x52\x0e\x5e\x4c\xa9\x79\x25\xe0\x52\xa4\xad\xc2\x2f\xa9\x84\x67\xbd\x5c\xa9\x3f\xa0\x9a\x4d\x23\xb0\xb9\xd8\xaf\x85\x35\xcf\x7d\xb7\x89\xb1\xc0\x96\xae\xee\x52\x45\x17\xb0\x42\x80\x32\x5b\x7b\x3c\x2e\xaf\x89\xd0\x6d\x41\xec\x91\x4a\xda\xbc\x43\xcd\xf5\x0b\x5a\x08\x18\x56\x13\x06\xca\xf0\x23\x67\xd4\xc0\x70\x1e\x75\xbf\x3b\xa8\xdc\x4e\xeb\x91\x5e\xaf\xba\x5a\x32\xcf\xb9\x2b\x14\xe9\xed\xe1\xb6\x0c\x2f\x5c\x52\x2f\x33\xbb\x11\x89\xb4\x4a\xc1\x41\x9a\x5b\xb2\x9b\xc8\x19\xcd\xdc\x7b\xc2\x04\xa5\xce\x0e\x85\x82\x9c\x04\x95\xe0\xaf\x80\xa1\x5b\xdf\xb6\x06\x02\x76\x1d\x1f\x14\xd9\xeb\x20\xc4\xd6\x71\x8b\xce\xcd\x72\xa2\x12\x5a\x19\x99\x5d\x01\x4f\xa7\x68\x1a\x05\x0d\x35\xa8\xae\x17\x9b\xdc\x0c\x67\x34\xde\x8c\x93\x91\xfd\x1c\x9e\xa8\xd9\x83\xad\x40\x80\xb9\x6d\x59\xa7\x25\xde\x8a\x92\xbd\x40\x22\x3a\x11\x61\x98\xe3\xff\x98\x85\x2f\xb0\x1c\x21\x7b\x06\x01\xeb\xef\x58\xff\x56\x73\xdb\xe6\x9c\xd1\x58\xb8\xb2\x66\x6f\xd6\x39\x3c\x6c\x3f\x6d\x3f\xe3\xef\x59\x4f\x91\xe1\x9f\x55\xb4\x12\xa0\xfb\x5b\x4c\x77\x9f\xee\x07\x0f\xb6\xaa\xb1\xa5\x5c\x0e\x07\xdc\x23\x95\xfc\x08\xda\x6c\xd2\x4e\xde\x61\x69\x2b\xc1\xd9\x1d\x6a\x23\x69\x0b\x01\xee\x1b\x5d\xac\x3f\x25\x07\xd9\x8f\xa8\x5a\x6a\xbc\x93\x35\xb2\x86\xf3\xe2\x9a\x85\xbd\xd5\x9b\xdc\xe5\x07\x2a\x18\x43\xdb\x6d\xba\xb1\x56\xb7\x14\xf2\x22\x32\x53\xc2\x31\x44\x3f\xd3\x99\x08\xa3\xed\xcd\x00\x9b\xc9\x35\x08\xa5\x35\x47\x79\x00\xa6\xc0\x74\x77\xa7\x38\xc8\x55\x32\x70\x9d\xd5\xd9\x49\xf6\x4e\x99\x9d\x64\xae\xca\x9d\xd9\x53\xad\xff\xae\xe7\xe9\xd1\xc3\xa1\x88\xf3\x37\x5c\x04\x7e\x2f\x0f\x06\x55\x57\x67\x41\xb5\xfe\x3c\x2d\x1e\xf7\xe4\x8f\x7d\x22\xc9\x6e\x39\x7c\xb1\x15\x0c\xf5\xd7\xab\xa2\x6e\xb9\x7c\x98\x06\x12\xe5\xf8\x93\xb6\xe2\x91\x2a\xfd\x4c\xc5\xb5\x4b\xfb\xd4\x4c\xdb\xcc\x92\x0c\xb1\x85\xfd\x5f\xec\xef\xb3\xe5\x17\x14\xbc\x48\x5b\x44\xa3\x8d\xa2\xa7\xc2\x1a\xa4\xa7\x93\xc2\x97\x1b\x26\xf3\x86\x4a\xd8\x77\x68\xf7\xb0\xb9\x6c\xc9\xd5\x13\x48\x2a\xcd\xfd\xcf\x41\x6f\x18\x87\xbd\x9f\xc5\x56\x9a\x29\x7e\x32\x1c\x65\x04\xf8\x46\xef\x83\x4a\xdf\xcd\x23\x60\x1c\x8e\x5d\x87\x75\x9d\x74\x1f\x4c\xfe\x63\x4c\xa3\x55\x0c\x7e\x51\x68\x4f\x61\x7f\x74\x6d\x2e\xf4\x09\x19\xed\x12\x0d\xfc\xc7\xe1\xe0\xf7\x92\x00\x35\xd4\xa4\x3a\x13\xde\x76\xef\xd4\xe9\x01\x78\x59\xfe\x97\x0e\x91\x7c\x02\xfa\x2e\xa9\x57\xe4\xdd\xd3\xd3\xde\x99\x71\x72\xcb\xc6\xbe\xde\x1d\xc8\x79\xdf\xf4\xe7\xa7\xd7\x1f\xe6\x55\x97\xb9\x28\x82\xce\xd6\x4e\x10\xe9\x97\x5c\x8e\xf2\x12\xb5\xf0\xdd\x49\xd8\x6e\xc3\x8f\xab\x30\xfd\x81\x69\xf4\xd9\x1c\x8c\xe2\xb2\x49\x55\x2b\xf7\x94\x72\xb8\x75\xf2\x1b\xc2\xfb\xaf\x15\x2e\xb2\x8e\xbf\x78\x64\x67\x36\x52\x09\xad\x9c\xac\x26\xc0\x6f\x33\xc3\xbb\xc0\xbf\x79\x78\x4f\x86\xd4\xbd\xe3\xbf\x00\x00\x00\xff\xff\xd3\x84\x46\x32\x0e\x16\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
