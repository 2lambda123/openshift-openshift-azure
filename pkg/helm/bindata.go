// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x97\xcf\x6e\xe3\x36\x10\xc6\xef\x7e\x0a\x01\x7b\x69\x0e\xcd\xa9\xe8\xa1\x37\xc7\xcd\x36\x46\x1a\xd4\x58\xe7\xd2\x23\x4d\x8f\x15\xa2\x12\x29\x0c\x47\x69\xdd\xc5\xbe\xfb\x82\xa4\x28\x91\x14\xbd\x4b\xee\xc9\xc0\xcc\xf7\xfb\x38\xfc\x37\xb4\x3e\x34\xbb\xad\xde\x3c\x12\x3f\xef\xd8\x33\x5c\x7f\x6b\x3e\x7f\x6e\x1e\x98\x86\x5f\x7f\x69\x7e\x3a\xa0\x78\x67\x04\xcf\x70\xdd\xea\x87\x2b\x81\x6e\xee\x77\x4a\x5e\x44\x7b\x3f\xeb\xef\x9a\x2f\x5f\x26\x7a\x07\x48\x11\x6e\x02\x79\xd0\x64\x2c\x59\x33\xe6\x32\x5e\xe1\x58\xc1\x38\x1f\x51\x49\x3a\xa0\xfa\xef\x5a\x33\x62\x42\xad\x9c\x8a\xaa\x48\x01\xeb\x72\x04\x7c\x17\x1c\x8e\xa2\x95\x42\xb6\x35\x35\x65\xc8\xac\x63\x51\x6d\x39\x28\x74\xdb\x31\x62\x9d\xfa\x91\xfa\x42\x32\xeb\x58\x53\x5f\x04\x59\xb7\xcd\x87\x86\x2b\x49\x4c\x48\xc0\x46\xf4\xac\x05\xdd\x5c\x14\x36\x83\x3a\xeb\xcd\x0b\xd3\x04\x68\x4e\xda\xde\x64\xec\x28\xde\x31\xc9\x19\x2f\x17\xda\x1e\xf6\xb7\xd4\x3e\xb5\x88\x77\x4a\x12\xaa\xae\x03\xd4\xb7\xa0\x54\x62\xe0\x07\xa5\x48\x13\xb2\x61\x3b\x92\x62\xc3\x80\xea\x1d\x70\x6d\x70\x5b\xb6\x5e\xc8\x35\x9d\xc9\x1b\x6c\xdf\x0f\x0a\x69\x2d\x0f\xe2\xd3\xc2\x02\xf1\x73\xc3\x01\x49\x5c\x04\x67\x04\xae\x3b\x18\x5b\xc0\xba\x0e\x31\x33\x73\x97\x70\x91\xe2\x4e\xb1\xc8\x67\x87\x03\xd4\x56\x31\x11\x91\x43\x71\x05\x5e\xbc\xf4\xb9\x4e\x80\xa4\xca\x4e\xe9\x99\xc4\xa5\xbc\x63\xce\xf2\xf0\xf4\xa3\xea\x9a\xa1\x63\x12\xe2\xdd\x72\xe7\xaf\x76\xbf\x12\xea\x6e\x39\xec\x15\x7b\x96\x02\xd6\x65\x7b\xee\x85\x2c\x2f\xc4\xcb\x17\xb6\x68\xe8\x59\xe9\xb8\xb6\x45\x68\x19\x29\x5c\xda\x6f\x45\x09\x79\xfa\xa6\x73\x59\x81\x37\xc0\x60\xa5\x9f\xc7\x13\x74\x40\xb5\x47\x2c\x0f\xdf\xf2\xad\xd8\xc8\x15\x17\x78\xba\xfa\x7f\xa8\xd2\x18\xcd\x7b\x56\x54\x99\x50\xd6\xef\xaf\x01\xe4\xf1\x4d\x5c\x68\x9a\x48\x71\x85\x6b\x30\xe7\x57\x54\x5d\x86\x71\xb7\x37\xee\xd0\xb5\x17\xf5\x06\x9d\x79\x64\x2b\x2e\xee\x2d\xd0\xb7\x9b\xde\x4e\xe1\x67\x6e\xd5\x8d\xfb\x19\x91\x9d\x3a\xd0\x9b\x4f\x6a\x24\xf3\xef\xc1\x06\x8f\xe3\xe9\xac\x7a\x26\x64\xf4\xc8\xe4\x25\xc6\xfb\x30\x9e\x3a\xc1\x9f\x94\x26\xc9\xfa\xf8\x65\x8a\x53\xee\x0d\x63\x2d\xb8\xec\x47\x85\x3d\xa3\xe4\x25\x4b\xb2\xbe\x76\xa1\x79\xda\x2f\xa3\x09\x4c\x93\xdf\x72\xae\x46\x73\x31\xfd\xca\xd7\x6d\xc8\x0a\x0f\x77\xc4\x27\xed\x94\x56\xd6\x3e\xfa\x1d\x67\x2f\x9b\x8c\xb5\x16\x4a\x1e\x81\x23\xd0\x76\xa4\xb7\xd0\x72\x31\x48\x44\x2b\xf2\x51\xf2\xef\x82\x8f\x92\x1b\xee\x89\x0e\x4c\xeb\x7f\xcf\x39\xbd\xcf\x4d\x4b\xfe\xcf\x78\x02\xb7\xc6\x7a\x6a\xff\x73\x20\x9a\xf9\xdf\xac\xef\x5e\x18\xea\x37\xd6\x25\xfd\x7f\xd6\x27\x6d\xac\xd0\x24\x05\xfc\x39\x66\xff\x8f\xe8\xb7\x7f\xf3\x0a\x92\x49\xda\xff\xee\x4e\xd1\x0b\x93\xe2\x02\x9a\xee\x7d\xd8\xae\xd5\x78\xd2\x1c\xc5\x40\x42\xc9\x95\x30\x4e\xda\x0f\x13\xdb\x85\x56\x42\x1f\x5e\x24\x6e\x61\xb3\x32\x97\x32\xd2\x4f\xa0\xd5\x88\x1c\xfe\x40\x35\x0e\x89\x36\xca\x19\xf1\x9f\x8a\x33\x53\x48\xa2\xf3\xe1\x69\xfe\x12\xe0\x0c\xe7\xe6\x74\x6d\x84\xfd\xdf\x67\x2f\x2f\xe0\xfe\xb0\xba\xae\x26\xe8\xff\xad\x64\xaf\x67\x98\x70\xd5\xb6\x42\x13\x5e\x8f\xa4\x90\xb5\xfe\xd0\xc6\xbe\x59\x49\x08\x4f\x21\x7f\x43\x52\x70\x49\x47\x23\xba\x6b\x92\x4e\x22\xcd\x86\xc8\xd3\xeb\xeb\x21\xd8\x83\xe4\x34\xaf\x55\xf6\xe5\xef\x00\xe9\x85\x49\xd6\x4e\x6f\x4e\x74\x49\x72\x3e\xdf\x26\x66\x4f\x5d\xe1\x96\xd1\xda\x36\x8a\xaa\x07\x7a\x83\xb1\xd0\xeb\x5b\xfa\xcc\xd7\x5a\x37\x9a\xeb\xe4\xcf\x75\xfe\xe3\xcc\x6b\xc2\x65\x2e\x6f\xa2\x01\x71\x17\x3a\x14\xbd\x5e\xa1\xd8\xd1\xf6\x00\x57\x8c\xee\xf5\x01\x5d\x36\xf2\x2c\xb5\xe4\xd7\x00\x00\x00\xff\xff\xc1\xae\x62\xfb\x4d\x11\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
