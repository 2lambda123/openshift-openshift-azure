// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xbf\x8e\xe3\x36\x10\xc6\x7b\x3f\x85\x80\x6b\xb2\x45\xb6\x0a\x52\xa4\xf3\x3a\x7b\xd9\xc5\xc6\x88\xb0\x76\x93\x92\xa6\xc6\x32\x11\x89\x14\x86\xc3\x4d\x9c\xc3\xbd\x7b\x40\x4a\x94\x28\x8a\xba\x84\x4a\x65\x80\xf3\xfd\x3e\x0e\xff\xcc\x50\xfe\x54\x1c\xf6\x7a\xf7\x4c\xbc\x3a\xb0\x37\xb8\xff\x54\x7c\xf9\x52\x3c\x31\x0d\x3f\xfe\xf0\x2c\xb9\xaa\xa0\xf8\xae\x44\xf1\xc1\x08\xde\xe0\xbe\xd7\x4f\x77\x02\x5d\x3c\x1e\x94\xbc\x8a\xfa\x71\xa4\x1e\x8a\xaf\x5f\x07\x8f\x03\x20\x25\x4c\xec\x70\x1a\xb7\x11\xc7\xe7\xcf\x3f\xcd\x9d\x35\x6f\x30\xe7\x67\x54\x92\x4a\x54\x7f\xdd\xf3\x67\x8f\xd8\x85\x5f\x46\x46\x31\xe6\xbc\x4e\x80\x1f\x82\xc3\x49\xd4\x52\xc8\x3a\x3f\xbf\x04\x9f\xf4\xcd\xc8\x33\x85\x86\x9e\x07\x46\xac\x51\xdb\x73\x0d\xf9\xa4\x6f\x7e\xae\x33\xd4\x79\xee\x3e\x15\x5c\x49\x62\x42\x02\x16\xa2\x65\x35\xe8\xe2\xaa\xb0\xe8\x54\xa5\x77\x47\xa6\x09\xd0\xde\xcc\x57\x1b\x71\x73\x79\xc7\x28\x66\xbd\xfa\xa1\x7d\xf9\xba\xa6\xf6\xa1\x49\x7c\x50\x92\x50\x35\x0d\xa0\x5e\x83\x62\x89\x85\x9f\x94\x22\x4d\xc8\xba\xbd\x21\xc5\xba\x0e\xd5\x07\xe0\xd2\x60\x5d\xb6\xdc\xce\x25\x9d\x88\x3b\xec\x2e\x79\x42\xec\x47\xad\xe4\x6c\xa4\x84\x66\x29\x0a\xc6\x87\xbd\x07\xe2\x55\xc1\x01\x49\x5c\x05\x67\x04\x7d\xf3\xb1\x33\x03\x6e\x69\x40\x23\x39\x36\xa1\x7e\x24\xb3\x11\x4d\xd0\xe8\x53\xc2\xb6\x8c\x06\x6e\xe6\x93\x99\x8d\x47\xa6\xc6\xda\x08\x90\xb4\xa9\x41\x7b\x32\xf2\xca\x6d\xd4\x23\x14\x16\x11\xaa\xa6\xe8\x1a\x26\x61\x7e\xa2\xfd\x35\xde\x76\xa6\x11\xfb\x30\x55\x4e\xf6\xb9\xc6\x98\xf3\xda\x57\xad\x90\xb9\x49\x79\x68\x72\xc8\x48\x63\xd4\xf7\x74\x5d\x23\xd4\x8c\x14\x4e\x5d\x3f\x3b\x9d\xb4\xc7\xaa\x7f\x4e\xb2\x2b\x78\x70\x0e\x6f\xe6\x02\x0d\xd0\xb6\x2b\x99\xb6\x58\x73\xcf\x3e\xec\x05\x1d\x38\xf7\x6b\xf9\x1f\x59\xcf\x0d\xd2\xce\xd9\x19\x47\xac\x73\xfd\xad\x03\x79\xba\x89\x2b\x0d\x8b\xca\xcc\x76\x89\xa7\x5c\x33\x32\x4d\x90\x7d\x17\x98\x3f\x18\xdb\x0a\x7e\xc5\x23\xf1\xfe\x67\x37\x80\x35\xdc\xb7\xb0\xd6\x2d\xe7\x7b\xee\xd4\x45\xff\x63\x90\x5d\x1a\xd0\xbb\x77\x65\xc8\x7e\xe4\xb8\xc1\x93\xb9\x54\xaa\x65\x42\xf6\x8f\xdb\x91\x49\x71\x05\x4d\x8f\x69\x91\x75\x2f\xcd\xa5\x11\xfc\x45\x69\x92\xac\x85\x08\x9b\x07\xad\xdc\xbd\x90\xbd\xcd\x67\x85\x2d\xa3\xd9\x2b\xba\x88\xfa\xfc\x85\xe6\x71\x1f\x9e\x2d\x62\xd8\x80\x3d\xe7\xca\xd8\x62\xf6\x67\xb0\xe5\x80\x16\x26\xe1\x09\xf9\xa0\x5b\xd8\xca\x04\x3e\xf6\x2f\xfe\x5e\x36\xd8\x6b\x2d\x94\x3c\x01\x47\xa0\xbd\xa1\xdb\xd2\x78\xb2\x89\xa4\x0b\xfe\x59\xf2\xff\x88\x3f\x4b\x6e\xe9\x17\x2a\x99\xd6\x7f\x56\xeb\x94\x57\x0c\x07\xf2\x87\xb9\x40\x7f\x02\x7a\x78\x68\xc6\x81\xc4\x8e\xfc\xce\xda\xe6\xc8\x50\xdf\x58\x13\xbd\x34\x23\x15\x35\xc6\x2c\xab\x18\xf3\xb7\x9e\xfd\x6d\xd0\x5f\x94\xdd\x19\x24\x93\xf4\xfa\x73\x74\x43\xfd\xb0\xdb\x43\x73\xd1\x1c\x45\x47\x42\xc9\x85\x70\x1e\x74\xff\xc5\x5c\x2f\x5b\x08\xfd\xf0\x24\xe9\xb7\x3a\x29\xeb\x43\x56\xfa\x0e\x5a\x19\xe4\xf0\x0b\x2a\xd3\xc5\xd5\x17\xc6\xac\xf8\x57\xc5\x99\x4d\x24\xd2\xf9\xe1\x61\xfd\x12\xa0\x82\xaa\xb8\xdc\x0b\xd1\x76\x0a\xc9\x95\x3a\xe0\x6b\x39\xab\x39\x3f\xe8\xbf\x9a\xe6\xa5\x1c\x7c\x19\x85\x65\xfc\x0e\xb5\xd0\x84\xf7\x13\x29\x64\xb5\xbf\xd2\x73\xdf\xa4\x64\x06\xf7\xf5\x10\xe7\x13\x47\x43\xe4\xe5\x7c\x2e\x83\xed\x4c\x5e\xd5\xa5\xd6\x7d\x2e\x34\x80\x74\x64\x92\xd5\xc3\x53\x34\xab\x83\x75\xb7\x6f\x73\xa3\xb3\xce\xf6\x4c\x10\xae\x9f\xa2\x6a\x81\x6e\x60\xb2\x1c\xbf\x45\x25\xfe\x5f\x36\xc6\x56\x8c\xbf\xba\xe9\x3f\x92\x5e\x13\x6e\x7f\x6e\x47\x0d\xb8\x87\xd0\x27\xe3\x69\x0b\x91\xde\xc3\xdd\xd7\xec\x4c\x3c\x15\x78\xe4\x64\x31\x02\x8e\xff\x27\x00\x00\xff\xff\x27\x49\x0d\x57\x4d\x12\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
