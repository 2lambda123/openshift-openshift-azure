// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\xcd\x6e\xe3\x36\x10\xc7\xef\x7e\x0a\x02\xb9\x34\x87\xfa\x54\xf4\xd0\x9b\xac\x7a\x9b\x20\x9b\x46\xa8\x03\x14\x3d\x52\xd4\x58\x26\x96\x22\x55\x7e\xa4\xeb\xdd\xee\xbb\x17\x92\x2c\x99\x5f\x92\x43\x75\x4f\x06\xc8\xf9\xff\x66\x44\x0e\x87\x43\xdf\xa1\x3c\x53\x9b\xbd\x26\x55\x8e\x73\x90\xfa\x17\xf4\xf5\x2b\xda\x61\x05\x3f\xff\xb4\xe7\x44\x54\x80\x7e\xe8\x86\x33\xb5\x3b\x6b\x50\x68\x9b\x0b\x7e\xa4\xf5\xf6\x2a\xb8\x47\xff\xa2\xbf\x8d\xd0\x80\xbe\x7d\xdb\xe4\xf8\x09\xce\x11\x44\x21\xe9\x1b\xd6\xf0\x04\x67\x1f\xd4\x2b\x3c\x46\x42\x1c\x91\x18\x3e\x48\xc1\x75\x21\xc5\xe7\x73\x12\xc9\x97\x39\xcc\x03\xc8\x37\x4a\xe0\x40\x6b\x4e\x79\x9d\xfe\x95\x11\xfd\x22\x3f\x21\xee\x98\x34\xc6\xce\xb1\xc6\x4c\xac\x62\x3b\x52\x87\xbd\xb9\x43\x44\x70\x8d\x29\x07\x89\x68\x83\x6b\x50\xe8\x28\x24\x6a\x45\xa5\x36\xcf\x58\x69\x90\x5d\xa6\x3c\x76\x33\xbd\xcf\x91\xec\xcd\xd9\xcc\x61\x2a\x2b\x1e\xe7\x54\xe3\x54\x28\xca\x05\xd7\x52\x30\x06\x52\xcd\x89\x7d\x13\x1b\xf2\xbb\xa8\x20\xd4\x4d\xa3\xf3\x8b\x1a\x8a\x22\xf3\x8e\xfc\xcc\x49\x44\x34\x8e\xda\xa6\xaf\x86\x73\x60\xa1\xb1\x35\x6e\x9b\x17\x52\x34\xa0\x4f\x60\x54\x17\xf7\xfe\x73\x2b\xa4\x06\x19\xca\x17\xec\x6c\xdc\x1f\x50\x53\xa5\xe5\x39\x04\x38\x33\x8e\x44\x98\xa8\x47\x6b\xdc\x36\xcf\xbe\x18\x09\xf9\xc7\xc8\x6e\x3b\x33\xb1\xa0\x72\xc1\x95\x60\x91\x2d\x8b\x19\x38\x3e\xb9\xa2\x25\x83\xcb\x26\xed\xa4\xf8\x14\x0b\x78\xd6\xca\x46\xfd\x09\xe5\x6c\x18\xde\x9c\x2d\x7b\xc9\x8c\x3e\xf5\xd5\x26\x94\x79\x73\xf1\xdd\x5d\xda\xd1\x05\x59\xc6\x40\xea\x9d\x39\x1e\x97\x73\xc2\x37\x5b\x80\x3d\x63\x8e\xeb\x77\xd0\x6c\x3b\xaf\x84\x80\x26\x15\x22\x20\x35\x3d\x52\x82\x35\x0c\xf7\x51\xb7\xee\x20\x53\x2b\xad\xa3\x74\x6a\xd5\x75\x26\xf1\x9e\xbb\x8a\x02\x5e\x01\xeb\x22\xbc\xe8\xa2\xbc\xc4\xe8\x46\x49\xc0\xca\x19\x05\xae\xd7\x44\x37\x29\x67\x98\xa9\x7d\xc2\x24\x8a\xdd\x1d\x52\x30\xd4\x32\xcc\xc1\xcd\x80\xa1\x5a\xaf\xcb\x01\x4f\x7b\x1f\x5e\x14\xc9\x79\xe0\xcb\xee\xc3\x12\x9d\x1a\xe5\xa4\x8a\xb0\x12\x22\xbb\x0a\x1c\x4e\x56\xd7\x12\x6a\xac\x85\xbc\x36\x36\xa9\x11\xce\x30\x6e\xfa\x49\x88\x7e\x4e\x1e\xd9\xb3\x27\x53\x02\x03\xbd\x2e\xad\xe3\x88\x5b\x5e\x92\x13\x24\x50\x47\x3c\x0c\xdf\xf8\x3f\xbe\xc2\x05\x2c\x7b\x48\xfe\x02\x4f\xeb\x9e\x58\xb7\xab\x59\x77\x38\x67\x18\x0b\x2d\x6b\xf2\x61\x9d\x93\xfb\xe5\xa7\xe9\xbf\xf8\x47\xd2\xab\xd0\xf0\x63\x24\x2e\x19\xa8\xbe\x8b\xe9\xfa\xe9\x7e\xf0\x60\xca\x4a\x34\x98\xf2\xe9\x82\x1b\x5a\xde\x8b\xa3\xee\xaa\x6b\xbb\xe2\x05\x6a\xfb\x22\xc9\x09\x94\x96\x5d\x4a\x17\x52\x1c\x29\x83\xed\x4b\x0b\xfc\x70\xa2\x47\x6d\x75\x42\x21\xdb\xb9\x63\x4d\xc9\x28\x79\x10\x4a\x73\xdc\xc0\xf7\xf1\xea\x32\x6d\x6f\xfd\x9d\x3c\x58\x7d\x10\xb2\xc1\xda\xb9\xc7\x83\x59\x7f\x15\xa9\x22\x7e\x25\x77\x96\xf2\x12\x6f\x46\x88\x30\xdd\x11\x1f\x33\x63\x4d\xda\x5c\x20\x33\x09\x33\xba\xe8\xbf\x74\xc6\xc3\x38\x77\xd3\xc1\x76\x32\xf5\x5c\x29\x45\x05\x3f\x00\x91\xa0\xbb\x4e\x2d\x74\x72\x45\x7a\xa6\xb3\x9c\x3d\x27\xef\xc4\xec\x39\xb1\x29\x0f\xba\xc0\x4a\xfd\x53\xcd\xab\x47\x0b\x6f\xd7\x3e\x99\x12\x86\x6d\x52\x9b\xac\x6a\x28\x7f\x9a\x06\x22\xab\xf6\x17\x6e\xd8\x33\x96\xea\x84\xd9\xb5\x74\xbb\xaa\x99\x5a\x9a\x84\xf4\x65\x0b\x45\x21\x2b\x1e\x93\xf1\x0b\x04\xc7\xd3\x4e\x08\xdd\x1d\xa6\x36\x33\x5a\xe0\xb6\x95\xe2\x6d\xc5\xc7\xdc\xa0\xf8\xc5\x08\x77\xaf\x9d\xcb\xc9\xd9\xbc\x02\xc7\x5c\x3f\xfe\x7a\xfb\xe4\x67\x5f\xc6\xf3\x3e\x6a\x9c\x35\x33\xa5\x22\x92\xb6\x9a\x0a\x9e\x46\x73\x95\xce\xff\x33\xfd\xe5\xf0\x1e\xda\x65\xa8\x90\x94\x13\xda\x62\x36\xb2\x47\x42\x48\x1d\x72\x7c\x3d\x79\xd0\xbb\x6f\x45\x25\x8c\x24\xf0\x9b\x14\xa6\x4d\x59\x00\x47\x68\x13\x3f\x0a\x82\xbb\x55\x99\x81\x8d\xd3\xde\xf6\x72\x80\x0a\x2a\x54\x9e\x11\x6d\xba\xb7\xf6\xf4\x88\x3d\x68\x21\x71\x3d\xd6\x9d\xe8\x33\xd6\x35\x89\xbd\x84\x1f\x5e\x5f\x0b\x6b\xed\xa2\x85\x20\xb4\x75\xfa\x38\xeb\x8d\xd6\xf7\x00\x4e\xd5\x99\xa7\x2e\xeb\x02\x0f\x2a\x99\x1d\x51\xc4\x5f\xa3\x29\xe4\x25\xd5\xc2\x7f\x67\xcc\x74\xf5\xc9\x4a\xfd\xc8\x9f\x64\xa3\xcd\xf6\xa0\x25\xe5\x75\x6c\xb7\x52\xef\x3e\x4b\x77\x1f\xfd\x1f\xe4\xfd\xad\x91\x2d\xb9\x0f\xff\xb5\x49\x8e\x6c\x54\x45\x58\x29\x51\x4d\x02\xb7\x2a\x0e\x6f\x9b\xa0\x0d\xba\x3e\x7b\x62\xdd\xcc\xe6\x0e\x55\xf0\x06\x4c\xb4\x0d\x70\x8d\x14\xe8\xae\xd9\x52\x9b\xe9\xa4\x16\x86\xb1\x5b\x09\x12\x31\xb6\x7d\xfc\x17\x00\x00\xff\xff\xe6\xdd\xf5\x2c\x36\x17\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
