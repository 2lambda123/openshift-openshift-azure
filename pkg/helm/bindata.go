// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xbf\x8e\xe3\x36\x10\xc6\x7b\x3f\x85\x80\x6b\xb2\x45\xb6\x0a\x52\xa4\xd3\x3a\x7b\x59\x63\x63\x44\x58\xbb\x49\x49\x53\x63\x99\x88\x44\x0a\xe4\x70\x13\xe7\x70\xef\x1e\x90\x14\x25\x8a\xa2\xf6\x42\x5d\x65\x80\xf3\xfd\x3e\x0e\xff\xcd\x58\x9f\x8a\x7d\xa9\x76\xcf\x48\xeb\x3d\x79\x85\xfb\x2f\xc5\x97\x2f\xc5\x13\x51\xf0\xf3\x4f\xcf\x9c\x8a\x1a\x8a\x1f\x2a\xc9\xde\x09\xc2\x2b\xdc\x4b\xf5\x74\x47\x50\xc5\xe3\x5e\xf0\x2b\x6b\x1e\x47\xea\xa1\xf8\xfa\x75\xf0\xd8\x83\xc4\x84\x89\x19\x4e\xe3\x26\x62\xf9\xfc\xf9\xa7\xb9\xb3\xe6\x0d\xe6\xfc\x2c\x05\xc7\x4a\x8a\x7f\xee\xf9\xb3\x47\xec\xc2\x2f\x23\xa3\x18\xb3\x5e\x27\x90\xef\x8c\xc2\x89\x35\x9c\xf1\x26\x3f\xbf\x04\x9f\xf4\xcd\xc8\x33\x85\x86\x9e\x7b\x82\xa4\x15\xdb\x73\x0d\xf9\xa4\x6f\x7e\xae\x33\xd4\x7a\xee\x3e\x15\x54\x70\x24\x8c\x83\x2c\x58\x47\x1a\x50\xc5\x55\xc8\xa2\x17\xb5\xda\x1d\x89\x42\x90\xe6\x66\x1e\x4c\xc4\xce\xe5\x1d\xa3\x98\xf1\x72\x43\x65\x75\x58\x53\xfb\xd0\x24\xde\x0b\x8e\x52\xb4\x2d\x48\xb5\x06\xc5\x12\x03\x3f\x09\x81\x0a\x25\xe9\x4b\x8d\x82\xf4\xbd\x14\xef\x20\x97\x06\xeb\xb2\xe5\x76\x2e\xe9\x44\xdc\x62\x77\x4e\x13\x62\x3f\x6a\x24\x67\xcd\x39\xb4\x4b\x51\x30\x3e\xec\x3d\x20\xad\x0b\x0a\x12\xd9\x95\x51\x82\xe0\x8a\x8f\x99\x19\xe4\x96\x02\x34\x92\x63\x11\x72\x23\x99\x85\x68\x82\x46\x9f\x0a\xb6\x65\x34\x70\x33\x9f\xcc\x6c\x3c\x32\x15\xd6\x96\x01\xc7\x4d\x05\xda\x93\x91\x57\x6e\xa1\x1e\xa1\xf0\x11\x49\xd1\x16\x7d\x4b\x38\xcc\x4f\xd4\x5d\xe3\x6d\x67\x1a\xb1\x0f\xd3\xcb\xc9\x3e\xd7\x18\xb3\x5e\x65\xdd\x31\x9e\x9b\x94\x87\x26\x87\x8c\x34\x46\xbd\xa3\x9b\x46\x42\x43\x50\xc8\xa9\xea\x67\xa7\x93\xf6\x58\xf5\xcf\x49\x76\x05\x0f\xce\xe1\x55\x5f\xa0\x05\xdc\x76\x25\xd3\x16\x6b\xee\xd9\x87\xbd\xa0\x03\x67\xb7\x96\xef\xc8\x7a\x6e\x90\x76\xce\xce\x38\x62\xad\xeb\x1f\x3d\xf0\xd3\x8d\x5d\x71\x58\x54\x66\xb6\x4b\x3c\xe5\x9a\x91\x69\x82\x74\x55\x60\xde\x30\xb6\x3d\xf8\x15\x8f\x44\xff\xcf\x2e\x00\x6b\xb8\x2f\x61\x9d\x5d\xce\x8f\xd4\xaa\x0b\xf7\xa3\x25\xb9\xb4\xa0\x76\x6f\x42\xa3\xf9\x93\x63\x07\x4f\xfa\x52\x8b\x8e\x30\xee\x9a\xdb\x91\x70\x76\x05\x85\x8f\x69\x91\x71\xaf\xf4\xa5\x65\xf4\x45\x28\xe4\xa4\x83\x08\x9b\x07\x8d\xdc\x76\x48\x67\xf3\x59\xc8\x8e\xe0\xac\x8b\x2e\xa2\x3e\x7f\xa6\x68\x5c\x87\x67\x8b\x18\x36\xa0\xa4\x54\x68\xf3\x98\xfd\x19\x6c\x39\xa0\x85\x49\x78\x42\x3e\x68\x17\xb6\x32\x81\x8f\x7d\xc3\xdf\xcb\x06\x7b\xa5\x98\xe0\x27\xa0\x12\xb0\xd4\x78\x5b\x1a\x4f\x36\x91\x74\xc1\x3f\x73\xfa\x3f\xf1\x67\x4e\x0d\xfd\x82\x15\x51\xea\xef\x7a\x9d\xf2\x8a\xe1\x40\xfe\xd2\x17\x70\x27\xa0\x86\x46\x33\x0e\x24\x76\xe4\x4f\xd2\xb5\x47\x22\xd5\x8d\xb4\x51\xa7\x19\xa9\xa8\x30\x66\x59\xc5\x58\xe2\x45\x95\xd5\x21\xdb\xf6\x03\x87\x87\xd5\x7f\xaa\xd9\xb3\x7c\xc3\xc5\xbf\x60\xf2\xaf\x96\xfe\xd2\xef\xce\xc0\x09\xc7\xc3\xaf\xd1\x6b\xf3\xc3\x76\xf9\xfa\xa2\xa8\x64\x3d\x32\xc1\x17\xc2\x79\xd0\x7e\x57\xda\xba\xbc\x10\xfa\xe1\x49\xe2\xae\x4d\x52\xe6\x42\x46\xfa\x06\x4a\x68\x49\xe1\x37\x29\x74\x1f\x57\x92\x30\x66\xc4\xbf\x0b\x4a\x4c\x22\x91\xce\x0f\x0f\xeb\xe7\x00\x35\xd4\xc5\xe5\x5e\xb0\xae\x17\x12\x77\x6f\xd0\x30\x85\xf2\x7e\x42\x21\x49\xe3\x1f\xd5\xac\x9a\xa4\x25\x2e\xc1\x21\xe2\x8e\xf8\x50\xa5\x39\x1f\x0d\x91\x97\xf3\xb9\x0a\x36\x21\xf9\x58\x96\x5a\xfb\x87\xa5\x05\x89\x47\xc2\x49\x33\x34\xc3\xd9\x4b\x5c\x77\xfb\x98\x1b\x9d\x55\xb6\x67\x82\xb0\x15\x5d\x8a\x0e\xf0\x06\x3a\xcb\xf1\x23\x2a\xf1\x85\xdb\x6a\xf3\x66\xfd\x85\x4b\x7f\xca\x7a\x4d\xb8\xfd\xb9\x35\x3d\xe0\x1e\x42\x9f\x8c\xe6\x1a\x22\xce\x43\xe8\x0d\x7f\x56\x46\x2a\xf0\xc8\xc9\x62\x04\x5c\x49\x70\x1f\x9c\xf3\xbe\x3b\xfb\x16\x0d\xbb\xee\x7f\x01\x00\x00\xff\xff\xd7\xf7\x56\x62\xfd\x12\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
