// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/values.yaml
package helm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _valuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x97\xbf\x8e\xe3\x36\x10\xc6\x7b\x3f\x85\x80\x6b\xb2\x45\xb6\x0a\x52\xa4\xf3\x3a\x7b\x59\x63\x63\x44\x38\x6f\x93\x92\xa6\xc6\x32\x11\x89\x14\x86\xa3\x4d\x9c\xc3\xbd\x7b\x40\x52\x94\x28\x8a\xda\x84\x4a\x65\x80\xf3\xfd\x3e\x0e\xff\xcc\xd0\xfa\x54\x1c\xf6\x7a\xf7\x4c\xbc\x3a\xb0\x57\xb8\xff\x54\x7c\xfd\x5a\x3c\x31\x0d\x3f\xfe\xf0\x2c\xb9\xaa\xa0\xf8\xae\x44\xf1\xce\x08\x5e\xe1\xbe\xd7\x4f\x77\x02\x5d\x3c\x1e\x94\xbc\x8a\xfa\x71\xa4\x1e\x8a\x6f\xdf\x06\x8f\x03\x20\x25\x4c\xcc\x70\x1a\x37\x11\xcb\xe7\xcf\x3f\xcd\x9d\x35\x6f\x30\xe7\x67\x54\x92\x4a\x54\x7f\xdd\xf3\x67\x8f\xd8\x85\x5f\x46\x46\x31\x66\xbd\xce\x80\xef\x82\xc3\x59\xd4\x52\xc8\x3a\x3f\xbf\x04\x9f\xf4\xcd\xc8\x33\x85\x86\x9e\x07\x46\xac\x51\xdb\x73\x0d\xf9\xa4\x6f\x7e\xae\x33\xd4\x7a\xee\x3e\x15\x5c\x49\x62\x42\x02\x16\xa2\x65\x35\xe8\xe2\xaa\xb0\xe8\x54\xa5\x77\x27\xa6\x09\xd0\xdc\xcc\xa3\x89\xd8\xb9\xbc\x63\x14\x33\x5e\x6e\x68\x5f\x1e\xd7\xd4\x3e\x34\x89\x0f\x4a\x12\xaa\xa6\x01\xd4\x6b\x50\x2c\x31\xf0\x93\x52\xa4\x09\x59\xb7\xef\x49\xb1\xae\x43\xf5\x0e\xb8\x34\x58\x97\x2d\xb7\x73\x49\x27\xe2\x16\xbb\x4b\x9e\x10\xfb\xd1\x61\x53\x81\x78\x55\x70\x40\x12\x57\xc1\x19\x81\xeb\x2a\xc6\x12\x70\x4b\x67\x19\xc9\xb1\xbb\xb8\x91\xcc\x0e\x33\x41\xa3\x4f\x09\xdb\x32\x1a\xb8\x99\x4f\x66\x36\x1e\x99\x3a\x66\x23\x40\xd2\xa6\xce\xeb\xc9\xc8\x2b\xb7\x03\x8f\x50\x58\x1d\xa8\x9a\xa2\x6b\x98\x84\xf9\x89\xba\xfb\xb9\xed\x4c\x23\xf6\x61\x2a\x89\xec\x73\x8d\x31\xeb\xb5\xaf\x5a\x21\x73\x93\xf2\xd0\xe4\x90\x91\xc6\xa8\x77\x74\x5d\x23\xd4\x8c\x14\x4e\xed\x3c\x3b\x9d\xb4\xc7\xaa\x7f\x4e\xb2\x2b\x78\x70\x0e\xaf\xfd\x05\x1a\xa0\x6d\x57\x32\x6d\xb1\xe6\x9e\x7d\xd8\x0b\x3a\x70\x76\x6b\xf9\x1f\x59\xcf\x0d\xd2\xce\xd9\x19\x47\xac\x75\xfd\xad\x03\x79\xbe\x89\x2b\x0d\x8b\xca\xcc\x76\x89\xa7\x5c\x33\x32\x4d\x90\xae\x0b\xcc\x5f\x82\x6d\x05\xbf\xe2\x91\x78\xd8\xb3\x1b\xc0\x1a\xee\x5b\x58\x6b\x97\xf3\x3d\xb7\xea\xc2\xfd\xf4\xc8\x2e\x0d\xe8\xdd\x17\xd5\x93\xf9\xf7\x62\x07\xcf\xfd\xa5\x52\x2d\x13\x72\xf6\xb4\xa5\x25\xc6\xbb\xec\x2f\x8d\xe0\x2f\x4a\x93\x64\xed\xfc\x3d\x9c\x87\x8c\xd8\xbe\x8e\x2e\xfa\x59\x61\xcb\x68\xa6\x5f\x44\x7d\xee\x42\xf3\xb8\x07\xcf\x16\x30\x2c\x7e\xcf\xb9\xea\x4d\x21\xfb\xfd\xdf\x72\x38\x0b\x93\xf0\x74\x7c\xd0\x2e\x6c\x65\x02\x1f\xfb\x17\x7f\x2f\x1b\xec\xb5\x16\x4a\x9e\x81\x23\xd0\xbe\xa7\xdb\xd2\x78\xb2\x89\xa4\x0b\xfe\x59\xf2\xff\x88\x3f\x4b\x6e\xe8\x17\x2a\x99\xd6\x7f\x56\xeb\x94\x57\x0c\x07\xf2\x47\x7f\x01\x77\x02\x7a\x78\x64\xc6\x81\xc4\x8e\xfc\xce\xda\xe6\xc4\x50\xdf\x58\x13\xbd\x32\x23\x15\x35\xc5\x2c\xab\x18\xf3\x37\x9e\xfd\xdd\xa3\xbf\x28\xbb\x37\x90\x4c\xd2\xf1\x67\x77\xdf\x4e\x4c\x8a\x2b\x68\x7a\xf4\xc3\x76\x0f\xfb\x8b\xe6\x28\x3a\x12\x4a\x2e\x84\xf3\xa0\xfd\xc0\xb2\x7d\x6c\x21\xf4\xc3\x93\xc4\x6d\x75\x52\xe6\x42\x46\xfa\x05\xb4\xea\x91\xc3\x2f\xa8\xfa\x2e\xd2\xce\x62\x46\xfc\xab\xe2\xcc\x24\x12\xe9\xfc\xf0\xb0\x7e\x09\x50\x41\x55\x5c\xee\x85\x68\x3b\x85\x64\xcb\x1c\xf0\x58\x2e\x0a\xdb\x0c\xfa\x7f\x4c\xc9\x42\x0e\x03\x2e\xdb\x5a\x68\xc2\xfb\x99\x14\xb2\xda\x5f\xe9\xb9\x6f\x52\x12\xc2\xc3\x90\xaf\xa2\x18\x9c\xc2\xb3\x19\x5d\x11\xc5\x8b\x88\xa3\x21\xf2\xf2\xf6\x56\x06\x67\x90\xbc\xdf\x4b\xad\xfd\x7f\xd1\x00\xd2\x89\x49\x56\x0f\x6f\xd7\xac\x78\xd6\xdd\x3e\xe6\x46\x67\x9d\xed\x99\x20\x6c\x0b\x46\xd5\x02\xdd\xa0\xcf\x72\xfc\x88\x4a\x7c\x69\x36\xbd\x29\x33\x7f\xdf\xd3\x9f\x94\x5e\x13\x6e\x7f\x6e\x1b\x0e\xb8\x87\xd0\x27\xe3\x2d\x0c\x11\xe7\x61\x2f\x79\x76\x26\x9e\x0a\x3c\x72\xb2\x18\x01\xcb\xff\x13\x00\x00\xff\xff\x11\xbd\x99\x76\x57\x12\x00\x00")

func valuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_valuesYaml,
		"values.yaml",
	)
}

func valuesYaml() (*asset, error) {
	bytes, err := valuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "values.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"values.yaml": valuesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"values.yaml": {valuesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
