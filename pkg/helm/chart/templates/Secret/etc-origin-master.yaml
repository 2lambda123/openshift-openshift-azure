apiVersion: v1
kind: Secret
metadata:
  name: etc-origin-master
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
data:
  master.etcd-ca.crt: {{ .Values.EtcdCaCert | quote }}
  ca.crt: {{ .Values.CaCert | quote }}
  ca.key: {{ .Values.CaKey | quote }}
  front-proxy-ca.crt: {{ .Values.FrontProxyCaCert | quote }}
  service-signer.crt: {{ .Values.ServiceSigningCaCert | quote }}
  service-signer.key: {{ .Values.ServiceSigningCaKey | quote }}
  master.etcd-client.crt: {{ .Values.EtcdClientCert | quote }}
  master.etcd-client.key: {{ .Values.EtcdClientKey | quote }}
  aggregator-front-proxy.crt: {{ .Values.AggregatorFrontProxyCert | quote }}
  aggregator-front-proxy.key: {{ .Values.AggregatorFrontProxyKey | quote }}
  master.kubelet-client.crt: {{ .Values.MasterKubeletClientCert | quote }}
  master.kubelet-client.key: {{ .Values.MasterKubeletClientKey | quote }}
  master.proxy-client.crt: {{ .Values.MasterProxyClientCert | quote }}
  master.proxy-client.key: {{ .Values.MasterProxyClientKey | quote }}
  master.server.crt: {{ .Values.MasterServerCert | quote }}
  master.server.key: {{ .Values.MasterServerKey | quote }}
  serviceaccounts.public.key: {{ .Values.ServiceAccountPublicKey | quote }}
  serviceaccounts.private.key: {{ .Values.ServiceAccountPrivateKey | quote }}
  htpasswd: {{ .Values.HtPasswd | quote }}
  openshift-master.kubeconfig: {{ .Values.MasterKubeconfig | quote }}
stringData:
  master-config.yaml: |
    admissionConfig:
      pluginConfig:
        BuildDefaults:
          configuration:
            apiVersion: v1
            kind: BuildDefaultsConfig
        BuildOverrides:
          configuration:
            apiVersion: v1
            kind: BuildOverridesConfig
        PodPreset:
          configuration:
            apiVersion: v1
            kind: DefaultAdmissionConfig
        openshift.io/ImagePolicy:
          configuration:
            apiVersion: v1
            executionRules:
            - matchImageAnnotations:
              - key: images.openshift.io/deny-execution
                value: "true"
              name: execution-denied
              onResources:
              - resource: pods
              - resource: builds
              reject: true
              skipOnResolutionFailure: true
            kind: ImagePolicyConfig
    aggregatorConfig:
      proxyClientInfo:
        certFile: aggregator-front-proxy.crt
        keyFile: aggregator-front-proxy.key
    apiLevels:
    - v1
    apiVersion: v1
    authConfig:
      requestHeader:
        clientCA: front-proxy-ca.crt
        clientCommonNames:
        - aggregator-front-proxy
        extraHeaderPrefixes:
        - X-Remote-Extra-
        groupHeaders:
        - X-Remote-Group
        usernameHeaders:
        - X-Remote-User
    controllerConfig:
      election:
        lockName: openshift-master-controllers
      serviceServingCert:
        signer:
          certFile: service-signer.crt
          keyFile: service-signer.key
    controllers: "*"
    corsAllowedOrigins:
    dnsConfig:
      bindAddress: 0.0.0.0:8053
      bindNetwork: tcp4
    etcdClientInfo:
      ca: master.etcd-ca.crt
      certFile: master.etcd-client.crt
      keyFile: master.etcd-client.key
      urls:
      - https://master-etcd:2379
    etcdStorageConfig:
      kubernetesStoragePrefix: kubernetes.io
      kubernetesStorageVersion: v1
      openShiftStoragePrefix: openshift.io
      openShiftStorageVersion: v1
    imageConfig:
      format: {{ .Values.ImageConfigFormat | quote }}
    imagePolicyConfig:
      internalRegistryHostname: docker-registry.default.svc:5000
    kind: MasterConfig
    kubeletClientInfo:
      ca: ca.crt
      certFile: master.kubelet-client.crt
      keyFile: master.kubelet-client.key
      port: 10250
    kubernetesMasterConfig:
      apiServerArguments:
        cloud-config:
        - /etc/origin/cloudprovider/azure.conf
        cloud-provider:
        - azure
        kubelet-preferred-address-types:
        - InternalIP
        runtime-config:
        - settings.k8s.io/v1alpha1=true
        storage-backend:
        - etcd3
        storage-media-type:
        - application/vnd.kubernetes.protobuf
      controllerArguments:
        cloud-config:
        - /etc/origin/cloudprovider/azure.conf
        cloud-provider:
        - azure
        cluster-signing-cert-file:
        - /etc/origin/master/ca.crt
        cluster-signing-key-file:
        - /etc/origin/master/ca.key
      masterIP: 127.0.0.1
      proxyClientInfo:
        certFile: master.proxy-client.crt
        keyFile: master.proxy-client.key
      schedulerConfigFile: /etc/origin/master/scheduler.json
      servicesSubnet: 172.30.0.0/16
    masterClients:
      openshiftLoopbackClientConnectionOverrides:
        acceptContentTypes: application/vnd.kubernetes.protobuf,application/json
        burst: 600
        contentType: application/vnd.kubernetes.protobuf
        qps: 300
      openshiftLoopbackKubeConfig: openshift-master.kubeconfig
    masterPublicURL: {{ print "https://" .Values.PublicHostname | quote }}
    networkConfig:
      clusterNetworks:
      - cidr: 10.128.0.0/14
        hostSubnetLength: 9
      externalIPNetworkCIDRs:
      - 0.0.0.0/0
      networkPluginName: redhat/openshift-ovs-subnet
      serviceNetworkCIDR: 172.30.0.0/16
    oauthConfig:
      assetPublicURL: {{ print "https://" .Values.PublicHostname "/console/" | quote }}
      grantConfig:
        method: auto
      identityProviders:
      - login: true
        mappingMethod: claim
        name: Azure AD
        provider:
          apiVersion: v1
          claims:
            email:
            - email
            id:
            - sub
            name:
            - name
            preferredUsername:
            - unique_name
          clientID: {{ .Values.ClientID | quote }}
          clientSecret: {{ .Values.ClientSecret | quote }}
          kind: OpenIDIdentityProvider
          urls:
            authorize: {{ print "https://login.microsoftonline.com/" .Values.TenantID "/oauth2/authorize" | quote }}
            token: {{ print "https://login.microsoftonline.com/" .Values.TenantID "/oauth2/token" | quote }}
      - challenge: true
        login: true
        mappingMethod: claim
        name: Local password
        provider:
          apiVersion: v1
          file: /etc/origin/master/htpasswd
          kind: HTPasswdPasswordIdentityProvider
      masterCA: ca.crt
      masterPublicURL: {{ print "https://" .Values.PublicHostname | quote }}
      masterURL: {{ print "https://" .Values.PublicHostname | quote }}
      sessionConfig:
        sessionMaxAgeSeconds: 3600
        sessionName: ssn
        sessionSecretsFile: /etc/origin/master/session-secrets.yaml
      tokenConfig:
        accessTokenMaxAgeSeconds: 86400
        authorizeTokenMaxAgeSeconds: 500
    projectConfig:
      defaultNodeSelector: node-role.kubernetes.io/compute=true
      securityAllocator:
        mcsAllocatorRange: s0:/2
        mcsLabelsPerProject: 5
        uidAllocatorRange: 1000000000-1999999999/10000
    routingConfig:
      subdomain: {{ .Values.RoutingConfigSubdomain | quote }}
    serviceAccountConfig:
      managedNames:
      - default
      - builder
      - deployer
      masterCA: ca.crt
      privateKeyFile: serviceaccounts.private.key
      publicKeyFiles:
      - serviceaccounts.public.key
    servingInfo:
      bindAddress: 0.0.0.0:443
      bindNetwork: tcp4
      certFile: master.server.crt
      clientCA: ca.crt
      keyFile: master.server.key
      maxRequestsInFlight: 500
      requestTimeoutSeconds: 3600
    volumeConfig:
      dynamicProvisioningEnabled: true

  session-secrets.yaml: |
    apiVersion: v1
    kind: SessionSecrets
    secrets:
    - authentication: {{ .Values.SessionSecretAuth | quote }}
      encryption: {{ .Values.SessionSecretEnc | quote }}

  scheduler.json: |
    {
      "apiVersion": "v1",
      "kind": "Policy",
      "predicates": [
        {
          "name": "NoVolumeZoneConflict"
        },
        {
          "name": "MaxEBSVolumeCount"
        },
        {
          "name": "MaxGCEPDVolumeCount"
        },
        {
          "name": "MaxAzureDiskVolumeCount"
        },
        {
          "name": "MatchInterPodAffinity"
        },
        {
          "name": "NoDiskConflict"
        },
        {
          "name": "GeneralPredicates"
        },
        {
          "name": "PodToleratesNodeTaints"
        },
        {
          "name": "CheckNodeMemoryPressure"
        },
        {
          "name": "CheckNodeDiskPressure"
        },
        {
          "name": "CheckVolumeBinding"
        },
        {
          "argument": {
            "serviceAffinity": {
              "labels": [
                "region"
              ]
            }
          },
          "name": "Region"
        }
      ],
      "priorities": [
        {
          "name": "SelectorSpreadPriority",
          "weight": 1
        },
        {
          "name": "InterPodAffinityPriority",
          "weight": 1
        },
        {
          "name": "LeastRequestedPriority",
          "weight": 1
        },
        {
          "name": "BalancedResourceAllocation",
          "weight": 1
        },
        {
          "name": "NodePreferAvoidPodsPriority",
          "weight": 10000
        },
        {
          "name": "NodeAffinityPriority",
          "weight": 1
        },
        {
          "name": "TaintTolerationPriority",
          "weight": 1
        },
        {
          "argument": {
            "serviceAntiAffinity": {
              "label": "zone"
            }
          },
          "name": "Zone",
          "weight": 2
        }
      ]
    }
