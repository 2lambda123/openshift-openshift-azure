package manifests

import (
	"path/filepath"

	"github.com/ghodss/yaml"
	"github.com/openshift/installer/pkg/asset"
	"github.com/pkg/errors"
	v1core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	manifestDir = "manifests"
)

var (
	aroOperatorNamespaceFilename = filepath.Join(manifestDir, "aro-operator-00.yml")
	aroOperatorFilename          = filepath.Join(manifestDir, "aro-operator-01.yml")
)

// AroOperator generates the Aro Operator files.
type AroOperator struct {
	FileList []*asset.File
}

var _ asset.WritableAsset = (*AroOperator)(nil)

// Name returns a human friendly name for the asset.
func (*AroOperator) Name() string {
	return "AroOperator Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*AroOperator) Dependencies() []asset.Asset {
	return []asset.Asset{}
}

// Generate generates the scheduler config and its CRD.
func (s *AroOperator) Generate(dependencies asset.Parents) error {
	err := s.generateNamespace()
	if err != nil {
		return nil
	}

	return s.generatePod()
}

func (s *AroOperator) generatePod() error {
	spec := &v1core.Pod{
		TypeMeta: metav1.TypeMeta{
			Kind:       "Pod",
			APIVersion: "v1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      "test-pod",
			Namespace: "openshift-azure-operators",
		},
		Spec: v1core.PodSpec{
			Containers: []v1core.Container{
				{
					Name:  "nginx",
					Image: "nginx",
				},
			},
		},
	}

	data, err := yaml.Marshal(spec)
	if err != nil {
		return errors.Wrapf(err, "failed to create %s manifests from ARO Operator", s.Name())
	}

	s.FileList = append(s.FileList, &asset.File{
		Filename: aroOperatorFilename,
		Data:     data,
	})

	return nil
}

func (s *AroOperator) generateNamespace() error {
	spec := &v1core.Namespace{
		TypeMeta: metav1.TypeMeta{
			Kind:       "Namespace",
			APIVersion: "v1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "openshift-azure-operators",
		},
	}

	data, err := yaml.Marshal(spec)
	if err != nil {
		return errors.Wrapf(err, "failed to create %s manifests from ARO Operator", s.Name())
	}

	s.FileList = append(s.FileList, &asset.File{
		Filename: aroOperatorNamespaceFilename,
		Data:     data,
	})

	return nil
}

// Files returns the files generated by the asset.
func (s *AroOperator) Files() []*asset.File {
	return s.FileList
}

// Load returns false since this asset is not written to disk by the installer.
func (s *AroOperator) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
