apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: s2i-fuse71-spring-boot-camel-xa
metadata:
  annotations:
    description: 'Spring Boot, Camel and XA Transactions. This example demonstrates
      how to run a Camel Service on Spring-Boot that supports XA transactions on two
      external transactional resources: a JMS resource (A-MQ) and a database (PostgreSQL).
      This quickstart requires the PostgreSQL database and the A-MQ broker have been
      deployed and running first, one simple way to run them is to use the templates
      provided in the Openshift service catalog'
    iconClass: icon-rh-integration
    openshift.io/display-name: Red Hat Fuse 7.1 Camel on Spring Boot with XA Transactions
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: quickstart,java,springboot,fis,jboss-fuse
    version: "1.1"
  name: s2i-fuse71-spring-boot-camel-xa
  namespace: openshift
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: true
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    resources:
      limits:
        memory: ${BUILD_MEMORY_LIMIT}
      requests:
        memory: ${BUILD_MEMORY_REQUEST}
    source:
      git:
        ref: ${GIT_REF}
        uri: ${GIT_REPO}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: BUILD_LOGLEVEL
          value: "5"
        - name: ARTIFACT_DIR
          value: ${ARTIFACT_DIR}
        - name: MAVEN_ARGS
          value: ${MAVEN_ARGS}
        - name: MAVEN_ARGS_APPEND
          value: ${MAVEN_ARGS_APPEND}
        forcePull: true
        from:
          kind: ImageStreamTag
          name: fuse7-java-openshift:${BUILDER_VERSION}
          namespace: ${IMAGE_STREAM_NAMESPACE}
        incremental: true
      type: Source
    triggers:
    - github:
        secret: ${BUILD_SECRET}
      type: GitHub
    - generic:
        secret: ${BUILD_SECRET}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"${APP_NAME}:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${APP_NAME}\")].image"}]'
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    selector:
      matchLabels:
        app: ${APP_NAME}
        group: quickstarts
        provider: s2i
    serviceName: ${APP_NAME}-headless
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          component: ${APP_NAME}
          group: quickstarts
          provider: s2i
          version: ${APP_VERSION}
      spec:
        containers:
        - env:
          - name: CLUSTER_RECOVERY_ENABLED
            value: "true"
          - name: CLUSTER_BASE_DIR
            value: /var/transaction/data
          - name: CLUSTER_NAME
            value: ${APP_NAME}
          - name: CLUSTER_NODENAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: BROKER_HOST
            value: ${BROKER_HOST}
          - name: BROKER_USERNAME
            value: ${BROKER_USERNAME}
          - name: BROKER_PASSWORD
            value: ${BROKER_PASSWORD}
          - name: DATABASE_HOST
            value: ${DATABASE_HOST}
          - name: DATABASE_USERNAME
            value: ${DATABASE_USERNAME}
          - name: DATABASE_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: ${APP_NAME}:latest
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
          resources:
            limits:
              cpu: "1.0"
              memory: 256Mi
            requests:
              cpu: "0.2"
              memory: 256Mi
          securityContext:
            privileged: false
          volumeMounts:
          - mountPath: /var/transaction/data
            name: ${APP_NAME}-data
        serviceAccountName: ${APP_NAME}
        terminationGracePeriodSeconds: 180
        volumes:
        - name: ${APP_NAME}-data
          persistentVolumeClaim:
            claimName: ${APP_NAME}
    updateStrategy:
      type: RollingUpdate
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_NAME}
      group: quickstarts
      provider: s2i
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}-headless
  spec:
    clusterIP: None
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_NAME}
      group: quickstarts
      provider: s2i
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${APP_NAME}
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
- apiVersion: v1
  kind: RoleBinding
  metadata:
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: ${APP_NAME}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APP_NAME}
      component: ${APP_NAME}
      group: quickstarts
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${VOLUME_SIZE}
parameters:
- description: The name assigned to the application (max 20 characters).
  displayName: Application Name
  name: APP_NAME
  required: true
  value: s2i-fuse71-xa
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: GIT_REPO
  required: true
  value: https://github.com/jboss-fuse/spring-boot-camel-xa.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: GIT_REF
  value: spring-boot-camel-xa-1.0.0.fuse-710006-redhat-00003
- description: Set this to the name of the TCP service of the A-MQ broker. You may
    need to create a broker first.
  displayName: A-MQ Broker Service
  name: BROKER_HOST
  required: true
  value: broker-amq-tcp
- description: The username used to authenticate with the A-MQ broker.
  displayName: A-MQ Broker Username
  name: BROKER_USERNAME
  required: true
- description: The password used to authenticate with the A-MQ broker.
  displayName: A-MQ Broker Password
  name: BROKER_PASSWORD
  required: true
- description: Set this to the name of the PostgreSQL service. You may need to create
    the database first.
  displayName: PostgreSQL Service
  name: DATABASE_HOST
  required: true
  value: postgresql
- description: The username used to authenticate with the PostgreSQL database.
  displayName: PostgreSQL Username
  name: DATABASE_USERNAME
  required: true
- description: The password used to authenticate with the PostgreSQL database.
  displayName: PostgreSQL Password
  name: DATABASE_PASSWORD
  required: true
- description: The size of the volume used to store the transaction log.
  displayName: Volume size for transaction log
  name: VOLUME_SIZE
  required: true
  value: 1Gi
- description: The version of the Fuse S2I builder image to use.
  displayName: Builder version
  name: BUILDER_VERSION
  value: "1.1"
- description: The application version.
  displayName: Application Version
  name: APP_VERSION
  value: 1.0.0.fuse-710006-redhat-00003
- description: Arguments passed to mvn in the build.
  displayName: Maven Arguments
  name: MAVEN_ARGS
  value: package -DskipTests -Dfabric8.skip -e -B
- description: Extra arguments passed to mvn, e.g. for multi-module builds.
  displayName: Extra Maven Arguments
  name: MAVEN_ARGS_APPEND
- description: Directory of the artifact to be built, e.g. for multi-module builds.
  displayName: Maven build directory
  name: ARTIFACT_DIR
- description: Namespace in which the Fuse ImageStreams are installed. These ImageStreams
    are normally installed in the openshift namespace. You should only need to modify
    this if you've installed the ImageStreams in a different namespace/project.
  displayName: Image Stream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
- description: The secret needed to trigger a build.
  displayName: Git Build Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: BUILD_SECRET
- description: The amount of CPU to request.
  displayName: CPU request
  name: CPU_REQUEST
  required: true
  value: "0.2"
- description: The amount of memory required for the container to run.
  displayName: Memory request
  name: MEMORY_REQUEST
  required: true
  value: 256Mi
- description: The amount of CPU the container is limited to use.
  displayName: CPU limit
  name: CPU_LIMIT
  required: true
  value: "1.0"
- description: The amount of memory the container is limited to use.
  displayName: Memory limit
  name: MEMORY_LIMIT
  required: true
  value: 256Mi
- description: The amount of memory to request for builds.
  displayName: Build Memory request
  name: BUILD_MEMORY_REQUEST
  required: true
  value: 0.7G
- description: The amount of memory the build container is limited to use.
  displayName: Build Memory limit
  name: BUILD_MEMORY_LIMIT
  required: true
  value: 0.8G
