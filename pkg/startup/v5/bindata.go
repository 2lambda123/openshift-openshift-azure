// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master/etc/etcd/ca.crt
// data/master/etc/etcd/etcd.conf
// data/master/etc/etcd/peer.crt
// data/master/etc/etcd/peer.key
// data/master/etc/etcd/server.crt
// data/master/etc/etcd/server.key
// data/master/etc/origin/cloudprovider/azure.conf
// data/master/etc/origin/master/admin.crt
// data/master/etc/origin/master/admin.key
// data/master/etc/origin/master/admin.kubeconfig
// data/master/etc/origin/master/aggregator-front-proxy.crt
// data/master/etc/origin/master/aggregator-front-proxy.key
// data/master/etc/origin/master/ca-bundle.crt
// data/master/etc/origin/master/ca.crt
// data/master/etc/origin/master/ca.key
// data/master/etc/origin/master/front-proxy-ca.crt
// data/master/etc/origin/master/master-config.yaml
// data/master/etc/origin/master/master.etcd-ca.crt
// data/master/etc/origin/master/master.etcd-client.crt
// data/master/etc/origin/master/master.etcd-client.key
// data/master/etc/origin/master/master.kubelet-client.crt
// data/master/etc/origin/master/master.kubelet-client.key
// data/master/etc/origin/master/master.proxy-client.crt
// data/master/etc/origin/master/master.proxy-client.key
// data/master/etc/origin/master/master.server.crt
// data/master/etc/origin/master/master.server.key
// data/master/etc/origin/master/named/console.crt
// data/master/etc/origin/master/named/console.key
// data/master/etc/origin/master/openshift-master.kubeconfig
// data/master/etc/origin/master/scheduler.json
// data/master/etc/origin/master/service-signer.crt
// data/master/etc/origin/master/service-signer.key
// data/master/etc/origin/master/serviceaccounts.private.key
// data/master/etc/origin/master/serviceaccounts.public.key
// data/master/etc/origin/master/session-secrets.yaml
// data/master/etc/origin/node/ca.crt
// data/master/etc/origin/node/client-ca.crt
// data/master/etc/origin/node/node-config.yaml
// data/master/etc/origin/node/node.kubeconfig
// data/master/etc/origin/node/pods/apiserver.yaml
// data/master/etc/origin/node/pods/controllers.yaml
// data/master/etc/origin/node/pods/etcd.yaml
// data/master/etc/origin/node/pods/ovs.yaml
// data/master/etc/origin/node/pods/sdn.yaml
// data/master/etc/origin/node/resolv.conf
// data/master/etc/origin/node/sdn.kubeconfig
// data/master/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master/etc/sysconfig/atomic-openshift-node
// data/master/root/.kube/config
// data/master/var/lib/origin/.docker/config.json
// data/worker/etc/origin/cloudprovider/azure.conf
// data/worker/etc/origin/node/bootstrap.kubeconfig
// data/worker/etc/origin/node/ca.crt
// data/worker/etc/origin/node/node-bootstrapper.crt
// data/worker/etc/origin/node/node-bootstrapper.key
// data/worker/etc/origin/node/node-config.yaml
// data/worker/etc/origin/node/pods/ovs.yaml
// data/worker/etc/origin/node/pods/sdn.yaml
// data/worker/etc/origin/node/resolv.conf
// data/worker/etc/origin/node/sdn.kubeconfig
// data/worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/worker/etc/sysconfig/atomic-openshift-node
// data/worker/var/lib/origin/.docker/config.json
package startup

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterEtcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdCaCrt,
		"master/etc/etcd/ca.crt",
	)
}

func masterEtcEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x51\x4f\xc2\x30\x14\x85\xdf\xfd\x15\xfc\x00\x65\x63\x22\x38\x92\x3e\x94\xee\x1a\x1a\x4a\xd1\xee\x8e\x84\xa7\x66\x62\x13\x8d\xa2\x64\xab\x24\x86\xf0\xdf\x0d\x2d\xc2\x1c\x23\x6c\xd9\x4b\xcf\x77\x6e\x77\xee\x01\x64\x89\xa6\xc9\x0c\x14\xf2\x14\x34\x13\x1c\x24\xea\x4c\x89\x94\xbc\x5a\xbb\x2a\x07\x41\xb0\xd9\xb4\xda\xa3\xaf\xd2\x7e\xe6\x4b\xd3\xda\x6e\x07\xd1\x6d\x3f\xbe\x72\x3e\x06\x0a\xf5\x03\x17\x40\x02\x63\x17\xbb\xef\x25\x28\x4d\xb1\x36\x45\x7b\x51\xd8\x3d\xe3\x27\x3a\x94\x66\x38\x22\xb6\xf8\x36\x5e\x4a\x28\x52\x9d\x70\x45\x82\x75\x5e\x04\x1f\x6f\xcf\x6e\x82\xd7\x40\x00\x43\x3e\x95\x1a\xf9\x04\xa6\x19\x92\xe8\x2e\x0c\xbd\x34\x02\xaa\x70\x08\x14\x35\x97\x08\x6a\x46\x05\x39\x68\x5c\x72\xe4\x54\x54\x12\x3d\x02\xa8\x4b\x79\xee\x6b\x6e\x26\xb2\x14\x41\x91\x65\x5e\x5a\x53\xdc\x84\xee\x39\xf8\xff\x9d\x3a\xf7\x75\xf5\xa8\xd3\x08\x76\x4e\xc1\xa8\x11\x8c\x2a\xff\x33\x86\xf9\x99\xf5\xbe\x9b\x1f\x8f\x08\x9e\x22\xc8\xc6\xde\xc2\xb6\x7b\x2b\x7d\xed\xe1\xd3\x95\x1c\xd1\xbf\xab\x25\x9d\x00\xa9\x6d\xca\x2b\xce\xdd\xd4\xfc\xca\x54\x7b\xf7\xd8\xf9\xf2\x9d\xde\x10\xd0\x4d\x39\xc4\x73\x14\xaa\x5d\x1d\x89\x66\xb4\x0e\x2f\xf2\xe3\x85\x4f\xd9\x14\xa9\x1e\x52\x36\x06\x99\xe8\xe1\x1c\x21\x25\xdd\x28\xee\xc6\xbd\x7e\x14\xf7\x3c\x73\x71\xd2\x6f\x00\x00\x00\xff\xff\x27\xa7\x9b\x77\x0f\x03\x00\x00")

func masterEtcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdEtcdConf,
		"master/etc/etcd/etcd.conf",
	)
}

func masterEtcEtcdEtcdConf() (*asset, error) {
	bytes, err := masterEtcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\x81\x45\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func masterEtcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerCrt,
		"master/etc/etcd/peer.crt",
	)
}

func masterEtcEtcdPeerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x48\x4d\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func masterEtcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerKey,
		"master/etc/etcd/peer.key",
	)
}

func masterEtcEtcdPeerKey() (*asset, error) {
	bytes, err := masterEtcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\x81\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func masterEtcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerCrt,
		"master/etc/etcd/server.crt",
	)
}

func masterEtcEtcdServerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x4e\x2d\x2a\x4b\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func masterEtcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerKey,
		"master/etc/etcd/server.key",
	)
}

func masterEtcEtcdServerKey() (*asset, error) {
	bytes, err := masterEtcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\x64\x82\x2e\x51\xaf\x82\xd0\x09\x8a\xfd\x4a\x40\x12\xf8\xd6\x5c\x6a\x77\xf7\x8d\x21\x69\x05\x35\xd0\xd2\x56\x9f\x0e\xe6\xdb\xdf\xb6\xd3\x43\x1b\x98\xdd\x4e\x49\xd9\xad\x57\x35\xb0\x80\xa1\x07\xe4\x93\xd2\xa9\x76\xc9\x9c\xcb\x1f\x00\x00\xff\xff\x93\xa5\x60\x70\x42\x00\x00\x00")

func masterEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginCloudproviderAzureConf,
		"master/etc/origin/cloudprovider/azure.conf",
	)
}

func masterEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := masterEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xe4\x66\xe6\x81\x85\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x21\x3e\xf2\xe6\x3b\x00\x00\x00")

func masterEtcOriginMasterAdminCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminCrt,
		"master/etc/origin/master/admin.crt",
	)
}

func masterEtcOriginMasterAdminCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4c\xc9\xcd\xcc\xd3\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x26\xc6\x1f\xc6\x40\x00\x00\x00")

func masterEtcOriginMasterAdminKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminKey,
		"master/etc/origin/master/admin.key",
	)
}

func masterEtcOriginMasterAdminKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminKubeconfig,
		"master/etc/origin/master/admin.kubeconfig",
	)
}

func masterEtcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xa7\x17\xa5\xa6\x27\x96\xe4\x17\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x82\x55\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyCrt,
		"master/etc/origin/master/aggregator-front-proxy.crt",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x00\xd0\xfb\x9f\x22\x13\x64\x07\xbf\xd0\x8b\x17\xa1\x13\x48\x89\x21\x17\x03\x31\x94\x06\xeb\xee\x7d\x6b\x41\x35\xb9\x9b\x53\xa1\x48\xf3\x1f\x4e\x13\x30\xeb\xe8\xc2\x98\xc9\x5c\xba\x5c\xcd\x69\x62\x62\x36\xe2\xe6\x6a\x87\xe9\xf0\x6a\xfa\x04\x16\x0a\x78\xe1\x74\x93\xc1\xb0\xf7\xef\x0b\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyKey,
		"master/etc/origin/master/aggregator-front-proxy.key",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaBundleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\xe4\xa8\x97\xee\x60\xe3\x06\x9d\xa0\xd8\x8f\x06\x24\x42\x1a\x0b\x52\xbb\xbb\xaf\x77\x62\x98\xf3\x99\x45\xd7\x1a\x5f\x47\xa5\x39\x6c\x30\x69\x28\x81\x73\x7c\xb4\x5c\xa0\xc0\xb7\x7a\x16\x85\x25\x58\x93\x1d\x0b\x7d\x94\xdc\x44\x0f\x1a\x63\xfa\x03\x00\x00\xff\xff\x01\x5e\x1d\x24\x46\x00\x00\x00")

func masterEtcOriginMasterCaBundleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaBundleCrt,
		"master/etc/origin/master/ca-bundle.crt",
	)
}

func masterEtcOriginMasterCaBundleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaBundleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca-bundle.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaCrt,
		"master/etc/origin/master/ca.crt",
	)
}

func masterEtcOriginMasterCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4e\xd4\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func masterEtcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaKey,
		"master/etc/origin/master/ca.key",
	)
}

func masterEtcOriginMasterCaKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x3a\x27\x82\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func masterEtcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterFrontProxyCaCrt,
		"master/etc/origin/master/front-proxy-ca.crt",
	)
}

func masterEtcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x6f\x1b\xb9\x11\x7f\xdf\xbf\x82\xd0\x4b\xda\xa2\xbb\x2b\x3b\x76\x3e\x16\xe8\x83\x6a\x9f\x7b\xc2\x39\x8e\x2a\x25\x45\x81\xa2\x28\x28\x72\xb4\x62\xc4\x25\x37\xfc\xd0\x59\xe7\xfa\x7f\x2f\xf8\xb1\xbb\xd4\x5a\xce\x05\x41\xae\x38\xe5\x21\x5e\xce\x07\x87\x33\xc3\xdf\xcc\x10\xd3\x86\x69\xcd\xa4\xb8\x92\x62\xc3\xea\x2a\x43\xa8\xe5\xb6\x66\xc9\x37\x42\x7f\xb5\x8c\xd3\x6b\xd8\x60\xcb\x8d\x0e\x4b\x08\x11\xcf\x60\x15\x36\x4c\x8a\x6e\x11\x21\xdc\xb2\x7f\x80\x72\x1a\x2b\xb4\x3f\xeb\x97\x41\xec\x2b\xf4\xaf\x7f\xf7\xdf\x3b\x26\x68\x75\xac\x38\xec\xd8\x73\x28\xd0\xd2\x2a\x02\x7a\xd0\x8d\x10\x67\x0d\x33\xba\x42\x0f\x8f\xc9\xa2\x82\xcf\x16\x74\xb2\xec\xd5\xbe\xdf\x83\x52\x8c\xc2\x37\x1a\x9c\x18\xd8\x6b\x4a\x2c\x94\x2d\x08\xbd\x65\x1b\x53\x30\x59\xce\x1b\x5c\xc3\x42\x72\x46\x0e\xdf\xe8\x9d\x7b\x20\xd6\x71\x2e\x2d\x4f\x0f\x9c\xa3\x06\x1b\xb2\xf5\xfa\x67\x42\x48\xe3\xd5\x1d\x79\x24\x47\x3b\x38\x54\x88\x39\x16\x5d\x1c\x99\x45\x41\x1c\xf2\x5e\x75\x22\x83\xd0\x1e\x73\x0b\x15\x7a\x61\x94\x85\x17\x09\x45\xe0\x06\xaa\xc1\x9c\x9c\x82\x60\x40\x13\x06\x29\x96\xa7\xe2\x92\xf7\xe1\xaa\x50\x2b\xa9\x7e\x86\xb4\x76\xee\xd4\x47\xa1\xfb\x04\xc4\x54\xc8\xd9\x91\x2c\xeb\x1d\x6b\xdf\xfb\x9d\xb8\xb7\xe3\x06\x33\x6e\x15\x8c\xf8\x42\x88\x12\xe7\xc7\xf8\x60\x4b\x99\x19\xf2\x17\x04\x5e\x73\xa0\xbd\xb0\x27\xdf\x30\x0e\x0b\x6c\xb6\x15\x2a\xf7\x58\x95\x5c\xd6\x65\xef\xbb\xdc\x73\x8c\xbf\x0b\x2e\x5d\xe8\x1b\x7c\xcf\x1a\xdb\x2c\xc1\x60\x26\x80\x3a\x3d\xba\x42\x67\xd3\x0c\xd7\xb5\x82\x1a\x1b\xa9\x92\xab\xa4\xe4\xfd\xe1\x8a\x33\x10\x66\x2e\x36\x32\x78\x8c\x80\xf2\xdb\x57\x68\x10\xc9\x37\x4a\x0a\x93\x7b\xfe\x82\x28\xe3\x19\x77\x70\xf8\x22\xdf\x0e\x0e\x19\x6e\xd9\x2d\xec\x81\xeb\x2a\xcb\x5d\x46\x8d\x12\x0c\x5b\xb3\x1d\xcc\x89\x17\xe5\x47\xc0\x14\x54\x34\xc6\x1b\x77\x35\xab\x50\xa2\x39\x27\xb8\x37\x22\x32\xc8\xa6\x91\xe2\x0e\x37\x5d\xd8\xf3\x67\x8c\xca\x42\x3a\x1b\x85\xc3\x2e\x0b\x05\x1b\x76\x3f\x48\xfd\x33\x5f\x42\x23\x0d\xe4\x3f\x38\x9e\xdc\xaf\xd6\x4a\xda\x36\xb0\x3f\xe5\xfb\x9b\x23\xfa\x45\xab\x41\xb9\xfc\x7c\x8e\xf3\xa3\x06\x95\x11\x29\x8c\x92\x9c\x43\x12\x05\xe0\x40\x86\x6b\xc8\x25\xd9\xdd\xf9\x34\x1f\x02\xdc\x60\x6d\x40\xe5\x83\xb0\xcb\x51\x0d\x6a\xcf\x08\xac\xdc\x7f\xa2\xbe\x02\x65\x82\x02\xcd\x6a\xd1\xb9\x2f\x8d\x66\xe4\xcf\x03\xbd\x77\x60\x12\xc7\x11\x87\x8b\x5f\xb2\x65\x85\x26\x7f\x9a\x64\x44\x2a\x3d\xe3\x5c\xfe\x0c\xf4\xbd\x62\x35\x73\xb7\x9d\x0a\x3d\x9c\x66\xcd\x04\x9d\x51\xaa\x40\xeb\x0a\x4d\x0b\xff\xaf\x7a\x33\xbd\x7c\x19\x69\x77\x60\x7e\x96\x6a\x57\x21\x43\xda\x8b\x0c\x0c\xa1\xc7\x09\x48\x70\x85\xc2\x79\x0b\x47\x1c\x62\x3d\x9c\xe4\x88\xec\x85\x23\x4b\x7f\x92\x13\x1c\xee\x34\x08\x59\xc5\x7d\x64\x72\xb4\x35\xa6\xd5\x55\x59\x3e\x3c\xa0\xe2\x47\xa9\x8d\x0b\x1d\x7a\x7c\xac\xce\x5f\xbe\x7e\xeb\xcd\x5a\x19\xa9\x70\x0d\xc3\xc9\x76\x76\x0d\x4a\x80\x01\x1d\x49\x21\x79\xaa\x84\x50\x30\x79\x8a\xf1\x18\x53\x5d\x5c\x57\x2e\xae\x23\x35\x29\x38\x9e\x60\x4b\x95\x78\x38\x1d\x2c\xdb\x48\xd5\x60\x53\x21\x77\x96\xb0\x5a\xcc\x03\xe0\xde\x78\x0a\x7a\x7c\x0c\x22\x29\x0e\x39\x41\x26\x8c\x4b\x5a\xbe\x84\x9a\x69\xa3\x0e\x9d\x23\x2a\x44\x25\xd9\x81\xca\x55\x24\x14\x34\x54\xc1\x42\xef\x49\x75\x39\x9d\x4e\xb3\x80\x6e\xef\xbc\xa3\x23\xb0\xb9\x73\x73\x30\x4f\xe3\xf9\x7c\x0c\xa3\xc8\x97\xc3\x38\x62\x0a\x91\x6c\xa5\x32\x0e\xd8\xce\x2f\xa7\xd9\xe0\xf0\xd4\x1e\xb7\x3b\x6e\x99\xbb\x20\xa0\x66\xaa\xb6\x0d\x88\xae\x3f\x20\x5c\x5a\x9a\x93\xa4\x89\xc8\x51\x09\x86\x94\xd2\x27\x75\xe9\xe9\xad\x92\x7b\x46\x41\x95\xf8\x17\xab\xa0\x70\xdc\x89\x70\x47\xed\x01\xc7\x31\x85\x1b\x18\x02\x96\xaf\x31\xd9\x81\xa0\x1d\x83\x4b\xaa\x97\x47\x0c\x0d\x50\x86\x73\x73\x68\xa1\x57\xd2\xb6\x9c\x11\x5f\x46\xcb\xbd\xa0\x45\x92\x5a\xad\x92\x46\xae\xad\x33\x61\xb8\x95\xff\xcf\x63\x11\x6e\x3d\x0c\x39\x78\x60\xa2\xce\x5d\x30\xf3\x8d\x0b\xd4\x89\x9d\x42\xe8\xca\x23\xa4\x3e\x16\xdf\xc1\xe1\x2b\xa4\x43\xb0\xc3\xf7\x7c\x51\xa1\xb3\xf3\xd7\x1e\x53\xce\x7e\xbd\x7c\xc5\xec\x89\x25\x23\x4d\xb0\xa7\x29\x76\xc4\x14\xf6\xd4\x64\x0b\xd4\xf6\x48\x1d\xd8\x4f\x18\xd9\xf3\x15\x9f\xb4\x6f\x63\x22\x8c\xea\x3b\x49\x61\x21\x95\x59\x62\x51\xbb\x66\xe6\x45\x42\x5b\xd9\xb5\x00\x97\xbf\xaf\xcf\x8b\x97\x1e\x23\xcb\xb3\x57\x59\xd0\x18\x4e\xe4\x23\xda\x43\xc2\xad\x94\xad\x4b\xa7\xab\x58\xee\x84\x08\x35\x63\xd4\x45\x62\x42\xa0\x75\x64\x03\xc2\x7c\x38\xb4\xae\xf6\x7f\x45\x4a\xfd\x39\xe5\x89\xa7\x40\x68\x6d\x95\x36\x15\x7a\x35\x9d\x66\xb1\x65\xec\xb4\x7e\x95\x52\x2f\xf4\xb9\xd5\x15\x7a\xe9\x35\x3c\x39\xcb\x4f\x76\xdd\x61\xd8\x93\x5a\xe7\x15\x86\x3c\x8e\x5e\x59\xd8\x35\x67\xe4\xe3\xf2\xd6\xc3\x5c\xab\x98\x30\x68\xd2\x81\xf8\xc4\xe3\x9e\x6f\x79\xd4\x2a\xb8\xb8\x58\x28\xd9\x82\x32\x0c\x74\x11\x64\x7b\x94\xff\x2f\xfa\x6c\xa5\x71\x68\x9f\x89\x50\x8d\x06\xc0\x88\x59\x1a\xab\x54\xac\x15\x84\x51\xe5\xb0\xa6\x38\x3b\x7f\x13\x62\x75\xe1\x4f\xb7\x95\xda\x84\x48\xde\x82\xa8\x5d\xb7\xf6\x36\xf3\xed\x85\x07\xd5\xf9\x22\x6a\xb9\x9a\x5f\x2f\xa3\xa6\x58\x10\x4b\xe7\x90\xb8\xf7\xc2\xcf\x33\xa1\xe4\x2b\xa0\x5b\x9c\xb6\x76\x72\xaf\xf3\xc8\xd7\x7a\xec\x1e\x72\x28\x51\x3e\xce\x23\x79\xdc\x57\x61\xad\xc1\x7c\x47\xff\x4d\x4a\x22\x85\x96\x1c\xca\x49\xea\x4b\xd7\x29\x61\x61\xd2\xc9\xac\x01\xb3\x95\xb4\x42\xd8\x1a\x57\xd2\x18\x05\x61\x98\x39\x2c\x22\xc6\x44\xa7\x70\x59\x33\x91\x34\xcf\x0d\x6e\x5b\x26\xea\x77\x51\x98\x70\xcc\x9a\x6c\x68\xff\x1f\x1e\xd0\x1f\x98\xa0\x70\xff\x65\xa3\x67\xd6\x6c\x17\x4a\x3a\x88\x29\xe6\xe3\x8d\xd1\xf4\x8f\xc5\xdd\x28\x17\xdc\x0e\xc7\xe8\xf7\xcc\x40\xe4\x0d\x4a\xe6\x0b\x68\x30\xe3\xe9\x54\xe4\x17\xfa\x6f\x46\x53\x9a\xb6\xeb\xec\x68\x9c\x49\x68\xee\xbb\xff\x6c\x15\x6c\x40\x29\xa0\x1f\x63\x63\x99\x72\x5a\xc1\x3e\x5b\xf8\x4f\x22\x10\xb0\x6b\x7e\xfd\xfd\xfc\xd3\x7d\x14\x11\x62\xaf\xc7\xce\xea\x36\x5d\x01\x51\x60\x7e\x83\x8d\x83\xe2\xa7\xdb\x86\xde\xe3\x7d\x0b\x62\x7e\x3d\xd6\x10\x59\xba\x46\x2f\x86\xd1\x9a\xad\x54\xec\x17\x38\x95\xfc\x3e\xfd\x8a\x86\x11\x25\xb5\xdc\x18\x29\x38\x13\xae\x2c\x36\xe5\xe4\x3b\x9f\xe7\x03\x08\xec\x1d\x39\x29\xfd\x15\x3d\x2f\x7b\xc3\x26\x4f\x4f\x89\x90\x91\x3b\x10\xbf\x37\x93\xbd\x51\x23\x73\x63\xe1\x9a\x25\xad\xde\x6f\x89\xda\x9d\xf6\x6f\xd3\x7b\xf3\xf7\xeb\xbb\x63\x6d\x1a\x46\x6f\x4c\xfd\xd2\x3b\x7c\x3f\xab\x61\xe5\x4a\x11\x75\x95\xac\x2b\x86\x91\x1c\x50\x5b\x6b\x91\x2e\x86\xac\xd5\xcf\x37\x0c\x81\x2d\xd7\x81\xaf\x38\xe0\xc6\x81\x85\xf7\x6b\x6a\x82\x2b\xe6\x5a\x7f\x70\xcb\x23\x33\xde\xbc\xba\x88\x76\xf4\xf9\x73\x8a\xed\x72\x3a\xcd\x5a\x25\x3f\x01\x49\x40\x39\x36\xf2\xae\x39\x59\xf9\xc9\x53\xaa\x0a\x09\x49\x21\x57\x92\x43\x71\x34\xcb\x94\x44\x36\xad\x35\xf0\x97\x08\xcd\x1a\x88\x55\xcc\x1c\xdc\x00\x48\xdc\x68\x1d\x51\x9e\xe8\x7e\x25\x36\x3b\x7a\x5a\x95\xe7\x1d\xf1\x16\xaf\x81\xeb\x85\x9b\xb6\x65\x78\x4f\xb9\x0c\x13\x33\xa3\x63\xb9\xb3\x69\xf7\xcb\xcf\xde\x76\xbf\xd2\xaf\x66\x4a\x5a\xe3\x26\xdd\xfe\x28\xda\xae\xa9\x6c\x30\x13\x5f\x0d\x3d\x4b\x69\x8d\x37\xc3\x65\x7e\x48\x74\x9f\x64\xab\x4e\x53\x9a\x17\xb1\xce\xce\x08\x91\x36\x2d\x6b\x0d\x16\xb8\x06\xda\xbf\x36\xe4\x9d\x4f\xfd\xdf\xfe\x0d\xc9\xc3\x90\x5b\x6f\xb9\x3c\xf8\x8f\xf4\x86\xe4\x6b\x2b\x28\x87\x78\x51\x5a\xc5\xf6\xd8\xc0\x4f\xa3\x29\x1c\x87\x6d\x5d\x3f\xe5\xe9\xdd\xd8\xe3\xed\x8d\xcc\x71\xfb\x27\x12\x9e\xc7\x0b\xe8\xf0\x3a\xd0\xb5\xc7\x27\x87\xf3\x8b\x8b\xd3\xb3\xf9\x89\x5e\x5a\xfb\x59\xaa\x1b\xe6\xfa\xb7\x99\xfe\xd2\x8f\xdb\xea\xc8\xdf\x35\xf1\xf7\xcb\xf8\x14\x3a\x17\x37\x9c\xd5\x5b\x13\x72\xb4\x7f\xf9\xf9\xc0\x1a\x90\xd6\x8c\xaf\x9b\xbb\xfe\xf4\xca\x85\x70\xe3\x7a\xce\xd8\xec\xe6\x89\x79\x27\x6e\x99\x17\xea\x1a\x95\xe1\xb5\xa3\xb7\xf0\x57\x45\x82\xd1\xb1\x4a\xf7\xb5\x24\xef\x86\xec\x6f\x80\xad\xbd\xe4\xb6\x49\xc6\x76\x7a\x10\xb8\x61\xc4\x63\xad\x43\x04\x26\xea\x1f\x8e\x1e\x03\xff\x17\x00\x00\xff\xff\xed\x50\xb9\x88\xfe\x16\x00\x00")

func masterEtcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterConfigYaml,
		"master/etc/origin/master/master-config.yaml",
	)
}

func masterEtcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdCaCrt,
		"master/etc/origin/master/master.etcd-ca.crt",
	)
}

func masterEtcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\x80\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientCrt,
		"master/etc/origin/master/master.etcd-client.crt",
	)
}

func masterEtcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x71\xce\xc9\x4c\xcd\x2b\xd1\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientKey,
		"master/etc/origin/master/master.etcd-client.key",
	)
}

func masterEtcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\x80\x15\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientCrt,
		"master/etc/origin/master/master.kubelet-client.crt",
	)
}

func masterEtcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x21\x10\x06\xe0\xf7\x4e\x31\x27\x98\x3b\x94\x8f\x12\x04\x9d\xc0\xe2\x57\x06\xc4\x60\xe6\x6f\x41\x5c\xef\xbe\xdf\x5a\xf2\x72\x3b\x0a\x91\x31\xef\xf1\x98\x44\x88\xa6\xdf\xa8\xd6\x34\xc1\x69\xd5\xbe\x85\x08\x7d\x96\x20\x3c\xff\x3f\xe8\x60\xea\x86\x41\xcd\x98\x72\xca\x9b\x6e\xa3\xc9\xde\xb7\x2b\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientKey,
		"master/etc/origin/master/master.kubelet-client.key",
	)
}

func masterEtcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\x80\xa5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientCrt,
		"master/etc/origin/master/master.proxy-client.crt",
	)
}

func masterEtcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x03\x21\x0c\x06\xe0\xf7\x4e\x91\x09\xb2\x43\xeb\xa3\x14\x84\x4e\x20\xe5\x57\x02\x87\x42\x12\x8e\x0b\x9e\xbb\xdf\xb7\x16\x15\x95\xb3\x3a\x32\xe2\x6d\x9f\x70\x18\x71\x9a\xa3\x49\xe7\x04\x75\x69\xf2\xaf\x0e\xe3\x6f\x35\x87\x16\x9d\x57\xa4\x43\x30\x9c\x33\x82\x6e\xfa\xb9\xca\xe8\xb4\xf7\xeb\x09\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientKey,
		"master/etc/origin/master/master.proxy-client.key",
	)
}

func masterEtcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\x81\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func masterEtcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerCrt,
		"master/etc/origin/master/master.server.crt",
	)
}

func masterEtcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x06\xe0\xfb\x9b\x22\x13\x64\x87\x57\x8f\x52\x28\x38\x81\x94\x5f\xc9\xc5\x42\x12\x84\x60\xdd\xbd\xdf\x5a\x74\xa9\xcc\xea\xc8\x88\xbf\x1d\xe1\x30\xe2\xf4\x8c\x26\x9d\x13\xd4\xa5\xc9\x5d\x1d\xc6\x67\x35\x87\x16\xe8\x84\x72\x46\xd0\x4b\xc5\x55\x46\xa7\xbd\x7f\x5f\x00\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func masterEtcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerKey,
		"master/etc/origin/master/master.server.key",
	)
}

func masterEtcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\xce\x48\xcc\xcc\x73\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x49\x64\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x38\xe7\xe7\x15\xe7\xe7\xa4\x82\x65\x8b\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xfc\x0f\x86\x36\x4c\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleCrt,
		"master/etc/origin/master/named/console.crt",
	)
}

func masterEtcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc4\x20\x0c\x06\xe0\xf7\x9b\x22\x13\x64\x87\x3b\x1f\x7d\xb8\x82\x13\x48\xf9\xb5\x81\x12\x8b\x09\x05\xb1\xee\xde\x6f\x4e\xda\xba\xdc\xd9\x11\x31\xbe\xf6\x1b\x0e\x23\x0e\x4d\x8b\x54\x0e\xe8\x2e\x45\xf6\xec\x30\xfe\x5f\xd0\x74\x48\xf1\xd0\xd4\xda\x09\x8e\x18\xf4\x50\xf2\x2e\x5a\x69\xad\xcf\x1b\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleKey,
		"master/etc/origin/master/named/console.key",
	)
}

func masterEtcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func masterEtcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterOpenshiftMasterKubeconfig,
		"master/etc/origin/master/openshift-master.kubeconfig",
	)
}

func masterEtcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\x1a\x31\x10\x85\xef\xf9\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\xb2\x20\xca\xa1\x55\x0e\xae\xfd\x80\x11\xc6\x43\xc7\x5e\x5a\x12\xe5\xbf\x57\x66\xc9\x16\xaa\x36\xec\x86\x9c\xd6\x3b\x9e\x6f\x76\x3c\x7e\x6f\x9f\x2f\x94\x52\x4a\xdb\x35\x3d\x40\x12\x71\xd4\x7d\xa5\x37\x57\xfa\xb2\x8e\x2f\x29\xfa\x12\x31\x1c\xc8\x6d\x5f\xa3\x6b\x81\x27\x67\x33\x92\xee\xab\x6f\xbb\x98\x52\xcf\xfb\xa7\x52\x3a\xda\x15\x0a\x35\xe6\x07\x0e\xd5\x0a\x5f\x39\x62\xc4\x71\x16\xc8\x65\xbd\x4f\x7b\xb9\xfc\x3f\x77\x67\x7f\xdd\x0c\xa7\x35\x3b\xe2\x2a\xb6\x85\x6e\x47\x37\xe6\xba\x3b\x36\x78\xaa\x04\xd7\x94\x96\x9d\xd1\xec\x16\x9f\x63\x86\x18\xf6\x83\xd9\x8c\x22\xe5\x6d\x1b\x70\xcc\xe5\x6b\x5d\x26\x72\x8b\x08\xb1\xc1\xfc\x19\x7c\x0b\xc8\xb0\xbf\xe7\x00\x29\xf9\x63\xf6\xb8\xb7\x14\x73\x2b\x72\xb4\x80\x5b\x16\xe4\x0e\x2b\x96\xad\x11\xa4\x54\x09\x3a\xa1\xe5\x88\x9d\xc1\xfa\x06\x86\x14\x3d\xc5\xf9\x5b\x94\x95\x79\xb5\x42\xcc\xba\x7f\x10\x55\x4a\x27\xc8\x86\x1c\x9a\xdb\x38\xde\x56\x4a\x07\xfb\x1d\xe1\x50\xb7\xcd\x8e\x60\x5e\xf4\x7f\x14\x7e\x3c\x78\x7b\x69\xd6\x4d\x43\x07\xed\x4f\x8e\xe8\x3a\xf7\xb1\xf1\x0b\xb1\x50\xa6\x53\x7e\x99\x22\xc0\x65\x96\xe9\x5a\x60\xbd\xa9\xa9\x57\xd7\xed\x32\x7f\x82\xe6\x8b\x72\xe8\xab\x16\x13\xfd\x5b\x9a\x67\x17\xfc\x02\x9b\xf2\x04\x3f\x2a\xa4\x8c\xf3\xfb\x1b\xda\x60\xa3\x83\x9f\x20\x71\x25\x0e\x83\x10\xd8\xd9\x5c\xc6\xf8\xde\x92\x45\x78\x46\x30\x83\x0c\x36\x4c\xde\xb0\x4f\x6f\xb7\xd9\xeb\xf5\x7a\x2d\xeb\x7e\xd8\x18\x77\x3e\xdc\x3b\x93\x38\xbe\xbb\xde\x29\x0f\xc4\x4c\x27\x7c\x50\xba\x79\xe2\x08\xdd\x5a\xe6\xe5\x57\xfe\xcf\x46\x3f\x1d\x2b\xff\xa2\xac\x7e\x07\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func masterEtcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSchedulerJson,
		"master/etc/origin/master/scheduler.json",
	)
}

func masterEtcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := masterEtcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func masterEtcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerCrt,
		"master/etc/origin/master/service-signer.crt",
	)
}

func masterEtcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x03\x21\x0c\x05\xd0\x7d\x4f\x91\x13\xe4\x0e\xad\xcb\xd9\x14\x3c\x81\x0c\xdf\xf0\x37\x29\xc4\x20\x88\xf5\xee\xf3\xf6\x96\x6f\x70\xb6\xc4\x85\xf5\x1e\x9f\x95\x18\xa2\xe5\xe7\x9d\xa6\x05\x91\xec\xbc\x5b\x62\x68\x45\x4c\xde\xa8\x34\xa7\x5b\x69\x7a\x61\xc9\x5f\x6a\x06\xdd\xe4\x9c\xd7\x13\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func masterEtcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerKey,
		"master/etc/origin/master/service-signer.key",
	)
}

func masterEtcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPrivateKey,
		"master/etc/origin/master/serviceaccounts.private.key",
	)
}

func masterEtcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\xd4\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPublicKey,
		"master/etc/origin/master/serviceaccounts.public.key",
	)
}

func masterEtcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\xa5\x25\x19\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x0a\x35\x0a\x85\xa5\xf9\x25\xa9\x0a\xb5\xb5\x5c\x0a\x0a\xa9\x79\xc9\x45\x95\x05\xf8\x0d\x71\xcd\x4b\xc6\x63\x06\x20\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func masterEtcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSessionSecretsYaml,
		"master/etc/origin/master/session-secrets.yaml",
	)
}

func masterEtcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeCaCrt,
		"master/etc/origin/node/ca.crt",
	)
}

func masterEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeClientCaCrt,
		"master/etc/origin/node/client-ca.crt",
	)
}

func masterEtcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\xf6\xbc\xfa\x70\x36\x41\x0b\x02\x7b\x48\x13\x6c\x1b\xb4\x48\x53\x3b\xed\x9d\x26\xc7\x36\x1b\x8a\xa3\x0c\x47\x6a\x9c\xed\xfe\xf7\x62\x24\x39\x76\xb6\x9b\xa2\x27\x9b\x7a\x6f\x3e\xf8\x86\xf3\x6c\x17\xfe\x40\xce\x81\x92\x81\x61\x51\xd8\x5e\x76\x57\x94\x36\x61\x6b\x0a\x00\x3d\x61\x92\xe0\xac\x04\x4a\x57\xd6\xed\x70\x15\x9e\xd1\xc0\xa2\x69\x9a\x6f\xe3\xf7\xf7\xbf\x18\xb8\x68\x67\x90\x38\x3c\xff\x47\xec\x6b\xf8\x10\xea\x53\xfe\x21\x24\x7f\xe9\x3d\x63\xce\x06\x16\x67\xdf\x55\x4d\xd5\x54\x0b\x73\xf1\x41\xc1\x6b\x6a\x6d\x48\x06\x5c\xec\xb3\x20\x57\x91\x9c\x8d\x0a\xdc\xdc\x19\x68\x46\x6a\xa3\xc7\x25\xba\x9e\x73\x18\x70\x89\x99\xe2\xa0\xd7\x32\x50\xa3\xb8\x9a\x38\x6c\x43\xaa\x13\x79\xac\x79\x04\x2b\x47\x69\x53\x78\x72\x0f\xc8\xc7\xfb\x4f\xe7\xd5\x2e\xb4\x4b\x22\xb9\x0e\x8c\x4e\x88\xf7\x06\xea\xc1\x72\x1d\xc3\xba\x9e\x18\x79\x17\xda\x57\xf4\x95\xfe\x93\x99\xc7\x7d\x3a\xe1\x55\x99\xdc\x43\x01\x80\x4f\xe8\x7e\xb2\xc9\x47\xe4\x5b\xdb\xa2\x81\x64\x25\x0c\x58\x60\xb2\xeb\x88\xbf\xa7\xe0\x63\x48\x5b\x03\xc2\x3d\x16\xa1\xb5\x5b\x3c\xf6\xb5\x21\x6e\xad\x18\xf8\xfc\x19\xaa\xe9\x6b\x75\xa3\x8c\x5c\x7d\x1a\x11\xf8\x1b\x1e\x7b\x12\x84\x2f\x5f\x0a\x80\x68\x05\xb3\x18\xd8\xd8\x98\xb1\x08\x9d\x68\x81\xbc\xda\x27\x77\x87\x1c\xc8\x1b\xf8\xd0\xe4\xe2\x21\x24\x6f\xe0\x96\xfc\x5c\xa7\x78\xe8\xd7\x18\x51\x2e\x79\xdb\xb7\x98\x24\x6b\xe1\x35\x91\x64\x61\xdb\x95\x8a\xba\x97\x86\xca\x7f\xeb\xfa\x42\xad\x8e\xd4\x02\xc0\x21\x4b\xe9\x03\xbf\x11\xa5\x70\xd8\xe8\x83\xc2\xac\xec\x48\xbd\x2f\xdf\xaa\x33\xa2\x1d\xd3\x10\x3c\x72\x6d\x9f\x7b\xc6\x69\x8e\x87\xc0\x03\x36\x85\x8e\x04\x55\x7e\x54\x58\xb3\x0a\x53\x8c\xc8\xa5\x15\xb1\x6e\x57\x7a\xd4\x9f\x89\xfc\x4e\x75\x7f\xa7\x5a\xa3\x95\x9e\xb1\xdc\x6a\x4b\x13\xb6\x24\xb1\x82\x3f\x4f\xfa\x5c\xc5\x80\x49\xae\x8e\x7d\x7f\xd4\xc8\xf7\xaf\x38\x2b\xe4\x01\xf9\x6b\x4e\x01\xd0\xda\xa7\xb2\x23\x3f\xe7\x7d\x77\xd1\x68\x45\x15\xa2\x8c\x76\x8d\x71\xfe\x3e\x7e\x60\x8a\x38\x4a\xc9\x09\x05\x73\x15\xa8\xd6\xf1\x2f\x29\xea\x98\x0f\x09\x4b\xa0\x0e\x53\xde\x85\x8d\x94\x21\x6d\xd8\x7e\xb4\x5d\xc8\x63\xf9\x02\xa0\x23\x5f\xb6\x36\x85\x0d\x66\x29\x3b\x2b\xbb\x37\xa6\xa0\x2d\x15\x00\x3c\xde\xa1\x3c\x9d\xc9\x57\xe2\x70\x9f\x24\xb4\x58\x32\x3e\xf6\x9a\x53\x0f\xd4\xcb\xc4\x5a\x34\xba\x14\x79\x9f\x05\xdb\x92\x71\xec\xc2\x4f\x90\x76\x7e\x8d\x1c\x06\xf4\xd5\x6a\x24\x2c\x67\x7c\x7c\xd0\x62\x43\x42\x56\xd5\x82\xc3\xf9\x8e\x27\x4f\xba\xb5\xba\xf7\xb3\xf0\x94\x12\x3a\xf5\x90\x5f\x07\x64\x0e\x7e\xea\xd1\x3a\x87\x9d\x82\x82\x49\xee\xf7\x1d\x66\x03\xb6\xeb\xe2\x6c\x55\xf5\x90\xfc\xa9\x98\x1d\x93\xd0\xba\xdf\xbc\x3f\xe5\xfc\x99\x29\xe9\x9b\xef\x59\xb7\xe7\x5c\x4d\xcb\x1d\x13\xfe\xaf\x7c\x05\xc0\x63\x97\x0d\x9c\x35\x73\xd3\xfa\x20\xe6\x3d\x1e\xc7\x7a\xba\x1c\x09\xe5\x2f\xe2\x87\xe3\x9a\xb7\xd2\x1b\x58\x9c\x5f\x68\xe5\x19\xbc\x8b\xfd\x36\xa4\xc9\x30\x18\xfd\xce\x4a\x7d\x1c\x38\x0d\xb9\x9c\x79\x1d\xc5\xe0\xf6\x45\xc7\xf4\xb4\x7f\xb5\xc1\xb3\x69\x96\x2e\x78\x3e\x8c\xa9\x5a\x9c\x7d\xaf\xa6\x59\x2f\xce\x0b\x9d\x42\x48\xdb\x9b\xb4\xa1\x71\xe1\x4f\x8d\x78\xf6\x56\xb3\x68\xce\xc6\x9e\x14\xbc\x9d\xea\x19\x10\xd7\x9d\x8f\xf9\xc7\xa9\x5c\x1a\x70\xb6\x72\x2c\xc5\x40\xb1\x6f\x4f\xbc\x6b\x74\xeb\xdf\x7a\x12\xab\x27\x80\x0e\xf9\xd3\xea\x47\xa6\xbe\x33\x90\xfa\x18\xe7\x80\x6f\x99\xed\xfc\x44\x5f\x2e\x3c\x39\x7f\x35\x05\xe4\xe2\x9f\x00\x00\x00\xff\xff\x4a\x23\x68\x3b\xcb\x06\x00\x00")

func masterEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeConfigYaml,
		"master/etc/origin/node/node-config.yaml",
	)
}

func masterEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeKubeconfig,
		"master/etc/origin/node/node.kubeconfig",
	)
}

func masterEtcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcf\x4f\xdb\x4a\x10\xbe\xe7\xaf\x18\x71\xe1\xbd\x83\x93\x87\x1e\xbd\x58\xe2\x80\x40\x6a\x91\x28\xb5\x04\xea\x7d\x62\x0f\xf6\x28\xeb\x9d\xed\xee\xd8\xd4\xa5\xfc\xef\xd5\xda\xeb\x14\x48\x42\x5b\xa9\xa7\x64\x7e\x7d\xdf\x97\xf9\x26\x8b\x8e\x3f\x93\x0f\x2c\x36\x87\xfe\x64\xb1\x61\x5b\xe5\x50\x48\xb5\x68\x49\xb1\x42\xc5\x7c\x01\x80\xd6\x8a\xa2\xb2\xd8\x10\x43\x80\x50\x36\x54\x75\x86\xfc\x12\x8d\x6b\x70\xb9\xe9\xd6\xe4\x2d\x29\x85\x25\xcb\xaa\xf4\xac\x5c\xa2\xc9\x9c\x54\x39\x1c\x1f\x2f\x00\x0c\xae\xc9\xa4\x61\x71\x64\x43\xc3\xf7\x3a\xf6\x4a\xeb\xc4\x92\xd5\x1c\xd0\xf1\xbe\xba\x55\x2f\x26\x73\x06\x2d\xe5\x70\xac\xbe\xa3\x08\x68\xb1\xa5\x1c\x5a\x0c\x4a\x3e\x9b\x26\x63\x2a\x38\x2c\x29\x87\xa8\x27\x0b\x43\x50\x6a\x17\xc1\x51\x19\x89\x23\x12\xb2\x25\x3f\xca\xc8\x00\x7d\x9d\x04\x65\x10\x14\xbd\xa6\xef\x13\x66\x0a\x66\x4d\x19\x64\x59\x29\xf6\x9e\xeb\xb3\x15\x69\xb9\x12\xcf\x35\xdb\xd5\xd4\x9b\x3e\x52\xc3\x72\xc0\xd6\xa4\xa1\xc7\x47\x70\x9e\xad\xc2\x51\x96\x19\xa9\x0d\xf5\x64\xce\x8e\xe0\x9f\x4b\xf2\x74\x0f\xcb\x8b\x69\xe0\x62\xde\xc1\xb5\xd4\xd7\xb1\x65\x79\x5e\x5c\xdd\x92\xef\xc9\xff\x0b\xdf\xe1\x4b\x27\x4a\xf0\xf4\x34\x62\x96\xd2\xb6\x68\xab\x59\xf8\x76\x57\x63\xcc\x2d\xd6\x94\x47\xd6\x19\xfa\x2a\x66\x42\x8c\xe2\x16\x8b\xb8\xc4\xd7\x88\xe3\x50\xd1\x19\x53\x88\xe1\x72\xc8\xe1\xdc\x3c\xe0\x10\xc6\x9a\xe1\x9e\x2c\x85\x50\x78\x59\xd3\xc4\x09\xd0\xa8\xba\xf7\xa4\x73\x08\xe0\x50\x9b\x1c\x1a\x42\xa3\xcd\xb7\x9f\x59\xf1\x9a\xc3\xe9\xe9\xff\xdb\x4c\xbc\x9a\xe8\xda\x87\xbb\xbb\xe2\x36\x65\xd9\xb2\x32\x9a\x4b\x32\x38\xdc\x52\x29\xb6\x0a\x39\x9c\xbe\x4b\x55\xe5\x96\xa4\xd3\x6d\xe1\xe4\xbf\xb1\x30\x99\x3f\x7b\xe3\x09\x2b\xfe\x43\x95\xab\x38\x34\xfc\x0d\xad\x49\xd2\x41\xad\x81\xca\xce\xb3\x0e\xd1\x02\xfa\xba\xd5\xe3\x3c\xf7\x6c\xa8\xa6\x2a\x87\x78\xd3\x63\xba\x17\xd3\xb5\xf4\x51\x3a\xab\xdb\xd3\x6c\x63\x54\x8c\xda\x77\x2f\x2f\x81\xbd\xf8\x33\x4c\x57\x98\x2a\xf1\x67\x7e\xb2\x66\x78\x46\x72\x10\xb2\x34\xd2\x55\xce\x4b\xcf\xd5\x01\xe4\xd8\x90\xbd\xea\xf8\x25\x43\x8f\x7e\x65\x78\x3d\xb3\xec\x03\x8e\xef\xcc\x01\x6d\x6e\xc3\xfb\x26\xe6\xf4\x1e\x2a\xa9\xf7\x0d\x4c\xe9\x46\x82\xde\x90\x3e\x88\xdf\x6c\xf5\x3a\xcf\x32\x1a\x64\x30\x84\x9b\x71\x66\x7a\x39\x32\x2b\x15\x65\xf3\x63\xb6\x98\xed\x49\xcf\x47\x84\x1a\x69\x17\xcf\xcf\xeb\x80\x45\xfb\x0d\xfa\x1d\x90\x5d\x53\xde\xb6\xe4\x20\xe6\x4b\x1b\x76\x91\x92\x07\x6f\x6a\x9a\xb7\xbe\xc7\x8a\xb7\x79\x93\x27\x3b\x8e\xfc\x08\x00\x00\xff\xff\xb2\xe2\x07\x25\x7e\x06\x00\x00")

func masterEtcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsApiserverYaml,
		"master/etc/origin/node/pods/apiserver.yaml",
	)
}

func masterEtcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x41\x6f\xdb\x3a\x0c\xbe\xe7\x57\x10\x39\xbd\x77\x70\xfc\x1e\xd0\xc3\x60\xa0\x87\xae\x19\xd6\x61\x4d\x67\xa0\x5d\xb1\x5b\xa1\xc8\xac\x43\x44\x96\x3c\x92\x76\x9b\x75\xfd\xef\x83\x6c\x27\x5d\x52\xa7\xd8\x92\x83\x25\x91\xfc\xf8\x91\x1f\x25\x53\xd3\x2d\xb2\x50\xf0\x19\xb4\xff\x4f\xd6\xe4\x8b\x0c\xf2\x50\x4c\x2a\x54\x53\x18\x35\xd9\x04\xc0\x9b\x0a\x33\xb0\xc1\x2b\x07\xe7\x90\x65\x38\x93\xda\x58\xcc\x60\xdd\x2c\x31\x91\x8d\x28\x56\x13\x00\x67\x96\xe8\x24\x86\x01\x84\x1a\xbd\xac\xe8\x5e\x67\x14\x52\x1b\xaa\x3a\x78\xf4\x7a\x08\xf5\xca\xaf\x33\x26\xb5\x33\x1e\x33\x98\x2a\x37\x38\x9d\x48\x8d\x36\x82\x46\xab\x21\x8f\xdc\xa5\x48\xc0\x70\x39\x24\x4b\x40\xd4\xb0\x0e\xeb\xca\x88\x22\x0f\x9b\xc3\x7c\x09\x24\x89\x0d\xfe\x9e\xca\xd3\x14\xd5\xa6\x81\xa9\x24\x9f\xf6\x31\xc3\x67\x70\x98\x6d\x4c\xe5\x76\x41\x8e\x44\xd1\x9f\xae\x54\x6b\xc9\xd2\xf4\xbf\x59\xf7\xcf\xde\x9d\x9c\x9c\x0c\x3e\x4f\x4f\x50\x33\x79\x85\x69\x92\xb8\x50\x3a\x6c\xd1\x9d\x4e\xe1\x9f\x39\x32\xde\xc3\xec\xbc\x07\x3d\xdf\xf6\xe2\x32\x94\x97\xd1\x25\x1a\x06\x8a\x0b\xe3\x4d\x89\xfc\x2f\xfc\x84\xef\x4d\x50\x84\xe7\xe7\x0e\xdb\x86\xaa\x32\xbe\xd8\x16\xbb\xeb\x59\xb7\x47\xdf\x6e\x0d\xbd\x5a\x9f\xbf\xbe\xff\x70\xb7\x38\xfb\x76\x97\xcf\xef\x6e\xbf\x5c\x5e\x77\x46\x80\xd6\xb8\x06\xb3\xc8\x72\x36\x47\xa6\x16\x8b\xd9\xc2\x3c\xce\x8d\x9a\x39\xc9\x5a\x72\xe4\xdb\x45\xc7\xb2\x6f\xf2\x35\x72\x4b\x16\x0f\xa9\x50\x65\xca\x01\x65\x28\xe8\x53\x3c\x91\x6d\x15\x79\x94\x6e\x34\x28\x6f\x9c\xcb\x83\x23\xbb\xc9\xe0\xcc\x3d\x98\x4d\x2f\x88\xa3\x16\x3d\x8a\xe4\x1c\x96\x98\x0d\x5c\x63\x97\x3f\xa2\x6e\xb7\x00\xb5\xd1\x55\x06\x2b\x34\x4e\x57\x3f\x5e\x4e\x03\x6b\x06\x3b\x09\xe2\x4f\xec\x0a\x63\x13\x2e\x6e\x6e\xf2\xbe\xf2\xb1\x11\x06\x10\xb4\x0d\x93\x6e\x22\x6d\x7c\xdc\x65\xaa\x99\x5a\x72\x58\x62\x91\x41\x9c\xbe\xee\xb8\x0d\xae\xa9\x70\x11\x1a\xaf\xbb\x81\xab\xe2\x2e\xef\x58\x8d\xcc\xd1\x80\xd6\xa7\xde\x1b\xaa\xb7\xc3\xad\x0b\x4d\x51\x73\x68\xa9\x38\x86\x12\x3d\x92\xad\xcb\x11\xb4\x97\x9b\x92\x32\x96\x24\xca\x84\x32\x2b\xf6\x01\x85\x4a\x6f\xb4\x61\x4c\xa8\x8a\x8d\x1c\xc1\x6a\x84\x53\x47\x4b\x7c\x44\x9b\xc6\xab\xce\x1e\x15\xa5\x5b\x3a\xd4\xa4\x76\x4d\x49\x5e\x06\xd4\x3e\x90\x43\x6d\x4a\xa3\xdd\xab\x72\x11\x44\x6f\xc2\x6e\xa2\xf6\xb2\xbf\xc6\x58\x05\xd1\x2b\xd4\x87\xc0\xeb\x5d\xef\x6b\xa6\xd0\xa9\xe4\x8c\xc8\x55\x4f\xbb\x7b\x6d\x12\x1f\x0a\x4c\x2c\x93\x92\x35\xf1\x92\xf6\x1a\x0d\x2f\x43\x84\xea\x4a\x98\xfc\x3e\x3d\xc7\x74\x1a\x57\xe9\x4f\x50\xf6\xe4\x1a\xc1\x3a\xd4\xea\x4d\xcc\x23\xa2\x4d\xde\x54\xec\x28\xe2\x5f\x48\x37\x2e\xc8\xaf\x00\x00\x00\xff\xff\xe0\x81\x84\xe8\x1f\x06\x00\x00")

func masterEtcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsControllersYaml,
		"master/etc/origin/node/pods/controllers.yaml",
	)
}

func masterEtcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x6f\xe2\x3a\x10\x7d\xe7\x57\x58\xbc\xf4\xc9\x41\xb4\xf7\xf6\xde\xfa\xad\x82\x4a\x5b\x69\xcb\x22\x6d\xb5\xaf\xab\xc1\x9e\x12\x0b\x67\x9c\xb5\x27\x69\x51\xcb\x7f\x5f\xd9\x49\x20\xfd\xe0\x01\xb0\xcf\x7c\xf8\xcc\x99\x19\xa0\xb6\xbf\x30\x44\xeb\x49\x89\x76\x3e\xd9\x59\x32\x4a\xac\xbd\x99\x54\xc8\x60\x80\x41\x4d\x84\x00\x22\xcf\xc0\xd6\x53\x4c\x57\x21\xa2\x2e\xd1\x34\x0e\x43\x01\xae\x2e\xa1\xd8\x35\x1b\x0c\x84\x8c\xb1\xb0\x7e\xa6\x83\x65\xab\xc1\xc9\xda\x1b\x25\x2e\x2e\x26\x42\x38\xd8\xa0\xeb\x83\x7d\x8d\x14\x4b\xfb\xc4\xd9\xd7\x57\xb5\x27\x24\x56\x02\x59\x9b\xaf\x1c\x88\x83\x77\xb2\x76\x40\xa8\xc4\x05\x87\x06\x53\x46\x82\x0a\x95\xa8\x20\x32\x06\xd9\x87\x26\x2c\xd6\xa0\x51\x89\xc4\x48\xc6\x7d\x64\xac\x26\xb1\x46\x9d\x9e\x4e\xa9\xc0\x12\x86\x4c\x44\x0a\x08\xdb\x9e\x92\x14\x6f\xf9\x57\x88\x88\x2c\x24\xf4\x97\x42\xcc\x90\x75\xfa\x98\xfc\x55\x68\x4f\x4f\xbd\x0d\x5f\x50\x9f\x28\x6b\x5f\x55\x40\x66\xc8\x36\xdb\x58\x9a\xc5\xb2\xbf\x49\x9d\x0f\x48\xed\x60\xef\xc8\xdf\x3d\x2e\x96\x8b\xc7\xef\xbf\x6f\xd7\xf7\x7d\xd2\x16\x5c\x83\x4a\x4c\xaf\xa6\x19\xb0\x15\x6c\x51\x89\xd7\x57\x51\x2c\x3c\x3d\xd9\x6d\x71\x9f\x90\x58\x3c\xe4\xb2\xef\x58\x1b\xf1\x26\xfe\x34\x9e\x51\x1c\x0e\xa7\x90\x75\xe3\xdc\xda\x3b\xab\xf7\x4a\xdc\xba\x67\xd8\xc7\x6c\x73\xb6\x45\xc2\x18\xd7\xc1\x6f\x50\x8d\xea\x18\xce\x1f\xea\xe8\xb8\xa6\x1a\x35\xbb\x11\x22\xa5\x06\x8d\x81\x47\xd0\x49\x27\x0d\x85\x7e\x67\x92\xf2\xac\x6f\x8d\x18\x3e\x79\xef\x70\x7f\xde\xf9\xbd\x51\x4a\x24\x53\x7b\x4b\x1c\x47\x68\xc9\x5c\x47\x35\x9b\x25\xd9\xbe\xf9\xc8\x49\x6c\x71\x38\xa8\xcb\xab\xff\x6e\xc6\x75\xf5\xa1\xe3\x48\x04\xc7\x65\x0f\x58\xb2\x6c\xc1\x2d\xd1\xc1\xfe\x27\x6a\x4f\x26\x2a\xf1\xcf\xbf\xd9\xda\xf5\xef\xd8\xfd\x88\xba\x09\x96\xf7\x0b\x4f\x8c\x2f\x3c\xa8\x57\x07\xdb\x5a\x87\x5b\x34\x4a\xa4\xb1\xcd\x70\xeb\x5d\x53\xe1\x83\x6f\x88\x8f\xc3\x57\xa5\xdb\x1a\xb8\x54\xa7\x7a\xfb\x1c\xa7\x97\xa4\xce\x23\xd0\xe3\x01\xc1\xfc\x20\xb7\x1f\x65\x7e\x9f\xa7\x85\x30\x73\x76\x73\x26\x57\xda\xec\x8c\x3e\xfb\xb0\xb3\xb4\x5d\xda\xf0\x39\xa6\xf4\x91\x57\xc8\xc9\xe5\xf8\x8c\xa1\x38\x4c\xd6\x74\xe5\x09\xa7\x1d\xd6\x8d\xa7\x3a\x8a\x13\x31\xb4\xfd\x9e\x75\xd4\xe6\xd7\xff\x17\xd7\x57\xc5\xfc\xf2\xa6\x98\x5f\xf7\xa2\x41\xd0\x25\x8e\x7c\x52\xc3\x96\xbe\x02\x4b\xab\xae\x65\x93\xac\xa1\xcf\xd2\x3a\x88\x71\x95\x0b\xe8\xb6\x5a\x92\x37\x28\x87\xbf\x9a\xc9\x20\x6c\xbf\xda\x89\x7a\x16\x62\x68\xc5\x17\xe2\x7e\x25\xed\xd9\xc8\x4f\x72\x7e\x14\xf3\x6f\x00\x00\x00\xff\xff\x8d\x7b\x37\x76\x49\x05\x00\x00")

func masterEtcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsEtcdYaml,
		"master/etc/origin/node/pods/etcd.yaml",
	)
}

func masterEtcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xeb\x86\x64\x03\x26\x29\xce\x1a\x04\x55\x90\x0e\x45\x37\x0c\x79\xc8\x0f\x24\x5b\x5f\x8a\x22\xa5\xc9\xb3\xc5\x99\x22\x19\xde\xd1\xae\x97\xf6\x7f\x1f\x48\x4b\x8a\xbd\x38\x5d\xd1\x3e\x59\x77\xba\xfb\x78\xf7\xdd\x77\xa2\x85\xd7\x6f\x30\x90\x76\xb6\x86\xc5\x78\x34\xd7\x56\xd5\x70\xe5\xd4\xa8\x45\x16\x4a\xb0\xa8\x47\x00\xc2\x5a\xc7\x82\xb5\xb3\x94\x4c\x00\x92\x0d\xaa\x68\x30\x94\xc2\xf8\x46\x94\xf3\x38\xc1\x60\x91\x91\x4a\xed\x2a\x19\x34\x6b\x29\x4c\xe1\x9d\xaa\x61\x7f\x7f\x04\x60\xc4\x04\x4d\x97\x2c\xbc\xaf\xc1\x2d\x28\x1b\xd2\xb5\xde\x59\xb4\x5c\x83\x45\x5e\xba\x30\xcf\x6e\xe7\xd1\x52\xa3\xa7\x9c\xf1\x76\xc7\xf0\xca\x63\x0d\xda\x4e\x83\x18\x01\x58\xd1\x62\x0f\x9b\x9e\xc9\x0b\x99\x1c\x3d\x50\x41\xca\x8e\xc8\xa3\x4c\x45\x48\x67\x59\x68\x8b\x21\x97\x54\xa4\x2a\x5a\x61\xd5\xba\xbe\x02\xaa\x89\xb6\xd5\x44\x50\xd3\xd9\x85\xec\x1e\x3e\xe6\x5f\x80\xef\xbf\xdb\x0e\x01\x20\x64\x28\x30\x3a\xf0\xda\xe3\x54\x68\x33\xea\x43\x41\x4f\x41\x58\xc7\x0d\x06\xf0\xc1\x49\x24\x02\x4d\x60\x34\x31\x5a\x6d\x67\xe0\x2c\x70\x83\x20\xad\x2e\x08\xc3\x02\x03\x90\x93\x73\xe4\x9f\x61\x29\x34\x43\xb4\xac\x0d\x68\x06\xfc\xa0\x99\x3a\x54\x0e\xc2\xc3\xfe\x5c\x1b\x03\x3f\xfc\xf8\xb7\x9b\x10\x14\xfe\xa7\x93\x1c\x02\x07\xfb\xf0\xe7\xef\xd7\xe7\x5d\xe4\xb2\xd1\x06\x81\x43\xc4\x13\x50\xae\x73\x42\x2a\xaa\x8a\x14\x2a\x6a\x44\xc0\x2a\xb1\xb4\xa0\xa5\x66\xd9\x54\x24\x83\xf6\x4c\x95\x5b\x50\x21\xd9\x00\xb1\xe0\x48\xb0\xf7\xb2\x52\xb8\xa8\x6c\x34\xe6\x24\xd5\x6b\x07\x28\x00\x94\x8d\x83\x67\x4b\x11\x52\x3f\x35\xbc\x7a\xdc\xad\x8c\x21\xa0\x65\xb3\x82\x56\x58\x31\x4b\x6d\x5f\xbe\xb9\x59\x77\x98\x8c\x23\x82\xb2\x2c\x9f\xc1\xe1\xcb\xbd\xf1\x06\x30\x19\x44\x0f\x47\xb0\x97\x03\x87\x17\x68\x08\x37\xa2\x26\x01\xc5\x7c\xb0\xa7\xba\x7b\x54\xce\xe2\xc3\x14\x8c\x88\x56\x36\xe9\xd4\xce\x35\x8d\x56\x26\x49\xc3\x5d\xd4\x0c\xf7\x1b\x78\x5f\x4c\x8c\xf3\x9b\x24\x64\xee\x3b\xc7\xa7\xcd\x39\xe5\x03\x6e\xce\xfe\xd8\x98\xca\x97\x73\x1f\x18\x8a\xc2\xba\x22\xb9\xba\x30\x05\x45\x41\x2b\x62\x6c\x0b\xad\x4e\x83\xb0\xca\xb5\x0f\x8d\x5e\x23\x71\xd0\x92\xb3\xa8\x6c\x6c\x27\x18\xc0\x4d\xc1\x73\x13\x50\x28\x82\x2d\x20\x19\x50\x30\x12\xb0\x83\x80\x2a\x4a\x4c\x59\x03\x94\x68\x5d\xb4\x9c\xb2\xaf\x6f\x6e\x92\x04\x23\x21\x25\xbd\x36\x8e\x98\x60\xa9\xb9\x49\xf3\x5c\x81\x74\x01\x69\x48\x6b\x98\x3d\xd5\x55\x35\x89\xb3\x7f\xb4\x31\xa2\x0c\xa8\x1a\xc1\xa5\x74\x6d\x45\x8d\x5b\xde\x4e\xe2\xac\x94\x33\xfd\xab\x56\xa7\xe3\xa3\xe3\xf1\x2f\xc7\x2f\xbe\x36\xf7\xf0\xf8\xc5\xf1\x68\x50\xf4\xdb\xb7\xf0\xde\x26\xd5\xbd\x87\x62\xc6\x30\x3e\x84\x77\xef\x1e\x89\x75\xdd\x7f\x62\x37\xf3\x9a\x77\x2c\x6d\xef\xa5\x47\x7b\xbb\xb8\xc9\xc4\x40\x09\x59\xc2\xb7\xd2\xd9\xa9\x9e\xd5\xb6\x08\xb8\x10\x46\x2b\xc1\x2e\x14\x1d\x93\xa7\xcf\xbf\x19\xb5\x11\x56\x19\x7c\x40\x1c\xf7\xfa\x19\x44\xfc\x55\x42\x51\x93\xfe\x4b\xb2\x43\x28\xbb\x3e\x0b\xfd\xa2\x9d\xac\x97\x26\xd3\xd9\x8a\x19\xd6\x70\x7f\x0f\xe5\xeb\x5c\x6e\x79\x96\x3c\x54\x5e\x38\x85\xf0\x11\xee\xa2\x63\x84\x4f\x6b\xa1\x77\x1f\xdf\x87\x02\xb3\x37\x20\xb9\x18\x24\x76\xdf\x7d\x00\xa3\x5b\xcd\x83\x05\x20\x7d\xac\xe1\xf0\xe0\xa0\x1d\x3c\x2d\xb6\x2e\xac\x6a\x78\x7e\x70\x70\xde\x53\x10\xf0\x2e\x22\x3d\xca\x1b\xef\x48\x1b\x0f\x69\x84\x32\x06\xcd\xab\xd7\xce\x32\x7e\xe0\x3e\xd7\x07\xbd\xd0\x06\x67\xa8\xea\xdc\x7c\x7f\x44\xb4\xaf\xe8\x2f\xc2\x50\x77\x1b\xbc\x70\x26\xb6\x78\x9e\xe4\x4f\xfd\xad\x90\x97\xe1\x4a\x70\x53\x43\x65\xf4\xa4\x6a\x5d\xba\x02\x7b\xd9\xaf\x29\x48\x8b\x51\x6c\xbf\x48\x93\xbd\xb4\x66\xb5\x71\xe0\x36\x56\x88\xb6\xfa\x2f\x75\x5b\x78\x21\xda\xa2\xbf\x2f\xb7\x53\x17\x22\x7c\x4b\x3a\xad\x76\x54\xff\xe0\xfc\xdf\xca\x91\xe5\xe7\x8f\x5e\x0b\xbd\xd8\x8e\x49\x6f\x2e\xd6\xf7\xf8\x80\x9c\x7c\x57\x67\xbf\x0d\xb6\x0f\xda\xe5\xf1\x19\x41\x74\x91\x01\x3b\x21\x5b\xa7\xb0\xe8\xff\x61\x8c\xfa\x49\x75\xf7\x78\x86\x49\xb5\xf5\xe3\xde\x3d\xad\x9d\xb3\x7a\x32\x7b\x17\xc1\x3b\xe9\x7d\x12\xa1\xa7\xf4\x11\xcb\x4f\x66\x64\x66\x83\x9e\xe9\xcf\x1e\xbd\x83\xde\x7f\x03\x00\x00\xff\xff\x41\x1c\xe0\x81\xd0\x09\x00\x00")

func masterEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsOvsYaml,
		"master/etc/origin/node/pods/ovs.yaml",
	)
}

func masterEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcb\x8a\x66\x1b\x46\x29\x2d\xd0\x61\x50\xd1\x02\x59\xe2\x75\x06\x12\x27\x68\x93\x62\x40\x51\x04\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x78\x49\xff\xfb\x40\xea\xcd\x8e\x23\x27\xd9\x17\x5b\xbc\x97\xe7\x5e\x78\xcf\x49\xbc\x90\x9f\xd1\x3a\x69\x74\x02\xd5\xab\xd1\x52\xea\x34\x81\x73\x93\x8e\x72\x24\x9e\x72\xe2\xc9\x08\x80\x6b\x6d\x88\x93\x34\xda\xf9\x23\x80\x13\x19\xa6\xa5\x42\x1b\x71\x55\x64\x3c\x5a\x96\x33\xb4\x1a\x09\x5d\x24\x4d\x2c\xac\x24\x29\xb8\x62\x85\x49\x13\xd8\xdb\x1b\x01\x28\x3e\x43\xd5\x38\xf3\xa2\x48\xc0\xa5\x3a\x1c\x84\xc9\x0b\xa3\x51\x53\x02\x1a\xe9\xda\xd8\x65\x10\x9b\x02\xb5\xcb\xe4\x9c\x02\xde\xc3\x36\xb4\x2a\x30\x01\xa9\xe7\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xcf\xae\xe0\x02\x93\x1e\x88\x79\x95\x2b\x50\xf8\x24\x84\xd1\xc4\xa5\x46\x1b\x52\x62\x3e\x8b\x9c\xeb\xb4\xce\x8f\x41\x3c\x93\x3a\x9e\x71\x97\x35\x67\x26\x9a\x87\xbb\xf0\x0f\xf0\xe3\x0f\x9b\x26\x00\x0e\x09\x18\x96\x06\x0a\x59\xe0\x9c\x4b\x35\x6a\x4d\x41\xce\x81\x6b\x43\x19\x5a\x28\xac\x11\xe8\x1c\x48\x07\x4a\x3a\x42\x2d\xf5\x02\x8c\x06\xca\x10\x84\x96\xcc\xa1\xad\xd0\x82\x33\x62\x89\xf4\x2b\x5c\x73\x49\x50\x6a\x92\x0a\x24\x01\xde\x48\x72\x0d\x2a\x59\x5e\xc0\xfe\x52\x2a\x05\x2f\x7e\xfa\xc7\xcc\x1c\xb0\xe2\xe7\xb7\xc1\x04\x0e\xf6\xe1\x62\xfc\xf1\xb4\xb1\xbc\xce\xa4\x42\x20\x5b\xe2\x5b\x48\x4d\x23\x04\x9f\x14\x8a\xcc\xc0\x3e\xa1\xa3\x7d\xb8\xf3\x31\x39\x01\x83\xcb\xe9\xe4\x6f\x76\x74\x36\x9d\x8e\x8f\x2e\x92\xb8\xe2\x36\xb6\xa5\x8e\x37\xda\x18\xf7\xa9\x46\x3e\x55\x78\x1f\xa7\x58\xc5\xba\x54\xea\xad\x2f\x45\x77\x51\xa0\x0e\xb2\x77\xcd\xad\x2f\x35\x81\xc3\xed\x46\x88\xd2\x5a\xd4\xa4\x56\xdb\x2d\x39\x9a\x4e\x36\x7a\xe1\x55\x6f\x1c\x44\x51\xb4\x07\xaf\xdf\xbf\x7c\xb5\x16\xc7\x29\xc4\x02\xde\xc0\xcb\x60\xd8\x29\x50\x39\x5c\xb3\x9a\x59\xe4\xcb\xee\x3c\x97\xcd\x63\x6a\x34\xf6\xf7\x75\xc1\x97\x08\xc6\xdf\x43\x33\x6d\x30\x2f\xb5\x08\xd3\xdf\x26\xa6\x4d\xda\xc2\xda\x1c\xd8\xc7\x39\xc4\x48\xc2\xf7\x25\xd6\x48\x51\x1a\xff\x7e\xc0\xfa\x96\x35\x30\x91\x30\x7a\xde\x78\x89\xa2\xf6\x32\x05\x05\x2f\x3f\x4d\xbf\x40\x9c\x19\x47\x1b\xb2\x36\x2b\x39\x87\x2f\x5f\x80\x35\x71\xdc\xca\x79\x2c\xb9\x88\x8d\x95\x0b\xa9\x99\xcf\x07\xbe\x7e\xbd\xd7\xfd\x30\x93\x06\xb8\x52\x78\x53\x18\xdb\x77\xc5\x99\xd2\x0a\xdc\x81\x35\xea\x1a\xd4\x3c\xe1\x0d\x8a\x9e\x4b\xe0\x88\x5b\xea\xda\xc3\x58\x8d\xf0\x2e\x00\xd6\x30\xb1\x87\x09\x3f\x8d\x32\x5a\xf1\x5c\x01\x63\x7e\x55\x0c\x99\xbb\x54\x47\xbd\x1e\x18\x53\x66\xa1\xb0\x42\xf5\xee\xc5\xed\xf1\xf8\x8f\xcb\x0f\x57\x27\x67\x1f\x4e\xc6\x9f\xc7\x27\x09\x7b\xfd\x3d\xa4\x86\xba\x6a\x59\x5b\x6f\x80\xb3\xf3\xf1\xf4\xd3\x5f\x93\x3f\x2f\xae\x8e\xa7\x9f\xae\x8e\xcf\x4e\x0f\x27\xd3\xa6\x88\x8a\xab\x12\x13\x10\xaa\x74\x84\x36\x52\x46\x70\x15\x54\x32\xe7\x0b\x4c\xe0\xf6\x16\xa2\xa3\x3a\xd9\x89\x97\xb8\x68\xea\xfb\x7a\x07\xdf\x4a\x43\x08\xdf\xeb\x88\xeb\x8b\x06\xc0\xf7\xd5\xb5\x19\x74\x6b\xe5\xdc\x58\x4a\xe0\xd5\xc1\xeb\x37\xbf\x35\xb1\xfd\xcd\x6e\x4b\x6b\xac\x0c\xb9\xa2\xec\xdf\x20\xb3\x58\x5f\x4e\x83\xe9\x05\xdf\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x04\x39\xe6\xc6\xae\xbc\xec\xe0\xb4\x1e\x69\x87\xa2\xb4\x92\x56\x47\x46\x13\xde\x50\xeb\x5b\x58\x59\x49\x85\x0b\x4c\x93\xb0\x11\xda\x10\xa5\x3e\x74\x97\x0e\x6d\x02\x07\x41\x54\x19\x55\xe6\x78\x6a\x4a\xdd\xd7\x96\xfb\xd3\x39\xa7\x2c\x81\xad\x7b\xdb\xac\xc6\x38\x6a\xee\xbc\x2b\x81\xa7\x67\x5a\xad\xd6\x82\x6e\xe3\xed\x9a\xc3\x35\xe0\xce\x6c\x5d\xff\x68\x80\x66\x8d\x6d\xc3\x55\xdc\xb2\x56\xf1\xa0\x4b\x9c\xce\x4a\xf7\x40\x81\x8d\x23\xf3\xea\x67\x66\x11\x96\x69\xe5\xae\x25\x89\x6c\x07\xb2\xa9\x9e\x0d\xdc\xbf\x86\x77\xe0\xf6\x46\xff\x27\xef\xfe\x5d\x3a\x9c\xf8\x96\xd9\x26\xdc\xfd\x25\xb7\x8d\x64\x0a\x62\xfe\x1d\xd3\x2a\xb7\xa7\xa5\xdb\xb4\xdb\xce\x48\x22\x38\x6b\xa4\x74\xa0\x18\x25\x67\x2d\x82\x5f\x60\xee\x29\x95\x29\x39\x6b\x61\x83\xcf\x56\x99\xde\x72\x5a\x2b\xbb\x4e\x06\xd6\x4f\x8e\xbb\x73\x61\xa5\x09\xbc\x54\xdc\xb9\x69\xbd\x48\x56\x8e\x30\x67\xf5\xa6\x6c\x3e\x9c\x46\x2d\x05\x9b\xcf\x93\x00\xe3\xd3\x6f\x79\xfc\x20\x0d\x47\x43\x1c\xdc\x09\x30\xcc\xbb\x5d\xac\x1b\x84\xf4\xad\xcd\x8d\xff\x36\x74\xf7\x41\x7a\xf1\xa0\xf7\x3a\x4f\x1f\x64\xe9\x63\x9e\x71\xc7\xc7\x61\xae\x3e\x8a\xb1\xc6\xcf\x21\xa8\x9a\x9c\x8f\x22\xdd\xe3\xda\x63\x6c\x7c\x52\x66\x9b\x73\xfa\x04\xfe\x0d\xa2\xde\xe7\xe0\x20\x03\x77\x0e\xd0\x26\x15\x87\x89\xb8\xb3\xb8\x27\x30\xf2\x79\x7c\xfc\x2f\x00\x00\xff\xff\x7b\x9a\x32\x52\xd8\x0c\x00\x00")

func masterEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsSdnYaml,
		"master/etc/origin/node/pods/sdn.yaml",
	)
}

func masterEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func masterEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeResolvConf,
		"master/etc/origin/node/resolv.conf",
	)
}

func masterEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := masterEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func masterEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeSdnKubeconfig,
		"master/etc/origin/node/sdn.kubeconfig",
	)
}

func masterEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xc1\x0e\x82\x20\x18\x00\xe0\x3b\x4f\xe1\x13\xc0\x5c\x67\x0e\xa9\x7f\x8c\x45\xd0\x32\xbd\xba\xd4\x5f\xc7\x2a\x7e\x47\xe4\xc5\xf9\xee\x6d\xbd\xc0\xe7\xae\x77\xed\x6c\x2d\x59\x05\x45\xa3\x3a\xe3\x94\x81\x16\x8c\xdc\xb6\xac\xc2\x88\x53\xc6\x4b\x0a\x93\x9f\x79\x49\xef\x85\x02\x86\x64\x68\x36\xb8\xe2\x8b\x5b\x1a\x31\xdb\x77\xa6\x2f\x47\x05\x5d\x0b\xb7\x5a\x3b\x2b\xd7\x03\xcf\x73\x76\x6e\x0a\x28\x9d\x3d\x69\x25\x05\xa6\x41\x50\xf4\xb3\x0f\x22\xd0\x88\xa2\x27\x4a\x9f\x14\x1f\x0b\x7f\x7e\x7b\x1c\xfe\x3c\xfb\x05\x00\x00\xff\xff\x86\x4c\x17\x6e\x88\x00\x00\x00")

func masterEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcSysconfigAtomicOpenshiftNode,
		"master/etc/sysconfig/atomic-openshift-node",
	)
}

func masterEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := masterEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRootKubeConfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterRootKubeConfigBytes() ([]byte, error) {
	return bindataRead(
		_masterRootKubeConfig,
		"master/root/.kube/config",
	)
}

func masterRootKubeConfig() (*asset, error) {
	bytes, err := masterRootKubeConfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/root/.kube/config", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterVarLibOriginDockerConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcc\x4d\x4c\x4f\x2d\x86\x50\x01\xa5\x39\x39\xc1\xa9\xc9\x45\xa9\x25\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x02\xd2\xee\x96\x2e\x00\x00\x00")

func masterVarLibOriginDockerConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterVarLibOriginDockerConfigJson,
		"master/var/lib/origin/.docker/config.json",
	)
}

func masterVarLibOriginDockerConfigJson() (*asset, error) {
	bytes, err := masterVarLibOriginDockerConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/var/lib/origin/.docker/config.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\x49\x2d\xca\x2c\x4b\x4d\xd1\x0b\xcf\x2f\xca\x4e\x2d\x72\xce\xc9\x2f\x4d\x09\x28\xca\x2f\xcb\x4c\x49\x2d\x72\xce\xcf\x4b\x53\xd0\x73\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x0a\x4e\x2d\x2a\xcb\x4c\x4e\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x73\xa7\x88\x79\x42\x00\x00\x00")

func workerEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginCloudproviderAzureConf,
		"worker/etc/origin/cloudprovider/azure.conf",
	)
}

func workerEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := workerEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeBootstrapKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xf0\x2e\x4d\x4a\x4d\x06\x8b\x2b\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xc9\x1b\x98\x7a\x3b\x00\x00\x00")

func workerEtcOriginNodeBootstrapKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeBootstrapKubeconfig,
		"worker/etc/origin/node/bootstrap.kubeconfig",
	)
}

func workerEtcOriginNodeBootstrapKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeBootstrapKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/bootstrap.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeCaCrt,
		"worker/etc/origin/node/ca.crt",
	)
}

func workerEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\xe5\xa7\xa4\x3a\xe5\xe7\x97\x14\x97\x14\x25\x16\x80\xa5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xb5\x29\x12\x85\x43\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperCrt,
		"worker/etc/origin/node/node-bootstrapper.crt",
	)
}

func workerEtcOriginNodeNodeBootstrapperCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xd0\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xe3\x74\x32\xfb\x48\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperKeyBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperKey,
		"worker/etc/origin/node/node-bootstrapper.key",
	)
}

func workerEtcOriginNodeNodeBootstrapperKey() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x53\x23\x37\x10\xbd\xcf\xaf\xe8\xf2\x79\xe7\xc3\x2c\x54\x52\xaa\xca\x81\x40\x6d\x42\x25\x45\x88\x4d\x72\x97\xa5\xb6\xad\x58\xa3\x1e\x5a\xad\x09\x86\xec\x7f\x4f\x69\x66\xc0\xf6\x66\xa1\xb2\x27\xd0\xbc\xd7\x5f\xaf\xa5\x67\xdd\xb9\x3f\x91\xa3\xa3\xa0\xa0\x9f\x17\x3a\xc9\xf6\x8a\xc2\xda\x6d\x54\x01\x90\x4f\x18\xc4\x19\x2d\x8e\xc2\x95\x36\x5b\x5c\xba\x27\x54\x30\x6f\x9a\xe6\xeb\xf8\xfd\xfd\xaf\x0a\x2e\xda\x09\x24\x76\x4f\xef\xc4\x9e\xc2\x2f\xa1\x36\xc4\x1f\x5d\xb0\x97\xd6\x32\xc6\xa8\x60\x7e\xf6\x5d\xd5\x54\x4d\x35\x57\x17\x1f\x33\x78\x4d\xad\x76\x41\x81\xf1\x29\x0a\x72\xe5\xc9\x68\x9f\x81\x9b\x3b\x05\xcd\x40\x6d\xf2\x71\x81\x26\x71\x74\x3d\x2e\x30\x92\xef\xf3\x58\x0a\x6a\x14\x53\x13\xbb\x8d\x0b\x75\x20\x8b\x35\x0f\x60\x65\x28\xac\x0b\x4b\x66\x87\x7c\x98\x7f\x3c\x2f\xb7\xae\x5d\x10\xc9\xb5\x63\x34\x42\xbc\x57\x50\xf7\x9a\x6b\xef\x56\xf5\xc8\x88\x5b\xd7\x9e\xd0\x97\xf9\x3f\x99\x78\x9c\xc2\x11\xaf\x8a\x64\x76\x05\x00\x3e\xa2\xf9\x59\x07\xeb\x91\x6f\x75\x8b\x0a\x82\x16\xd7\x63\x81\x41\xaf\x3c\xfe\x11\x9c\xf5\x2e\x6c\x14\x08\x27\x2c\x5c\xab\x37\x78\xe8\x6b\x4d\xdc\x6a\x51\xf0\xfc\x0c\xd5\xf8\xb5\xba\xc9\x8c\x58\x7d\x1a\x10\xf8\x07\x1e\x12\x09\xc2\xe7\xcf\x05\x80\xd7\x82\x51\x14\xac\xb5\x8f\x58\xb8\x4e\x72\x81\xb8\xdc\x07\x73\x87\xec\xc8\x2a\xf8\xd8\xc4\x62\xe7\x82\x55\x70\x4b\x76\xaa\x53\xec\xd2\x0a\x3d\xca\x25\x6f\x52\x8b\x41\x62\x2e\xbc\x22\x92\x28\xac\xbb\x32\xa3\xe6\xb5\xa1\xf2\xbf\xba\xbe\x52\xab\x03\xb5\x00\x30\xc8\x52\x5a\xc7\x6f\x44\x65\xd8\xad\xf3\x85\xc2\x98\xd9\x9e\x92\x2d\xdf\xaa\x33\xa0\x1d\x53\xef\x2c\x72\xad\x9f\x12\xe3\xb8\xc7\x97\xc0\x17\x6c\x0c\x1d\x08\x59\xf9\x41\xe1\x9c\x55\x98\xbc\x47\x2e\xb5\x88\x36\xdb\xd2\x62\xfe\x33\x92\x67\x59\xf7\x59\xd6\x1a\xb5\x24\xc6\x72\x93\x5b\x1a\xb1\x05\x89\x16\xfc\x65\xd4\xe7\xca\x3b\x0c\x72\x75\xe8\xfb\x87\x1c\xf9\xe1\x84\xb3\x44\xee\x91\xbf\xe4\x14\x00\xad\x7e\x2c\x3b\xb2\x53\xde\xd9\x45\x93\x2b\x66\x21\x4a\xaf\x57\xe8\xa7\xef\xcf\xcf\xd0\xb1\x0b\x02\xb3\x01\x62\xf2\x38\x88\xca\x01\x05\x63\xe5\xa8\x9e\x41\xb5\x20\x8f\x30\x1b\x12\xcf\x4e\xf7\xdf\x91\x2d\x5b\x1d\xdc\x1a\xa3\x94\x9d\x96\xed\x1b\xda\xe7\x46\x0a\x00\x1e\x3a\x2f\x8f\x37\xf1\x85\x24\x9c\x82\xb8\x16\x4b\xc6\x87\x94\x73\xe6\x03\x25\x19\x59\xf3\x26\x3f\x85\xdc\x5e\xc9\x18\xf3\xe0\xf6\x75\x8a\xea\x1a\xd9\xf5\x68\xab\xac\xcb\x62\x42\x87\x2b\x2c\xda\x05\xe4\xac\x93\x33\x38\x0d\x73\x32\x44\xdc\x47\xc1\xf6\x9d\x94\xcb\x81\xf0\x2d\x49\x5b\x9d\xed\x63\xda\x1f\x85\x80\x26\x5b\xd1\x6f\x3d\x32\x3b\x3b\x0e\xad\x8d\xc1\x2e\x83\x82\x41\xee\xf7\x1d\x46\x05\xba\xeb\xfc\xe4\x78\x75\x1f\xec\xf1\x26\x3a\x26\xa1\x55\x5a\x7f\x38\xe6\xfc\x15\x29\xe4\xa7\x93\x38\x3f\xc2\xf3\xec\x7d\xe6\x90\xf0\x7f\xe5\x2b\x00\x1e\xba\xa8\xe0\xac\x99\x9a\xce\xfa\x4d\x76\x30\x5c\x97\xe3\x37\x16\x50\xfe\x26\xde\x1d\xdc\xa2\x95\xa4\x60\x7e\x7e\x91\x2b\x4f\xe0\x9d\x4f\x1b\x17\x46\xdf\x61\xb4\x5b\x2d\x35\x75\x18\xe2\xd6\xad\xa5\xa4\x3e\x96\x13\xaf\x23\xef\xcc\xbe\xe8\x98\x1e\xf7\x27\x46\x30\x79\x6f\x69\x9c\xe5\x97\xbd\x57\xf3\xb3\xef\xb3\xf7\xd6\xf3\xf3\x22\x6f\xc1\x85\xcd\x4d\x58\xd3\xe0\x1b\xc7\x7e\x3e\x59\xb4\x9a\x37\x67\x43\x4f\x19\xbc\x1d\xeb\x29\x10\xd3\x9d\x0f\xf9\x87\xad\x5c\x2a\x30\xba\x32\x2c\x45\x4f\x3e\xb5\x47\x16\x38\x98\xfe\xef\x89\x44\xe7\x13\x40\x87\xfc\x69\xf9\x13\x53\xea\x14\x84\xe4\xfd\x14\xf0\x35\xcf\x9e\xee\xfc\xeb\xc0\xe3\x0f\x48\x35\x06\xc4\xe2\xdf\x00\x00\x00\xff\xff\xce\x54\x19\x4b\x12\x07\x00\x00")

func workerEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeConfigYaml,
		"worker/etc/origin/node/node-config.yaml",
	)
}

func workerEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xeb\x86\x64\x03\x26\x29\xce\x1a\x04\x55\x90\x0e\x45\x37\x0c\x79\xc8\x0f\x24\x5b\x5f\x8a\x22\xa5\xc9\xb3\xc5\x99\x22\x19\xde\xd1\xae\x97\xf6\x7f\x1f\x48\x4b\x8a\xbd\x38\x5d\xd1\x3e\x59\x77\xba\xfb\x78\xf7\xdd\x77\xa2\x85\xd7\x6f\x30\x90\x76\xb6\x86\xc5\x78\x34\xd7\x56\xd5\x70\xe5\xd4\xa8\x45\x16\x4a\xb0\xa8\x47\x00\xc2\x5a\xc7\x82\xb5\xb3\x94\x4c\x00\x92\x0d\xaa\x68\x30\x94\xc2\xf8\x46\x94\xf3\x38\xc1\x60\x91\x91\x4a\xed\x2a\x19\x34\x6b\x29\x4c\xe1\x9d\xaa\x61\x7f\x7f\x04\x60\xc4\x04\x4d\x97\x2c\xbc\xaf\xc1\x2d\x28\x1b\xd2\xb5\xde\x59\xb4\x5c\x83\x45\x5e\xba\x30\xcf\x6e\xe7\xd1\x52\xa3\xa7\x9c\xf1\x76\xc7\xf0\xca\x63\x0d\xda\x4e\x83\x18\x01\x58\xd1\x62\x0f\x9b\x9e\xc9\x0b\x99\x1c\x3d\x50\x41\xca\x8e\xc8\xa3\x4c\x45\x48\x67\x59\x68\x8b\x21\x97\x54\xa4\x2a\x5a\x61\xd5\xba\xbe\x02\xaa\x89\xb6\xd5\x44\x50\xd3\xd9\x85\xec\x1e\x3e\xe6\x5f\x80\xef\xbf\xdb\x0e\x01\x20\x64\x28\x30\x3a\xf0\xda\xe3\x54\x68\x33\xea\x43\x41\x4f\x41\x58\xc7\x0d\x06\xf0\xc1\x49\x24\x02\x4d\x60\x34\x31\x5a\x6d\x67\xe0\x2c\x70\x83\x20\xad\x2e\x08\xc3\x02\x03\x90\x93\x73\xe4\x9f\x61\x29\x34\x43\xb4\xac\x0d\x68\x06\xfc\xa0\x99\x3a\x54\x0e\xc2\xc3\xfe\x5c\x1b\x03\x3f\xfc\xf8\xb7\x9b\x10\x14\xfe\xa7\x93\x1c\x02\x07\xfb\xf0\xe7\xef\xd7\xe7\x5d\xe4\xb2\xd1\x06\x81\x43\xc4\x13\x50\xae\x73\x42\x2a\xaa\x8a\x14\x2a\x6a\x44\xc0\x2a\xb1\xb4\xa0\xa5\x66\xd9\x54\x24\x83\xf6\x4c\x95\x5b\x50\x21\xd9\x00\xb1\xe0\x48\xb0\xf7\xb2\x52\xb8\xa8\x6c\x34\xe6\x24\xd5\x6b\x07\x28\x00\x94\x8d\x83\x67\x4b\x11\x52\x3f\x35\xbc\x7a\xdc\xad\x8c\x21\xa0\x65\xb3\x82\x56\x58\x31\x4b\x6d\x5f\xbe\xb9\x59\x77\x98\x8c\x23\x82\xb2\x2c\x9f\xc1\xe1\xcb\xbd\xf1\x06\x30\x19\x44\x0f\x47\xb0\x97\x03\x87\x17\x68\x08\x37\xa2\x26\x01\xc5\x7c\xb0\xa7\xba\x7b\x54\xce\xe2\xc3\x14\x8c\x88\x56\x36\xe9\xd4\xce\x35\x8d\x56\x26\x49\xc3\x5d\xd4\x0c\xf7\x1b\x78\x5f\x4c\x8c\xf3\x9b\x24\x64\xee\x3b\xc7\xa7\xcd\x39\xe5\x03\x6e\xce\xfe\xd8\x98\xca\x97\x73\x1f\x18\x8a\xc2\xba\x22\xb9\xba\x30\x05\x45\x41\x2b\x62\x6c\x0b\xad\x4e\x83\xb0\xca\xb5\x0f\x8d\x5e\x23\x71\xd0\x92\xb3\xa8\x6c\x6c\x27\x18\xc0\x4d\xc1\x73\x13\x50\x28\x82\x2d\x20\x19\x50\x30\x12\xb0\x83\x80\x2a\x4a\x4c\x59\x03\x94\x68\x5d\xb4\x9c\xb2\xaf\x6f\x6e\x92\x04\x23\x21\x25\xbd\x36\x8e\x98\x60\xa9\xb9\x49\xf3\x5c\x81\x74\x01\x69\x48\x6b\x98\x3d\xd5\x55\x35\x89\xb3\x7f\xb4\x31\xa2\x0c\xa8\x1a\xc1\xa5\x74\x6d\x45\x8d\x5b\xde\x4e\xe2\xac\x94\x33\xfd\xab\x56\xa7\xe3\xa3\xe3\xf1\x2f\xc7\x2f\xbe\x36\xf7\xf0\xf8\xc5\xf1\x68\x50\xf4\xdb\xb7\xf0\xde\x26\xd5\xbd\x87\x62\xc6\x30\x3e\x84\x77\xef\x1e\x89\x75\xdd\x7f\x62\x37\xf3\x9a\x77\x2c\x6d\xef\xa5\x47\x7b\xbb\xb8\xc9\xc4\x40\x09\x59\xc2\xb7\xd2\xd9\xa9\x9e\xd5\xb6\x08\xb8\x10\x46\x2b\xc1\x2e\x14\x1d\x93\xa7\xcf\xbf\x19\xb5\x11\x56\x19\x7c\x40\x1c\xf7\xfa\x19\x44\xfc\x55\x42\x51\x93\xfe\x4b\xb2\x43\x28\xbb\x3e\x0b\xfd\xa2\x9d\xac\x97\x26\xd3\xd9\x8a\x19\xd6\x70\x7f\x0f\xe5\xeb\x5c\x6e\x79\x96\x3c\x54\x5e\x38\x85\xf0\x11\xee\xa2\x63\x84\x4f\x6b\xa1\x77\x1f\xdf\x87\x02\xb3\x37\x20\xb9\x18\x24\x76\xdf\x7d\x00\xa3\x5b\xcd\x83\x05\x20\x7d\xac\xe1\xf0\xe0\xa0\x1d\x3c\x2d\xb6\x2e\xac\x6a\x78\x7e\x70\x70\xde\x53\x10\xf0\x2e\x22\x3d\xca\x1b\xef\x48\x1b\x0f\x69\x84\x32\x06\xcd\xab\xd7\xce\x32\x7e\xe0\x3e\xd7\x07\xbd\xd0\x06\x67\xa8\xea\xdc\x7c\x7f\x44\xb4\xaf\xe8\x2f\xc2\x50\x77\x1b\xbc\x70\x26\xb6\x78\x9e\xe4\x4f\xfd\xad\x90\x97\xe1\x4a\x70\x53\x43\x65\xf4\xa4\x6a\x5d\xba\x02\x7b\xd9\xaf\x29\x48\x8b\x51\x6c\xbf\x48\x93\xbd\xb4\x66\xb5\x71\xe0\x36\x56\x88\xb6\xfa\x2f\x75\x5b\x78\x21\xda\xa2\xbf\x2f\xb7\x53\x17\x22\x7c\x4b\x3a\xad\x76\x54\xff\xe0\xfc\xdf\xca\x91\xe5\xe7\x8f\x5e\x0b\xbd\xd8\x8e\x49\x6f\x2e\xd6\xf7\xf8\x80\x9c\x7c\x57\x67\xbf\x0d\xb6\x0f\xda\xe5\xf1\x19\x41\x74\x91\x01\x3b\x21\x5b\xa7\xb0\xe8\xff\x61\x8c\xfa\x49\x75\xf7\x78\x86\x49\xb5\xf5\xe3\xde\x3d\xad\x9d\xb3\x7a\x32\x7b\x17\xc1\x3b\xe9\x7d\x12\xa1\xa7\xf4\x11\xcb\x4f\x66\x64\x66\x83\x9e\xe9\xcf\x1e\xbd\x83\xde\x7f\x03\x00\x00\xff\xff\x41\x1c\xe0\x81\xd0\x09\x00\x00")

func workerEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsOvsYaml,
		"worker/etc/origin/node/pods/ovs.yaml",
	)
}

func workerEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcb\x8a\x66\x1b\x46\x29\x2d\xd0\x61\x50\xd1\x02\x59\xe2\x75\x06\x12\x27\x68\x93\x62\x40\x51\x04\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x78\x49\xff\xfb\x40\xea\xcd\x8e\x23\x27\xd9\x17\x5b\xbc\x97\xe7\x5e\x78\xcf\x49\xbc\x90\x9f\xd1\x3a\x69\x74\x02\xd5\xab\xd1\x52\xea\x34\x81\x73\x93\x8e\x72\x24\x9e\x72\xe2\xc9\x08\x80\x6b\x6d\x88\x93\x34\xda\xf9\x23\x80\x13\x19\xa6\xa5\x42\x1b\x71\x55\x64\x3c\x5a\x96\x33\xb4\x1a\x09\x5d\x24\x4d\x2c\xac\x24\x29\xb8\x62\x85\x49\x13\xd8\xdb\x1b\x01\x28\x3e\x43\xd5\x38\xf3\xa2\x48\xc0\xa5\x3a\x1c\x84\xc9\x0b\xa3\x51\x53\x02\x1a\xe9\xda\xd8\x65\x10\x9b\x02\xb5\xcb\xe4\x9c\x02\xde\xc3\x36\xb4\x2a\x30\x01\xa9\xe7\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xcf\xae\xe0\x02\x93\x1e\x88\x79\x95\x2b\x50\xf8\x24\x84\xd1\xc4\xa5\x46\x1b\x52\x62\x3e\x8b\x9c\xeb\xb4\xce\x8f\x41\x3c\x93\x3a\x9e\x71\x97\x35\x67\x26\x9a\x87\xbb\xf0\x0f\xf0\xe3\x0f\x9b\x26\x00\x0e\x09\x18\x96\x06\x0a\x59\xe0\x9c\x4b\x35\x6a\x4d\x41\xce\x81\x6b\x43\x19\x5a\x28\xac\x11\xe8\x1c\x48\x07\x4a\x3a\x42\x2d\xf5\x02\x8c\x06\xca\x10\x84\x96\xcc\xa1\xad\xd0\x82\x33\x62\x89\xf4\x2b\x5c\x73\x49\x50\x6a\x92\x0a\x24\x01\xde\x48\x72\x0d\x2a\x59\x5e\xc0\xfe\x52\x2a\x05\x2f\x7e\xfa\xc7\xcc\x1c\xb0\xe2\xe7\xb7\xc1\x04\x0e\xf6\xe1\x62\xfc\xf1\xb4\xb1\xbc\xce\xa4\x42\x20\x5b\xe2\x5b\x48\x4d\x23\x04\x9f\x14\x8a\xcc\xc0\x3e\xa1\xa3\x7d\xb8\xf3\x31\x39\x01\x83\xcb\xe9\xe4\x6f\x76\x74\x36\x9d\x8e\x8f\x2e\x92\xb8\xe2\x36\xb6\xa5\x8e\x37\xda\x18\xf7\xa9\x46\x3e\x55\x78\x1f\xa7\x58\xc5\xba\x54\xea\xad\x2f\x45\x77\x51\xa0\x0e\xb2\x77\xcd\xad\x2f\x35\x81\xc3\xed\x46\x88\xd2\x5a\xd4\xa4\x56\xdb\x2d\x39\x9a\x4e\x36\x7a\xe1\x55\x6f\x1c\x44\x51\xb4\x07\xaf\xdf\xbf\x7c\xb5\x16\xc7\x29\xc4\x02\xde\xc0\xcb\x60\xd8\x29\x50\x39\x5c\xb3\x9a\x59\xe4\xcb\xee\x3c\x97\xcd\x63\x6a\x34\xf6\xf7\x75\xc1\x97\x08\xc6\xdf\x43\x33\x6d\x30\x2f\xb5\x08\xd3\xdf\x26\xa6\x4d\xda\xc2\xda\x1c\xd8\xc7\x39\xc4\x48\xc2\xf7\x25\xd6\x48\x51\x1a\xff\x7e\xc0\xfa\x96\x35\x30\x91\x30\x7a\xde\x78\x89\xa2\xf6\x32\x05\x05\x2f\x3f\x4d\xbf\x40\x9c\x19\x47\x1b\xb2\x36\x2b\x39\x87\x2f\x5f\x80\x35\x71\xdc\xca\x79\x2c\xb9\x88\x8d\x95\x0b\xa9\x99\xcf\x07\xbe\x7e\xbd\xd7\xfd\x30\x93\x06\xb8\x52\x78\x53\x18\xdb\x77\xc5\x99\xd2\x0a\xdc\x81\x35\xea\x1a\xd4\x3c\xe1\x0d\x8a\x9e\x4b\xe0\x88\x5b\xea\xda\xc3\x58\x8d\xf0\x2e\x00\xd6\x30\xb1\x87\x09\x3f\x8d\x32\x5a\xf1\x5c\x01\x63\x7e\x55\x0c\x99\xbb\x54\x47\xbd\x1e\x18\x53\x66\xa1\xb0\x42\xf5\xee\xc5\xed\xf1\xf8\x8f\xcb\x0f\x57\x27\x67\x1f\x4e\xc6\x9f\xc7\x27\x09\x7b\xfd\x3d\xa4\x86\xba\x6a\x59\x5b\x6f\x80\xb3\xf3\xf1\xf4\xd3\x5f\x93\x3f\x2f\xae\x8e\xa7\x9f\xae\x8e\xcf\x4e\x0f\x27\xd3\xa6\x88\x8a\xab\x12\x13\x10\xaa\x74\x84\x36\x52\x46\x70\x15\x54\x32\xe7\x0b\x4c\xe0\xf6\x16\xa2\xa3\x3a\xd9\x89\x97\xb8\x68\xea\xfb\x7a\x07\xdf\x4a\x43\x08\xdf\xeb\x88\xeb\x8b\x06\xc0\xf7\xd5\xb5\x19\x74\x6b\xe5\xdc\x58\x4a\xe0\xd5\xc1\xeb\x37\xbf\x35\xb1\xfd\xcd\x6e\x4b\x6b\xac\x0c\xb9\xa2\xec\xdf\x20\xb3\x58\x5f\x4e\x83\xe9\x05\xdf\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x04\x39\xe6\xc6\xae\xbc\xec\xe0\xb4\x1e\x69\x87\xa2\xb4\x92\x56\x47\x46\x13\xde\x50\xeb\x5b\x58\x59\x49\x85\x0b\x4c\x93\xb0\x11\xda\x10\xa5\x3e\x74\x97\x0e\x6d\x02\x07\x41\x54\x19\x55\xe6\x78\x6a\x4a\xdd\xd7\x96\xfb\xd3\x39\xa7\x2c\x81\xad\x7b\xdb\xac\xc6\x38\x6a\xee\xbc\x2b\x81\xa7\x67\x5a\xad\xd6\x82\x6e\xe3\xed\x9a\xc3\x35\xe0\xce\x6c\x5d\xff\x68\x80\x66\x8d\x6d\xc3\x55\xdc\xb2\x56\xf1\xa0\x4b\x9c\xce\x4a\xf7\x40\x81\x8d\x23\xf3\xea\x67\x66\x11\x96\x69\xe5\xae\x25\x89\x6c\x07\xb2\xa9\x9e\x0d\xdc\xbf\x86\x77\xe0\xf6\x46\xff\x27\xef\xfe\x5d\x3a\x9c\xf8\x96\xd9\x26\xdc\xfd\x25\xb7\x8d\x64\x0a\x62\xfe\x1d\xd3\x2a\xb7\xa7\xa5\xdb\xb4\xdb\xce\x48\x22\x38\x6b\xa4\x74\xa0\x18\x25\x67\x2d\x82\x5f\x60\xee\x29\x95\x29\x39\x6b\x61\x83\xcf\x56\x99\xde\x72\x5a\x2b\xbb\x4e\x06\xd6\x4f\x8e\xbb\x73\x61\xa5\x09\xbc\x54\xdc\xb9\x69\xbd\x48\x56\x8e\x30\x67\xf5\xa6\x6c\x3e\x9c\x46\x2d\x05\x9b\xcf\x93\x00\xe3\xd3\x6f\x79\xfc\x20\x0d\x47\x43\x1c\xdc\x09\x30\xcc\xbb\x5d\xac\x1b\x84\xf4\xad\xcd\x8d\xff\x36\x74\xf7\x41\x7a\xf1\xa0\xf7\x3a\x4f\x1f\x64\xe9\x63\x9e\x71\xc7\xc7\x61\xae\x3e\x8a\xb1\xc6\xcf\x21\xa8\x9a\x9c\x8f\x22\xdd\xe3\xda\x63\x6c\x7c\x52\x66\x9b\x73\xfa\x04\xfe\x0d\xa2\xde\xe7\xe0\x20\x03\x77\x0e\xd0\x26\x15\x87\x89\xb8\xb3\xb8\x27\x30\xf2\x79\x7c\xfc\x2f\x00\x00\xff\xff\x7b\x9a\x32\x52\xd8\x0c\x00\x00")

func workerEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsSdnYaml,
		"worker/etc/origin/node/pods/sdn.yaml",
	)
}

func workerEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func workerEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeResolvConf,
		"worker/etc/origin/node/resolv.conf",
	)
}

func workerEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := workerEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func workerEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeSdnKubeconfig,
		"worker/etc/origin/node/sdn.kubeconfig",
	)
}

func workerEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xc1\x0e\x82\x20\x18\x00\xe0\x3b\x4f\xe1\x13\xc0\x5c\x67\x0e\xa9\x7f\x8c\x45\xd0\x32\xbd\xba\xd4\x5f\xc7\x2a\x7e\x47\xe4\xc5\xf9\xee\x6d\xbd\xc0\xe7\xae\x77\xed\x6c\x2d\x59\x05\x45\xa3\x3a\xe3\x94\x81\x16\x8c\xdc\xb6\xac\xc2\x88\x53\xc6\x4b\x0a\x93\x9f\x79\x49\xef\x85\x02\x86\x64\x68\x36\xb8\xe2\x8b\x5b\x1a\x31\xdb\x77\xa6\x2f\x47\x05\x5d\x0b\xb7\x5a\x3b\x2b\xd7\x03\xcf\x73\x76\x6e\x0a\x28\x9d\x3d\x69\x25\x05\xa6\x41\x50\xf4\xb3\x0f\x22\xd0\x88\xa2\x27\x4a\x9f\x14\x1f\x0b\x7f\x7e\x7b\x1c\xfe\x3c\xfb\x05\x00\x00\xff\xff\x86\x4c\x17\x6e\x88\x00\x00\x00")

func workerEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcSysconfigAtomicOpenshiftNode,
		"worker/etc/sysconfig/atomic-openshift-node",
	)
}

func workerEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := workerEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerVarLibOriginDockerConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcc\x4d\x4c\x4f\x2d\x86\x50\x01\xa5\x39\x39\xc1\xa9\xc9\x45\xa9\x25\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x02\xd2\xee\x96\x2e\x00\x00\x00")

func workerVarLibOriginDockerConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_workerVarLibOriginDockerConfigJson,
		"worker/var/lib/origin/.docker/config.json",
	)
}

func workerVarLibOriginDockerConfigJson() (*asset, error) {
	bytes, err := workerVarLibOriginDockerConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/var/lib/origin/.docker/config.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master/etc/etcd/ca.crt":                                  masterEtcEtcdCaCrt,
	"master/etc/etcd/etcd.conf":                               masterEtcEtcdEtcdConf,
	"master/etc/etcd/peer.crt":                                masterEtcEtcdPeerCrt,
	"master/etc/etcd/peer.key":                                masterEtcEtcdPeerKey,
	"master/etc/etcd/server.crt":                              masterEtcEtcdServerCrt,
	"master/etc/etcd/server.key":                              masterEtcEtcdServerKey,
	"master/etc/origin/cloudprovider/azure.conf":              masterEtcOriginCloudproviderAzureConf,
	"master/etc/origin/master/admin.crt":                      masterEtcOriginMasterAdminCrt,
	"master/etc/origin/master/admin.key":                      masterEtcOriginMasterAdminKey,
	"master/etc/origin/master/admin.kubeconfig":               masterEtcOriginMasterAdminKubeconfig,
	"master/etc/origin/master/aggregator-front-proxy.crt":     masterEtcOriginMasterAggregatorFrontProxyCrt,
	"master/etc/origin/master/aggregator-front-proxy.key":     masterEtcOriginMasterAggregatorFrontProxyKey,
	"master/etc/origin/master/ca-bundle.crt":                  masterEtcOriginMasterCaBundleCrt,
	"master/etc/origin/master/ca.crt":                         masterEtcOriginMasterCaCrt,
	"master/etc/origin/master/ca.key":                         masterEtcOriginMasterCaKey,
	"master/etc/origin/master/front-proxy-ca.crt":             masterEtcOriginMasterFrontProxyCaCrt,
	"master/etc/origin/master/master-config.yaml":             masterEtcOriginMasterMasterConfigYaml,
	"master/etc/origin/master/master.etcd-ca.crt":             masterEtcOriginMasterMasterEtcdCaCrt,
	"master/etc/origin/master/master.etcd-client.crt":         masterEtcOriginMasterMasterEtcdClientCrt,
	"master/etc/origin/master/master.etcd-client.key":         masterEtcOriginMasterMasterEtcdClientKey,
	"master/etc/origin/master/master.kubelet-client.crt":      masterEtcOriginMasterMasterKubeletClientCrt,
	"master/etc/origin/master/master.kubelet-client.key":      masterEtcOriginMasterMasterKubeletClientKey,
	"master/etc/origin/master/master.proxy-client.crt":        masterEtcOriginMasterMasterProxyClientCrt,
	"master/etc/origin/master/master.proxy-client.key":        masterEtcOriginMasterMasterProxyClientKey,
	"master/etc/origin/master/master.server.crt":              masterEtcOriginMasterMasterServerCrt,
	"master/etc/origin/master/master.server.key":              masterEtcOriginMasterMasterServerKey,
	"master/etc/origin/master/named/console.crt":              masterEtcOriginMasterNamedConsoleCrt,
	"master/etc/origin/master/named/console.key":              masterEtcOriginMasterNamedConsoleKey,
	"master/etc/origin/master/openshift-master.kubeconfig":    masterEtcOriginMasterOpenshiftMasterKubeconfig,
	"master/etc/origin/master/scheduler.json":                 masterEtcOriginMasterSchedulerJson,
	"master/etc/origin/master/service-signer.crt":             masterEtcOriginMasterServiceSignerCrt,
	"master/etc/origin/master/service-signer.key":             masterEtcOriginMasterServiceSignerKey,
	"master/etc/origin/master/serviceaccounts.private.key":    masterEtcOriginMasterServiceaccountsPrivateKey,
	"master/etc/origin/master/serviceaccounts.public.key":     masterEtcOriginMasterServiceaccountsPublicKey,
	"master/etc/origin/master/session-secrets.yaml":           masterEtcOriginMasterSessionSecretsYaml,
	"master/etc/origin/node/ca.crt":                           masterEtcOriginNodeCaCrt,
	"master/etc/origin/node/client-ca.crt":                    masterEtcOriginNodeClientCaCrt,
	"master/etc/origin/node/node-config.yaml":                 masterEtcOriginNodeNodeConfigYaml,
	"master/etc/origin/node/node.kubeconfig":                  masterEtcOriginNodeNodeKubeconfig,
	"master/etc/origin/node/pods/apiserver.yaml":              masterEtcOriginNodePodsApiserverYaml,
	"master/etc/origin/node/pods/controllers.yaml":            masterEtcOriginNodePodsControllersYaml,
	"master/etc/origin/node/pods/etcd.yaml":                   masterEtcOriginNodePodsEtcdYaml,
	"master/etc/origin/node/pods/ovs.yaml":                    masterEtcOriginNodePodsOvsYaml,
	"master/etc/origin/node/pods/sdn.yaml":                    masterEtcOriginNodePodsSdnYaml,
	"master/etc/origin/node/resolv.conf":                      masterEtcOriginNodeResolvConf,
	"master/etc/origin/node/sdn.kubeconfig":                   masterEtcOriginNodeSdnKubeconfig,
	"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt": masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master/etc/sysconfig/atomic-openshift-node":              masterEtcSysconfigAtomicOpenshiftNode,
	"master/root/.kube/config":                                masterRootKubeConfig,
	"master/var/lib/origin/.docker/config.json":               masterVarLibOriginDockerConfigJson,
	"worker/etc/origin/cloudprovider/azure.conf":              workerEtcOriginCloudproviderAzureConf,
	"worker/etc/origin/node/bootstrap.kubeconfig":             workerEtcOriginNodeBootstrapKubeconfig,
	"worker/etc/origin/node/ca.crt":                           workerEtcOriginNodeCaCrt,
	"worker/etc/origin/node/node-bootstrapper.crt":            workerEtcOriginNodeNodeBootstrapperCrt,
	"worker/etc/origin/node/node-bootstrapper.key":            workerEtcOriginNodeNodeBootstrapperKey,
	"worker/etc/origin/node/node-config.yaml":                 workerEtcOriginNodeNodeConfigYaml,
	"worker/etc/origin/node/pods/ovs.yaml":                    workerEtcOriginNodePodsOvsYaml,
	"worker/etc/origin/node/pods/sdn.yaml":                    workerEtcOriginNodePodsSdnYaml,
	"worker/etc/origin/node/resolv.conf":                      workerEtcOriginNodeResolvConf,
	"worker/etc/origin/node/sdn.kubeconfig":                   workerEtcOriginNodeSdnKubeconfig,
	"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt": workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"worker/etc/sysconfig/atomic-openshift-node":              workerEtcSysconfigAtomicOpenshiftNode,
	"worker/var/lib/origin/.docker/config.json":               workerVarLibOriginDockerConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"etcd": {nil, map[string]*bintree{
				"ca.crt":     {masterEtcEtcdCaCrt, map[string]*bintree{}},
				"etcd.conf":  {masterEtcEtcdEtcdConf, map[string]*bintree{}},
				"peer.crt":   {masterEtcEtcdPeerCrt, map[string]*bintree{}},
				"peer.key":   {masterEtcEtcdPeerKey, map[string]*bintree{}},
				"server.crt": {masterEtcEtcdServerCrt, map[string]*bintree{}},
				"server.key": {masterEtcEtcdServerKey, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {masterEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"master": {nil, map[string]*bintree{
					"admin.crt":                  {masterEtcOriginMasterAdminCrt, map[string]*bintree{}},
					"admin.key":                  {masterEtcOriginMasterAdminKey, map[string]*bintree{}},
					"admin.kubeconfig":           {masterEtcOriginMasterAdminKubeconfig, map[string]*bintree{}},
					"aggregator-front-proxy.crt": {masterEtcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
					"aggregator-front-proxy.key": {masterEtcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
					"ca-bundle.crt":              {masterEtcOriginMasterCaBundleCrt, map[string]*bintree{}},
					"ca.crt":                     {masterEtcOriginMasterCaCrt, map[string]*bintree{}},
					"ca.key":                     {masterEtcOriginMasterCaKey, map[string]*bintree{}},
					"front-proxy-ca.crt":         {masterEtcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
					"master-config.yaml":         {masterEtcOriginMasterMasterConfigYaml, map[string]*bintree{}},
					"master.etcd-ca.crt":         {masterEtcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
					"master.etcd-client.crt":     {masterEtcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
					"master.etcd-client.key":     {masterEtcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
					"master.kubelet-client.crt":  {masterEtcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
					"master.kubelet-client.key":  {masterEtcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
					"master.proxy-client.crt":    {masterEtcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
					"master.proxy-client.key":    {masterEtcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
					"master.server.crt":          {masterEtcOriginMasterMasterServerCrt, map[string]*bintree{}},
					"master.server.key":          {masterEtcOriginMasterMasterServerKey, map[string]*bintree{}},
					"named": {nil, map[string]*bintree{
						"console.crt": {masterEtcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
						"console.key": {masterEtcOriginMasterNamedConsoleKey, map[string]*bintree{}},
					}},
					"openshift-master.kubeconfig": {masterEtcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
					"scheduler.json":              {masterEtcOriginMasterSchedulerJson, map[string]*bintree{}},
					"service-signer.crt":          {masterEtcOriginMasterServiceSignerCrt, map[string]*bintree{}},
					"service-signer.key":          {masterEtcOriginMasterServiceSignerKey, map[string]*bintree{}},
					"serviceaccounts.private.key": {masterEtcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
					"serviceaccounts.public.key":  {masterEtcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
					"session-secrets.yaml":        {masterEtcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"ca.crt":           {masterEtcOriginNodeCaCrt, map[string]*bintree{}},
					"client-ca.crt":    {masterEtcOriginNodeClientCaCrt, map[string]*bintree{}},
					"node-config.yaml": {masterEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"node.kubeconfig":  {masterEtcOriginNodeNodeKubeconfig, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"apiserver.yaml":   {masterEtcOriginNodePodsApiserverYaml, map[string]*bintree{}},
						"controllers.yaml": {masterEtcOriginNodePodsControllersYaml, map[string]*bintree{}},
						"etcd.yaml":        {masterEtcOriginNodePodsEtcdYaml, map[string]*bintree{}},
						"ovs.yaml":         {masterEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml":         {masterEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":    {masterEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig": {masterEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {masterEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"root": {nil, map[string]*bintree{
			".kube": {nil, map[string]*bintree{
				"config": {masterRootKubeConfig, map[string]*bintree{}},
			}},
		}},
		"var": {nil, map[string]*bintree{
			"lib": {nil, map[string]*bintree{
				"origin": {nil, map[string]*bintree{
					".docker": {nil, map[string]*bintree{
						"config.json": {masterVarLibOriginDockerConfigJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
	"worker": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {workerEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"bootstrap.kubeconfig":  {workerEtcOriginNodeBootstrapKubeconfig, map[string]*bintree{}},
					"ca.crt":                {workerEtcOriginNodeCaCrt, map[string]*bintree{}},
					"node-bootstrapper.crt": {workerEtcOriginNodeNodeBootstrapperCrt, map[string]*bintree{}},
					"node-bootstrapper.key": {workerEtcOriginNodeNodeBootstrapperKey, map[string]*bintree{}},
					"node-config.yaml":      {workerEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"ovs.yaml": {workerEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml": {workerEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":    {workerEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig": {workerEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {workerEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"var": {nil, map[string]*bintree{
			"lib": {nil, map[string]*bintree{
				"origin": {nil, map[string]*bintree{
					".docker": {nil, map[string]*bintree{
						"config.json": {workerVarLibOriginDockerConfigJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
