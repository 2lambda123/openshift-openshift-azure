// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package arm generated by go-bindata.// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\xdf\x57\x1b\xb7\xb3\x7f\xae\xfe\x8a\xe9\x9a\x36\x4d\x8a\xbc\x90\xb6\xf7\xb6\x6e\xc9\x39\x04\x48\x4f\x6e\x53\xe0\x42\x72\xfb\x90\xe6\xe4\xc8\xab\x59\x5b\xb1\x56\xda\x4a\x5a\x83\x4b\xfc\xbf\xdf\x33\xd2\xae\xb1\xb1\x21\x49\x43\xbf\x79\x20\xb6\x34\x9a\x19\xcd\x7c\xe6\x97\xdc\xfb\x32\x1f\x2a\x93\x0f\x85\x1f\x03\xc7\x4b\xc6\x7a\xf0\xcc\x3a\x08\xe8\x83\x32\xa3\x01\x68\x3b\x02\x61\x24\x48\x67\x6b\x10\x5a\x43\x70\xa2\x2c\x55\x01\x61\x2c\x02\x5c\xd8\x46\x4b\x70\xb6\x09\x08\x53\x25\x20\x8c\x11\x2a\xe1\x03\x3a\x38\x7a\xf1\x94\xf5\xe0\xec\xe8\xfc\xe4\xd5\xd9\xc1\xd1\xaf\x67\x27\xaf\x4e\xf7\xb2\x99\x6d\x1c\x77\xe8\x6d\xe3\x0a\xe4\x23\x67\x9b\x3a\x63\x3d\x38\x39\x7f\xfb\xec\x7f\x0f\x8f\xf7\x32\x5b\xa3\xf1\x63\x55\x86\xfe\xd6\xca\xc9\xbe\xf5\x42\xe2\xb4\x5f\x68\xdb\xc8\x8c\xf5\x58\x0f\x54\x1d\xc4\x50\xa3\x07\xfe\x1c\x9e\x1f\x9f\xbe\x7a\x09\xdc\xc3\xd6\x37\x52\x8d\xe0\x5b\x3f\xb6\x2e\x40\xb6\xd5\xf2\xcd\xe0\x3d\x04\xa1\x34\xf0\xdd\x87\xc0\xdf\xc1\x8b\x93\x5f\x81\x73\x6d\x47\xbc\x76\x58\xaa\x4b\xc8\x7e\x7b\xf5\xf4\x08\x88\x14\x0e\xcf\x4e\x4e\x07\xd9\xe7\xf1\x27\x1e\x8c\x5d\x5d\x81\x2a\xa1\x7f\x60\x4d\xa9\x46\xfd\x73\x2c\x1a\xa7\xc2\xec\x54\x84\x62\x7c\x2a\x8a\x89\x18\xa1\x87\xf9\x9c\x69\x3b\x1a\xa1\x03\x1e\x5a\xc3\x71\x1f\x84\x0b\x4d\xdd\xf7\x63\xc8\x94\xf1\x41\x68\xad\xcc\x08\x1c\x4a\x20\x93\x17\xd2\x40\x11\x79\x36\x4e\x04\x65\x0d\x58\x03\x5b\xdf\x8c\xad\x0f\x46\x54\xf8\x30\x63\x85\x08\xf0\x24\x9f\x0a\x97\x6b\x35\xcc\x67\x4d\x95\x17\x5a\xa1\x09\xbc\x40\x17\xfa\x35\x56\xf0\xcb\x2f\x0f\x8e\x4e\x9e\x3d\x20\x15\x0f\xd0\x85\x7d\xff\x74\x16\xd0\x2f\x74\xa5\x35\x55\xaa\x42\x04\xf4\xfd\x56\xd7\x33\xac\xad\x57\xc1\xba\x59\xdc\x86\xf7\x70\x1e\x1c\xe9\x35\x9f\xb3\xa3\x93\x67\xb7\x0b\x9d\xe0\xec\xa6\xcc\x53\xa7\xa6\x22\xe0\x6f\x38\xfb\x44\xc9\xbf\xe1\x6c\x4d\xf0\x47\x1b\x70\xff\xec\x04\x7c\xeb\x05\x68\x6a\x49\x32\xe0\xf5\xd5\x55\xcb\xcf\xff\x8f\x55\xe6\x03\xee\xca\xb6\x21\x83\xf9\xfc\xcd\x9a\xc9\x4b\xeb\x40\x84\x80\x55\x1d\x40\x19\xb8\xda\xed\xf7\x7f\x98\xff\x0c\xd2\x32\x80\x59\x53\x41\xab\x06\xf0\x19\xf0\xbf\xe0\xd3\x64\x46\x91\xf0\xf5\xd7\x30\x74\x28\x26\x0c\xe0\xce\x0b\xbf\xee\xd4\xd8\xba\x6a\x3f\xcd\xdf\x6c\xbe\x7a\xab\x53\xc2\x50\x29\x94\x46\x99\x31\x20\xcc\xbe\x7e\xbd\x74\x1a\xb8\x0e\xf0\x03\xbc\x79\xf3\x33\x45\xb7\x01\xaf\x11\x6b\xd8\xfd\x19\x50\x7b\x04\xbc\x54\x81\xbe\x94\x8a\x49\x6b\xf0\x03\xde\x70\x58\xd9\xe9\xa7\x81\x99\xac\x57\x68\x14\x86\x92\x0f\x73\x15\x70\x57\xc2\x9d\xe0\xbe\x03\x84\xec\xea\x0a\x8d\x9c\xcf\x29\xcb\x15\x0e\x45\x40\x92\x1e\x84\x32\xe8\xa0\x6e\xb4\x26\x2b\x39\x0c\xac\x9a\x48\xe5\x80\xd7\xd7\xcc\xac\x53\x23\x65\xf2\xbe\xb4\xc5\x04\xdd\x0d\xb8\xaf\x6e\xe6\xe9\x46\xfd\x77\xde\x9a\x65\xd8\xf7\x0f\xd1\xa9\x29\xca\xfe\x81\xad\x86\xca\xa0\x7c\x5e\x89\x11\x9e\x36\x5a\x9f\x47\xa9\x1d\x10\xd6\x20\xae\x0d\xe5\x9e\x5b\xa4\x41\xee\xac\x0d\x39\x5d\xe9\xe5\xc9\xe1\xc9\x00\x24\x6a\x0c\x18\x53\x71\x69\xb5\xb6\x17\xc4\x29\xa6\xda\x74\x67\xb2\xb2\x28\x29\x45\xab\x00\xca\xc3\x50\x4c\x50\x82\x32\xc1\x82\x6d\x1c\xfc\xdf\xef\xa0\x48\x2f\xcf\xe2\x19\x21\x25\xf0\x12\xda\x6b\x33\x55\xc2\x97\x30\x72\xb8\x64\x99\x4e\x0d\x0c\x45\x5e\xfa\x20\x86\x09\x28\x0c\xc0\xcf\x7c\xc0\xaa\x08\x1a\x7c\xb0\x75\xcb\x83\x47\x6f\x36\x75\x3f\xa8\x0a\xdd\x07\xa9\x3c\xba\xa9\x2a\xf0\x36\xba\xa5\xfd\x6a\x52\xfa\xfe\x65\xe9\x49\xdd\x5c\xe2\x34\x97\xca\x4f\x72\xf1\x77\xe3\x30\x5f\x94\x9c\x5a\xb8\xb0\xcb\x00\xb0\x18\x5b\x78\x70\x37\x19\xac\xdd\x11\x88\x3d\x8c\x5c\xfd\x57\x63\x83\x00\xd8\x81\x9d\x07\xf0\xe4\xc9\xf5\xd5\x49\x0d\xdb\x98\x70\xf3\x24\x03\x70\xe8\x83\x75\x58\x58\x03\xfc\x6c\xc3\x7e\x42\x14\x71\x6a\x51\x24\x05\x56\xd6\xdc\x40\x11\x03\xc8\xa8\x70\x49\x42\x92\xcb\x06\x90\xbd\xb3\x8d\x33\x42\xcb\x6c\x9b\xf6\xa4\xf2\x54\xb5\xb8\xc6\x91\x28\x66\xdc\xe1\x48\xf9\xe0\x66\xd9\x00\x82\x6b\x90\x25\x3c\xad\xda\x52\xb8\xb0\x6e\xcc\xcd\x04\x37\x7c\x57\x2a\xc6\x5a\xcb\xc4\xe0\x21\x8c\xb7\xb9\x2c\x42\xdb\xf7\x8f\xad\xc4\x98\xbd\x9e\x44\x53\x1b\xa2\xfa\x7a\x23\x8a\x30\x14\x72\x13\x86\x16\x5e\xbd\xe9\x2b\x5f\x78\xb5\x9b\xeb\xc6\xec\xc0\xfb\xf7\xe9\x76\xb7\xb9\x75\x89\xf4\x86\xc0\xe4\x50\x89\xa5\x68\x74\xf0\x1f\xe5\x50\x3a\x77\xbb\x3b\xe3\x2e\xd9\xa5\x07\xa2\x28\xb0\xa6\x26\x0a\x7e\xfc\xfe\xfb\xef\x80\x4a\x04\xc5\xa4\x90\x95\xf2\x9e\x82\x90\x52\x8f\xb3\x5a\x93\x25\xad\x03\xe9\x63\xed\x08\x45\xbd\x1d\x0f\xb4\x1f\xbe\x8f\x65\xe4\x8b\xda\xd9\x60\xf7\xb6\xae\xa4\x0f\x5f\x7d\xb5\xfd\x68\xce\xbe\xa8\xad\x0b\x69\xa1\xd7\x7b\xb4\x3d\x67\x5f\x5c\x77\x2c\xfb\xb1\xa3\x7a\x7e\x76\xf4\xc7\xfe\x8b\x17\x6f\xf7\x5f\xbc\x38\xf9\x83\x92\xd9\x56\x64\x02\xbc\x22\xa7\x06\x04\xce\xd3\xff\xc7\x47\x7f\xd0\x62\xb7\xcd\x25\xb1\x86\xad\xf8\x97\xbf\x83\xfd\x83\x83\xa3\xd3\x97\xc0\x2f\xda\x14\xdf\xc9\xe1\x5e\x4c\xb1\xc5\xac\x9f\xf9\x94\xf5\xf2\x6e\xf7\x03\xa5\x80\x00\x43\xb6\x59\xc7\xcc\x79\xa2\x82\xf9\xfc\xee\xba\x7a\x37\xf2\xae\xb9\x7c\x5e\xe9\xfc\x68\x29\x9f\x5a\x41\xff\x6b\xe7\xb6\x12\x4a\xdd\xed\xf1\xc9\xcb\xa3\x01\x3c\x37\x50\x36\xa1\x71\xb8\x0d\x95\x9d\x62\xea\xb9\x95\x29\xad\xab\xda\x6a\xd9\x04\xaf\x24\x82\x2d\x01\xcd\x54\x39\x6b\x2a\x34\x01\xa6\xc2\xa9\xe4\x84\x1e\xf3\x18\xe0\xdb\x4b\x86\x97\xd1\x9d\xe7\xfb\xe7\xaf\xce\x9e\xef\x3d\x58\xba\xca\xef\xd1\x12\xed\x4d\xd2\x3e\xcc\xe7\x0f\xe2\x41\x1e\x07\x02\xd7\x98\x08\xdd\xd6\x58\xc0\xb9\x32\x2a\x40\xb0\x30\xb4\x36\xf8\xe0\x44\x0d\x87\xc7\xe7\xe0\x31\x34\x75\x97\x11\xe8\x10\xe7\xb5\x53\x53\xa5\x71\x84\x12\x38\xa7\xea\xcd\x0d\x86\x0b\xeb\x26\x40\x35\x1e\xf8\x14\xf2\x41\x9e\x3e\x62\xab\xdc\xdd\x66\x5e\xd5\xa1\xe3\x16\xb5\x44\x4d\x77\x86\x52\x51\x0c\x04\x1b\x55\x76\x6a\x34\x0e\x31\xd2\xf0\x32\xb0\x1b\x41\x8b\xa1\x48\xd5\x33\x1d\x4f\x99\xae\xd3\xaf\x12\x46\x10\x56\x82\x85\x5a\x15\x13\x68\x6a\x30\x78\x91\xd4\xf6\x18\x28\xb0\x7d\x8c\xd7\x31\x82\x1c\xa7\x3e\x83\xc5\x59\xea\x3a\x77\x76\x3c\x8f\x13\xcf\xdf\x13\x4b\xd6\x23\x06\xf1\x60\x8c\x1d\xaa\x3a\x7a\xda\xa7\xf8\x61\x71\x61\x95\x9c\x32\x59\x4d\x2d\x21\xba\xbe\xcc\x7f\xfa\x89\xa7\xfa\xcf\xa5\xf1\x7d\x3f\x5e\xd2\x5c\x1a\x5f\x09\xff\x17\x69\x3c\x6a\xf9\x93\xc6\xcb\xca\xa6\xfa\x92\xe8\x5a\x81\x9b\x35\xee\x68\xba\x8a\xc0\x7a\x70\x11\xb1\x4b\xbb\x14\xb7\x86\x32\xfb\x85\x10\x23\xc2\x1b\x0d\x88\x9d\xdd\x9a\xa0\xb4\x0a\x0a\x3d\x8c\x6c\xec\x32\x83\x05\x27\x8a\xd8\x69\x49\x45\xa8\xed\xd3\x74\x55\x2e\x0e\xbb\xc6\x78\x18\x62\x69\x1d\x92\x58\x6a\x49\x26\xc6\x5e\x98\xce\x85\x49\x12\x02\x1a\x49\x4e\xb8\x50\x61\x0c\x14\x57\x33\xf0\xb1\x4b\x62\x17\x63\xa5\x31\x86\xdc\xa2\x71\x04\x2e\x1f\xc2\xde\x1e\x64\x59\x0c\x3b\x69\xaf\xdb\xd6\x14\x63\xff\x0c\xa4\x83\xbf\x3f\x11\xa6\xac\x31\xe4\xea\x74\x82\xb1\xd4\x7a\xf3\x42\xf0\xe0\x1a\x1f\x61\xd7\x7a\x87\x6e\x36\x42\x83\x53\x11\x73\x14\xad\xf8\x20\x8a\x09\x08\x0f\xde\x52\xc7\xe6\xa3\x31\x56\x9b\x65\xe5\x41\x0b\x25\x29\x0d\xc0\x70\xc6\x7a\x2b\x51\xba\xe8\x6c\xb7\xd3\x49\x6d\x3d\xc1\x79\xac\xa2\x89\x5b\xe3\xde\x42\x5c\x59\x87\xac\x47\xaa\x78\x28\x9d\xad\x56\x68\x6b\x67\x0b\xf4\x9e\x7c\x72\xa1\xa8\x67\x1e\xab\x3a\x81\x8e\xf4\x67\x49\x0d\x8f\xe0\xc7\xe9\x75\xa0\xa1\xae\xbe\x40\x10\x20\xc5\x0c\xac\xd1\x33\xba\x4d\x8d\xa9\x1e\x4a\x5b\x78\x96\x37\xde\xe5\xda\x16\x42\x47\x3c\x8a\xbf\x3d\x16\xb2\xbd\x2c\xf5\xbe\x43\xe1\x51\x2b\x43\x7e\x85\xd3\xdd\xc3\x0f\xd2\x7b\x5b\x86\x0b\xe1\x3e\x9a\xbe\xd0\xa2\x12\xd3\x8e\x9a\xf5\x00\x4d\xcc\x25\x04\xec\x14\x10\xab\x5e\x69\xc3\xc2\xb3\xeb\xc8\x69\x4c\x25\xfc\x04\x2a\xe9\x65\x17\x35\x90\xe4\xac\x7e\xad\xac\xb9\x5e\x29\x75\x83\x26\x2c\xbe\x2f\xb1\x6b\x15\xb8\x2f\x76\xe9\x12\x9f\xc7\x8d\xf5\xe0\x54\x19\x98\x34\x43\x4c\x96\x8b\x28\x6a\x3c\x42\xb4\x2c\x88\x5a\x71\xa2\x45\xc7\x3c\x85\x92\x02\xee\x10\x32\xdf\xfb\x06\x1e\xa5\xf5\x01\x3c\xec\x3f\xea\xfd\xb9\x3b\x0e\xa1\xf6\x83\x3c\x5f\x9a\xf4\x7a\x59\x4a\x4e\xed\x70\x93\xca\x73\x4e\xcd\x92\xe9\x5f\x4b\xbc\x37\xc6\x8b\x87\x26\x9e\x16\xee\x55\x06\x65\xac\xf8\xe7\xfe\xb9\x7a\x79\x0f\xe6\x88\x03\x63\x64\xd3\x8e\xaa\x8c\x5d\x5d\x71\xca\xc9\x06\x61\xab\xff\x54\x14\x93\xa6\x7e\xaa\xed\xf0\x98\x52\x69\x96\x7d\xf0\x99\x6a\x51\x15\xa8\xb6\x4e\xd1\xcd\xd6\xc6\x78\xca\x74\x81\x12\xf0\xa2\x34\x0d\xa3\x94\x38\xd1\x9f\x95\xab\x0d\x74\xfe\x88\x51\xe7\x44\x7a\x1c\x2a\xb7\xb7\xba\xd7\x9e\x4b\x13\xfa\xd6\x12\xdd\x3f\x6e\x38\x8f\x42\x21\xd3\x9d\x3f\xb3\xe7\x5c\x61\xf4\x6f\xb6\x9d\xab\x82\xee\xaf\xf3\xbc\x53\x4f\x69\x2f\x8c\xb6\x42\x92\x11\x93\x13\xb2\xd5\x32\xba\x5e\x39\xff\x64\x10\xab\xe7\x5a\xfc\x0d\xd6\x97\x36\x11\xc7\xe7\xde\xda\xd9\xa9\x92\xe8\xf2\x41\xfe\x56\x8a\x20\xf2\xb7\x54\xee\x5a\xea\x65\x00\x0c\x72\xdb\x50\x89\xa6\xad\x0f\xd9\x8c\xa0\x94\x2e\x91\x38\xf1\x61\x0b\xf7\x3d\x3a\x79\x23\x02\xe6\xf3\x96\x48\xc6\x57\xf1\x58\x7b\xf7\x48\x58\x0b\xc6\xbe\x1c\xb6\x04\xa2\x88\x7b\x9d\xa9\xee\x36\x68\x2b\xbf\x23\x26\x17\x76\x61\xf2\xb8\x9b\x2f\xff\x29\xa6\x53\x53\x4f\x77\xfe\x4c\x4c\xaf\x30\xfa\x37\x31\xbd\x2a\xe8\x3f\x84\xe9\x64\xe5\x58\xd7\x8d\xa8\xfd\xd8\x86\x4f\xc2\x34\xa1\x68\xb0\xf8\xb4\xd8\x5a\xce\x57\x83\xd5\x6f\x09\x9d\x1c\xe1\xe8\xe5\xc1\xe1\xc1\xcb\x17\x6f\xf7\x4f\x9f\xef\x65\xdf\x65\xb7\x80\x76\xd5\x28\x44\x43\x5c\x62\x41\x6f\xf5\xed\x80\xb2\x12\x09\x6b\xb8\xa4\xb8\xe1\x94\x30\x57\x73\x29\x8d\x07\x89\x20\x36\xcd\x4b\x19\xbb\x5d\xa6\x19\x4b\x09\xcd\x0b\xdd\xc4\x18\xcd\x5a\x1b\xee\xc4\x7f\x7b\x5d\x7d\x59\x59\x1d\x3c\xfe\xee\xc7\x9d\xed\xe5\xa5\xdd\x8d\x84\xbb\xeb\x84\x8f\x37\x12\x3e\x8e\x84\xd9\x66\x95\x78\xb0\x13\x34\xd1\x2c\xbc\xb4\x8e\xc7\x17\x9f\x1b\xa4\x42\x4e\xd1\x05\xe5\x91\xd7\x88\x8e\x37\x4e\x7b\xd8\x50\x1a\xa3\x18\xc6\xaa\xe9\xba\x95\xf2\x47\x37\xd6\xd6\x5e\xa2\x17\xf6\x5c\x29\x49\x2b\x03\xe7\x0d\xbe\x1f\x83\x4c\x8c\xe3\x4a\x16\xcb\x33\xcd\x3f\xf3\x39\x63\xa1\x31\x28\xb9\x90\x15\x35\xe2\x34\xec\xc2\x75\x33\xd3\x3e\x29\xf1\x5a\x0b\x93\x86\x36\x04\xa1\xbd\x05\x83\x28\xaf\xe9\xfa\xb1\x61\xeb\x4f\xad\x6e\x2a\xf4\x40\xc0\x48\xcf\xe1\xb2\x1b\xc4\x2e\x4b\x0f\xe9\x91\xb3\xa0\xf1\x8b\x66\xb4\xee\x51\xbc\x82\x9d\xff\xfe\x61\x67\xd3\xe3\xf8\x2d\xfc\x49\x8f\xf4\x2e\x19\x5b\x04\x3f\xf3\xda\x8e\xc0\x2b\x9a\x09\x2e\xb0\x1d\xb4\x01\xa9\x6f\x08\x63\x22\x09\x63\x67\x9b\xd1\x18\xba\xa7\xcd\xa5\x3e\xb6\x7d\xdf\xec\xb8\x6c\xec\x74\x6d\xbd\xb6\xcd\x7a\x60\x6c\xc0\x01\x88\x60\x2b\x55\xf0\x6b\x8b\xc5\xe9\xb2\x70\xc2\x8f\x41\x5b\x5b\x7b\x68\x4c\x50\xba\xfb\x11\x53\x79\x68\xea\xf5\xae\x7c\x23\x97\x85\xb0\xfb\xf8\xe1\xcf\x17\x63\x94\x4d\x34\xd8\x72\x54\x3a\x1c\x5a\x1b\x5f\x5e\x0a\x5b\xd5\xf1\x9d\x7f\xd3\x6f\x3b\x19\xf3\xe3\x26\x50\x61\xa1\x14\x96\xce\x7c\xfb\x98\x5d\x5d\x51\x8a\x9c\xcf\xd7\xe6\x82\x3b\xef\xb3\x78\x5e\xed\x7e\x3c\xf9\xff\x00\x00\x00\xff\xff\x59\xca\x7d\xe6\x33\x1e\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x51\x6f\xdb\x38\x12\x7e\xe7\xaf\x98\xb5\x17\xcd\x2d\xb6\x92\xd2\x03\x7a\x87\x4d\xb7\x05\x7a\x6d\x17\xe8\x2d\xb6\x09\x92\xbd\xbb\x87\xa2\x0f\xb4\x38\x92\x58\x53\xa4\xca\x19\xda\x71\x5d\xff\xf7\xc3\x48\x72\xe2\xc4\x89\xdb\x5c\xef\x2d\x16\xc9\x99\x6f\x66\xbe\xf9\x38\xcc\xf4\x87\x62\x66\x7d\x31\xd3\xd4\x40\x86\x97\x4a\xad\xd7\x60\x2b\xc8\x5f\x05\x5f\xd9\x3a\xbf\xc0\x32\x45\xcb\xab\x33\xcd\x65\x73\xa6\xcb\xb9\xae\x91\x60\xb3\x51\x2e\xd4\x35\x46\xc8\x18\x7c\x30\x98\x11\xeb\xc8\xa9\xcb\xa9\x81\x89\xf5\xc4\xda\x39\xeb\x6b\x88\x68\xa0\xd1\x0c\xa5\xf1\x50\xf6\x16\x53\xd4\x6c\x83\x87\xe0\xe1\xc7\xbf\x34\x81\xd8\xeb\x16\x7f\x9a\xa8\x52\x33\xbc\x28\x16\x3a\x16\xce\xce\x8a\x55\x6a\x8b\xd2\x59\xf4\x9c\x95\x18\x39\xef\xb0\x85\x5f\x7f\x3d\x7a\x73\xfa\xdb\x91\x00\x7c\x85\x91\x5f\xd2\x3f\x56\x8c\x74\x85\x54\xbe\xd9\xca\x96\x9a\x91\xf2\x11\xe9\x39\x76\x81\x2c\x87\xb8\xea\x97\xe1\x0b\x5c\x70\x14\x5c\x9b\x8d\x7a\x73\xfa\xdb\xfd\x4e\xe7\xb8\xba\xed\xf3\x2c\xda\x85\x66\xfc\x1d\x57\x0f\xf4\xfc\x3b\xae\xf6\x1c\x7f\x63\xfa\x5e\x9e\x9f\x02\x8d\x15\x80\xd4\x19\xf1\x00\xef\xd7\xeb\xd1\x1a\xfd\x33\x58\xff\x95\x52\x4d\x1e\xc3\x04\x36\x9b\x0f\x7b\x09\xaf\x42\x04\xcd\x8c\x6d\xc7\x60\x3d\xac\x9f\xe4\xf9\xd3\xcd\x33\x30\x41\x01\xac\x52\x0b\x23\x0c\xc8\x56\x90\x7d\x82\x87\xf9\xec\x5d\xc2\xa3\x47\x30\x8b\xa8\xe7\x0a\xe0\x40\xb8\xef\xb7\x20\x7e\x5c\x8f\x7f\x6d\x3e\xdc\x1d\xf8\x88\x68\xe0\x4f\xa5\xad\x43\x33\x51\x20\x6c\x7d\xff\x7e\xe7\x34\x64\x8e\xe1\x29\x7c\xf8\xf0\x0c\xb8\x41\x0f\xe4\x10\x3b\x78\xf2\x0c\xd0\x11\x02\x5e\x5a\x96\x1f\x95\x55\x26\x78\x3c\x58\x89\x88\x6d\x58\x3c\x8c\xc6\x92\xb9\xd2\xa1\xf6\xa0\x9d\x53\xb1\x85\x2c\x56\x70\x90\xd6\x07\xe8\xa7\xd6\x6b\xf4\x66\xb3\x51\x6a\x0a\x65\x44\xcd\x28\xde\x59\x5b\x8f\x11\xba\xe4\x9c\xe4\x28\x22\xab\x76\x6e\x6c\x84\xac\xbb\x36\x16\xa2\xad\xad\x2f\x72\x13\xca\x39\xc6\x5b\x44\xbf\xb9\x58\x0c\x11\xe5\x1f\x29\xf8\x5d\xc2\xe7\xaf\x31\xda\x05\x9a\xfc\x55\x68\x67\xd6\xa3\x79\xdb\xea\x1a\xcf\x92\x73\x17\xbd\xd7\x2d\x09\xf6\xc8\xed\x3c\x64\x74\x1f\x14\x28\x62\x08\x5c\x48\x48\x7f\x9e\xbe\x3e\x3d\x01\x83\x0e\x19\xa5\x54\x50\x05\xe7\xc2\x52\x2c\xd5\x31\xa4\x6e\x88\x59\xb2\xac\x2b\xc6\x08\x96\xc1\x12\xcc\xf4\x1c\x0d\x58\xcf\x01\x42\x8a\xf0\xef\x3f\xc0\x0a\x2e\x52\xfd\x19\x6d\x0c\x64\x15\x8c\x61\x2b\x5b\xc1\x0f\x50\x47\xdc\xc9\xcc\x16\x06\x72\x59\x54\xc4\x7a\x36\xd0\x44\x01\xd0\x8a\x18\xdb\x92\x1d\x10\x87\x6e\xb4\x91\xf5\xd5\x4c\x5d\xce\xb6\xc5\xf8\xd5\x5d\x84\x71\x61\x4b\xbc\x6f\xdf\xce\x7a\x3b\xaf\x28\xbf\xac\x48\xe0\x16\x06\x17\x85\xb1\x34\x2f\xf4\xe7\x14\xb1\x88\x48\x21\xc5\x12\xb3\x4e\x47\x7e\xa2\x00\xb0\x6c\x02\x1c\x1d\xde\x06\x7b\x31\x82\x98\x87\x3a\x76\x9f\x52\x60\x0d\x70\x0c\xc7\x47\xf0\xe2\xc5\x75\xe8\x02\x23\x24\xcf\xb7\x4f\x2a\x80\x88\xc4\x21\x62\x19\x3c\x64\xe7\x7b\xeb\xeb\x75\x26\x7d\x87\x9f\x20\x3f\x0f\x0e\x45\xb4\xaa\xa8\xa5\xeb\x15\xc0\x40\x36\x71\x32\x12\xcc\x68\x6c\x83\xbf\x45\x30\x05\x30\x71\xa1\xce\x8c\x90\x2c\x4e\x4e\x60\xf2\x31\xa4\xe8\xb5\x33\x93\xc7\xb2\x66\x2c\xe9\x99\xc3\xcc\x61\xad\xcb\x55\x16\xb1\xb6\xc4\x71\x35\x39\x01\x8e\x09\xd5\x40\x35\xc1\x81\xde\x0c\x7e\x77\x33\xae\x23\xef\xa7\xfc\xee\x0d\xb7\x2a\x5c\x59\xa5\xc6\xfc\xf5\x2d\x26\x9d\x30\xaa\x5d\xdf\x00\x94\xbf\x0b\x06\x7b\x7d\x7b\xd1\x17\xc4\xcb\xae\x47\x07\x85\x44\x0c\x09\xad\xf7\x6d\x5d\x0c\xbb\x60\xb3\x39\xac\xc8\x87\x11\x5d\x5b\xf9\x1e\xd1\xfd\x66\x1f\x0f\xd5\xde\xbf\x1d\xdf\x27\xbe\x53\x35\x85\x77\xa7\x7f\xbe\x39\x81\xb7\x1e\xaa\xc4\x29\xe2\x63\x68\xc3\x42\xf4\x40\x4b\x16\xaa\x10\xdb\x51\x69\x13\x93\x35\x08\xa1\x02\xf4\x0b\x1b\x83\x6f\xd1\x33\x2c\x74\xb4\xc2\x13\x52\x53\x45\xc8\xf0\xf3\xa5\xc2\xcb\x2e\x44\x86\x8b\x97\x17\xff\x3a\x7f\xfb\xfc\x68\x27\x94\xff\x84\x38\xc7\x38\x46\x32\xac\xc3\x66\x73\xd4\x1f\xcc\x2e\x45\x93\x62\xf2\xbd\x14\x8d\xc9\x82\x2c\xb3\xde\x32\x70\x80\x59\x08\x4c\x1c\x75\x07\xaf\xdf\x5d\x00\x21\xa7\x6e\xcb\x13\x39\x94\x65\x5d\xb4\x0b\xeb\xb0\x46\x03\x59\x26\xca\x9f\x79\xe4\x65\x88\x73\x90\xfb\x01\xb2\x05\x14\x27\xc5\xf0\x27\x8e\xe0\x0e\xa7\xf9\x26\x86\xad\xb5\x1e\x25\x3a\x89\x19\x2a\xeb\x90\x04\x9c\x40\x8e\xb6\x6e\xb8\xbf\x20\xf0\x92\xd5\xad\xfe\x45\x2e\x07\xe5\x1d\x8e\x0f\xfc\xdf\xe2\x6b\xb5\xd7\xc2\x14\x0e\xd0\xd9\x72\x0e\xa9\x03\x8f\xcb\x01\x36\x21\xb3\x5c\xfb\xc2\x48\xf1\x62\x9a\xe1\x8e\x52\xfd\xd8\x78\xdd\x51\x5b\x9b\xef\x06\x9b\x7f\x0c\x26\xd5\x54\x0c\xf4\x07\x7b\x41\x10\xc5\x72\x8b\x5c\x6e\x1c\xd5\x7f\xb8\xb9\x5d\xc4\xad\x93\x51\x02\x63\x6e\x8a\x5f\x7e\xc9\x86\xbb\x23\x33\x9e\x72\x6a\x76\x90\x1b\x4f\xad\xa6\x4f\x82\xb8\x1e\xed\x0b\xe2\x5d\xb0\x83\x00\x0d\xfb\x46\x87\x77\x23\xde\xee\xd9\xea\x84\x9a\xc2\xb2\xe7\xae\xac\x4a\xd7\x4a\xf7\xc0\x52\xeb\x5a\xf8\xa6\xbd\xb9\xca\x5b\x62\xeb\x2c\x5b\x24\xa8\x43\x3f\x9f\x70\x80\xa8\xcb\xfe\x96\x36\x56\x58\x9b\xab\xa9\xf4\xc8\xf6\x70\x4c\x9e\x60\x86\x55\x88\x28\x6e\xe5\x3a\x9b\xfb\xb0\xf4\xdb\x12\x0e\x9e\xb0\x97\xb4\xd4\xc1\xd2\x72\x03\xd2\x57\x2b\xa0\xfe\x86\x55\xcb\xc6\x3a\xec\x5b\xee\x6a\xe8\x80\xcc\xfc\x04\xcf\x9f\xc3\x64\xd2\xb7\x9d\x09\xd7\x03\xcf\xd0\x63\xff\x1b\x49\x4f\x3e\x3f\x90\xa6\x2a\x79\x29\xf5\x70\x42\xa9\x61\x68\xcb\x4a\x9d\x71\x4c\xd4\xd3\x6e\xac\x8e\x44\x56\xa3\xc7\x85\xee\x15\x4a\xbe\x10\xeb\x72\x0e\x9a\x80\x82\xdc\xf6\xd4\x27\xe3\xe6\xa0\x65\x09\x9c\xb6\x46\x64\x00\x66\x2b\x35\xbd\xd1\xa5\x57\x53\xd1\xe3\xe1\xa4\x0b\x24\x74\x6e\x6c\x9f\xe2\x31\xb9\xf7\x6c\x6e\x43\x44\x35\x15\x28\x04\x55\x0c\xed\x8d\xbd\x5d\x0c\x25\x12\x49\x4d\x96\x56\xe6\xad\xc6\x76\x03\xe9\x04\xbf\x1a\x60\x10\x02\x35\x21\x39\xd3\xe7\x38\xf8\x12\x41\x83\xd1\x2b\x08\xde\xad\x24\x9a\xae\x07\x83\x22\xb0\xa4\x8a\x44\xb1\x70\xa1\xd4\xae\xe7\xa3\xfe\x4c\x58\x9a\x31\x58\x99\x9b\x66\x9a\xd0\x59\x2f\x75\x85\xb3\x27\xaf\xbf\xba\x9f\x42\xc5\x4b\x1d\xbf\x79\x7f\xe9\x74\xab\x17\xdb\xdd\x6a\x0a\xe8\x7b\x2d\x11\x62\x0f\x0d\x71\xb3\x2a\x63\x5b\x90\xba\xee\x9c\xe4\x5b\x4d\x73\x68\x0d\x99\x6d\xd7\xc0\xe0\xe7\xe6\xcf\x36\xf8\xeb\x2f\x95\x4b\xe8\xf9\xea\xf7\x8e\xb9\x11\xc0\xff\xcb\xdc\x10\xc4\xf7\x59\x53\x87\x26\x1c\x4e\x1e\x4d\xa6\x4d\x2b\xf4\x10\x09\x86\xd0\xa1\xa7\xc6\x56\x9c\x09\xb9\x62\x70\x59\xe7\xb4\xc7\x61\x3c\x91\x8b\xef\x2b\xa7\xa4\xef\x77\x67\x19\x91\x20\x04\xed\x28\x80\x47\x34\xd7\x3b\xf3\xbe\xb0\xf9\x22\xb8\xd4\x22\x81\x4c\xfd\xc3\xc3\xc0\x6c\x65\x45\x46\xbe\x61\xdc\x2b\x45\x4c\x44\x71\xb6\xcf\x83\x16\x8e\xff\xfe\xf4\xf8\xae\x67\xc2\x3d\xf6\x05\xc7\x30\x86\xf5\x8f\x20\x5a\x91\x0b\x35\x90\x15\x86\x2f\x71\xbc\x36\x00\x17\x18\x57\xdc\xc8\x16\x6e\x62\x48\x75\x03\xdb\x49\x6e\xa7\x2a\xe3\x38\xb7\xb5\x72\x67\xdd\x42\xb7\xb7\xac\xa6\xe0\x03\xe3\x09\x68\x0e\xad\x2d\xb3\x9b\x39\x83\x32\x6a\x6a\xc0\x85\xd0\x11\x24\xcf\xd6\x41\xab\xa9\x7f\x2b\x10\xa4\x6e\x9f\x63\x77\x5a\xb9\x72\xf6\xfd\xff\xfa\xa0\xb2\x41\x93\xfa\x74\xed\x3c\x0b\x21\xa2\x4c\x0f\x22\x1c\x65\x68\xbb\xfe\xbd\x73\xd7\x0b\x77\xa2\xa8\x49\x6c\xe4\x42\xc8\xb2\xf1\xcc\xcf\x7f\x95\x57\xa0\x23\xdc\x6c\xf6\x38\x7e\x30\x1a\xf8\xf2\x65\x98\x94\xb7\x8f\xc8\xff\x06\x00\x00\xff\xff\xde\xfb\xd5\x3a\xea\x11\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
