// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xef\x4f\x1b\x3d\x12\xfe\x5c\xff\x15\xc3\x26\x2f\x01\x0e\x67\x81\xf2\xa1\xca\xfb\xa6\x12\xa5\x54\x42\xe2\x0a\x82\x9e\xfa\xa1\xad\x90\xb3\x9e\xdd\xb8\xd9\xb5\x7d\xf6\x6c\x02\xa5\xf9\xdf\x4f\xf6\x26\x21\x09\x81\x43\x2a\x48\x61\x19\xcf\x2f\x3f\xcf\xb3\x63\xa7\xb5\x95\x0e\x94\x4e\x07\xc2\x0f\x81\xe3\x1d\x63\x2a\x87\x2d\x28\x1c\x5a\x48\xc7\xc2\xa5\xa5\x1a\xa4\xd2\x64\x23\x74\x90\x22\x65\x69\xee\x49\x0c\xfe\x06\x1a\xa2\x66\x00\xfe\xde\x13\x56\x19\x95\xe0\xc9\x58\x68\x1c\xbb\x1e\xdd\x58\x65\xc8\x00\xaa\x51\xee\xbb\x77\xb9\x07\x9e\x43\x2a\x71\x9c\x4a\xe5\x47\xa9\xf8\x55\x3b\x4c\x1d\x7a\x53\xbb\x0c\xb9\x15\x8e\x0e\x19\x00\x66\x43\x03\x9d\x97\xdd\xe0\x49\x57\x10\xd2\x43\xe1\xec\x7f\x6b\x43\x02\xe0\x00\x0e\x3a\xf0\xfe\xfd\x63\xb3\xa1\x0d\x53\x6b\x5a\x8f\x64\x00\x0e\x3d\x19\x87\x99\xd1\xc0\xaf\x37\xac\x67\x82\xa0\xc9\xd4\x98\x52\x29\xb0\x32\xba\xfb\xd3\x1b\x0d\xff\xfc\xd3\x39\xbb\xfc\xd4\x61\x0f\x0c\x20\x29\x4d\xc1\xa5\x53\x63\x74\x49\x0f\x92\x9f\xa6\x76\x5a\x94\x32\x61\x53\x76\x76\xf9\x69\x0d\x28\xe1\x68\x1d\xa9\x5c\x31\x36\xdb\x8f\xad\xcb\x12\x1e\x1e\xa0\x7b\x6a\x74\xae\x8a\xee\x79\x25\x0a\xf4\xdd\xcf\x46\x22\x4c\xa7\xb0\xfd\x3e\x02\xa4\x83\xd7\xf6\x46\xb6\x90\x32\xb9\x89\xab\x05\x17\xeb\x08\xfb\xcc\xab\xc3\xb4\xac\xf5\x01\xfc\xfe\x0d\xe4\x6a\x7c\x96\x8c\x25\xd7\xb5\x82\x0d\x0d\x12\x73\x51\x97\xe4\x5f\x45\x43\x88\x7b\x9e\x84\xb8\x1a\x70\x39\xbf\xea\xb7\x77\x54\x9e\x45\x38\x00\x69\x78\x00\xbf\x41\x4c\x46\xd0\x49\x95\x46\x82\x14\x1e\xc0\x3a\xa5\x09\xda\x47\x30\xed\xec\x32\xca\xac\xac\x2b\x0b\x5c\x6b\x0b\x7c\xb2\x92\x31\xcd\x84\x85\x64\x47\x7a\x82\xa1\xf1\x04\xed\xf3\x2b\xd8\xde\x06\xca\x2c\x04\x9b\x35\x8e\xe0\xf8\xf8\x6d\xb0\x6d\x79\x97\x41\x28\x70\x78\xd0\x8d\xbf\xe9\xbb\xdd\x00\xd0\x4e\xb0\xaf\x07\x07\xdb\x4a\x70\xc8\xb6\x16\x9c\x04\xc2\x72\xe3\x62\x25\xa5\x43\xdc\xfe\xbb\xe3\xe3\xe3\xbf\x41\x1a\xf6\xc6\x3a\x43\xa6\xdf\x7e\x90\x9e\xfe\xfa\x6b\x7f\x6f\xca\xde\x84\x7c\x8d\xa1\xd5\xda\xdb\x9f\xb2\x37\xca\x92\x18\x94\xe8\x81\x9f\xc0\xe5\xcd\xed\xa7\xf3\xeb\xb3\xaf\x27\x17\x17\xb7\x27\x17\x17\x97\x5f\x81\x5b\x68\xc7\x24\xc0\xab\xa0\x32\x42\xe0\xbc\xf9\xfb\xf9\xec\x6b\x30\xce\x97\xb9\x8c\xad\xb6\xe3\x27\xff\x09\x27\xa7\xa7\x67\x57\x5f\x98\x34\x1a\x19\x9b\x17\xe1\x5e\x8c\x71\xa6\x7e\x7f\xef\x1b\xf8\xd3\xf9\x2a\x63\x2d\x98\x0c\x51\x37\x72\x56\xba\x00\x1d\x04\x3a\x11\xa2\x40\x4d\x20\xb4\x0c\xbb\x9f\x18\x37\x82\x9a\x54\xa9\x48\xa1\x87\xc2\xa0\x07\xa5\xc9\x80\x13\x19\x42\x66\xb4\x54\xa4\x8c\xee\xb2\x16\xa8\x7c\x11\xec\x6a\xed\x61\x80\xb9\x71\x08\x52\x7b\x50\x1e\x46\xda\x4c\x34\x90\x09\x5a\x9e\x55\x42\x40\x2d\xa1\xb6\x30\x51\x34\x04\xac\x2c\xdd\x83\x27\xa7\x74\xc1\x26\x43\x55\x22\x7c\xfb\x06\xed\x9d\xc0\x93\x16\x15\x02\x97\xbb\xd0\xef\x43\x92\xc0\x8f\x1f\x01\x70\xf0\x25\xa2\x85\xc3\xf0\x1c\xb6\xdd\xc4\x6c\xc1\xcb\x6f\xe1\x4d\xd8\x6d\x6d\x61\x3a\x8d\xa4\xc1\x3c\x4b\x83\x9d\x47\x82\x7f\xdd\x31\xbc\x8b\xc0\xde\x9c\xdc\xfc\xe7\xfa\xbc\xdf\x59\xca\xf2\x6f\xe1\x09\xdd\x2c\x49\xb3\x0e\xd3\x69\x27\x06\xf2\xbb\xf9\x04\x70\xb5\x06\xce\xad\x53\x63\x55\x62\x81\x12\x38\x77\x15\x70\x3e\x07\x34\x6a\x8f\x8f\x21\xed\xa5\xe1\xb1\xf7\x0b\x38\xce\xaa\xbd\xd8\x32\xab\x75\x28\xd4\x78\x32\x56\x5b\x29\x08\x79\x26\x38\xb9\xda\x13\x63\x3e\x94\x52\xc0\x1d\x42\xe2\x5b\x3b\xb0\x17\xa6\x13\xba\x1e\xec\x76\xf7\x5a\xdf\x0f\x87\x44\xd6\xf7\xd2\xf4\x11\xd4\xdd\x56\xd2\x0c\x1a\xe3\x54\xa1\x74\x5a\xc5\xed\xa5\xc6\xa2\xf6\x43\x95\x13\x6f\x0c\xdd\x51\x3d\xc0\x46\x3f\x7f\x5e\x23\x90\x1f\x3f\x96\xb3\xb2\x87\x07\x1e\x14\xa4\x11\xda\xdd\x0f\x22\x1b\xd5\xf6\x43\x69\x06\x9f\x03\xf1\x49\x12\xb6\x5e\x9a\xa2\x40\x07\x9c\xa0\xe9\x89\xfb\x06\x96\xae\x1f\x42\xb2\xd0\x70\x98\x42\x63\x74\xf7\x60\xf4\x92\x76\x76\x93\xa0\x76\x4f\x81\x68\x28\x90\xa2\x08\x07\xb1\x0a\x0b\xc4\x5c\xe7\xab\x53\x2b\xdd\x63\x84\x95\x0d\x7d\x7c\x54\xae\xbf\xba\x36\x8b\xab\x46\x52\x39\x68\x2f\xf9\xb1\x97\x7b\x94\x66\xa2\x4b\x23\x64\x68\xb3\xc9\x91\xbc\x52\xb3\x67\x94\xc9\x06\x93\x67\x64\xbb\x22\xbb\xa7\x4a\xfb\xce\x20\xaa\xed\x09\xd1\xbd\xa7\xa6\x4d\xce\x59\x69\x6a\x69\x9d\x19\x2b\x89\x2e\xed\xa5\xb7\x52\x90\x48\x6f\x4d\xbd\x48\xbd\x0c\x43\x2f\x35\x75\x90\x74\x58\xfa\x3f\x7b\x69\xc2\x07\xa5\x19\x04\x96\xfa\xc1\x7b\x8d\xfb\xb9\x8f\x44\x4f\x4a\x8b\x30\x6b\xfa\x21\xff\x8c\x85\xae\x1c\xc0\x1c\xd7\x97\xd1\x6f\xfc\x17\xce\x28\x1f\x25\x71\x34\x3f\xc0\x5e\xce\xd0\x38\x05\xf6\xbc\x16\xd6\x0f\x0d\xbd\x96\xbf\x66\x68\x84\x9d\xff\x39\x7f\x41\x82\xbd\xc5\xd3\x62\x69\x59\xa1\xbd\xd5\xff\x1a\x26\x38\xc2\xd9\x97\xd3\x8f\xa7\x5f\x2e\x6e\x4f\xae\xce\xfb\xc9\xdb\xe4\x19\x82\x56\x9a\x8d\x3e\x21\x4b\xbc\xf7\xcc\xb6\x3d\x87\x6b\x85\xf5\x25\x42\x62\x39\x1e\x34\xc2\xc3\x2b\xb2\xfa\xf6\x68\x9c\xcc\x1c\xe2\x50\x5f\x7a\x47\x67\x66\xa5\x15\x29\x51\xf2\xac\xac\xa3\x1e\x93\x19\x15\x07\xf1\xa7\x3f\x9f\x2f\x2b\xd6\xde\xd1\xdb\x77\x07\xfb\xcb\xa6\xc3\x8d\x8e\x87\x4f\x1d\x8f\x36\x3a\x1e\x45\xc7\x64\x73\x4b\x9c\xcc\x08\x75\x84\x85\xe7\xc6\xf1\x78\xb1\x5a\x73\x15\x72\x8c\x8e\x94\x47\x6e\x11\x1d\xaf\x5d\xe9\x61\xc3\x68\x8c\x65\x18\xab\xc6\x4f\x51\x4a\xf7\xd6\x6c\x71\x52\xb9\xf5\x49\x15\xf0\x5c\x19\x42\x2b\x97\xb1\xb5\xbc\xaf\x11\x38\xc6\xe3\x34\x89\x03\x39\x9c\xcf\xd3\x29\x63\x54\x6b\x94\x5c\xc8\x0a\xac\x33\x79\x90\xfc\xe3\x09\x91\x19\x4d\xce\x94\xdc\x96\x22\x9c\xc2\x2d\xd0\x86\xb0\x07\x82\x4c\xa5\x32\xfe\xe8\x17\xcf\xfc\xcc\x85\x6f\x29\xa5\x31\xd6\x43\xad\x49\x95\xb3\x3e\xc2\x0d\xa1\xb6\xec\xf1\x8e\x8d\x3a\x5c\x52\x36\x67\x59\xdc\xb9\xd7\xaf\xe4\x2f\x7a\x87\xab\x5b\x0b\xa4\xf2\x62\x50\xc6\x93\xc2\xdf\xfb\xd2\x14\xe0\x95\xce\xe2\x65\xa4\x12\x5a\x14\x08\x18\x8e\x0f\x1a\x06\x17\x1a\x3a\x53\x17\x43\x98\x7f\x19\x58\x2a\xd8\xe4\xc1\x79\x96\x8d\x2d\x19\xfb\x64\xf9\x7f\x01\x00\x00\xff\xff\xc2\xd2\x8a\xe1\xac\x0d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4f\x8f\xdb\xb6\x13\xbd\xf3\x53\xbc\xf5\xfe\x10\xff\x8a\x82\x56\x72\xdd\x64\x17\x28\x8a\x04\xc8\xa5\x01\x76\x51\xf4\x10\xe4\x40\x4b\x23\x89\x31\x35\xa3\x90\x43\xdb\x1b\x43\xdf\xbd\xa0\x65\x37\xdb\xdd\xc0\xbd\x09\xe0\xfb\x33\xf3\xf8\xa8\xeb\xab\x6a\xed\xb9\x5a\xbb\xd4\xc3\xd2\xde\x18\xdf\xe2\x0a\x5d\xa4\x11\xd5\xd6\xc5\x2a\xf8\x75\xd5\x48\xbd\xa1\x88\x8a\xb4\xae\xda\xa4\x6e\xfd\x16\xda\x13\x1b\x20\x3d\x26\xa5\xa1\xd6\x80\xa4\x32\x62\x06\xae\x12\xc5\xad\xaf\xc9\x00\xc3\xa6\x4d\xab\x7d\x9b\x60\x5b\x54\x0d\x6d\xab\xc6\xa7\x4d\xe5\xbe\xe7\x48\x55\xa4\x24\x39\xd6\x64\x47\x17\xf5\x8d\x01\xa8\xee\x05\xcb\xcb\x30\xbc\x98\x0a\x45\x1e\x5d\x1c\xbf\x65\x51\x07\xbc\xc6\xeb\x25\xee\xee\x7e\x0c\x5b\xc6\x90\xcc\xfa\x9c\x69\x80\x48\x49\x25\x52\x2d\x0c\x7b\xff\xe2\xfc\x70\xb0\xf0\x2d\xe8\x1b\x56\xf7\x12\x08\x0b\xcf\x6d\x74\x0b\x4c\x93\x01\x6a\xa7\x98\x4d\x66\x74\xd5\x38\x1a\x84\x57\x5f\x93\x30\xde\xbd\x5b\xbe\xff\xf4\x61\x69\x0e\x06\x58\x04\xe9\x6c\x13\xfd\x96\xe2\xe2\x06\x8b\xaf\x92\x23\xbb\xd0\x2c\xcc\x64\xde\x7f\xfa\x70\x34\x21\x6e\x66\xd1\xa7\x71\xba\xa8\xcf\xf3\x6c\xbd\x31\xa7\xad\xc7\x1c\x02\x0e\x07\xac\x7e\x17\x6e\x7d\xb7\xfa\x38\xb8\x8e\xd2\xea\x0f\x69\x08\xd3\x84\x57\x77\xc7\x18\xb9\xa0\x5e\x19\x73\x8d\x5d\x4f\x3c\x8b\x7a\xee\xc0\x05\xb6\x73\xae\x23\x56\x38\x6e\xc0\xa4\x3b\x89\x1b\x64\xf5\xc1\xab\xa7\x84\x4e\x28\xc1\xb3\x0a\xa2\xab\x09\xb5\x70\xe3\xd5\x0b\xaf\xcc\x75\x09\xe5\x4c\x8e\x99\x13\xd6\xd4\x4a\x24\x34\x9c\xe0\x13\x36\x2c\x3b\x86\x4a\xe9\xc8\xc9\x89\x8e\x2b\xe6\x11\x3b\xaf\x3d\x68\x18\xf5\x11\x49\xa3\xe7\xce\xec\x7a\x1f\x08\x9f\x3f\xe3\x7f\xff\xef\x25\x29\xbb\x81\x60\x9b\x5f\x70\x7b\x8b\xc5\x02\x5f\xbe\xbc\x45\x23\x48\x81\x68\xc4\x9b\xf2\xcd\x64\x4e\x9c\x2b\x5c\xce\xe2\xa1\x6c\x9b\x47\x4c\x53\xe1\x95\x74\x67\x15\x73\x14\x49\xa4\xf8\x75\x6f\x68\x3f\x4a\x54\x3c\xfc\xf6\xf0\xe7\xfd\xc7\xdb\xe5\x13\x95\xbf\x24\x6e\x28\x9e\x44\xe6\x73\x4c\xd3\xf2\x48\xb4\xfb\xf3\x3d\xc4\xcc\xb0\x76\x8c\x7e\xeb\x03\x75\xd4\xc0\xda\x38\xc0\xda\x73\xa0\x65\x27\xd8\x2d\xaa\x9b\xaa\x7c\xde\x7c\x87\xa5\x93\xdb\xc5\x91\x4d\xe6\x62\x34\x23\x8d\xc9\x63\xe3\x94\x6c\xed\xac\xc6\x9c\xd4\x5c\xea\xa6\x66\xa6\xc6\xba\x66\xc0\x18\xa5\x2d\x49\xc9\x48\x9c\x7a\xdf\xaa\xad\x85\x35\x4a\xb0\x63\x70\x4c\x73\xf7\x42\xa2\xff\x62\x95\x4b\x7c\x5a\x54\x73\x0d\x16\xa5\x1b\x38\x95\xc1\xd7\xf6\xdf\x48\xd4\xb1\xfc\x4c\x82\xc8\x98\x90\x59\x7d\xc0\xe0\x92\x52\x2c\xe5\xc8\xa3\xf9\x51\x72\x62\xb7\x0e\xf4\x73\x95\x7f\x4a\xff\xfc\x4d\x5c\x44\xcf\x65\x6f\x7c\x72\xeb\x50\x8a\x1e\xd3\x63\x0a\xd2\x21\x79\xae\x8f\x3d\x1c\x1c\xbb\x8e\x40\x5b\x8a\x8f\xda\x17\x88\xf6\x51\x72\xd7\xe3\xfc\x30\x9f\x18\xce\x3a\x74\x56\xf9\xe9\x48\x32\xbe\x38\xfe\x3b\x00\x00\xff\xff\x6b\x17\x8a\x82\x53\x05\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
