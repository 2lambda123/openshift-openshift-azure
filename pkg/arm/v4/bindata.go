// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x5f\x4f\x1b\xbb\x13\x7d\xae\x3f\xc5\x74\x43\x4b\xe1\x87\xb3\x40\x79\xa8\xd2\xa6\x12\xa5\x54\x42\xe2\x57\x2a\xe8\xbd\x7d\x68\x2b\xe4\xac\x27\x1b\x37\xbb\xf6\x5e\x7b\x9c\x40\x69\xbe\xfb\x95\xbd\x49\xd8\xfc\x21\x45\xb7\x3c\x84\x60\x1f\xcf\xd8\xe7\x1c\x8f\x87\xd6\xd3\xb4\xa7\x74\xda\x13\x6e\x00\x1c\x6f\x18\x53\x7d\x78\x0a\xb9\xc5\x0a\xd2\x91\xb0\x69\xa1\x7a\xa9\x34\xd9\x10\x2d\xa4\x48\x59\xda\x77\x24\x7a\xaf\x81\x06\xa8\xd9\xdd\x1d\x07\xd5\x07\x8d\xd0\x3e\x31\xba\xaf\xf2\xf6\xa7\xc2\xe7\x4a\xff\x8d\xd6\x29\xa3\x21\x19\x1d\xb5\x0f\x13\x98\x4c\x18\x80\xbb\x75\x84\x65\x46\x05\x38\x32\x15\xd4\x21\x79\x56\xa0\xd0\xbe\x6a\x93\x2a\xd1\xfe\x16\xe5\xd0\x8e\x54\x86\x31\x2f\x6a\xb9\x21\xf0\x1c\x0a\x50\x0e\xfb\xae\x7d\xd3\x77\xc0\xfb\x90\x4a\x1c\xa5\x52\xb9\x61\x2a\x7e\x7a\x8b\xa9\x45\x67\xbc\xcd\x90\x57\xc2\xd2\x01\x03\xc0\x6c\x60\x60\x7b\x33\x0c\x56\x88\x81\x10\x1e\x72\x5b\xfd\xe3\x0d\x09\x80\x7d\xd8\xdf\x86\xb7\x6f\xef\xf9\x0a\xdb\x30\x5e\xd3\xf2\x4a\x06\x60\xd1\x91\xb1\x98\x19\x0d\xfc\x72\xcd\x7c\x26\x08\xea\x48\xf5\x50\x2a\x05\x96\x46\xb7\x7f\x38\xa3\xe1\xcd\x9b\xed\xd3\x8b\x0f\xdb\xec\x8e\x01\x24\x85\xc9\xb9\xb4\x6a\x84\x36\xe9\x40\xf2\xc3\x78\xab\x45\x21\x13\x36\x61\xa7\x17\x1f\x96\x88\x12\x96\x96\x99\xfa\xaf\x62\xde\x87\x5a\x52\xb3\xa1\x52\x5f\x31\x36\xe5\xaa\xf2\x45\x01\x77\x77\xf3\x24\x67\xa5\xc8\xd1\xb5\x3f\x1a\x89\x30\x99\xc0\xf3\xb7\x91\x7c\x1d\x50\xcf\xd7\x9a\x11\x29\x93\xab\x56\x6c\xe8\xbc\xac\x9e\xcb\x9c\x3a\x48\x0b\xaf\xf7\xe1\xd7\x2f\x20\xeb\xf1\x41\xa1\x1b\xd0\xa5\x84\xb5\xc4\x12\xfb\xc2\x17\xe4\x1e\x25\x71\x58\xf7\xb0\xc0\x71\x36\xf0\xd2\x37\x16\xa4\x23\x50\x1a\x28\xab\xf6\x5e\x1d\x1d\x1d\xbd\x06\x69\xd8\x93\xca\x1a\x32\xdd\xad\x3b\xe9\xe8\xd9\xb3\xbd\xdd\x09\x7b\x52\x19\x4b\xf5\x40\xab\xb5\xbb\x37\x61\x4f\x54\x45\xa2\x57\xa0\x03\x7e\x0c\x17\x57\xd7\x1f\xce\x2e\x4f\xbf\x1c\x9f\x9f\x5f\x1f\x9f\x9f\x5f\x7c\x01\x5e\xc1\x56\x0c\x02\xbc\x0c\x42\x11\x02\xe7\xf5\xef\x8f\xa7\x5f\xc2\xe0\x6c\x9a\xcb\x10\x1a\xb6\xe2\x27\xff\x01\xc7\x27\x27\xa7\x9f\x3e\x33\x69\x34\x32\x36\x4b\xc2\x9d\x18\xe1\xd4\x8b\xee\xd6\x65\x51\xbf\x74\x36\xcb\x58\x0b\xc6\x03\xd4\xb5\x23\x94\xce\x41\x07\x49\xc7\x42\xe4\xa8\x09\x84\x96\xa0\x91\xc6\xc6\x0e\xc1\x93\x2a\x14\x29\x74\x90\x1b\x74\xa0\x34\x19\xb0\x22\x43\xc8\x8c\x96\x8a\x94\xd1\x6d\xd6\x0a\x5e\x9c\x2d\xb6\x5e\x3b\xe8\x61\xdf\x58\x04\xa9\x1d\x28\x07\x43\x6d\xc6\x1a\xc8\x04\xf5\xa7\x99\x30\xba\xcd\x57\x30\x56\x34\x00\x2c\x2b\xba\x05\x47\x56\xe9\x9c\x8d\x07\xaa\x40\xf8\xfa\x15\xb6\x5e\x0c\x8c\x23\x2d\x4a\x04\x2e\x77\xa0\xdb\x85\x24\x81\xef\xdf\x03\xe1\xe0\x0a\xc4\x0a\x0e\xc2\xf7\x70\xec\x7a\xcd\x53\xd8\xec\xdb\xab\x70\x5a\x5f\xc1\x64\x12\x45\x83\x59\x94\x9a\x3b\x87\x04\xff\xbb\x61\x78\x13\x89\xbd\x3a\xbe\xfa\xeb\xf2\xac\xbb\xdd\x88\xf2\x7f\xe1\x08\xed\x34\x48\x3d\x0f\x93\xc9\x76\x5c\xc8\x6f\x66\x77\xc6\x7a\x0d\x9c\x57\x56\x8d\x54\x81\x39\x4a\xe0\xdc\x96\xc0\xf9\x8c\xd0\x70\x26\xe0\x23\x48\x3b\x69\xf8\xda\xf9\x09\x1c\xa7\xd9\x36\x6e\x99\x79\x1d\x12\xd5\x48\xc6\x7c\x25\x05\x21\xcf\x04\x27\xeb\x1d\x31\xe6\x42\x2a\x05\xdc\x22\x24\xae\xf5\x02\x76\x43\xad\x40\xdb\x81\x9d\xf6\x6e\xeb\xdb\xc1\x80\xa8\x72\x9d\x34\xbd\x27\x75\xa7\x95\xd4\x57\xd3\x58\x95\x2b\x9d\x96\xf1\x78\xa9\xa9\x50\xbb\x81\xea\x13\xaf\x07\xda\x43\xdf\xc3\xda\x3f\x7f\x9e\x23\x88\x1f\x3f\x9a\x51\x1b\xd5\x6c\xab\xfd\x4e\x64\x43\x5f\xbd\x2b\x4c\xef\x63\x10\x3e\x89\x45\xac\x30\x79\x8e\x16\x38\x41\xbd\x27\xee\x6a\x5a\xda\x6e\x00\xc9\xdc\xc3\xe1\xde\x8e\xd0\xde\x82\xd1\x0d\xef\xec\x24\xc1\xed\x8e\x82\xd0\x90\x23\x45\x13\xf6\x62\x16\x16\x84\xb9\xec\x2f\xde\xf3\x74\x97\x11\x96\x55\xd8\xc7\x7b\x65\xbb\x8b\x73\xd3\x75\xe5\x50\x2a\x0b\x5b\x0d\x1c\xdb\xbc\x47\x69\xc6\xba\x30\x42\x86\x6d\xd6\x31\x92\x47\x7a\xf6\x94\x32\x59\x73\xf2\x80\x6d\x17\x6c\xb7\xea\xb4\x6f\x0c\xa2\xdb\x56\x84\xee\xac\x0e\xad\x03\x67\x85\xf1\xb2\xb2\x66\xa4\x24\xda\xb4\x93\x5e\x4b\x41\x22\xbd\x36\x7e\x1e\xba\x49\x43\x27\x35\x3e\x58\x3a\x4c\xfd\xe6\x2c\xf5\xf2\x5e\x61\x7a\x41\xa5\x6e\x40\x2f\x69\x3f\xc3\x48\x74\xa4\xb4\x08\xb5\xa6\x1b\xe2\x4f\x55\x68\xcb\x1e\xcc\x78\xdd\xcc\x7e\x8d\x9f\x83\x51\xde\x5b\xe2\x70\x56\xf2\x37\x47\xa8\x41\x41\x3d\xa7\x45\xe5\x06\x86\x1e\xab\x5f\x5d\x34\xc2\xc9\xff\x5c\xbf\x60\xc1\xce\xfc\xdb\x7c\xaa\xe9\xd0\xce\xe2\x5f\xb5\x12\x1c\xe1\xf4\xf3\xc9\xfb\x93\xcf\xe7\xd7\xc7\x9f\xce\xba\xc9\xcb\xe4\x01\x81\x16\x36\x1b\x31\x21\x4a\x6c\x1d\xa6\xc7\x9e\xd1\xb5\xa0\x7a\x43\x90\x98\x8e\x07\x8f\xf0\x70\x45\x16\x6f\x8f\xc6\xf1\x14\x10\x8b\x7a\xe3\x8e\x4e\x87\x95\x56\xa4\x44\xc1\xb3\xc2\x47\x3f\x26\x53\x29\xf6\xe3\x4f\x77\x56\x5f\x16\x46\x3b\x87\x2f\x5f\xed\xef\x35\x87\x0e\xd6\x02\x0f\x56\x81\x87\x6b\x81\x87\x11\x98\xac\xdf\x12\x27\x33\x44\x1d\x69\xe1\x7d\x63\x79\x6c\x45\x96\xa0\x42\x8e\xd0\x92\x72\xc8\x2b\x44\xcb\xbd\x2d\x1c\xac\x29\x8d\x31\x0d\x63\xe5\x68\x95\xa5\x74\x77\x69\x2c\x56\x2a\xbb\x5c\xa9\x02\x9f\x0b\x45\x68\xa1\x7d\x59\x8a\xfb\x18\x83\x63\x7c\x4e\x93\x66\x37\xc8\xc8\x6b\x94\x5c\xc8\x12\x2a\x6b\xfa\xc1\xf2\xf7\x2f\x44\x66\x34\x59\x53\xf0\xaa\x10\xe1\x15\x6e\x81\x36\x84\x1d\x10\x64\x4a\x95\xf1\x7b\x5c\x7c\xf3\x33\x1b\xfe\x6d\x29\x8c\xa9\x1c\x78\x4d\xaa\x98\xee\x23\x74\x08\xbe\x62\xf7\x6d\x2a\xea\xd0\xa4\xac\x8f\x32\xef\x80\x97\xbb\xda\x8d\xe8\xd0\x9d\xb6\x40\x2a\x27\x7a\x45\x7c\x29\xdc\xad\x2b\x4c\x0e\x4e\xe9\x2c\x36\x23\xa5\xd0\x22\x47\xc0\xf0\x7c\xd0\x20\x40\x68\x60\x8d\xcf\x07\x30\x6b\xcd\x1b\x09\xeb\x38\x38\x8b\xb2\x76\x4b\xa6\x5a\x99\xfe\x37\x00\x00\xff\xff\xff\x36\xc9\x0b\xbd\x0d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6f\x1b\x37\x10\xbd\xf3\x57\x3c\xcb\x45\xd4\xa2\xa0\x36\x29\x7a\x72\x62\x03\x45\x91\x00\xb9\x34\x85\x8d\xb6\x87\x20\x07\x6a\x77\x76\x97\x11\x77\x66\x43\x0e\x25\x39\x82\xfe\x7b\x41\x7d\xd8\xae\x9d\xca\x40\x6e\x04\xf8\xe6\x3d\xce\x9b\x37\x3c\x3f\xab\xe6\x9e\xab\xb9\x4b\x3d\x2c\xad\x8d\xf1\x2d\xce\xd0\x45\x1a\x51\x2d\x5d\xac\x82\x9f\x57\x8d\xd4\x0b\x8a\xa8\x48\xeb\xaa\x4d\xea\xe6\xaf\xa1\x3d\xb1\xd9\x6c\x2c\x7c\x0b\x26\xcc\x7e\x17\x6e\x7d\x37\xfb\x33\xe4\xce\xf3\xdf\x14\x93\x17\xc6\x64\xf9\xeb\xec\x97\x09\xb6\x5b\x03\xa4\xdb\xa4\x34\xd4\x1a\x90\x54\x46\xec\x29\x6d\x1d\xc8\x71\x1e\x67\xea\x07\x8a\xcf\xa2\x12\xc5\xa5\xaf\x69\xa7\x4b\xdc\x9c\x20\xbe\x83\x02\xc3\xa2\x4d\xb3\x75\x9b\x60\x5b\x54\x0d\x2d\xab\xc6\xa7\x45\xe5\xbe\xe6\x48\x55\xa4\x24\x39\xd6\x64\x47\x17\xf5\x95\x01\xa8\xee\x05\xd3\xd3\x30\x3c\x31\x06\x85\x1e\x5d\x1c\xbf\x64\x51\x07\xbc\xc4\xcb\x29\xae\xae\xee\xfd\x2a\xcf\x90\xcc\xfa\xb8\xd2\x00\x91\x92\x4a\xa4\x5a\x18\xf6\xfa\xc9\xfd\xc1\x61\xfa\x82\xd9\xb5\x04\xc2\xc4\x73\x1b\xdd\xc1\xd2\xda\x29\xf6\x22\x7b\x74\xd5\x38\x1a\x84\x67\x9f\x93\x30\xde\xbc\x99\xbe\xfd\xf0\x6e\x6a\x36\x06\x98\x04\xe9\x6c\x13\xfd\x92\xe2\xe4\x02\x93\xcf\x92\x23\xbb\xd0\x4c\xcc\xd6\xbc\xfd\xf0\xee\xff\xed\x74\x51\x1f\xfb\xf9\xbd\x23\xbf\xa7\x7a\x34\xf3\x07\xe2\xad\x37\xe6\xe0\xe8\x98\x43\xc0\x66\x73\x27\xf2\x7e\x70\x1d\xa5\xd9\x1f\xd2\x10\xb6\x5b\xbc\xb8\xda\x8d\x88\x0b\xea\x85\x31\xe7\x58\xf5\xc4\x7b\x15\xcf\x1d\xb8\xc0\x56\xce\x75\xc4\x0a\xc7\x0d\x98\x74\x25\x71\x81\xac\x3e\x78\xf5\x94\xd0\x09\x25\x78\x56\x41\x74\x35\xa1\x16\x6e\xbc\x7a\xe1\x99\x39\x2f\xfd\x1d\x8b\x63\xe6\x84\x39\xb5\x12\x09\x0d\x27\xf8\x84\x05\xcb\x8a\xa1\x52\x56\xe0\xa0\x44\xbb\x0e\xf2\x88\x95\xd7\x1e\x34\x8c\x7a\x8b\xa4\xd1\x73\x67\x56\xbd\x0f\x84\x8f\x1f\xf1\xc3\x8f\xbd\x24\x65\x37\x10\x6c\xf3\x13\x2e\x2f\x31\x99\xe0\xd3\xa7\xd7\x68\x04\x29\x10\x8d\x78\x55\xce\x4c\xe6\x50\x73\x86\xd3\x5e\xdc\x94\x6e\xf3\x88\xed\xb6\xd4\x15\xbb\xf7\x2c\x66\x47\x92\x48\xf1\xf3\xda\xd0\x7a\x94\xa8\xb8\xf9\xed\xe6\xaf\xeb\xf7\x97\xd3\x07\x2c\xff\x48\x5c\x50\x3c\x90\xec\xef\xb1\xdd\x4e\x77\x85\x76\x7d\x9c\x43\xcc\x0c\x6b\xc7\xe8\x97\x3e\x50\x47\x0d\xac\x8d\x03\xac\x3d\x1a\x5a\x7a\x82\x5d\xa2\xba\xa8\xca\xf1\xe2\x2b\x2c\x1d\xd4\x4e\x3e\xd9\x64\x2e\x42\x7b\xa4\x31\x79\x6c\x9c\x92\xad\x9d\xd5\x98\x93\x9a\x53\xb9\xd7\xcc\xd4\x58\xd7\x0c\x18\xa3\xb4\xc5\x29\x19\x89\x53\xef\x5b\xb5\xb5\xb0\x46\x09\x76\x0c\x8e\x0f\xdf\x44\x48\xf4\x5c\x55\x19\xe2\xc3\x1c\x9a\x73\xb0\x28\x5d\xc0\xa9\x0c\xbe\xb6\xff\x45\xa2\x8e\xe5\xaf\x0c\x22\x63\x42\x66\xf5\x01\x83\x4b\x4a\xb1\x84\x23\x8f\xe6\x3e\xf5\xc4\x6e\x1e\xe8\xdb\x2c\x77\x0b\xf5\x78\x49\x4e\xa2\xf7\x61\x6f\x7c\x72\xf3\x50\x82\x1e\xd3\x6d\x0a\xd2\x21\x79\xae\x77\x39\x1c\x1c\xbb\x8e\x40\x4b\x8a\xb7\xda\x17\x88\xf6\x51\x72\xd7\xe3\xb8\xf4\x0f\x04\xf7\x3c\x74\x64\xf9\xe6\x93\x64\x7c\x72\xfd\x6f\x00\x00\x00\xff\xff\x13\x86\xd8\xd7\x32\x06\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
