// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xdf\x6f\x13\x39\x10\x7e\xc6\x7f\xc5\xb0\x29\x94\xf6\xea\xdd\xb6\xf0\x80\x02\x41\x2a\xa5\x48\x95\x7a\x14\xb5\x9c\x78\x00\x54\x39\xeb\xc9\xae\xc9\xae\xbd\x67\x8f\x93\x96\x92\xff\xfd\x64\x6f\x7e\x37\xed\x55\x82\x87\xb0\x8c\x3f\xcf\x8c\xe7\xfb\x3c\x1e\x3a\x4f\xb3\xbe\xd2\x59\x5f\xb8\x12\x38\x5e\xb3\xdc\xdb\x0a\xb8\x81\x68\x2d\x6f\x1a\xb4\x43\xdf\x47\x28\x89\x1a\xd7\xcd\x16\x96\xbe\xd2\x69\xbf\x32\xfd\x34\x37\x16\xd3\xb1\xd2\xd2\x8c\x5d\xaa\x91\x16\x90\xc5\x17\x63\x6a\x00\x4f\xa1\xb0\xd8\x40\x36\x12\x36\xab\x54\x3f\x93\x26\x1f\xa2\x85\x0c\x29\xcf\x06\x8e\x44\xff\x0d\x50\x89\x9a\x01\xb8\x1b\x47\x58\xe7\x54\x81\x23\xd3\x40\x0b\x4c\x1d\xda\x91\xca\x91\x01\xd4\xc3\x81\x4b\xaf\x07\x0e\xf8\x00\x32\x89\xa3\x4c\x2a\x37\xcc\xc4\x2f\x6f\x31\xb3\xe8\x8c\xb7\x39\xf2\x46\x58\x3a\x60\x00\x98\x97\x06\xb6\x1f\x86\xc1\x9d\xac\x20\xb8\x87\xc2\x36\xff\x7a\x43\x02\x60\x1f\xf6\xb7\xe1\xdd\xbb\x45\xb2\x21\x0d\xe3\x35\xad\xef\x64\x00\x16\x1d\x19\x8b\xb9\xd1\xc0\x2f\x36\xac\xe7\x82\xa0\xf5\xd4\x9a\x32\x29\xb0\x36\x3a\xfd\xe9\x8c\x86\xb7\x6f\xb7\x4f\xce\x3f\x6e\xb3\x5b\x06\x90\x54\xa6\xe0\xd2\xaa\x11\xda\xa4\x0b\xc9\x4f\xe3\xad\x16\x95\x4c\xd8\x84\x9d\x9c\x7f\x5c\x2b\x94\xb0\xb4\x5e\xa9\x81\x62\x6c\x7a\x9e\xc6\x57\x15\xdc\xde\x42\x7a\x6c\xf4\x40\x15\xe9\x69\x2d\x0a\x74\xe9\x27\x23\x11\x26\x13\x78\xfe\x2e\x16\x48\x07\xd4\xf3\x8d\x6c\x21\xe5\x72\x13\x57\x73\x2e\xd6\x2b\xec\x72\xa7\x0e\xb2\xca\xeb\x7d\xf8\xfd\x1b\xc8\x7a\xbc\x97\x8c\x25\xe8\x5a\xc0\x96\x06\x89\x03\xe1\x2b\x72\x8f\xa2\x21\xec\xbb\x9f\x84\xb8\x1a\xea\x32\x30\x16\xa4\x23\x50\x1a\x28\x6f\xf6\x5e\xbf\x7a\xf5\xea\x0d\x48\xc3\x9e\x34\xd6\x90\xe9\x6d\xdd\x4a\x47\xcf\x9e\xed\xed\x4e\xd8\x93\xc6\x58\x6a\x0d\x9d\xce\xee\xde\x84\x3d\x51\x0d\x89\x7e\x85\x0e\xf8\x11\x9c\x5f\x5e\x7d\x3c\xbd\x38\xf9\x7a\x74\x76\x76\x75\x74\x76\x76\xfe\x15\x78\x03\x5b\xd1\x09\xf0\x3a\xf0\x42\x08\x9c\xb7\x7f\x7f\x3a\xf9\x1a\x8c\xb3\x65\x2e\x83\x6b\xd8\x8a\xbf\xfc\x27\x1c\x1d\x1f\x9f\x7c\xfe\xc2\xa4\xd1\xe1\xc6\x4c\x83\x70\x27\x46\x38\xd5\x8b\xbb\x71\x79\xe4\x2f\x9b\xad\x32\xd6\x81\x71\x89\xba\x15\x80\xd2\x05\xe8\x40\xe9\x58\x88\x02\x35\x81\xd0\x12\x34\xd2\xd8\xd8\x21\x78\x52\x95\x22\x85\x0e\x0a\x83\x0e\x94\x26\x03\x56\xe4\x08\xb9\xd1\x52\x91\x32\x3a\x65\x1d\x50\x83\xf9\x66\xeb\xb5\x83\x3e\x0e\x8c\x45\x90\xda\x81\x72\x30\xd4\x66\xac\x81\x4c\x60\x7f\x1a\x09\x01\xb5\x04\xdf\xc0\x58\x51\x09\x58\x37\x74\x03\x8e\xac\xd2\x05\x1b\x97\xaa\x42\xf8\xf6\x0d\xb6\x5e\x94\xc6\x91\x16\x35\x02\x97\x3b\xd0\xeb\x41\x92\xc0\x8f\x1f\xa1\xe0\xe0\x2a\xc4\x06\x0e\xc2\x77\x38\x76\xbb\xe7\x29\x3c\xac\xdb\xcb\x70\x5a\xdf\xc0\x64\x12\x49\x83\x99\x97\xb6\x76\x0e\x09\xfe\xba\x66\x78\x1d\x0b\x7b\x79\x74\xf9\xcf\xc5\x69\x6f\x7b\xc9\xcb\xdf\xc2\x11\xda\xa9\x93\x76\x1d\x26\x93\xed\xb8\x91\x5f\xcf\xee\x8c\xf5\x1a\x38\x6f\xac\x1a\xa9\x0a\x0b\x94\xc0\xb9\xad\x81\xf3\x59\x41\xc3\x99\x80\x8f\x20\xeb\x66\xe1\xb3\xfb\x0b\x38\x4e\xa3\x3d\x98\x32\xf3\x3a\x04\x6a\x91\x8c\xf9\x46\x0a\x42\x9e\x0b\x4e\xd6\x3b\x62\xcc\x85\x50\x0a\xb8\x45\x48\x5c\xe7\x05\xec\x86\xfb\x8c\xb6\x0b\x3b\xe9\x6e\xe7\xfb\xc1\xac\x15\x2f\x8a\xba\xd3\x49\xda\xab\x69\xac\x2a\x94\xce\xea\x78\xbc\xcc\x34\xa8\x5d\xa9\x06\xc4\x5b\x43\x1a\x5a\x71\xab\x9f\x3f\x8f\x11\xc8\x8f\x3f\xcb\x5e\xd9\xed\x2d\x0f\x0a\xd2\x08\x5b\xe9\x7b\x91\x0f\x7d\xf3\xbe\x32\xfd\x4f\x81\xf8\x24\x09\x47\xaf\x4c\x51\xa0\x05\x4e\xd0\xe6\xc4\x5d\x5b\x96\xd4\x95\x90\xcc\x35\x1c\xee\xed\x08\xed\x0d\x18\xbd\xa4\x9d\x9d\x24\xa8\xdd\x51\x20\x1a\x0a\xa4\x28\xc2\x7e\x8c\xc2\x02\x31\x17\x83\xd5\x7b\x9e\xed\x32\xc2\xba\x09\x79\x7c\x50\xb6\xb7\xba\x36\xdd\x57\x0f\xa5\xb2\xb0\xb5\x84\x63\x0f\xe7\x28\xcd\x58\x57\x46\xc8\x90\x66\xeb\x23\x79\xa4\x66\x4f\x28\x97\x6d\x4d\xee\x91\xed\x8a\xec\xee\x2a\xed\x3b\x83\xa8\xb6\x3b\x44\x77\xef\x9a\x36\x81\xf3\xca\x78\xd9\x58\x33\x52\x12\x6d\xd6\xcd\xae\xa4\x20\x91\x5d\x19\x3f\x77\xbd\x5c\x86\x6e\x66\x7c\x90\x74\x58\xfa\x9f\xb3\xb4\xdb\xc3\x30\x10\x58\xea\x05\xf4\x1a\xf7\x33\x8c\x44\x47\x4a\x8b\xd0\x6b\x7a\xc1\xff\x94\x85\x54\xf6\x61\x56\xd7\x87\xab\xdf\xe2\xe7\x60\x94\x0b\x49\x1c\xce\x5a\xfe\xc3\x1e\x5a\x50\x60\xcf\x69\xd1\xb8\xd2\xd0\x63\xf9\x6b\x9b\x46\x38\xf9\x9f\xf3\x17\x24\xd8\x9d\x7f\xcd\x97\x96\x15\xda\x5d\xfd\x57\xcb\x04\x47\x38\xf9\x72\xfc\xe1\xf8\xcb\xd9\xd5\xd1\xe7\xd3\x5e\xf2\x32\xb9\x87\xa0\x95\x64\x23\x26\x78\x89\x93\xc2\xf4\xd8\xb3\x72\xad\xb0\xbe\x44\x48\x0c\xc7\x83\x46\x78\xb8\x22\xab\xb7\x47\xe3\x78\x0a\x88\x4d\x7d\xe9\x8e\x4e\xcd\x4a\x2b\x52\xa2\xe2\x79\xe5\xa3\x1e\x93\x29\x15\xfb\xf1\x4f\x6f\xd6\x5f\x56\xac\xdd\xc3\x97\xaf\xf7\xf7\x96\x4d\x07\x1b\x81\x07\x77\x81\x87\x1b\x81\x87\x11\x98\x6c\x4e\x89\x93\x19\xa2\x8e\x65\xe1\x03\x63\x79\x1c\x45\xd6\xa0\x42\x8e\xd0\x92\x72\xc8\x1b\x44\xcb\xbd\xad\x1c\x6c\x68\x8d\x31\x0c\x63\xf5\xe8\x6e\x95\xb2\xdd\x35\x5b\xec\x54\x76\xbd\x53\x85\x7a\xae\x34\xa1\x95\xf1\x65\xcd\xef\x63\x04\x8e\xf1\x39\x4d\x62\x43\x0e\xef\xf3\x64\xc2\x18\x79\x8d\x92\x0b\x59\x43\x63\xcd\x20\x48\x7e\xf1\x42\xe4\x46\x93\x35\x15\x6f\x2a\x11\x5e\xe1\x0e\x68\x43\xd8\x05\x41\xa6\x56\x39\x5f\xe0\xe2\x9b\x9f\xdb\xf0\xbf\x85\xca\x98\xc6\x81\xd7\xa4\xaa\x69\x1e\x61\x42\xf0\x0d\x5b\x4c\xa5\xa8\xc3\x90\xb2\xd9\xcb\x7c\x4a\x5d\x1f\x62\x1f\x44\x87\xe9\xb4\x03\x52\x39\xd1\xaf\xe2\x4b\xe1\x6e\x5c\x65\x0a\x70\x4a\xe7\x71\x18\xa9\x85\x16\x05\x02\x86\xe7\x83\xca\x00\xa1\xd2\x1a\x5f\x94\x30\x1b\x9f\x97\x02\xb6\x7e\x70\xe6\x65\x63\x4a\xa6\xb9\xb3\xfc\x5f\x00\x00\x00\xff\xff\x60\xe6\xe2\xfe\x34\x0d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x6e\xdc\x36\x10\xbd\xf3\x2b\x9e\xd7\x45\xb6\x45\x41\x29\xb9\x3a\xb1\x81\xa2\x48\x80\x5c\x1a\xc0\x46\xd1\x43\x90\x03\x25\x8d\x24\x66\xa9\x19\x86\x1c\xee\xda\x31\xf6\xdf\x0b\xad\xec\xae\x6b\x07\x9b\x1b\xa1\x79\xf3\xde\xcc\xe3\xa3\xce\xcf\xea\xc6\x73\xdd\xb8\x3c\xc2\xd2\xad\x69\x4b\x0a\xb0\x82\xc3\xd7\xf1\x2e\x52\xda\x94\x86\x30\xaa\xc6\x7c\x51\x1f\xbf\x34\x9e\xab\x26\x48\x53\xb5\x92\xa8\xda\x79\xee\x64\x97\x2b\x26\x3d\x42\x8e\x27\x63\x7c\x8f\x33\x0c\x89\x22\xea\xad\x4b\x75\xf0\x4d\xdd\x49\xbb\xa1\x84\x9a\xb4\xad\xfb\xac\xae\x79\x0b\x1d\x89\x0d\x90\xef\xb2\xd2\xd4\x6a\x40\x56\x89\x58\x80\x55\xa6\xb4\xf5\x2d\x19\x60\xda\xf4\xb9\xba\xed\x33\x6c\x8f\xba\xa3\x6d\xdd\xf9\xbc\xa9\xdd\xf7\x92\xa8\x4e\x94\xa5\xa4\x96\x6c\x74\x49\xdf\x18\x80\xda\x51\xb0\x3e\x0d\xc3\x8b\xa9\x30\xd3\x63\x48\xf1\x5b\x11\x75\xc0\x6b\xbc\x5e\xe3\xea\xea\x38\xec\x3c\x86\x14\xd6\xe7\x9d\x06\x48\x94\x55\x12\xb5\xc2\xb0\xd7\x2f\xea\xf7\xf7\x16\xbe\x07\x7d\x43\x75\x2d\x81\xb0\xf2\xdc\x27\xb7\xc2\x7e\x6f\x80\xd6\x29\x16\x91\x05\x5d\x77\x8e\x26\xe1\xea\x6b\x16\xc6\xbb\x77\xeb\xf7\x9f\x3e\xac\xcd\xbd\x01\x56\x41\x06\xdb\x25\xbf\xa5\xb4\xba\xc0\xea\xab\x94\xc4\x2e\x74\x2b\xb3\x37\xef\x3f\x7d\x38\x88\x10\x77\x0b\xe9\x53\x3b\x5d\xd2\xe7\x7e\xf6\xde\x98\x87\xad\x63\x09\x01\xf7\xf7\xa8\xfe\x14\xee\xfd\x50\x7d\x9c\xdc\x40\xb9\xfa\x4b\x3a\xc2\x7e\x8f\x57\x57\x07\x1b\x79\x46\xbd\x32\xe6\x1c\xbb\x91\x78\x21\xf5\x3c\x80\x67\xd8\xce\xb9\x81\x58\xe1\xb8\x03\x93\xee\x24\x6d\x50\xd4\x07\xaf\x9e\x32\x06\xa1\x0c\xcf\x2a\x48\xae\x25\xb4\xc2\x9d\x57\x2f\x5c\x99\xf3\xd9\x94\xc7\xe6\x54\x38\xa3\xa1\x5e\x12\xa1\xe3\x0c\x9f\xb1\x61\xd9\x31\x54\xe6\x8c\x3c\x28\xd1\x61\xc5\x12\xb1\xf3\x3a\x82\xa6\xa8\x77\xc8\x9a\x3c\x0f\x66\x37\xfa\x40\xf8\xfc\x19\xbf\xfc\x3a\x4a\x56\x76\x13\xc1\x76\xbf\xe1\xf2\x12\xab\x15\xbe\x7c\x79\x8b\x4e\x90\x03\x51\xc4\x9b\xf9\xcc\x64\x1e\x7a\xce\x70\xda\x8b\x9b\x79\xdb\x12\xb1\xdf\xcf\x7d\xb3\xbb\x0b\x8b\x39\x90\x64\x52\xfc\x7e\x6b\xe8\x36\x4a\x52\xdc\xfc\x71\xf3\xf7\xf5\xc7\xcb\xf5\x13\x96\x7f\x24\x6d\x28\x3d\x90\x2c\x75\xec\xf7\xeb\x43\xa3\xbd\x7d\xbc\x87\x54\x18\xd6\xc6\xe4\xb7\x3e\xd0\x40\x1d\xac\x4d\x13\xac\x7d\x34\x74\xde\x09\x76\x8b\xfa\xa2\x9e\x8f\x17\xdf\x61\xe9\x41\xed\xe4\xc8\xa6\xf0\x2c\xb4\x20\x8d\x29\xb1\x73\x4a\xb6\x75\x56\x53\xc9\x6a\x4e\x65\x53\x0b\x53\x67\x5d\x37\x21\x26\xe9\x67\xa7\x24\x12\xe7\xd1\xf7\x6a\x5b\x61\x4d\x12\x6c\x0c\x8e\x69\xc9\x5e\xc8\xf4\xb3\xae\xf9\x12\x9f\x06\xd5\x9c\x83\x45\xe9\x02\x4e\x65\xf2\xad\xfd\x3f\x12\x6d\x9a\x7f\x51\x41\x24\x66\x14\x56\x1f\x30\xb9\xac\x94\xe6\x70\x94\x68\x8e\x21\x27\x76\x4d\xa0\x1f\xb3\xfc\x17\xfa\xe7\x6f\xe2\x24\x7a\x09\x7b\xe7\xb3\x6b\xc2\x1c\xf4\x94\xef\x72\x90\x01\xd9\x73\x7b\xc8\xe1\xe4\xd8\x0d\x04\xda\x52\xba\xd3\x71\x86\xe8\x98\xa4\x0c\x23\x1e\x1f\xe6\x13\xc1\x85\x87\x1e\x59\x7e\x38\x92\xc4\x17\xe5\x7f\x03\x00\x00\xff\xff\xd8\x18\xfc\x2b\xa9\x05\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
