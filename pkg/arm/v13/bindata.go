// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x6f\x57\x1b\xb7\xb3\x7e\x5d\x7d\x8a\xe9\x9a\x36\x4d\x8a\xbc\x90\xa6\xf7\xf6\xb8\x25\xe7\x10\x20\x3d\xdc\xd2\xc0\x85\xe4\xf6\x45\x9a\x93\x23\xaf\x66\x6d\xc5\x5a\x69\xab\x3f\x36\x2e\xf1\x77\xbf\x67\xb4\x6b\x63\x63\x03\x49\x43\x7f\x79\x41\x6c\x69\x34\x33\x1a\x3d\x33\xcf\x48\xee\x7c\x9d\xf7\x95\xc9\xfb\xc2\x0f\x81\xe3\x25\x63\x1d\x78\x69\x1d\x04\xf4\x41\x99\x41\x0f\xb4\x1d\x80\x30\x12\xa4\xb3\x35\x08\xad\x21\x38\x51\x96\xaa\x80\x30\x14\x01\x26\x36\x6a\x09\xce\xc6\x80\x30\x56\x02\xc2\x10\xa1\x12\x3e\xa0\x83\xa3\x93\x17\xac\x03\xe7\x47\x17\xa7\x6f\xce\x0f\x8e\x7e\x3d\x3f\x7d\x73\xb6\x97\x4d\x6d\x74\xdc\xa1\xb7\xd1\x15\xc8\x07\xce\xc6\x3a\x63\x1d\x38\xbd\x78\xff\xf2\x7f\x0f\x5f\xed\x65\xb6\x46\xe3\x87\xaa\x0c\xdd\xad\x95\x95\x5d\xeb\x85\xc4\x71\xb7\xd0\x36\xca\x8c\x75\x58\x07\x54\x1d\x44\x5f\xa3\x07\x7e\x0c\xc7\xaf\xce\xde\xbc\x06\xee\x61\xeb\x3b\xa9\x06\xf0\xbd\x1f\x5a\x17\x20\xdb\x6a\xf5\x66\xf0\x11\x82\x50\x1a\xf8\xee\x63\xe0\x1f\xe0\xe4\xf4\x57\xe0\x5c\xdb\x01\xaf\x1d\x96\xea\x12\xb2\xdf\xde\xbc\x38\x02\x12\x85\xc3\xf3\xd3\xb3\x5e\xf6\x65\xfa\x49\x07\x63\x57\x57\xa0\x4a\xe8\x1e\x58\x53\xaa\x41\xf7\x02\x8b\xe8\x54\x98\x9e\x89\x50\x0c\xcf\x44\x31\x12\x03\xf4\x30\x9b\x31\x6d\x07\x03\x74\xc0\x43\x1b\x38\xee\x83\x70\x21\xd6\x5d\x3f\x84\x4c\x19\x1f\x84\xd6\xca\x0c\xc0\xa1\x04\x0a\x79\x21\x0d\x14\x49\x67\x74\x22\x28\x6b\xc0\x1a\xd8\xfa\x6e\x68\x7d\x30\xa2\xc2\xc7\x19\x2b\x44\x80\xe7\xf9\x58\xb8\x5c\xab\x7e\x3e\x8d\x55\x5e\x68\x85\x26\xf0\x02\x5d\xe8\xd6\x58\xc1\x2f\xbf\x3c\x3a\x3a\x7d\xf9\x88\x5c\x3c\x40\x17\xf6\xfd\x8b\x69\x40\xbf\xf0\x95\xc6\x54\xa9\x0a\x11\xd0\x77\x5b\x5f\xcf\xb1\xb6\x5e\x05\xeb\xa6\x69\x1a\x3e\xc2\x45\x70\xe4\xd7\x6c\xc6\x8e\x4e\x5f\xde\x6e\x74\x84\xd3\x9b\x36\xcf\x9c\x1a\x8b\x80\xbf\xe1\xf4\x33\x2d\xff\x86\xd3\x35\xc3\x9f\x1c\xc0\xfd\xf3\x53\xf0\xed\x29\x40\xac\x25\xd9\x80\xb7\x57\x57\xad\x3e\xff\x3f\x56\x99\x7b\x8e\x2b\xdb\x86\x0c\x66\xb3\x77\x6b\x21\x2f\xad\x03\x11\x02\x56\x75\x00\x65\xe0\x6a\xb7\xdb\xfd\x71\xf6\x33\x48\xcb\x00\xa6\xb1\x82\xd6\x0d\xe0\x53\xe0\x7f\xc1\xe7\xd9\x4c\x26\xe1\xdb\x6f\xa1\xef\x50\x8c\x18\xc0\x9d\x1b\x7e\x3b\x77\x63\xeb\xaa\xfd\x34\x7b\xb7\x79\xeb\xad\x4f\x0d\x86\x4a\xa1\x34\xca\x8c\x01\x61\xf6\xed\xdb\xa5\xd5\xc0\x75\x80\x1f\xe1\xdd\xbb\x9f\x29\xbb\x0d\x78\x8d\x58\xc3\xee\xcf\x80\xda\x23\xe0\xa5\x0a\xf4\xa5\x54\x4c\x5a\x83\xf7\x9c\x86\xc3\xca\x8e\x3f\x0f\xcc\x14\xbd\x42\xa3\x30\x54\x7c\x98\xab\x80\xbb\x12\xee\x04\xf7\x1d\x20\x64\x57\x57\x68\xe4\x6c\x46\x55\xae\x70\x28\x02\x92\xf5\x20\x94\x41\x07\x75\xd4\x9a\xa2\xe4\x30\xb0\x6a\x24\x95\x03\x5e\x5f\x2b\xb3\x4e\x0d\x94\xc9\xbb\xd2\x16\x23\x74\x37\xe0\xbe\x3a\x99\x37\x3b\xea\x7e\xf0\xd6\x2c\xc3\xbe\x7b\x88\x4e\x8d\x51\x76\x0f\x6c\xd5\x57\x06\xe5\x71\x25\x06\x78\x16\xb5\xbe\x48\x56\xe7\x40\x58\x83\xb8\x36\x54\x7b\x6e\xb1\x06\xb9\xb3\x36\xe4\xb4\xa5\xd7\xa7\x87\xa7\x3d\x90\xa8\x31\x60\x2a\xc5\xa5\xd5\xda\x4e\x48\x53\x2a\xb5\xcd\x9e\x29\xca\xa2\xa4\x12\xad\x02\x28\x0f\x7d\x31\x42\x09\xca\x04\x0b\x36\x3a\xf8\xbf\xdf\x41\x91\x5f\x9e\xa5\x35\x42\x4a\xe0\x25\xb4\xdb\x66\xaa\x84\xaf\x61\xe0\x70\x29\x32\x73\x37\x30\x14\x79\xe9\x83\xe8\x37\x40\x61\x00\x7e\xea\x03\x56\x45\xd0\xe0\x83\xad\x5b\x1d\x3c\x9d\x66\xac\xbb\x41\x55\xe8\xee\x95\xf2\xe8\xc6\xaa\xc0\xdb\xe4\x96\xe6\xab\x51\xe9\xbb\x97\xa5\x27\x77\x73\x89\xe3\x5c\x2a\x3f\xca\xc5\xdf\xd1\x61\xbe\xa0\x9c\x5a\xb8\xb0\xcb\x00\xb0\x18\x5a\x78\x74\xb7\x18\xac\xed\x11\x48\x3d\x0c\x5c\xfd\x57\xb4\x41\x00\xec\xc0\xce\x23\x78\xfe\xfc\x7a\xeb\xe4\x86\x8d\x26\xdc\x5c\xc9\x00\x1c\xfa\x60\x1d\x16\xd6\x00\x3f\xdf\x30\xdf\x20\x8a\x34\xb5\x28\x92\x02\x2b\x6b\x6e\xa0\x88\x01\x64\x44\x5c\x92\x90\xe4\xb2\x1e\x64\x1f\x6c\x74\x46\x68\x99\x6d\xd3\x9c\x54\x9e\x58\x8b\x6b\x1c\x88\x62\xca\x1d\x0e\x94\x0f\x6e\x9a\xf5\x20\xb8\x88\xac\xc1\xd3\x6a\x2c\x85\x0b\xeb\xc1\xdc\x2c\x70\xe3\xec\x4a\xc5\x58\x1b\x99\x94\x3c\x84\xf1\xb6\x96\x25\x68\xfb\xee\x2b\x2b\x31\x55\xaf\xe7\x29\xd4\x86\xa4\xbe\xdd\x88\x22\x0c\x85\xdc\x84\xa1\xc5\xa9\xde\x3c\x2b\x5f\x78\xb5\x9b\xeb\x68\x76\xe0\xe3\xc7\x66\x77\xb7\x1d\xeb\x92\xe8\x0d\x83\xcd\x81\x4a\x2c\x45\xd4\xc1\x7f\xd2\x81\xd2\xba\xdb\x8f\x33\xcd\x52\x5c\x88\x11\xa4\x4f\x6c\x10\x8a\x7a\xfb\xa7\x67\xcf\x9e\x25\x3e\xf8\xaa\x76\x36\xd8\xbd\xad\x2b\xe9\xc3\x37\xdf\x6c\x3f\x99\xb1\xaf\x6a\xeb\x42\x33\xd0\xe9\x3c\xd9\x9e\xb1\xaf\xae\x5b\x8f\xfd\xd4\x1a\x1d\x9f\x1f\xfd\xb1\x7f\x72\xf2\x7e\xff\xe4\xe4\xf4\x0f\xaa\x4a\x5b\x49\x09\xf0\x8a\x4e\x27\x20\x70\xde\xfc\xff\xea\xe8\x0f\x1a\x9c\x4f\x73\x49\xaa\x61\x2b\xfd\xe5\x1f\x60\xff\xe0\xe0\xe8\xec\x35\xf0\x49\x5b\xab\x3b\x20\x8a\x02\x6b\x6a\xf4\xe0\xa7\x67\xcf\x7e\x00\x72\x9a\xea\x86\x90\x95\xf2\x9e\x0a\x05\x95\x47\x67\xb5\x46\xc7\xee\xf5\x2a\x14\xf5\xad\x2e\xa5\xb9\xd6\x9f\x64\x6a\xc5\x9d\x85\x6e\xee\xc5\x18\xdb\x34\xf0\x53\xdf\x14\xd2\x7c\x3e\x4b\x1e\x4f\x12\x07\x11\x26\xc9\x6b\x43\xf8\x9a\x08\x31\x40\x13\x52\x9b\x6a\x30\x4c\xac\x1b\x41\x0c\x4a\xab\xa0\xd0\xc3\xc0\x26\xae\x0b\x16\x9c\x28\x52\xbd\x97\x8a\x6a\x60\x97\x7a\xbc\x72\xb1\xd8\x45\xe3\xa1\x8f\xa5\x75\x08\xd2\x78\x2a\x8c\x23\x63\x27\x06\x82\x4d\x21\x69\x2c\x21\xa0\x91\x10\x6b\x98\xa8\x30\x04\xe2\xc7\x29\xf8\x54\xab\xd9\x64\xa8\x34\x26\xea\x5c\xd0\x17\x70\xf9\x18\xf6\xf6\x20\xcb\x12\x7d\x4a\x7b\x4d\x9e\x9f\x40\x96\x94\x52\xb4\xc7\xf5\xac\xba\x68\xa4\x60\x36\xbb\xbb\xf3\xb8\x3b\x37\xaf\xb5\x7c\x59\x73\xf1\xc9\x56\x3e\xb7\xc7\xf8\xaf\x9d\xdb\x9a\x0c\xea\xff\x5f\x9d\xbe\x3e\xea\xc1\xb1\x81\x32\x86\xe8\x70\x1b\x2a\x3b\xc6\xe6\x56\xa2\x4c\x69\x5d\xd5\xf6\x13\x31\x78\x25\x11\x6c\x09\x68\xc6\xca\x59\x53\xd1\x71\x8f\x85\x53\x0d\xa6\x3a\xcc\x63\x80\xef\x2f\x19\x5e\x26\x74\x5e\xec\x5f\xbc\x39\x3f\xde\x7b\xb4\xb4\x95\xdf\x53\x24\xda\x9d\x34\xf3\x30\x9b\x3d\x4a\x0b\xf9\xe5\xbc\x04\xba\x68\x80\xf3\xda\xa9\xb1\xd2\x38\x40\x09\x9c\x53\xbb\xc2\xe7\x90\x24\x54\x00\x1f\x43\xde\xcb\xe9\x63\xef\x6f\xe0\xd8\x5a\xbb\x3b\x6e\xed\x09\xb0\x68\xc8\x60\xb3\x82\xb1\xa6\x8d\xe3\x85\xe0\xc1\x45\x1f\x28\x37\x3c\x86\x94\x15\xb1\x86\x01\x1a\x1c\x8b\x74\x9a\x34\xe2\x83\x28\x46\x20\x3c\x78\x4b\xec\xef\x13\xa4\x57\x1b\x2f\xe5\x41\x0b\x25\x29\x60\xd0\x9f\xb2\x4e\x12\x69\x4d\x5f\x77\x49\xdb\xcd\x4a\x6d\x3d\x52\xa9\x50\x29\x51\xda\x14\xb9\x45\xb8\xb2\x0e\x59\x87\x5c\xf1\x50\x3a\x5b\xad\xc8\xd6\xce\x16\xe8\x3d\x65\xd6\x44\x51\xff\x35\x54\x35\xe9\x6b\xfc\x67\x8d\x1b\x1e\xc1\x0f\x9b\x9b\x66\xa4\x0e\xb1\x40\x10\x20\xc5\x14\xac\xd1\x53\xda\x4d\x8d\x4d\xdd\x92\xb6\xf0\x2c\x8f\xde\xe5\xda\x16\x42\xa7\x9b\xad\xf8\xdb\x63\x21\xdb\xcd\x52\x1f\xd5\x17\x1e\xb5\x32\x94\x9d\x70\xb6\x7b\x78\xaf\xbc\xb7\x65\x98\x08\xf7\xc9\xf2\x85\x16\x95\x18\xcf\xa5\x59\x07\xd0\x10\xd2\x52\x79\x6a\xc8\x74\xf5\x54\x5a\xd2\xf5\xec\x9a\x73\xa3\xa9\x84\x1f\x41\x25\xbd\x9c\x73\x32\x34\x76\x56\xbf\x56\xd6\x5c\x8f\x94\x3a\xa2\x09\x8b\xef\x4b\xea\x5a\x07\x1e\x4a\x5d\xb3\x89\x2f\xd3\xc6\x3a\x70\xa6\x0c\x8c\x62\x1f\x9b\xc8\x25\x14\x45\x8f\x90\x22\x0b\xa2\x56\x9c\x64\xd1\x31\x4f\xa9\xa4\x80\x3b\x84\xcc\x77\xbe\x83\x27\xcd\x78\x0f\x1e\x77\x9f\x74\xfe\xdc\x1d\x86\x50\xfb\x5e\x9e\x2f\xdd\x1a\x3a\x59\xd3\x49\xb4\x8d\x72\x53\xc8\x72\x22\x35\xd3\xbd\xb6\xf8\x60\x8a\x17\x8f\x16\xbc\x19\x78\x50\x1b\xc4\x3b\xe9\xcf\xc3\x6b\xf5\xf2\x01\xc2\x91\x2e\x1f\x49\x4d\x7b\xed\x61\xec\xea\x8a\x53\x85\x37\x08\x5b\xdd\x17\xa2\x18\xc5\xfa\x85\xb6\xfd\x57\x44\x88\x59\x76\xef\x93\xc7\x82\xdb\xa9\xb9\x1a\xa3\x9b\xae\x5d\x09\xa9\xd2\x05\xa2\x51\x18\x60\x48\x79\xdf\x4f\x56\xd2\xed\xf0\xbc\x5c\x6d\xc6\xf2\x27\x8c\x38\x86\xfc\x38\x54\x6e\x6f\x75\xae\x5d\xd7\xdc\xf6\xb6\x96\xe4\xfe\x31\x35\x1f\x85\x42\x36\x7b\xfe\x42\x76\x5e\x51\xf4\x6f\x12\xf4\xaa\xa1\x87\xe3\xe8\x3b\xfd\x94\x76\x62\xb4\x15\x92\x82\xd8\x1c\x42\xb6\x4a\xa3\xeb\xcc\xf9\x27\x83\xc4\x9e\x6b\xf9\xd7\x5b\x1f\xda\x24\x9c\x9e\x0e\x6b\x67\xc7\x4a\xa2\xcb\x7b\xf9\x7b\x29\x82\xc8\xdf\x13\xdd\xb5\xd2\xcb\x00\xe8\xe5\x36\x12\x45\xd3\xd4\x7d\x31\x23\x28\x35\x9b\x68\x34\xf1\x7e\x0b\xf7\x3d\x5a\x79\x23\x03\x66\xb3\x56\x48\xa6\x17\xd6\xc4\xbd\x7b\x64\xac\x05\x63\x57\xf6\x5b\x01\x51\xa4\xb9\x79\xa8\xee\x0e\x68\x6b\x7f\x2e\x4c\x47\x38\x4f\x93\xa7\xf3\xbb\xca\x3f\xc5\x74\xd3\xfe\xd0\x9e\xbf\x10\xd3\x2b\x8a\xfe\x4d\x4c\xaf\x1a\xfa\x0f\x61\xba\x89\x72\xe2\x75\x23\x6a\x3f\xb4\xe1\xb3\x30\x4d\x28\xea\x2d\x3e\x2d\xa6\x96\xeb\x55\x6f\xf5\x5b\x83\x4e\x8e\x70\xf4\xfa\xe0\xf0\xe0\xf5\xc9\xfb\xfd\xb3\xe3\xbd\xec\x87\xec\x16\xd0\xae\x06\x85\x64\x48\x4b\x22\xf4\xd6\xdf\x39\x50\x56\x32\x61\x0d\x97\x94\x37\x9c\x0a\xe6\x6a\x2d\x35\x38\x69\x05\xd2\xd5\x67\xa9\x62\xb7\xc3\xca\xa8\xa0\x84\xe6\x85\x8e\x29\x47\xb3\x36\x86\x3b\xe9\xdf\xde\x9c\x5f\x56\x46\x7b\x4f\x7f\xf8\x69\x67\x7b\x79\x68\x77\xa3\xe0\xee\xba\xe0\xd3\x8d\x82\x4f\x93\x60\xb6\xd9\x25\x1e\xec\x08\x4d\x0a\x0b\x2f\xad\xe3\xe9\xf5\xe0\x86\xa8\x90\x63\x74\x41\x79\xe4\x35\xa2\xe3\xd1\x69\x0f\x1b\xa8\x31\x99\x61\xac\x1a\xaf\x47\x29\x7f\x72\x63\x6c\xed\x55\x73\x11\xcf\x15\x4a\x5a\x79\x71\xb8\xa1\xf7\x53\x90\x89\xe9\xd2\x99\x25\x7a\xa6\x5b\xec\x6c\xc6\x58\x88\x06\x25\x17\xb2\xa2\x46\xbc\xa4\x0b\xec\x75\x33\xd3\x5e\xfd\x79\xad\x45\xf3\x58\x30\x41\x10\xda\x5b\x30\x88\xf2\x5a\xae\x9b\x1a\xb6\xee\xd8\xea\x58\xa1\x07\x02\x46\xf3\xb4\x2a\xe7\xd7\xe9\xcb\xd2\x43\xf3\x60\x56\xd0\x25\x9a\x6e\xda\xf3\x07\xd6\x0a\x76\xfe\xfb\xc7\x9d\x4d\x0f\xad\xb7\xe8\x27\x3f\x9a\x37\xae\xd4\x22\xf8\xa9\xd7\x76\x00\x5e\xd1\x9d\x60\x82\x50\x09\x23\x06\x08\x48\x7d\x43\x18\x92\x48\x18\x3a\x1b\x07\x43\x98\x3f\x93\x2d\xf5\xb1\xed\x5b\xd9\x5c\xcb\xc6\x4e\xd7\xd6\x6b\xd3\xac\x03\xc6\x06\xec\x81\x08\xb6\x52\x05\xbf\x8e\x58\x7a\x23\x28\x9c\xf0\x43\xd0\xd6\xd6\x1e\xa2\x09\x4a\xcf\x7f\x10\x53\x1e\x62\xbd\xde\x95\x6f\xd4\xb2\x30\xf6\x10\x3f\x22\xf9\x62\x88\x32\xa6\x80\x2d\x67\xa5\xc3\xbe\xb5\x81\xda\xee\xc2\x56\x75\x7a\x33\xde\xf4\x3b\x41\xc6\xfc\x30\x06\x22\x16\x2a\x61\xcd\x9a\xef\x9f\xb2\xab\x2b\x2a\x91\xb3\xd9\xda\xbd\xe0\xce\xfd\x2c\x9e\xea\xe6\x0f\xf1\xff\x1f\x00\x00\xff\xff\x5a\x4b\x4a\x8b\x7f\x1c\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x6f\xdb\xc8\x15\x7d\x9f\x5f\x71\x56\x5a\xc4\x5d\x6c\x28\x25\x05\xd2\x02\xce\x26\x40\x9a\x64\x81\x74\xd1\xb5\x61\x6f\xdb\x87\x20\x0f\x23\xce\x25\x35\xab\xe1\x5c\x66\x3e\x24\x2b\x8a\xfe\x7b\x71\x49\x2a\x96\x2d\x5b\x4e\x90\xbe\x49\xe4\x9d\xfb\x79\xee\x39\xc3\xf1\x0f\xd3\x99\xf5\xd3\x99\x8e\x73\x14\x74\xa5\xd4\x66\x03\x5b\x61\xf2\x9a\x7d\x65\xeb\xc9\x25\x95\x39\xd8\xb4\x3e\xd7\xa9\x9c\x9f\xeb\x72\xa1\x6b\x8a\xd8\x6e\x95\xe3\xba\xa6\x80\x22\xc1\xb3\xa1\x22\x26\x1d\x52\x6e\x27\x71\x8e\x91\xf5\x31\x69\xe7\xac\xaf\x11\xc8\x60\xae\x13\x4a\xe3\x51\x76\x1e\x73\xd0\xc9\xb2\x07\x7b\xfc\xf8\x97\x39\xc7\xe4\x75\x43\x3f\x8d\x54\xa9\x13\x5e\x4e\x97\x3a\x4c\x9d\x9d\x4d\xd7\xb9\x99\x96\xce\x92\x4f\x45\x49\x21\x4d\x5a\x6a\xf0\xcb\x2f\x27\x6f\xcf\x7e\x3d\x91\x04\x5f\x53\x48\xaf\xe2\x3f\xd6\x89\xe2\x97\x4c\xe5\x99\xad\x6c\xa9\x13\xc5\xc9\x90\xe9\x05\xb5\x1c\x6d\xe2\xb0\xee\x5e\xe3\x33\x2e\x53\x90\xbc\xb6\x5b\xf5\xf6\xec\xd7\xfb\x83\x2e\x68\x7d\x3b\xe6\x79\xb0\x4b\x9d\xe8\x37\x5a\x7f\x63\xe4\xdf\x68\x7d\x10\xf8\x2b\xdb\xf7\xea\xe2\x0c\x71\x98\x00\x72\x6b\x24\x02\xde\x6f\x36\x83\xb7\xf8\x4f\xb6\xfe\x81\x51\x8d\x1e\x63\x84\xed\xf6\xc3\x41\xc3\x2b\x0e\xd0\x29\x51\xd3\x26\x58\x8f\xcd\xd3\xc9\xe4\xd9\xf6\x39\x0c\x2b\x60\x9d\x1b\x0c\x69\xa0\x58\xa3\xf8\x88\x6f\x8b\xd9\x85\xc4\xa3\x47\x98\x05\xd2\x0b\x05\x1c\x29\xf7\xfd\x2e\x89\x1f\x37\xc3\xaf\xed\x87\xbb\x0b\x1f\x32\xea\xf1\x53\x69\xeb\xc8\x8c\x14\x04\xad\xef\xdf\xef\x9d\x46\xe1\x12\x9e\xe1\xc3\x87\xe7\x48\x73\xf2\x88\x8e\xa8\xc5\xd3\xe7\x20\x17\x09\x74\x65\x93\xfc\xa9\xac\x32\xec\xe9\xe8\x24\x02\x35\xbc\xfc\x36\x18\x4b\xe7\x4a\x47\xda\x43\x3b\xa7\x42\x83\x22\x54\x38\x0a\xeb\x23\xf0\x53\x9b\x0d\x79\xb3\xdd\x2a\x35\x46\x19\x48\x27\x92\xe8\x49\x5b\x4f\x01\x6d\x76\x4e\x7a\x14\x28\xa9\x66\x61\x6c\x40\xd1\x5e\x3b\xe3\x60\x6b\xeb\xa7\x13\xc3\xe5\x82\xc2\x2d\xa0\xdf\x7c\x39\xed\x2b\x9a\xfc\x19\xd9\xef\x03\x7e\xf2\x86\x82\x5d\x92\x99\xbc\xe6\x66\x66\x3d\x99\x77\x8d\xae\xe9\x3c\x3b\x77\xd9\x45\xdd\x81\xe0\x00\xdc\xce\xa3\x88\xf7\xa5\x82\x69\x60\x4e\x53\x29\xe9\x8f\xb3\x37\x67\xa7\x30\xe4\x28\x91\x8c\x0a\x15\x3b\xc7\x2b\xf1\x54\x07\xce\x6d\x5f\xb3\x74\x59\x57\x89\x02\x6c\x82\x8d\x98\xe9\x05\x19\x58\x9f\x18\x9c\x03\xfe\xf3\x2f\x58\xc9\x2b\xaa\xee\x8c\x36\x06\x45\x85\xa1\x6c\x65\x2b\xfc\x80\x3a\xd0\x5e\x67\x76\x69\x50\x2a\xa7\x55\x4c\x7a\xd6\xc3\x44\x01\x71\x1d\x13\x35\x65\x72\x88\x89\xdb\xc1\x47\xd1\x4d\x33\xb7\x93\x64\x1b\x0a\x0f\x5a\x45\x0a\x4b\x5b\xd2\x7d\x76\x7b\xef\x9b\x45\x15\x27\x57\x55\x94\x74\xa7\x86\x96\x53\x63\xe3\x62\xaa\x3f\xe5\x40\xd3\x40\x91\x73\x28\xa9\x68\x75\x48\x4f\x15\x40\xe5\x9c\x71\x72\xdc\x0c\x07\x35\x42\xdc\xa3\x0e\xed\xc7\xcc\x49\x03\x4f\xf0\xe4\x04\x2f\x5f\x5e\x97\x2e\x69\x70\xf6\xe9\xf6\x49\x05\x04\x8a\x89\x03\x95\xec\x51\x5c\x1c\xbc\xdf\x6c\x0a\xd9\x3b\xfa\x88\xc9\x05\x3b\x12\xd2\xaa\x82\x96\xad\x57\x40\x0f\x36\x09\x32\x00\xcc\x68\x6a\xd8\xdf\x02\x98\x02\x46\x8e\xeb\xc2\x08\xc8\xc2\xe8\x14\xa3\x3f\x39\x07\xaf\x9d\x19\x3d\x96\x77\xc6\x46\x3d\x73\x54\x38\xaa\x75\xb9\x2e\x02\xd5\x36\xa6\xb0\x1e\x9d\x22\x85\x4c\xaa\x87\x9a\xe4\x41\xde\xf4\x71\xf7\x3b\xae\x43\x3a\x6c\xf9\xdd\x06\xb7\x26\x5c\x59\xa5\x86\xfe\x75\x2b\x26\x9b\x30\xb0\x5d\xb7\x00\x71\xf2\x3b\x1b\xea\xf8\xed\x65\x37\x10\x2f\x56\x8f\x04\xd0\xab\x8e\x6e\xc4\xb5\x60\x58\xe8\x04\x2b\xad\x6b\xf2\x09\xda\x1b\x78\x4a\x2b\x0e\x0b\xe4\x64\x9d\x4d\x96\x22\x6a\xee\x68\x2d\x31\x82\x2e\xbb\xe5\x36\x56\x00\x3f\x51\x63\x69\xef\xee\x70\xc8\x3e\x62\x46\x15\x07\x82\xf1\x51\xb6\x60\xe1\x79\xe5\x91\xb8\xdb\x9b\x3e\x12\x75\x9d\xc8\x2d\x56\x36\xcd\x21\x54\xb8\x46\xec\x16\x53\xad\xe6\xd6\x51\xc7\x92\x5f\xb8\x0a\x85\xf9\x09\x2f\x5e\x60\x34\xea\x98\xd2\xf0\x35\x4f\x3e\xc8\x8b\xd2\x17\xa9\xf0\xb0\x35\x97\xbd\x15\xb6\xdb\xe3\x02\x73\xbc\xc1\xd7\x5e\xbe\x47\x43\xbe\x3a\xc6\xb7\x4a\xc9\xdf\x9e\xdc\xa7\x25\x63\x35\xc6\xef\x67\x7f\xbc\x3d\xc5\x3b\x8f\x2a\xa7\x1c\xe8\x31\x1a\x5e\x0a\xbd\x69\xe9\x42\xc5\xa1\x19\x84\x23\xa7\x68\x0d\x81\x2b\x90\x5f\xda\xc0\xbe\x91\x51\x2f\x75\xb0\x02\xfb\xa8\xc6\x2a\x52\xc2\xcf\x57\x8a\xae\x5a\x0e\x09\x97\xaf\x2e\xff\x7d\xf1\xee\xc5\xc9\x5e\x29\xff\xe5\xb0\xa0\x30\x54\xd2\xbf\xc7\x76\x7b\xd2\x1d\x2c\xae\x76\x28\x0e\xd9\xa3\x28\xda\x60\x97\xd6\x51\x4d\x06\x45\x21\xba\x54\xec\xe0\x28\x88\x40\xb1\xc4\xf4\x74\x2a\x3f\x4f\x3f\xa1\xa0\x21\xda\xf1\xbe\x0d\x13\x50\xd9\x4b\xc0\xfe\x84\x52\xbd\x5a\x17\xa5\x2e\x52\xc8\x31\xc9\x5e\x44\x4a\xdd\x46\xe4\x16\x35\x79\x5a\xea\x6e\x96\xf2\x24\x26\x5d\x2e\xa0\x23\x22\x0b\xcd\xc7\x0e\xce\x37\x15\xd6\x46\x38\x6d\x8d\x34\x0c\xb3\xb5\x1a\x77\x26\x43\xe8\x6b\x39\x7c\xdc\x9f\x74\x1c\x29\x20\xcd\x6d\xb7\x24\xc3\x7a\xdc\x63\xdc\x70\x20\x35\x96\x54\x22\xaa\xc0\xcd\x0d\xdb\x36\x70\x49\x31\xca\x56\xad\xac\x08\xed\xdc\xb6\xe2\xaf\xcf\x5f\xf5\x69\x44\x42\x9c\x73\x76\xa6\xeb\x31\xfb\x92\xa0\x61\xf4\x1a\xec\xdd\x5a\xaa\x69\xbb\x64\x48\xa0\x18\xd5\x34\xc7\x30\x75\x5c\x6a\xd7\xdd\xb8\xf5\xa7\x48\xa5\x19\x8a\x15\xc1\x9c\xe9\x48\xce\x7a\xd9\x4c\x9c\x3f\x7d\xf3\xa0\x7d\xe4\x2a\xad\x74\xf8\x6a\xfb\xd2\xe9\x46\x2f\x77\xd6\x6a\x0c\xf2\x82\xb4\x8e\x9a\x7a\x3e\xbc\x39\x95\x81\x37\xa3\xba\xa6\xcd\xec\x1b\x1d\x17\x68\x4c\x34\x3b\x5a\x45\x1f\xe7\xe6\xdf\x86\xfd\xf5\x93\xca\x65\xf2\xe9\xcb\xff\x3d\x77\x43\x02\xff\x2f\x77\x7d\x11\xdf\xe7\x4d\x1d\x93\xb6\x94\x3d\x99\x42\x9b\x46\xe0\x51\x09\xa5\x72\x4b\x3e\xce\x6d\x95\x0a\x01\x57\x60\x57\xb4\x4e\x7b\xea\x75\x49\x28\xe2\x81\x53\xc2\x64\xfb\x22\x26\x22\x42\xd0\x2e\x32\x3c\x91\xb9\xb6\x9c\x74\x83\x9d\x2c\xd9\xe5\x86\x22\xe4\xba\xd7\xdf\x08\xcd\x4e\x18\x44\xeb\x7b\x9d\x2f\x45\x0e\x44\x33\x76\xf7\xc2\x06\x4f\xfe\xfe\xec\xc9\x5d\xf7\xc3\x7b\xfc\x4b\x1e\xbd\xfe\x76\xb7\xdf\xb8\x8e\x8e\x6b\x44\x2b\x08\x5f\x11\x1a\xed\x75\x4d\xa0\x25\x85\x75\x9a\x8b\x49\x9a\x07\xce\xf5\x1c\x3b\x09\xdf\x9b\xca\xa0\xe3\x3b\x2f\x77\xce\x8d\xdb\x83\xd7\x6a\x0c\xcf\x89\x4e\xa1\x13\x37\xb6\x2c\x6e\xf6\x0c\x65\x90\x0f\x56\xc7\xdc\x46\x64\x9f\xac\x43\xa3\x63\x77\x49\x8c\xc8\xed\x21\xc6\xee\xf4\xf2\x25\xd8\xf7\x7f\xf3\xc6\x72\x4e\x26\x77\xed\xda\xfb\x1e\x40\xa0\x19\x73\x12\xe2\x28\xb9\x69\xbb\x8b\xee\x5d\x9f\x36\x23\x15\xe7\x39\x19\x91\xf4\xa2\x18\xce\xfc\xfc\x57\xb9\xfe\xbb\x48\xdb\xed\x01\xc6\x8f\x56\x83\xcf\x9f\xfb\x2b\xd2\xee\xeb\xe1\x7f\x01\x00\x00\xff\xff\x38\xb6\xac\x3c\xe3\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
