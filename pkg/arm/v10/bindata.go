// Code generated by go-bindata.
// sources:
// data/master-startup.sh
// data/node-startup.sh
// DO NOT EDIT!

package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\xeb\x72\xdb\x36\x16\xfe\xbd\x7c\x8a\x53\xda\xad\x1b\xc7\x14\xed\x34\xd9\xed\x28\x75\x66\x1c\xdb\xe9\x78\x9b\xda\x5e\x3b\xd9\xfc\x48\x33\x19\x88\x04\x25\x44\x24\xc1\x12\xa0\x64\xe5\xf2\xee\xfb\x1d\x90\xd4\xdd\x97\xd4\xe9\x76\x9a\x44\x02\x0e\xce\xf5\x3b\x17\x40\x1b\xdf\x85\x3d\x95\x87\x3d\x61\x06\x14\xc8\x2b\xcf\xdb\xa0\x17\xba\x24\x2b\x8d\x55\x79\xbf\x4b\xa9\xee\x93\xc8\x63\x8a\x4b\x5d\x90\x48\x53\xb2\xa5\x48\x12\x15\x91\x1d\x08\x4b\x63\x5d\xa5\x31\x95\xba\xb2\x92\x46\x4a\x60\x51\x52\x26\x8c\x95\x25\x1d\xbf\x7c\x0e\x5e\x17\xc7\x97\x67\xaf\x2f\x0e\x8f\x7f\xbd\x38\x7b\x7d\xbe\xef\x4f\x74\x55\x06\xa5\x34\xf8\x27\x92\x41\x1f\x07\x0b\x1f\x54\x67\x97\xef\x5f\xfc\xe7\xe8\x74\xdf\xd7\x85\xcc\xcd\x40\x25\xb6\xb3\xb9\x70\xb2\xa3\x8d\x88\xe5\xa8\x13\xa5\xba\x8a\x71\x02\x67\x54\x61\x45\x2f\x95\x86\x82\x13\x3a\x39\x3d\x7f\xfd\x8a\x02\x43\x9b\x3f\xc6\xaa\x4f\x0f\xcd\x40\x97\x96\xfc\xcd\x86\xaf\x4f\x9f\xc9\x0a\x95\x52\xb0\xf7\x80\x82\x0f\xf4\xf2\xec\x57\x0a\x02\x58\x16\x14\xa5\x4c\xd4\x15\xf9\xbf\xbd\x7e\x7e\x4c\x4c\x4a\x47\x17\x67\xe7\x5d\xff\x7e\xfc\x99\x87\xe7\x7d\xfa\x44\x2a\xa1\xce\xa1\xce\x13\xd5\xef\x5c\xca\xa8\x2a\x95\x9d\x9c\x0b\x1b\x0d\xce\x45\x34\x14\x7d\xf0\xfe\xf2\xc5\x83\x1a\x7d\xb8\x2b\xb0\x8d\xe3\x02\x63\x45\x69\xab\xa2\x83\x80\xf8\x2a\xc7\xb7\x34\x45\x24\xa8\x94\x31\xb1\xcb\xa3\x38\xa7\xc8\xf1\xac\x4a\x61\x95\xce\x09\xff\x6f\xfe\x38\xd0\xc6\xe6\x22\x93\x0f\x7c\x2f\x02\xd5\xb3\x70\x24\xca\x30\x55\xbd\x70\x52\x65\x61\x94\x2a\x99\xdb\x20\x92\xa5\xed\x14\x32\xa3\x5f\x7e\xd9\x3a\x3e\x7b\xb1\xc5\x2a\x1e\x62\xed\xc0\x3c\x9f\x20\xe0\x53\x5d\x79\x4d\x21\xc6\x02\x8b\x9d\x46\xd7\x0b\x59\x68\xa3\xac\x2e\x27\x6e\x1b\x16\x5f\xda\x92\xf5\x82\x09\xe0\x75\xbd\xd0\xa1\x9c\x2c\xcb\x3c\x2f\xd5\x08\xbc\x7f\x93\x93\xaf\x94\x8c\x13\x2b\x82\xef\xec\xc0\x83\x8b\x33\x32\x4d\x14\xa8\x2a\x62\x96\x41\x6f\xa1\x4e\xcd\xcf\xfc\x5b\xab\xfc\x96\x70\xf9\x3b\xe4\x43\xee\xbb\x15\x97\x27\x48\x19\x61\xad\xcc\x0a\x4b\xe0\xf2\x69\xaf\xd3\x79\xf2\xe5\x29\xc5\xda\x23\x82\x2f\xa8\x51\x83\x82\x09\x05\x7f\xd2\xd7\xc9\x74\x22\xe9\x87\x1f\xa8\x57\x4a\x31\x04\xc3\x1b\x0d\x7e\xdb\xaa\xb1\xf9\xa9\xf9\x04\x75\xd7\x9a\xde\xe8\x54\x63\x28\x01\x7c\x25\x32\x8b\x18\xb3\x6f\xdf\xce\x9d\xa6\x20\xb5\xf4\x84\xde\xbd\x7b\xca\xd9\x9d\x93\x49\xa5\x2c\x68\xef\x29\xc9\xd4\x48\x92\x57\xca\xf2\x97\x44\x79\xb1\xce\xe5\x2d\xd1\x28\x65\xa6\x47\x5f\x07\x66\xf6\x5e\x94\x4a\x91\x73\xf1\xf1\xca\x8c\x82\x32\xa1\x1b\xc1\x7d\x03\x08\x01\x3e\x99\xc7\x00\x0e\xf2\x3b\x82\x37\x51\xb5\x20\x1d\xa9\x9b\x43\xe5\xa2\x42\x80\xe0\xa5\x52\x5a\x2f\x1b\xc6\x0a\x46\x14\x33\x66\xba\x54\x7d\xd4\xc9\x4e\xac\xa3\xa1\x2c\x97\xe0\xbe\xb8\x19\xd6\x16\x75\x3e\x18\x18\x33\x07\xfb\xce\x91\x04\xf0\x65\x8c\x78\x67\xa8\xb9\x32\x3e\xc9\x10\xe1\x73\x88\xbd\x74\x52\x5b\x20\xac\x40\x3c\xcd\xb9\xf6\x5c\x23\x8d\xc2\x52\x6b\x1b\xb2\x49\xaf\xce\x8e\xce\xba\x14\xcb\x54\xc2\x30\x2e\xc5\x89\x4e\x53\x3d\x66\x4e\xae\xd4\xd6\x36\xb3\x97\x45\xc2\x25\x1a\xa1\x53\x86\x7a\x62\x88\x68\xa8\xdc\x6a\x42\x59\xa6\xff\xfe\x4e\x8a\xf5\x32\x9e\x3b\x23\xe2\x98\x82\x84\x1a\xb3\x3d\xa0\xe3\x3b\x30\x93\x73\x9e\x69\xd5\x90\x36\x0a\x13\x44\xbb\x57\x03\x05\x50\x32\x13\x20\x20\x8b\x2c\xdc\x6a\xd1\x3d\x6a\xc2\xc0\x45\x13\x80\xb0\x2a\x03\xc7\xdb\xa8\x8c\x2c\x47\x2a\x92\xd7\xd1\xcd\xed\x67\xc3\xc4\x74\xae\x12\xc3\xea\x86\x68\x16\x61\xac\xcc\x30\x14\x1f\xab\x52\x86\xd3\x96\x53\x00\x8c\x7b\x20\x96\xd1\x40\xd3\xd6\xcd\x64\xb4\x62\x23\x31\x7b\x98\x5f\xfc\x59\x69\x2b\x88\x76\x69\x77\x8b\x9e\x3d\x9b\x99\xce\x6a\xe8\x2a\xb7\xcb\x27\xb1\x0e\xde\xa8\x61\x12\xd8\xa0\xe0\x62\xcd\x7e\x8d\x28\xe6\xd4\xa0\x28\x16\xc8\x96\x7c\x09\x45\x20\xf4\xb9\x71\xc5\x8c\xa4\xd2\xef\x92\xff\x01\x1a\xe7\x22\x8d\xfd\x1d\xde\x83\x31\xdc\xb5\x82\x54\xf6\x45\x34\x41\xab\xed\x2b\x63\xcb\x09\x08\x6d\x59\x49\xaf\xc6\xd3\xa2\x2f\x61\xea\xaa\x33\xd7\x13\x2c\xc5\x0e\x49\xef\x35\x9e\x71\xc9\xc3\x18\x6f\x6a\x99\x83\xb6\xe9\x9c\xea\x58\xba\xea\xf5\xcc\xb9\x3a\x67\xaa\x1f\xd6\xa2\x08\x86\xc7\xeb\x30\x34\x8d\xea\x72\xac\x4c\x64\xd4\x5e\x98\x56\xf9\x2e\x7d\xfe\x5c\x5b\x77\x5d\x58\xe7\x48\x97\x04\xd6\x01\x8d\x65\x22\xaa\xd4\x9a\x3b\x05\x94\xcf\x5d\x1f\x4e\xb7\xcb\x7e\xe1\x8e\x10\x1b\xd7\x0d\x6c\x54\xec\xfc\xfc\xf8\xf1\x63\xd7\x0f\xfe\x51\x94\xda\xea\xfd\xcd\x4f\xd8\xfc\xfe\xfb\x9d\xed\x2f\x58\xc1\x30\x51\x2f\x6c\x6c\x6c\xef\x60\x61\x36\x7a\x1c\xb8\xd1\xe8\xe4\xe2\xf8\xcd\xc1\xcb\x97\xef\xf1\xe7\xec\x0d\x57\xa5\x4d\xc7\x84\x82\x8c\xa3\x83\x5c\x0f\x82\xfa\xdf\xd3\xe3\x37\xbc\xd8\x6e\x07\x31\xb3\xc6\x57\xfe\x1b\x73\xc9\xc1\xe1\xe1\xf1\x39\xe6\x98\x71\x53\xab\x5b\x39\x81\x11\x23\xd9\x80\x0f\x81\xaf\xcb\x57\xd8\xee\x72\x65\x19\xbb\xca\xcf\x48\xe0\x62\x92\x73\x54\xc7\x02\x11\x86\x63\x78\x38\xcc\xa5\x1d\xeb\x72\x48\x95\x55\xa9\xb2\x0a\x9a\xf7\xb5\xeb\x30\xd0\xa2\x14\x91\xab\xb2\xb1\xe2\xca\xd3\xe1\xc9\x2a\x99\x1e\x2e\xab\x1c\x05\x48\xc2\x59\x92\x62\x7c\x44\x39\x1a\xe6\x7a\x0c\x9f\x69\x57\xc0\x6a\x49\x68\x33\x10\x82\xfa\x35\x56\x76\x40\xdc\x95\x26\x50\x86\x2b\xa4\x37\x1e\xa0\x6f\xb9\x86\x35\x6d\x1a\x14\xc4\x0f\x68\x7f\x9f\x7c\xdf\x35\xad\x58\xcf\x5a\xd6\x1d\x5a\x14\x03\x99\x6d\x5c\xc5\xf2\x65\x4d\x05\x38\xdf\xdc\xef\x6f\xce\x88\x19\x97\xfb\xb5\xf4\x3b\x4b\xf9\xda\xce\xfe\xcf\xdd\xeb\x5a\x3b\x4f\xdd\xa7\x67\xaf\x8e\xbb\x74\x82\x81\xa1\xb2\x48\xad\x1d\x64\xc7\x48\xd6\x77\x01\x95\xc3\x2b\x59\xd3\xc5\x2b\x6b\x14\x42\xa7\x13\x84\x6e\xa4\x4a\x9d\x67\x1c\x6e\x64\x89\xaa\x31\xb5\xe1\x19\x34\xbc\x87\x57\x9e\xbc\x72\xe8\xbc\x3c\xb8\x7c\x7d\x71\xb2\xbf\x35\x67\xca\xef\xce\x13\x8d\x25\xf5\x3e\xec\xd9\x72\x07\x83\xab\xb6\xf0\x00\x41\x00\x7a\x81\x72\x08\x33\xfb\x68\x64\x41\xc0\x43\x42\xd0\x42\x92\x51\x41\xc1\x88\xc2\x6e\xc8\x1f\xbb\x1f\x71\xcb\x69\xa4\xdd\xec\xb7\x26\x02\x1e\x10\x2a\x5b\xfd\x3c\xaf\x1e\x9e\x82\x48\x04\xa8\x38\xc6\x72\x6e\x60\xdb\x65\x05\x8e\x01\xd3\x72\x24\x5c\x34\x79\x05\x2c\xa2\x21\x09\x43\x46\x73\xcf\x35\x0e\xd2\x8b\xe3\x0e\x00\x9f\x0a\x15\xb3\xc3\xa8\x37\x01\x37\x26\x69\x44\xcf\x66\x93\x9d\xfa\x64\xaa\x51\xa0\xf1\x51\xb9\x44\x69\x52\xe4\x1a\xe2\x0c\x29\x05\x76\x50\xc5\x50\x52\xea\x6c\x81\x16\xf5\x21\x92\xc6\x70\x66\x8d\x15\x4f\x3d\x03\x55\x30\xbf\x5a\x7f\xaf\x56\x03\x10\xc0\x3d\xc7\xdd\xef\x2a\x9e\xcb\x90\xc6\x82\x62\x31\xc1\xc7\x74\xc2\xd6\x14\x4e\x19\xc9\x50\x34\x5e\x58\x19\x54\x40\x1d\x89\xd4\xdd\x27\xc5\x47\x4c\x52\x71\x63\x2c\x4f\x2f\xb8\x60\x4a\x24\x16\x67\x27\x9d\xef\x1d\xdd\x4a\x6f\x74\x62\xc7\xa2\xbc\x33\x7d\x94\x8a\x4c\x8c\x5a\x6a\x58\x20\x73\x46\x9a\x2b\x4f\x75\x0b\x5b\x8c\x4a\xd3\xea\x8c\x37\xeb\x74\x55\x8e\xe4\x1b\x52\x16\x9b\xb8\xed\x84\x54\xcb\x59\xfc\x8a\xae\x3c\x5b\x49\xd2\x0a\xc8\x9e\x7e\x9f\x63\xd7\x28\xf0\xad\xd8\xd5\x46\xdc\x8f\x1b\xdc\x72\x8e\x72\x35\xac\x7a\xb2\xf6\x9c\x43\x51\x85\x48\x3b\xcf\x92\x28\x54\xc0\xb4\xe8\xed\x86\x53\x49\x61\xda\x96\xe4\x9b\x8d\x1f\x69\xbb\x5e\xef\xd2\x83\xce\xf6\xc6\x1f\x7b\x03\x6b\x0b\xd3\x0d\xc3\xb9\x59\x7d\xc3\xaf\xfb\x77\x33\x9e\xd6\x85\x2c\x9c\xde\xe8\x83\x7a\xa1\x33\x13\x7e\x7f\x19\xdc\x1e\xdc\x5f\xdf\x9e\xab\x89\xf3\xfb\x33\x75\x93\xb9\x63\xd3\xdc\x09\xf8\x55\x20\xe0\x42\x8c\x44\xd8\xec\x3c\x07\x10\xab\xe2\x79\xaa\x7b\xa7\xdc\xb7\x7c\xff\xd6\xf7\x80\x69\x0b\xe6\xc9\x03\xf2\x27\x2b\xf7\x25\x2e\x48\x96\xbb\x1d\x92\xd9\xba\xf4\xec\x39\x29\xee\xea\x74\x91\x2c\x4e\x2a\xe1\xb6\xc7\xad\x80\xf5\x38\x52\xe5\xfe\xe2\x5e\x73\xae\xbe\x0a\x6d\xce\xd1\xfd\xe5\x0e\x7a\x0c\xb6\xb5\xcd\xf7\x6c\xa2\x0b\x8c\xfe\xce\x3e\xba\x28\xe8\xdb\xb5\xd2\x1b\xf5\x8c\x31\x00\xa5\x5a\xc4\xec\xc4\x3a\x08\xfe\x62\xb7\x5b\x6d\x70\x7f\x40\x27\x6e\x72\x2b\xf9\xd7\x5d\x5d\x5a\x47\xec\xde\xd5\xd0\x15\x46\x68\xda\x25\x5a\xe5\x7b\x74\x39\x11\xbe\xe7\xae\xd4\x50\xcf\x03\xa0\x1b\x62\x03\x9d\x94\xb7\x6e\xf3\x19\x43\xa9\x36\xa2\xe6\x14\xf4\x1a\xb8\xef\xf3\xc9\xa5\x0c\x00\x7d\x4d\x14\xbb\xe7\x47\xd7\x22\xf7\x59\x58\x03\xc6\x4e\xdc\x6b\x08\x44\xe4\xf6\x5a\x57\xdd\xec\xd0\x46\x7e\x4b\xcc\x21\x6c\xd3\xe4\x51\x3b\xc8\xff\x55\x4c\xd7\x53\x0a\xdb\x7c\x4f\x4c\x2f\x30\xfa\x3b\x31\xbd\x28\xe8\xff\x84\xe9\xda\xcb\xae\xfd\xe6\xa2\xc0\x5c\x61\xbf\x0a\xd3\x8c\xa2\xee\xf4\xd3\x74\x6b\xbe\x5e\x75\x17\xbf\xd5\xe8\xc4\xac\x77\xfc\xea\xf0\xe8\xf0\x15\x2e\x4f\xe7\x27\xfb\xfe\x4f\xfe\x35\xa0\x5d\x74\x0a\xd3\x30\x17\xd7\x77\x1b\x7d\x5b\xa0\x2c\x64\xc2\x0a\x2e\x39\x6f\x02\x2e\x98\x8b\xb5\x34\x97\xe3\x86\xc0\xdd\x50\xe6\x2a\x76\xb3\xac\x72\x5c\x8f\x44\x8a\x0b\x76\xe5\x72\xd4\x6f\x7c\xb8\xeb\xfe\xdb\x6f\xfb\xcb\xc2\x6a\xf7\xd1\x4f\x3f\xef\xee\xcc\x2f\xed\xad\x25\xdc\x5b\x25\x7c\xb4\x96\xf0\x91\x23\xf4\xd7\xab\x14\x58\x3d\x04\x0a\xd8\x9c\x00\x28\x0f\xdc\xd5\x7a\x89\x54\xc4\x23\x7e\xc0\x35\x32\x28\x24\x4e\x54\x65\x6a\x68\x4d\x6b\x74\x62\x3c\x2f\x1b\xad\x7a\x29\xdc\x5e\x5a\x5b\x79\xf2\x9b\xfa\x73\xa1\x25\x2d\x5c\xc7\x97\xf8\xde\x05\x99\xd2\xdd\x0d\x7d\xd7\x9e\xf9\xb2\xc9\x6f\x84\xb6\xca\x65\x0c\x9b\x32\x9e\x97\x13\xbe\x67\xce\x86\x19\x9e\xb6\x4b\x9d\x06\x45\x2a\xdc\xd5\x88\x47\x69\x91\x1a\x8d\xc6\x8e\x49\x61\xf6\x33\x86\x9b\xab\x3a\x23\x9d\x56\x19\x2e\xc4\x0c\x8c\xfa\xdd\x31\x6e\x6f\xbd\xfc\x00\x51\xbf\x26\x45\x7c\xd7\xe5\x0b\x71\xfb\xfa\x98\xd1\xee\xbf\x9e\xec\xae\x7b\x85\xbc\x86\x3f\xeb\x51\x3f\x00\xb9\x11\x01\xb3\x23\xff\x7a\x63\x14\x8f\xee\x63\xfe\x61\x26\x07\xd6\x49\xf2\xdc\x80\x4b\x04\x48\xec\xa0\xd4\x55\x7f\x40\xed\x1b\xd2\xdc\xb8\xd9\x3c\x24\xb5\x5c\xd6\x0e\xa4\xba\x58\xd9\x86\x06\xb9\xb6\xb2\x8b\x22\xa8\x33\x15\x05\x33\x8f\xb9\xab\x7c\x54\xf2\xef\x4c\xa9\xd6\x85\xc1\xb8\x6d\x55\xda\xfe\x5a\x84\xfb\x0c\x66\x8d\x95\xe1\x79\x2d\x97\xa9\xb0\x6f\xf1\x0b\x8b\x89\x06\x32\xae\x9c\xc3\xe6\xb3\xb2\x94\x3d\xcc\x6e\x3c\x1d\x47\x3a\x2b\xdc\x83\xea\xba\x47\x74\xdf\x33\x83\xca\x72\x63\xe1\x12\x56\x9f\x79\xf8\x88\x9f\x99\x51\x22\x21\x7a\x79\x7c\xbf\xd1\x9e\xe9\x3b\x56\xfb\x4a\xfd\xbf\x00\x00\x00\xff\xff\x9e\x43\xe6\x53\x9c\x1b\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xdf\x6f\xd3\x4a\x16\x7e\xf7\x5f\x71\x08\x88\x2e\xa2\xb6\xdb\x95\xd8\x95\x0a\x54\x62\x81\x95\xd8\xd5\xa5\x55\xcb\xbd\xf7\xa1\xe2\x61\xe2\x39\x4e\x86\xd8\x33\x66\x66\x9c\x34\x14\xfe\xf7\xfb\x1d\xdb\x69\xd3\xa6\x4d\xa9\xb8\x52\x1e\x62\xcf\x99\xf3\xf3\x3b\xdf\x39\x7e\xfc\x28\x1f\x1b\x9b\x8f\x55\x98\x52\xca\xe7\x49\x72\x71\x41\xa6\xa4\xec\xad\xb3\xa5\x99\x64\xa7\x5c\xb4\xde\xc4\xe5\xb1\x8a\xc5\xf4\x58\x15\x33\x35\xe1\x40\x3f\x7e\x24\x95\x9b\x4c\xd8\x53\x1a\xc9\x3a\xcd\x69\x88\xca\xc7\xb6\xc9\xa0\x65\x64\x2c\x9e\xaa\xca\xd8\x09\x79\xd6\x34\x55\x91\x0a\x6d\xa9\xe8\x34\xb6\x5e\x45\xe3\x2c\xe1\xf7\xe4\x1f\x53\x17\xa2\x55\x35\x3f\x1b\x25\x05\xa4\x0e\xf3\xb9\xf2\x79\x65\xc6\xf9\xb2\xad\xf3\xa2\x32\x6c\x63\x5a\xb0\x8f\x59\xc3\x35\xbd\x7a\xb5\xf3\xfe\xe8\xbf\x3b\xe2\xe0\x5b\xbc\x7b\x13\xfe\xb3\x8c\xf0\x65\xe5\xa9\xbc\x33\xa5\x81\x1e\x0e\xd9\xe0\xe9\x09\x37\x2e\x98\xe8\xfc\xb2\x3b\xa6\xef\x74\x1a\xbd\xf8\x85\x00\xa0\xeb\x6e\xa3\x33\x5e\xde\xb4\x79\xec\xcd\x1c\xba\xff\xcf\xcb\x07\x5a\xc6\x8d\x0d\xc3\x3f\x99\xbe\x37\x27\x47\x14\x86\x0a\x50\xdb\x68\xb1\x40\x67\x70\xa6\xd7\x16\xfe\xe7\x8c\xbd\xa7\x54\xa3\x5d\x1a\xc1\xea\xe7\x8d\x84\x97\xce\x93\x8a\x91\xeb\x26\x12\xb4\x5c\xec\x67\xd9\x8b\x1f\x2f\x49\xbb\x84\x08\x99\xa0\xc1\x0d\x4a\x97\x94\x7e\xa5\x87\xd9\xec\x4c\xd2\xd3\xa7\x34\xf6\xac\x66\x50\xb8\x25\xdc\xb3\x95\x13\x4f\x2e\x86\x7f\x70\xf6\xd6\xc0\x07\x8f\x7a\xfc\x94\xca\x54\xac\x47\xd0\x0d\xb4\x9e\x9d\xad\xdd\xa6\xb4\x8a\xf4\x82\x3e\x7f\x7e\x49\x71\xca\x96\x42\xc5\xdc\xd0\xfe\x4b\xe2\x2a\x30\xf1\xb9\x89\xf2\x50\x9a\x44\x3b\xcb\x5b\x2b\xe1\xb9\x76\xf3\x87\xc1\x58\x32\x57\x54\xac\x2c\xc1\xd3\xc4\xd7\x94\xfa\x92\xb6\xc2\x7a\x0b\xfc\x00\x3b\xb6\x1a\x90\x49\x1e\x53\x81\x4c\x46\x16\xeb\x51\x19\x0b\x87\x9b\x16\xc5\x41\x8e\x3c\xc7\xa4\x9e\x69\x83\x10\x9a\x2b\x65\xce\x9b\x09\xda\x3a\xd3\xae\x98\xb1\xbf\x01\xf4\xeb\x87\x79\x1f\x51\xf6\x25\x20\x98\x35\xc0\x67\xef\x18\x90\x67\x8d\x5a\xd7\xa0\x08\xd6\x1f\x6a\x54\xf7\x18\x66\x4f\x3b\xab\x2b\x10\x6c\x80\xbb\xb2\x94\x86\xbb\x5c\xa1\xdc\x3b\x17\x73\x09\xe9\xd3\xd1\xbb\xa3\x03\xd2\x5c\x31\x02\x43\xa9\xa8\x74\x55\xe5\x16\xa2\x69\xe2\x5d\xdb\xf4\x31\x4b\x96\x55\x19\x71\x13\x85\x33\x81\xc6\x6a\x86\x6a\x18\x1b\x1d\xb9\xd6\xd3\x1f\xbf\x91\x11\xbf\x42\xd2\xdd\x51\x5a\x53\x5a\xd2\x10\x76\x02\x6c\x3c\x82\x32\x5e\xcb\xcc\xca\x0d\x8e\x45\x5e\xa2\xda\xe3\x1e\x26\x00\x52\x58\x06\x20\xa8\x88\x48\x6b\x74\xcd\xa0\x23\xed\xaa\x09\x40\x44\x53\x43\xe3\x7d\x52\x81\xfd\xdc\x14\x7c\x97\xdc\xda\x79\x3d\x2b\x43\x76\x5e\x06\x71\x37\xd7\x3c\xcf\xb5\x09\xb3\x5c\x7d\x6b\x3d\xe7\x9e\x03\x62\x2b\x38\x6d\x00\xc6\x7d\x08\x73\x31\x75\xb4\xb3\x5d\x8c\x36\x62\x24\x51\x8f\xf0\x9b\xaf\xad\x8b\x8a\x68\x8f\xf6\x76\xe8\xf0\xf0\x2a\x74\x71\xc3\xb5\x36\xde\xbc\x89\xf7\xd0\x0d\xf6\x62\x60\x83\xd2\x93\x8d\xf3\x8b\x8b\x54\xfa\x8e\xbf\x52\x76\xe2\x2a\x16\xd2\x2a\xbd\x92\xae\xc7\xd5\x1e\x6c\x62\x64\x00\x98\x56\x68\x24\x7b\x03\x60\x10\x1c\xa1\xf7\x52\x2d\x20\xf3\xa3\x03\x1a\x7d\x41\x30\x56\x55\x7a\xb4\x2b\x67\x88\x53\x8d\x2b\x4e\x2b\x9e\xa8\x62\x99\x7a\x9e\x98\x10\xfd\x12\x82\xd1\xb7\x9c\xf4\x50\x13\x3f\xd0\x22\xbd\xdd\xf5\x8c\x23\x21\x9b\x29\xbf\x5d\xe0\x46\x85\x41\x0c\xc9\x90\xbf\xae\xc5\xa4\x13\x06\xb6\xeb\x1a\x20\x64\x1f\xc1\x13\x1d\xbf\x1d\x76\x05\xb1\x22\xf5\x54\x00\xbd\xe8\xe8\x46\x54\x0b\x86\x85\x4e\x68\xa1\x70\x05\x09\x56\x70\xd2\x72\x5c\x38\x3f\xa3\x36\x9a\xca\x44\x03\x46\x9b\xb8\x8e\xd6\x00\x65\xaf\x8a\xae\xb9\xb5\x11\xc0\x67\x50\x86\xf4\xae\x2e\xfb\xd6\x02\xf7\x0c\xc6\x66\xd2\xf8\x8b\x2e\x98\x59\xb7\xb0\x84\x8b\xd2\x37\xbd\x25\xee\x32\x81\xb6\x59\x98\x38\x25\xa1\xc2\x25\x9c\x91\xc6\x4c\x16\x53\x90\x65\xc7\x92\x97\x5c\x45\xa9\x7e\x46\xaf\x5f\xd3\x68\xd4\x31\xa5\x76\x57\x3c\x79\x2f\x2f\x4a\x5e\x24\xc2\xcd\xd4\x9c\xf6\x52\xc8\xce\xf6\x01\xb3\x3d\xc1\x57\x5a\x7e\x65\x86\xfc\xb4\x8d\x87\x8e\x92\x7f\xed\xdd\x35\x4b\x1e\xa3\x6e\x1f\x8f\x3e\xbd\x3f\xa0\x0f\x98\x50\x6d\x44\x93\xee\xa2\xc3\xe6\x42\x6f\x4a\xb2\x80\x9c\xd4\xc3\xe0\x68\x63\x30\x28\x9b\x43\x17\xd9\xb9\xf1\xce\xd6\x52\x6a\xf4\x99\x11\xd8\x07\xe8\x0a\xe0\xd8\xe7\xe7\x09\x9f\x37\x0e\x60\x3d\x7d\x73\xfa\xfb\xc9\x87\xd7\x3b\x6b\xa1\xfc\x09\x34\xb1\x1f\x22\xe9\xcf\x11\xcf\x4e\x77\x31\x3d\x5f\xa1\x18\xe8\xa1\x34\x6d\xd0\x66\x08\x73\x02\xee\x4c\x53\x99\x4b\xe9\x0a\x8e\x82\x08\x4a\xe7\x94\x1f\xe4\xf2\xf7\xe0\x1b\xf6\xc0\xc1\xda\xf6\xbc\x0d\x15\x48\x80\x4e\x5e\xf9\x97\x24\xfd\xb4\x4e\x0b\x95\xa2\x4f\x43\x94\xbe\xc0\x71\xd7\x11\xb8\x06\x3c\xf3\x5c\x75\xb5\x94\x37\x50\x51\xcc\x48\x05\x0a\x4e\x68\x3e\x74\x70\xbe\x3e\x61\x01\xf6\x4a\x19\x2d\x09\xa3\xf1\x12\xda\x44\x64\x30\x7d\x35\x0e\x77\xfb\x9b\x95\x43\xb7\xe3\xaf\xe9\x9a\x64\x68\x8f\x3b\x84\x6b\xb4\x13\xd4\xc1\x95\x40\xa5\x77\xf5\x35\xd9\xc6\xbb\x82\x43\x90\xae\x5a\x18\x19\xb4\x53\xd3\x88\xbe\xde\xff\xa4\x77\x03\x10\x08\x53\xd7\x56\xba\xcb\xb1\xb3\x68\x61\x45\x5a\x2d\xf1\xb7\x5a\x4a\x34\x4d\xe7\x0c\x0b\x14\x43\x92\xb7\x01\x1c\xea\x0a\x55\x75\x1b\xb7\xfa\x86\xe1\xad\x87\x60\x65\x60\x62\x05\x67\xb4\x95\x74\x26\x1d\xef\xbf\xbb\x57\x3e\xb8\x32\x2e\x94\xff\x69\xf9\xa2\x52\xb5\x9a\xaf\xa4\x11\x01\x5b\x41\x5a\x47\x4d\x3d\x1f\x5e\xaf\xca\xc0\x9b\x21\xb9\xa2\xcd\xd6\xd6\x2a\xcc\xa8\xd6\x41\xaf\x68\x95\x7a\x3b\xd7\x1f\xc1\xf6\x57\x6f\xca\xaa\x05\xb2\x2f\x9f\xd7\xd4\x0d\x0e\xfc\x5d\xea\xfa\x20\x7e\x4d\x5b\xb2\x6d\xb4\xc5\x16\x5b\x50\xaa\x74\x2d\xf0\x28\x85\x52\x5d\xc3\x16\xd0\x28\xb1\xcf\x01\x5c\xde\x55\x69\x53\x29\x30\x41\x37\x97\x84\x22\xee\xb9\x25\x4c\xb6\x3e\xc4\x64\x88\xc0\xcd\x2a\x38\x4c\x0b\xb4\xea\xa5\x64\xd6\x15\x36\x9b\xbb\xaa\xad\x31\x33\x64\xdd\xeb\x37\x42\xbd\x1a\x0c\x32\xeb\xfb\x39\x5f\xc8\x38\x90\x99\xb1\xda\x0b\x6b\xda\xfb\xf7\x8b\xbd\xdb\xf6\xc3\x3b\xf4\x8b\x1f\xfd\xfc\xed\xb6\x5f\xa4\x18\xd0\xa0\x60\x04\xe1\xf0\xaf\x56\x16\x5c\x40\x8c\xb9\xbd\x44\xaf\x41\x24\x4e\xb1\x7c\x4d\xa6\xb4\x1a\xe1\x6b\x55\x19\xe6\xf8\x4a\xcb\xad\x75\xc3\x7e\x74\xf3\x18\x1e\x58\x17\xf9\x00\x23\xc4\xd5\xa6\x48\xaf\xe7\x0c\xc1\xcb\x07\x6b\xe5\x5c\x13\x80\x4a\x0c\x54\x38\x15\xba\x25\x11\xcf\xcd\x26\xc6\x6e\xd5\x72\x69\xec\xd7\xbf\x79\x43\x31\x65\xdd\x76\xe9\x5a\xfb\x1e\xc0\x16\x35\xc6\xb6\x2b\xc4\x51\xb8\xba\xe9\x16\xdd\xdb\x3e\x6d\x46\x49\x98\xb6\x51\xcb\x48\x07\x39\xf7\x77\x9e\xff\x53\xd6\x7f\x60\x08\x86\x6f\x62\x7c\x6b\x34\xf4\xfd\x7b\xbf\x22\xad\xbe\x1e\xfe\x0a\x00\x00\xff\xff\x38\xb6\xac\x3c\xe3\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
