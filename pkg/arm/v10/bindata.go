// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x6f\x57\x1b\xb7\xd2\x7f\x5d\x7d\x8a\xe9\x9a\x36\x0d\x45\x5e\x48\xdb\xe7\xe9\x71\x4b\xce\x21\x40\x7a\xb8\xa5\x81\x0b\xc9\xed\x8b\x34\x27\x47\x5e\xcd\xda\x8a\xb5\xd2\x56\x7f\x6c\x5c\xe2\xef\x7e\xcf\x68\xd7\xc6\xc6\x86\x24\x25\xbd\x79\x41\x6c\x69\x34\x33\x9a\xf9\x69\x7e\x23\xb9\xf3\x65\xde\x57\x26\xef\x0b\x3f\x04\x8e\x57\x8c\x75\xe0\xb9\x75\x10\xd0\x07\x65\x06\x3d\xd0\x76\x00\xc2\x48\x90\xce\xd6\x20\xb4\x86\xe0\x44\x59\xaa\x02\xc2\x50\x04\x98\xd8\xa8\x25\x38\x1b\x03\xc2\x58\x09\x08\x43\x84\x4a\xf8\x80\x0e\x8e\x4f\x9f\xb1\x0e\x5c\x1c\x5f\x9e\xbd\xba\x38\x3c\xfe\xe5\xe2\xec\xd5\xf9\x7e\x36\xb5\xd1\x71\x87\xde\x46\x57\x20\x1f\x38\x1b\xeb\x8c\x75\xe0\xec\xf2\xed\xf3\x7f\x1f\xbd\xd8\xcf\x6c\x8d\xc6\x0f\x55\x19\xba\x5b\x2b\x2b\xbb\xd6\x0b\x89\xe3\x6e\xa1\x6d\x94\x19\xeb\xb0\x0e\xa8\x3a\x88\xbe\x46\x0f\xfc\x04\x4e\x5e\x9c\xbf\x7a\x09\xdc\xc3\xd6\x37\x52\x0d\xe0\x5b\x3f\xb4\x2e\x40\xb6\xd5\xea\xcd\xe0\x3d\x04\xa1\x34\xf0\xbd\xc7\xc0\xdf\xc1\xe9\xd9\x2f\xc0\xb9\xb6\x03\x5e\x3b\x2c\xd5\x15\x64\xbf\xbe\x7a\x76\x0c\x24\x0a\x47\x17\x67\xe7\xbd\xec\x61\xfa\x49\x07\x63\xd7\xd7\xa0\x4a\xe8\x1e\x5a\x53\xaa\x41\xf7\x12\x8b\xe8\x54\x98\x9e\x8b\x50\x0c\xcf\x45\x31\x12\x03\xf4\x30\x9b\x31\x6d\x07\x03\x74\xc0\x43\x1b\x38\xee\x83\x70\x21\xd6\x5d\x3f\x84\x4c\x19\x1f\x84\xd6\xca\x0c\xc0\xa1\x04\x0a\x79\x21\x0d\x14\x49\x67\x74\x22\x28\x6b\xc0\x1a\xd8\xfa\x66\x68\x7d\x30\xa2\xc2\xc7\x19\x2b\x44\x80\xa7\xf9\x58\xb8\x5c\xab\x7e\x3e\x8d\x55\x5e\x68\x85\x26\xf0\x02\x5d\xe8\xd6\x58\xc1\xcf\x3f\x3f\x3a\x3e\x7b\xfe\x88\x5c\x3c\x44\x17\x0e\xfc\xb3\x69\x40\xbf\xf0\x95\xc6\x54\xa9\x0a\x11\xd0\x77\x5b\x5f\x2f\xb0\xb6\x5e\x05\xeb\xa6\x69\x1a\xde\xc3\x65\x70\xe4\xd7\x6c\xc6\x8e\xcf\x9e\xdf\x6d\x74\x84\xd3\xdb\x36\xcf\x9d\x1a\x8b\x80\xbf\xe2\xf4\x13\x2d\xff\x8a\xd3\x35\xc3\x1f\x1d\xc0\x83\x8b\x33\xf0\x6d\x16\x20\xd6\x92\x6c\xc0\xeb\xeb\xeb\x56\x9f\xff\x97\x55\xe6\x03\xe9\xca\x76\x20\x83\xd9\xec\xcd\x5a\xc8\x4b\xeb\x40\x84\x80\x55\x1d\x40\x19\xb8\xde\xeb\x76\x7f\x98\xfd\x04\xd2\x32\x80\x69\xac\xa0\x75\x03\xf8\x14\xf8\x9f\xf0\x69\x36\x93\x49\xf8\xfa\x6b\xe8\x3b\x14\x23\x06\x70\xef\x86\x5f\xcf\xdd\xd8\xba\x6e\x3f\xcd\xde\x6c\xde\x7a\xeb\x53\x83\xa1\x52\x28\x8d\x32\x63\x40\x98\x7d\xfd\x7a\x69\x35\x70\x1d\xe0\x07\x78\xf3\xe6\x27\x3a\xdd\x06\xbc\x46\xac\x61\xef\x27\x40\xed\x11\xf0\x4a\x05\xfa\x52\x2a\x26\xad\xc1\x0f\x64\xc3\x61\x65\xc7\x9f\x06\x66\x8a\x5e\xa1\x51\x18\x2a\x3e\xcc\x55\xc0\x5d\x09\xf7\x82\xfb\x1e\x10\xb2\xeb\x6b\x34\x72\x36\xa3\x2a\x57\x38\x14\x01\xc9\x7a\x10\xca\xa0\x83\x3a\x6a\x4d\x51\x72\x18\x80\x55\x23\xa9\x1c\xf0\x1a\x72\x67\x6d\xc8\xbb\xd2\x16\x23\x74\x2d\xca\x97\x87\xf2\xc6\xfd\xee\x3b\x6f\xcd\x32\xc6\xbb\x47\xe8\xd4\x18\x65\xf7\xd0\x56\x7d\x65\x50\x9e\x54\x62\x80\xe7\x51\xeb\xcb\xc6\x44\x9b\xf5\x75\x3c\x77\xe0\xe5\xd9\xd1\x59\x0f\x24\x6a\x0c\x98\x4a\x6a\x69\xb5\xb6\x13\x12\x4a\x25\xb3\xf1\x9d\xa2\x25\x4a\x2a\xb5\x2a\x80\xf2\xd0\x17\x23\x94\xa0\x4c\xb0\x60\xa3\x83\xff\xfc\x06\x8a\x4c\x7a\x96\xd6\x08\x29\x81\x97\xd0\xee\x83\xa9\x12\xbe\x84\x81\xc3\xfa\x26\x5c\xcd\x14\xe4\x18\x8a\xbc\xf4\x41\xf4\x9b\x84\x33\x00\x3f\xf5\x01\xab\x22\x68\xf0\xc1\xd6\xad\x0e\x9e\xb2\x12\xeb\x6e\x50\x15\xba\x0f\x4a\x79\x74\x63\x55\xe0\x5d\x72\x4b\xf3\xd5\xa8\xf4\xdd\xab\xd2\x93\xbb\xb9\xc4\x71\x2e\x95\x1f\xe5\xe2\xaf\xe8\x30\x5f\x50\x47\x2d\x5c\xd8\x63\x00\x58\x0c\x2d\x3c\xba\x5f\x0c\xd6\xf6\x08\xa4\x1e\x06\xae\xfe\x33\xda\x20\x00\x76\x61\xf7\x11\x3c\x7d\x7a\xb3\x75\x72\xc3\x46\x13\x6e\xaf\x64\x00\x0e\x7d\xb0\x0e\x0b\x6b\x80\x5f\x6c\x98\x6f\x20\x42\x9a\x5a\x80\x48\x81\x95\x35\xb7\x00\xc2\x00\x32\x22\x20\x49\x20\x71\x59\x0f\xb2\x77\x36\x3a\x23\xb4\xcc\x76\x68\x4e\x2a\x4f\xec\xc3\x35\x0e\x44\x31\xe5\x0e\x07\xca\x07\x37\xcd\x7a\x10\x5c\x44\xd6\x40\x65\x35\x96\xc2\x85\xf5\x60\x6e\x16\xb8\x95\xbb\x52\x31\xd6\x46\x26\x1d\x02\x82\x6f\x5b\x93\x12\x6a\x7d\xf7\x85\x95\x98\xaa\xd0\xd3\x14\x6a\x43\x52\x5f\x6f\x44\x11\x86\x42\x6e\xc2\xd0\x22\xab\xb7\x73\xe5\x0b\xaf\xf6\x72\x1d\xcd\x2e\xbc\x7f\xdf\xec\xee\xae\xb4\x2e\x89\xde\x32\xd8\x24\x54\x62\x29\xa2\x0e\xfe\xa3\x12\x4a\xeb\xee\x4e\x67\x9a\xa5\xb8\x50\x65\x97\x3e\x55\xf5\x50\xd4\x3b\x3f\x7e\xff\xfd\xf7\xa9\xae\x7f\x51\x3b\x1b\xec\xfe\xd6\xb5\xf4\xe1\xab\xaf\x76\xb6\x67\xec\x8b\xda\xba\xd0\x0c\x74\x3a\xdb\x3b\x33\xf6\xc5\x4d\x0b\x71\x90\x5a\x9c\x93\x8b\xe3\xdf\x0f\x4e\x4f\xdf\x1e\x9c\x9e\x9e\xfd\x4e\xc5\x65\x2b\x29\x01\x5e\x51\x76\x02\x02\xe7\xcd\xff\x2f\x8e\x7f\xa7\xc1\xf9\x34\x97\xa4\x1a\xb6\xd2\x5f\xfe\x0e\x0e\x0e\x0f\x8f\xcf\x5f\x02\x9f\xb4\x35\x77\x6e\x87\x7b\x31\xc6\x16\x7c\x7e\xea\x9b\xca\x94\xcf\x67\xa9\xb2\x4c\x52\x05\x27\x24\x50\x31\x31\x94\xd5\x89\x10\x03\x34\x21\x35\x79\x06\xc3\xc4\xba\x11\xc4\xa0\xb4\x0a\x0a\x3d\x0c\x6c\x62\x8a\x60\xc1\x89\x22\x55\x4b\xa9\xa8\xf2\x74\xa9\x43\x2a\x17\x8b\x5d\x34\x1e\xfa\x58\x5a\x87\x20\x8d\xa7\x72\x34\x32\x76\x62\x20\xd8\x54\xc0\x1a\x4b\x08\x68\x24\xc4\x1a\x26\x2a\x0c\x81\xd8\x65\x0a\x3e\x15\x3f\x36\x19\x2a\x8d\x89\x78\x16\xc5\x1f\xb8\x7c\x0c\xfb\xfb\x90\x65\x89\x7c\xa4\xbd\xa1\x9e\x8f\xa0\x1a\x02\x32\xed\x71\x1d\xcb\x97\x8d\x14\xcc\x66\xf7\xf3\xf6\xfd\x27\xe2\x46\xcb\xc3\xa8\xf9\xa3\xad\x7c\x2a\x43\xff\xdf\xee\x5d\x14\x4d\xdd\xf3\x8b\xb3\x97\xc7\x3d\x38\x31\x50\xc6\x10\x1d\xee\x40\x65\xc7\xd8\xf4\xf4\xca\x94\xd6\x55\x2d\x1b\xc7\xe0\x95\x44\xb0\x25\xa0\x19\x2b\x67\x4d\x45\xe9\x1e\x0b\xa7\x1a\x4c\x75\x98\xc7\x00\xdf\x5e\x31\xbc\x4a\xe8\xbc\x3c\xb8\x7c\x75\x71\xb2\xff\x68\x69\x2b\xbf\xa5\x48\xb4\x3b\x69\xe6\x61\x36\x7b\x94\x16\xf2\xab\x79\xe1\x71\xd1\x00\xe7\xb5\x53\x63\xa5\x71\x80\x12\x38\x27\xb2\xe7\x73\x48\x12\x2a\x80\x8f\x21\xef\xe5\xf4\xb1\xf7\x17\x70\x6c\xad\xdd\x1f\xb7\x36\x03\x2c\x1a\x32\xd8\xac\x60\xac\x69\x82\x78\x21\x78\x70\xd1\x07\x3a\x1b\x1e\x43\x3a\x15\xb1\x86\x01\x1a\x1c\x8b\x94\x4d\x1a\xf1\x41\x14\x23\x10\x1e\xbc\x25\xce\xf5\x09\xd2\xab\x6d\x8b\xf2\xa0\x85\x92\x14\x30\xe8\x4f\x59\x27\x89\xb4\xa6\x6f\x7a\x8c\x9d\x66\xa5\xb6\x1e\x1d\x84\xa1\x4a\x07\xa5\x3d\x22\x77\x08\x57\xd6\x21\xeb\x90\x2b\x1e\x4a\x67\xab\x15\xd9\xda\xd9\x02\xbd\xa7\x93\x35\x51\xd4\xbd\x0c\x55\x4d\xfa\x1a\xff\x59\xe3\x86\x47\xf0\xc3\xe6\x9e\x16\xa9\xbf\x2a\x10\x04\x48\x31\x05\x6b\xf4\x94\x76\x53\x27\x67\x90\xa0\xe8\x59\x1e\xbd\xcb\xb5\x2d\x84\x4e\xf7\x42\xf1\x97\xc7\x42\xb6\x9b\xa5\x1b\x50\x5f\x78\xd4\xca\xd0\xe9\x84\xf3\xbd\xa3\x0f\xca\x7b\x5b\x86\x89\x70\x1f\x2d\x5f\x68\x51\x89\xf1\x5c\x9a\x75\x00\x0d\x21\x2d\x95\xa7\x86\xc2\x56\xb3\xd2\x52\x9d\x67\x37\x4c\x17\x4d\x25\xfc\x08\x2a\xe9\xe5\x9c\x09\xa1\xb1\xb3\xfa\xb5\xb2\xe6\x66\xa4\xd4\x11\x4d\x58\x7c\x5f\x52\xd7\x3a\xf0\xb9\xd4\x35\x9b\x78\x98\x36\xd6\x81\x73\x65\x60\x14\xfb\xd8\x44\x2e\xa1\x28\x7a\x84\x14\x59\x10\xb5\xe2\x24\x8b\x8e\x79\x3a\x4a\x0a\xb8\x43\xc8\x7c\xe7\x1b\xd8\x6e\xc6\x7b\xf0\xb8\xbb\xdd\xf9\x63\x6f\x18\x42\xed\x7b\x79\xbe\xd4\x73\x77\xb2\x86\xbf\xad\x53\x03\x65\xf2\xa6\x90\xe5\x8b\x9b\x39\x6f\x06\xba\x37\xc6\x1f\x6e\x83\xe8\x21\xfd\xf9\xfc\x5a\xbd\x34\x0f\x57\xda\x34\xfc\xa4\xa6\x6d\xf7\xe9\x76\xcf\xa9\x10\x1b\x84\xad\xee\x33\x51\x8c\x62\xfd\x4c\xdb\xfe\x0b\xe2\xad\x2c\xfb\xe0\xbd\x7e\x41\xc1\xd4\x79\x8c\xd1\x4d\xd7\xee\x3d\x54\x90\x02\xb1\x1d\x0c\x30\xa4\xe3\xd9\x4f\x56\xd2\x15\xe8\xa2\x5c\xed\x54\xf2\x6d\x46\x54\x40\x7e\x1c\x29\xb7\xbf\x3a\xd7\xae\x6b\x6e\x34\x5b\x4b\x72\x7f\x9b\x41\x8f\x43\x21\x9b\x3d\x3f\x90\x44\x57\x14\xfd\x93\x3c\xba\x6a\xe8\xf3\x51\xe9\xbd\x7e\x4a\x3b\x31\xda\x0a\x49\x41\x6c\x92\x90\xad\xb2\xdd\x3a\xc1\xfd\xc1\x20\x91\xdc\xda\xf9\xeb\xad\x0f\x6d\x12\x4e\xef\x63\xb5\xb3\x63\x25\xd1\xe5\xbd\xfc\xad\x14\x41\xe4\x6f\x89\x95\x5a\xe9\x65\x00\xf4\x72\x1b\x89\x49\x69\xea\x43\x31\x23\x28\x35\x9b\x68\x34\xf1\x7e\x0b\xf7\x7d\x5a\x79\xeb\x04\xcc\x66\xad\x90\x4c\xcf\x88\x89\x22\xf7\xc9\x58\x0b\xc6\xae\xec\xb7\x02\xa2\x48\x73\xf3\x50\xdd\x1f\xd0\xd6\xfe\x5c\x98\x52\x38\x3f\x26\x4f\xe6\x8d\xfc\xdf\xc5\x74\xd3\xa5\xd0\x9e\x1f\x88\xe9\x15\x45\xff\x24\xa6\x57\x0d\xfd\x8f\x30\xdd\x44\x39\xd1\xaf\x11\xb5\x1f\xda\xf0\x49\x98\x26\x14\xf5\x16\x9f\x16\x53\xcb\xf5\xaa\xb7\xfa\xad\x41\x27\x47\x38\x7e\x79\x78\x74\xf8\xf2\xf4\xed\xc1\xf9\xc9\x7e\xf6\x5d\x76\x07\x68\x57\x83\x42\x32\xa4\x25\xf1\x6e\xeb\xef\x1c\x28\x2b\x27\x61\x0d\x97\x74\x6e\x38\x15\xcc\xd5\x5a\x6a\x70\xd2\x0a\xa4\x1b\xca\x52\xc5\x6e\x87\x95\x51\x41\x09\xcd\x0b\x1d\xd3\x19\xcd\xda\x18\xee\xa6\x7f\xfb\x73\x7e\x59\x19\xed\x3d\xf9\xee\xc7\xdd\x9d\xe5\xa1\xbd\x8d\x82\x7b\xeb\x82\x4f\x36\x0a\x3e\x49\x82\xd9\x66\x97\x78\xb0\x23\x34\x29\x2c\xbc\xb4\x8e\xa7\xab\xf5\x2d\x51\x21\xc7\xe8\x82\xf2\xc8\x6b\x44\xc7\xa3\xd3\x1e\x36\x50\x63\x32\xc3\x58\x35\x5e\x8f\x52\xbe\x7d\x6b\x6c\xed\xe9\x6e\x11\xcf\x15\x4a\x5a\xb9\x8e\xdf\xd2\xfb\x31\xc8\xc4\x74\x37\xcc\x12\x3d\xd3\x65\x73\x36\x63\x2c\x44\x83\x92\x0b\x59\x51\xbf\x5c\xd2\x3d\xf3\xa6\x99\xa1\x6e\xdb\x59\xcd\x6b\x2d\xd2\xd5\x88\x5a\x69\xa1\xbd\x05\x83\x28\x6f\xe4\xba\xa9\xaf\xea\x8e\xad\x8e\x15\x7a\x20\x60\x34\xef\x87\x72\x7e\xeb\xbd\x2a\x3d\x34\xaf\x49\x05\xdd\x75\xe9\x42\x3c\x7f\x44\xac\x60\xf7\xff\x7f\xd8\x4d\x8f\x89\xf3\xed\xb4\xe5\xfa\x0e\xfd\xe4\x47\xf3\x00\x94\x5a\x04\x3f\xf5\xda\x0e\xc0\x2b\x6a\xdd\x27\x08\x95\x30\x62\x80\x80\xd4\x37\x84\x21\x89\x84\xa1\xb3\x71\x30\x84\xf9\x1b\xd2\x52\xbb\xd9\x3e\x24\xcd\xb5\x6c\x6c\x48\x6d\xbd\x36\xcd\x3a\x60\x6c\xc0\x1e\x88\x60\x2b\x55\xf0\x9b\x88\xa5\xab\x7c\xe1\x84\x1f\x82\xb6\xb6\xf6\x10\x4d\x50\x7a\xfe\xab\x8f\xf2\x10\xeb\xf5\xe6\x79\xa3\x96\x85\xb1\xcf\xf1\x4b\x89\x2f\x86\x28\x63\x0a\xd8\xf2\xa9\x74\xd8\xb7\x36\x50\x77\x5c\xd8\xaa\x4e\x0f\xaa\x9b\x1e\xc3\x33\xe6\x87\x31\x10\xb1\x50\x09\x6b\xd6\x7c\xfb\x84\x5d\x5f\x53\x89\x9c\xcd\xd6\xda\xf7\x7b\xf7\xb3\x78\xc7\x5a\x7a\x6d\x26\x22\x74\x76\x0a\x53\x1b\x9d\x47\x5d\xae\x1d\x87\xf6\x25\x25\x2f\xa2\x0f\xb6\xe2\xbe\x70\xaa\x0e\xf9\x9c\xea\xf2\xed\xbc\x19\xe9\xfa\xe1\x7f\x03\x00\x00\xff\xff\xb3\xdf\x5e\x30\xb2\x1b\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdd\x6e\xdb\x48\xd2\xbd\xef\xa7\x38\x23\x0d\xe2\x6f\xbe\x09\x49\x67\x81\xec\x02\xce\x24\x40\x36\xc9\x00\xd9\xc1\x8e\x0d\x7b\x76\xf7\x22\xc8\x45\x8b\x5d\x24\x7b\xd4\xec\x62\xfa\x47\x32\xa3\xe8\xdd\x17\x4d\x52\xb1\x1c\xd9\x72\x82\xec\x9d\xc4\xae\xae\xdf\x53\x75\xaa\xe7\x3f\x14\x0b\x6d\x8b\x85\xf4\x0d\x32\xba\x16\x62\xb3\x81\xae\x90\xbf\x62\x5b\xe9\x3a\xbf\xa2\x32\x3a\x1d\xfa\x0b\x19\xca\xe6\x42\x96\x4b\x59\x93\xc7\x76\x2b\x0c\xd7\x35\x39\x64\x01\x96\x15\x65\x3e\x48\x17\x62\x97\xfb\x06\x33\x6d\x7d\x90\xc6\x68\x5b\xc3\x91\x42\x23\x03\x4a\x65\x51\x0e\x1a\xa3\x93\x41\xb3\x05\x5b\xfc\xf8\x7f\x0d\xfb\x60\x65\x4b\x3f\xcd\x44\x29\x03\x5e\x14\x2b\xe9\x0a\xa3\x17\x45\x1f\xdb\xa2\x34\x9a\x6c\xc8\x4a\x72\x21\xef\xa8\xc5\x2f\xbf\x9c\xbc\x39\xff\xf5\x24\x39\xf8\x8a\x5c\x78\xe9\xff\xde\x07\xf2\x9f\x3d\x4d\xdf\x74\xa5\x4b\x19\xc8\xe7\x93\xa7\x97\xd4\xb1\xd7\x81\x5d\x3f\x1c\xe3\x13\xae\x82\x4b\x7e\x6d\xb7\xe2\xcd\xf9\xaf\xf7\x1b\x5d\x52\xff\xa5\xcd\x0b\xa7\x57\x32\xd0\x6f\xd4\x7f\xa3\xe5\xdf\xa8\x3f\x30\xfc\x95\xe9\x7b\x79\x79\x0e\x3f\x55\x00\xb1\x53\xc9\x02\xde\x6d\x36\x93\x36\xff\x0f\xd6\xf6\x81\x52\xcd\x1e\x63\x86\xed\xf6\xfd\x41\xc2\x2b\x76\x90\x21\x50\xdb\x05\x68\x8b\xcd\x93\x3c\x7f\xba\x7d\x06\xc5\x02\xe8\x63\x8b\xc9\x0d\x64\x3d\xb2\x0f\xf8\x36\x9b\x83\x49\x3c\x7a\x84\x85\x23\xb9\x14\xc0\x91\x70\xdf\xed\x9c\xf8\x71\x33\xfd\xda\xbe\xbf\x3b\xf0\xc9\xa3\x11\x3f\x95\xd4\x86\xd4\x4c\x20\xa1\xf5\xdd\xbb\xbd\xdb\xc8\x4c\xc0\x53\xbc\x7f\xff\x0c\xa1\x21\x0b\x6f\x88\x3a\x3c\x79\x06\x32\x9e\x40\xd7\x3a\xa4\x3f\x95\x16\x8a\x2d\x1d\xad\x84\xa3\x96\x57\xdf\x06\xe3\x94\xb9\xd2\x90\xb4\x90\xc6\x08\xd7\x22\x73\x15\x8e\xc2\xfa\x08\xfc\xc4\x66\x43\x56\x6d\xb7\x42\xcc\x51\x3a\x92\x81\x92\xf5\x20\xb5\x25\x87\x2e\x1a\x93\x72\xe4\x28\x40\xb4\x4b\xa5\x1d\xb2\x0e\x85\x63\x0e\x45\xae\xb8\x5c\x92\x9b\xf0\xbd\xff\xa9\x18\xdd\xcf\xff\xf4\x6c\xf7\xd1\x9d\xbf\x26\xa7\x57\xa4\xf2\x57\xdc\x2e\xb4\x25\xf5\xb6\x95\x35\x5d\x44\x63\xae\x46\x13\x53\xc5\x0f\x91\x3c\xc7\x1f\xe7\xaf\xcf\xcf\xa0\xc8\x50\xa0\x94\x72\x54\x6c\x0c\xaf\x93\x50\xed\x38\x76\xa3\xef\x29\x5b\xb2\x0a\xe4\xa0\x03\xb4\xc7\x42\x2e\x49\x41\xdb\xc0\xe0\xe8\xf0\xef\x7f\x42\x27\x93\x5e\x0c\x77\xa4\x52\xc8\x2a\x4c\x71\x08\x5d\xe1\x07\xd4\x8e\xba\x9b\x74\x8d\x47\x28\x28\x94\x45\xe5\x83\x5c\x8c\xe5\x16\x80\xef\x7d\xa0\xb6\x0c\x06\x3e\x70\x37\xe9\xc8\x86\xaa\xc4\x2e\x0f\xba\x25\xf7\xa0\x94\x27\xb7\xd2\x25\xdd\x27\xb7\x77\xde\x2e\x2b\x9f\x5f\x57\x3e\xb9\x5b\x28\x5a\x15\x4a\xfb\x65\x21\x3f\x46\x47\x85\x23\xcf\xd1\x95\x94\x75\xd2\x85\x27\x02\xa0\xb2\x61\x9c\x1c\x17\xc3\x41\x8c\x48\xea\x51\xbb\xee\x43\xe4\x20\x81\x53\x9c\x9e\xe0\xc5\x8b\x9b\xd0\x93\x1b\x1c\x6d\xf8\xf2\xa6\x00\x1c\xf9\xc0\x8e\x4a\xb6\xc8\x2e\x0f\xce\x37\x9b\x2c\xf5\x0f\x7d\x40\x7e\xc9\x86\xd2\xf0\xa9\x9c\x4c\xdd\x2b\x80\x11\x3d\xc9\xc8\x84\x1d\x25\xa9\x65\xfb\x05\x76\x04\x30\x33\x5c\x67\x2a\xe1\xc7\xcd\xce\x30\xfb\x93\xa3\xb3\xd2\xa8\xd9\xe3\x74\xa6\xb4\x97\x0b\x43\x99\xa1\x5a\x96\x7d\xe6\xa8\xd6\x3e\xb8\x7e\x76\x86\xe0\x22\x89\x11\x45\xc9\x0f\xb2\x6a\xb4\xbb\x9f\x71\xe9\xc2\x61\xca\xef\x16\xf8\xa2\xc2\x95\x16\x62\xca\xdf\xd0\x2a\x09\xe4\xd3\xd4\x1a\xb0\xed\xf3\xdf\x59\xd1\x30\xa7\x5e\x0c\x05\xb1\x49\xea\x51\x02\xf4\x7a\x18\x1b\x49\x75\xc2\x70\x1a\x0b\x58\x4b\x59\x93\x0d\x90\x56\xc1\x52\x58\xb3\x5b\x22\x06\x6d\x74\xd0\xe4\x51\xf3\x30\x9e\x02\xc3\xc9\x72\x68\x52\xa5\x13\xe0\x73\x31\x4f\xe9\xdd\x5d\x76\xd1\x7a\x2c\xa8\x62\x47\x50\xd6\xa7\x2e\x58\x5a\x5e\x5b\x04\x1e\xfa\x66\xb4\x44\x43\x26\x62\x87\xb5\x0e\x0d\xd2\x48\xeb\xe1\x87\x9e\x13\xeb\x46\x1b\x1a\xa6\xdd\xe7\x99\x83\x4c\xfd\x84\xe7\xcf\x31\x9b\x0d\x13\x4f\xf1\xcd\xbc\x7b\x70\xbe\xa5\xbc\xa4\x08\x0f\x53\x73\x35\x4a\x61\xbb\x3d\x4e\x14\xc7\x13\x7c\xa3\xe5\x7b\xb8\xe0\xab\x6d\x7c\x2b\x25\xfc\xf5\xf4\x3e\x4e\x98\x8b\x39\x7e\x3f\xff\xe3\xcd\x19\xde\x5a\x54\x31\x44\x47\x8f\xd1\xf2\x2a\x8d\x37\x99\xb2\x50\xb1\x6b\x27\x02\x88\xc1\x6b\x45\xe0\x0a\x64\x57\xda\xb1\x6d\x53\xa9\x57\xd2\xe9\x04\x7b\x2f\xe6\xc2\x53\xc0\xcf\xd7\x82\xae\x3b\x76\x01\x57\x2f\xaf\xfe\x75\xf9\xf6\xf9\xc9\x5e\x28\xff\x61\xb7\x24\x37\x45\x32\x9e\x63\xbb\x3d\x19\x2e\x66\xd7\x3b\x14\xbb\x68\x91\x65\x9d\xd3\x2b\x6d\xa8\x26\x85\x2c\x4b\xfc\x92\xed\xe0\x98\x10\x81\x6c\x85\xe2\xac\x48\x3f\xcf\x3e\x22\xa3\xc9\xda\xf1\xbc\x4d\x15\x10\xd1\x26\x83\xe3\x0d\x21\x46\xd6\xcd\x4a\x99\x05\x17\x7d\x48\x7d\xe1\x29\x0c\x1d\x11\x3b\xd4\x64\x69\x25\x87\x5a\xa6\x2f\x3e\xc8\x72\x09\xe9\xe1\x39\x8d\x79\x3f\xc0\xf9\x36\x53\x6a\x0f\x23\xb5\x4a\x09\xc3\xa2\x17\xf3\x41\x64\x32\x7d\x43\x6b\x8f\xc7\x9b\x86\x3d\x39\x84\x46\x0f\x4d\x32\xb5\xc7\x3d\xc2\x2d\x3b\x12\xf3\xe4\x8a\x47\xe5\xb8\xbd\x25\xdb\x39\x2e\xc9\xfb\xd4\x55\x6b\x9d\x08\xb3\xd1\x5d\xd2\x37\xfa\x2f\x46\x37\x3c\xc1\x37\x1c\x8d\x1a\x72\xcc\xb6\x24\x48\x28\xd9\x83\xad\xe9\x53\x34\xdd\xe0\x0c\x25\x28\x7a\x51\x44\xef\x0a\xc3\xa5\x34\xc3\xe6\x2c\x3f\x7a\x2a\xd5\x14\x2c\xb2\x44\x6c\x9e\x8c\xb6\xa9\x33\x71\xf1\xe4\xf5\x83\xf2\x9e\xab\xb0\x96\xee\xab\xe5\x4b\x23\x5b\xb9\xda\x49\x8b\x39\xc8\x26\xa4\x0d\xa3\x69\x9c\x87\xb7\xab\x32\xcd\x4d\x2f\x6e\xc6\x66\xb4\xad\xf4\x4b\xb4\xca\xab\xdd\x58\xc5\x68\xe7\xf6\xdf\x96\xed\xcd\x97\xca\x44\xb2\xe1\xf3\xff\x3d\x75\x93\x03\xff\x2b\x75\x63\x10\xdf\xa7\x4d\x1c\xa3\xb6\x10\x2d\xa9\x4c\xaa\x36\xc1\xa3\x4a\x23\x95\x3b\xb2\xbe\xd1\x55\xc8\x12\xb8\x1c\x9b\xac\x33\xd2\xd2\xc8\x4b\x69\x44\x3c\x70\x2b\x4d\xb2\x7d\x12\x4b\x24\x42\x90\xc6\x33\x2c\x91\xba\x91\xcc\x87\xc2\xe6\x2b\x36\xb1\x25\x8f\xb4\xb5\x8d\x9b\x9d\xda\x11\x43\xe2\xfa\x91\xe7\xcb\x44\x07\x89\x33\x76\xeb\x5d\x8b\xd3\xbf\x3d\x3d\x1d\xd6\xbc\x1d\x8f\xb3\xd3\xb5\xb6\xc5\x3d\xfa\x93\x1f\x23\xff\x0e\x5b\xac\xef\xbd\xe1\x1a\x5e\x27\x84\xaf\x09\xad\xb4\xb2\x26\xd0\x8a\x5c\x1f\x9a\x24\x12\x1a\xc7\xb1\x6e\xb0\xa3\xf0\xbd\xaa\x4c\x3c\xbe\xd3\x72\x67\xdd\xb8\x3b\x38\x16\x73\x58\x0e\x74\x06\x19\xb8\xd5\x65\x76\x3b\x67\x28\x5d\x7a\x78\x1a\xe6\xce\x23\xda\xa0\x0d\x5a\xe9\x87\x25\xd1\x23\x76\x87\x18\xbb\x53\xcb\x67\x63\xdf\xff\x76\xf5\x65\x43\x2a\x0e\xe9\xda\xdb\xeb\xe1\x68\xc1\x1c\xd2\xe0\x28\xb9\xed\x86\x45\xf7\xae\x27\xca\x4c\xf8\x26\x06\x95\x28\x3d\xcb\xa6\x3b\x3f\xff\x25\xad\xf1\xc6\xd3\x76\x7b\x80\xf1\xa3\xd1\xe0\xd3\xa7\x71\x45\xda\x7b\x05\x28\xf2\xc1\x71\x8f\x9e\xa3\xf3\x64\xaa\x83\x17\xc6\xb4\x6a\x14\x65\xf4\x81\xdb\xcc\x97\x4e\x77\xa1\x48\x1e\x19\x96\xaa\xf8\xff\x62\xfc\x92\xfb\xe6\xbf\x01\x00\x00\xff\xff\x24\xbf\xec\x30\xf9\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
