// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/etc/etcd/ca.crt
// data/etc/etcd/etcd.conf
// data/etc/etcd/peer.crt
// data/etc/etcd/peer.key
// data/etc/etcd/server.crt
// data/etc/etcd/server.key
// data/etc/origin/master/admin.kubeconfig
// data/etc/origin/master/aggregator-front-proxy.crt
// data/etc/origin/master/aggregator-front-proxy.key
// data/etc/origin/master/ca.crt
// data/etc/origin/master/ca.key
// data/etc/origin/master/front-proxy-ca.crt
// data/etc/origin/master/master-config.yaml
// data/etc/origin/master/master.etcd-ca.crt
// data/etc/origin/master/master.etcd-client.crt
// data/etc/origin/master/master.etcd-client.key
// data/etc/origin/master/master.kubelet-client.crt
// data/etc/origin/master/master.kubelet-client.key
// data/etc/origin/master/master.proxy-client.crt
// data/etc/origin/master/master.proxy-client.key
// data/etc/origin/master/master.server.crt
// data/etc/origin/master/master.server.key
// data/etc/origin/master/named/console.crt
// data/etc/origin/master/named/console.key
// data/etc/origin/master/openshift-master.kubeconfig
// data/etc/origin/master/scheduler.json
// data/etc/origin/master/service-signer.crt
// data/etc/origin/master/service-signer.key
// data/etc/origin/master/serviceaccounts.private.key
// data/etc/origin/master/serviceaccounts.public.key
// data/etc/origin/master/session-secrets.yaml
// data/etc/origin/node/ca.crt
// data/etc/origin/node/client-ca.crt
// data/etc/origin/node/node.kubeconfig
// data/etc/origin/node/pods/apiserver.yaml
// data/etc/origin/node/pods/controllers.yaml
// data/etc/origin/node/pods/etcd.yaml
// data/etc/origin/node/pods/sync.yaml
// data/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _etcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func etcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdCaCrt,
		"etc/etcd/ca.crt",
	)
}

func etcEtcdCaCrt() (*asset, error) {
	bytes, err := etcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xd1\x4e\xfa\x30\x14\xc6\xef\xff\x4f\xc1\x03\xfc\xdd\xc6\x44\x70\x24\xbd\x28\xdb\x31\x34\x94\xa2\xdd\x19\x09\x57\xcd\xc4\x26\x1a\x45\x49\x57\x89\x86\xf0\xee\x86\x16\x61\xc2\x88\x6e\xd9\x4d\xbf\x5f\xbf\xb3\xef\x9c\x03\x98\x66\x8a\x66\x53\x90\xc8\x72\x50\x29\x67\x20\x50\x15\x92\xe7\xe4\xd1\xda\x65\xd5\x0f\xc3\xf5\xba\x15\xc0\x87\x35\x65\x30\x7c\xab\xec\x6b\xb9\xd0\xad\xcd\xa6\x1f\x5f\xf6\x92\x7f\xee\x76\x0a\x12\xd5\x0d\xe3\x40\x42\x6d\xe7\xdb\xef\x21\xac\xb4\x59\x69\x13\xcc\x8d\xdd\x31\xde\xd7\xa1\xb4\xc0\x21\xb1\xe6\x5d\x7b\x29\xa3\x48\x55\xc6\x24\x09\x57\xa5\x09\x5f\x9e\xee\x9d\x83\xd7\x80\x43\x8a\x6c\x22\x14\xb2\x31\x4c\x0a\x24\xf1\x55\x14\x79\x69\x08\x54\xe2\x00\x28\x2a\x26\x10\xe4\x94\x72\xb2\xd7\x98\x60\xc8\x28\xaf\xe5\xba\x05\x90\x7f\x4b\x75\x7d\xe4\x91\xf2\x22\x47\x90\x64\x51\x56\x56\x9b\x8b\xc8\x3d\x7b\x97\x1f\xa7\xee\xf6\xff\xfa\x51\xbb\x11\x6c\x9f\x82\x71\x23\x18\xd7\xfe\x67\x04\xb3\x33\x4d\x7e\xd6\x9f\x1e\xe1\x2c\x47\x10\x8d\x33\x8c\x02\xf7\xd6\xa6\xb6\x83\x4f\x1b\x73\x40\xbf\x4b\x0b\x3a\x06\xd2\xd8\x2f\xaf\x3b\x8f\xa6\x2d\x58\xea\xfa\x0e\x78\xec\xfc\x22\x38\xbd\x21\xa6\x73\xd9\x87\x74\x14\xca\xed\x50\x32\x95\xd2\x63\x78\x5e\x1e\x0a\xde\x15\x13\xa4\x6a\x40\xd3\x11\x88\x4c\x0d\x66\x08\x39\xe9\xc4\x49\x27\xe9\xf6\xe2\xa4\xeb\x99\x5f\x9d\xbe\x02\x00\x00\xff\xff\x3d\x31\x31\xc4\x21\x03\x00\x00")

func etcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdEtcdConf,
		"etc/etcd/etcd.conf",
	)
}

func etcEtcdEtcdConf() (*asset, error) {
	bytes, err := etcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\x81\x45\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func etcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdPeerCrt,
		"etc/etcd/peer.crt",
	)
}

func etcEtcdPeerCrt() (*asset, error) {
	bytes, err := etcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x48\x4d\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func etcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdPeerKey,
		"etc/etcd/peer.key",
	)
}

func etcEtcdPeerKey() (*asset, error) {
	bytes, err := etcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\x81\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func etcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdServerCrt,
		"etc/etcd/server.crt",
	)
}

func etcEtcdServerCrt() (*asset, error) {
	bytes, err := etcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x4e\x2d\x2a\x4b\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func etcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdServerKey,
		"etc/etcd/server.key",
	)
}

func etcEtcdServerKey() (*asset, error) {
	bytes, err := etcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func etcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAdminKubeconfig,
		"etc/origin/master/admin.kubeconfig",
	)
}

func etcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := etcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xa7\x17\xa5\xa6\x27\x96\xe4\x17\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x82\x55\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func etcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAggregatorFrontProxyCrt,
		"etc/origin/master/aggregator-front-proxy.crt",
	)
}

func etcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := etcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x00\xd0\xfb\x9f\x22\x13\x64\x07\xbf\xd0\x8b\x17\xa1\x13\x48\x89\x21\x17\x03\x31\x94\x06\xeb\xee\x7d\x6b\x41\x35\xb9\x9b\x53\xa1\x48\xf3\x1f\x4e\x13\x30\xeb\xe8\xc2\x98\xc9\x5c\xba\x5c\xcd\x69\x62\x62\x36\xe2\xe6\x6a\x87\xe9\xf0\x6a\xfa\x04\x16\x0a\x78\xe1\x74\x93\xc1\xb0\xf7\xef\x0b\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func etcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAggregatorFrontProxyKey,
		"etc/origin/master/aggregator-front-proxy.key",
	)
}

func etcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := etcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaCrt,
		"etc/origin/master/ca.crt",
	)
}

func etcOriginMasterCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4e\xd4\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func etcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaKey,
		"etc/origin/master/ca.key",
	)
}

func etcOriginMasterCaKey() (*asset, error) {
	bytes, err := etcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x3a\x27\x82\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func etcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterFrontProxyCaCrt,
		"etc/origin/master/front-proxy-ca.crt",
	)
}

func etcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x6f\x1b\xb9\x11\xff\xae\xbf\x82\xf0\x97\xdc\x15\xdd\x5d\xf9\x95\xc7\x02\xfd\xa0\xda\xe7\x9e\x70\x8e\xa3\x4a\x49\x51\xa0\x28\x0a\x8a\x1c\xad\x18\x71\xc9\x35\x1f\x3a\xeb\x5c\xff\xef\x05\x1f\xbb\x4b\xad\xe4\x9c\x71\x4d\xda\x73\x3e\x44\xcb\xf9\xcd\x70\x5e\x9c\x19\x12\xd3\x9a\x69\xcd\xa4\xb8\x92\x62\xc5\xaa\x72\x84\x50\xc3\x6d\xc5\x92\x6f\x84\xfe\x6c\x19\xa7\xd7\xb0\xc2\x96\x1b\x1d\x96\x10\x22\x1e\x60\x15\x36\x4c\x8a\x76\x11\x21\xdc\xb0\xbf\x81\x72\x12\x4b\xb4\x3d\xed\x96\x41\x6c\x4b\xf4\x8f\x7f\x76\xdf\x1b\x26\x68\xb9\x2f\x38\xec\xd8\x21\x14\x68\x69\x15\x01\xdd\xcb\x46\x88\xb3\x9a\x19\x5d\xa2\xc7\xa7\x64\x51\xc1\xbd\x05\x9d\x2c\x7b\xb1\x1f\xb6\xa0\x14\xa3\xf0\x1b\x15\x4e\x14\xec\x24\x25\x1a\xca\x06\x84\x5e\xb3\x95\xc9\x99\x2c\xa6\x35\xae\x60\x26\x39\x23\xbb\xdf\xe8\x9d\x07\x20\xd6\x21\xe7\x96\xa7\x06\x67\xa8\xc6\x86\xac\xbd\xfc\x89\x10\xd2\x78\x71\x7b\x1e\xc9\xd0\x06\x76\x25\x62\x0e\xa2\xf3\x3d\xb5\x28\x88\x5d\xd6\x89\x4e\x78\x10\xda\x62\x6e\xa1\x44\xaf\x8c\xb2\xf0\x2a\xa1\x08\x5c\x43\xd9\xab\x93\x51\x10\x0c\x68\x02\x90\x62\x7e\x2c\x2e\x59\x17\xae\x12\x35\x92\xea\x67\x48\x4b\xe7\x4e\xbd\x17\xba\xcf\x40\x4c\x89\x9c\x1e\xc9\xb2\xde\xb0\xe6\x83\xdf\x89\x7b\x3d\x6e\x30\xe3\x56\xc1\x00\x17\x42\x94\x38\x3f\xc6\x07\x5b\xca\x4c\x9f\xbf\x20\xf0\x92\x03\x8d\xcc\xb8\xaa\x14\x54\xd8\x48\x95\x64\xbc\x92\x0f\xbb\x2b\xce\x40\x98\xa9\x58\xc9\x60\x18\x01\x65\x6e\x18\x87\x12\xf5\x2c\xd9\x4a\x49\x61\x32\x8f\xcf\x89\x32\x1e\xb8\x81\xdd\x17\x71\x1b\xd8\x8d\x70\xc3\x6e\x61\x0b\x5c\x97\xa3\xcc\x05\x7e\x90\x07\xd8\x9a\x75\xaf\x4e\xcc\xe7\x1f\x01\x53\x50\x51\x19\xaf\xdc\xd5\xa4\x44\x89\xe4\x8c\xe0\x4e\x89\x08\x90\x75\x2d\xc5\x1d\xae\xdb\xe8\x64\xcf\x28\x35\x0a\x59\x67\x14\x0e\xbb\xcc\x14\xac\xd8\x43\xcf\xf5\xf7\x6c\x0e\xb5\x34\x90\xfd\xe0\x30\x99\x5f\xad\x94\xb4\x4d\x80\x1f\xe2\xfe\xe2\x88\x7e\xd1\x6a\x50\x2e\x8d\x9e\x43\x7e\xd2\xa0\x46\x44\x0a\xa3\x24\xe7\x90\x44\x01\x38\x90\xfe\xb4\x70\x49\x36\x77\x3e\x1b\xbb\x9c\xce\x6a\xac\x0d\xa8\xac\x67\x76\xa9\xa4\x41\x6d\x19\x81\x85\xfb\x4f\x54\x57\xa0\x4c\x10\xa0\x59\x25\x5a\xf7\xa5\xd1\x8c\xf8\x2c\xd0\x3b\x07\x26\x71\x1c\x20\x5c\xfc\x92\x2d\x4b\x74\xf2\x87\x93\x11\x91\x4a\x4f\x38\x97\x3f\x03\xfd\xa0\x58\xc5\xdc\xa1\xa4\x42\xf7\xd6\x2c\x99\xa0\x13\x4a\x15\x68\x5d\xa2\x71\xee\xff\x95\x6f\xc7\x97\xe7\x91\x76\x07\xe6\x67\xa9\x36\x25\x32\xa4\xb9\x18\x81\x21\x74\x3f\x01\x09\x2e\x51\xb0\x37\x77\xc4\x3e\xd6\xbd\x25\x7b\x64\xcf\x1c\x21\x9d\x25\x47\x10\xce\x1a\x84\xac\xe2\x3e\x32\x19\x5a\x1b\xd3\xe8\xb2\x28\x1e\x1f\x51\xee\x83\x9d\xff\x28\xb5\x71\x01\x44\x4f\x4f\xe5\xd9\xf9\x9b\x77\x5e\xb9\x85\x91\x0a\x57\xd0\xdb\xb7\xb1\x4b\x50\x02\x0c\xe8\x48\x0a\x29\x54\x26\x84\x9c\xc9\x63\xc0\xfd\x02\xe8\xa2\xbb\x70\xd1\x1d\x88\x49\x2b\xd9\x11\x58\x2a\xc4\xd7\xbe\x5e\xb3\x95\x54\x35\x36\x25\x72\x16\x85\xd5\x7c\x1a\xaa\xe3\x8d\xa7\xa0\xa7\xa7\xc0\x92\x16\x0d\xc7\xc8\x84\x71\xa9\xcb\xe7\x50\x31\x6d\xd4\xae\x75\x44\x89\xa8\x24\x1b\x50\x99\x8a\x84\x9c\x86\x96\x95\xeb\x2d\x29\x2f\xc7\xe3\xf1\x28\x94\xa2\xf7\xde\xdd\xb1\x0a\x39\xbb\x39\x98\xc3\xa8\x3e\x1f\xc9\xc8\xf2\xe5\x60\x0e\x40\x21\x9e\x8d\x54\xa6\x44\xa7\xe3\xb3\xcb\xf1\xa8\x77\x78\xaa\x8f\xdb\x1d\x37\xcc\x1d\x13\x50\x13\x55\xd9\x1a\x44\xdb\xcc\x09\x97\x96\x66\x24\xe9\xf8\x19\x2a\xc0\x90\x42\xfa\xd4\x2e\x3c\xbd\x51\x72\xcb\x28\xa8\x02\xff\x62\x15\xe4\x0e\x9d\x30\xb7\xd4\xae\xec\x38\x50\x38\x87\x21\x60\xd9\x12\x93\x0d\x08\xda\x02\x5c\x52\x9d\xef\x01\x6a\xa0\x0c\x67\x66\xd7\x40\x27\xa4\x69\x38\x23\xbe\xe7\x15\x5b\x41\xf3\x24\xb5\x1a\x25\x8d\x5c\x5a\xa7\x42\x7f\x36\xff\x97\x66\x11\x6e\x7d\x31\x72\x45\x82\x89\x2a\x73\xc1\xcc\x56\x2e\x50\x47\x76\x0a\xa1\x2b\xf6\xea\xf5\x3e\xfb\x06\x76\x2f\xe0\x0e\xc1\x0e\xdf\xd3\x59\x89\x4e\xcf\xde\xf8\xca\x72\xfa\xeb\x4d\x2c\x66\x4f\x6c\x1c\x69\x82\x1d\xa6\xd8\x1e\x28\xec\xa9\xc9\x1a\xa8\xed\xea\x75\x80\x1f\x51\xb2\xc3\xe5\x9f\xb5\x9f\x39\x62\x31\xd5\x77\x92\xc2\x4c\x2a\x33\xc7\xa2\x72\x93\xc7\xab\x84\xb6\xb0\x4b\x01\x2e\x7f\xdf\x9c\xe5\xe7\xbe\x52\x16\xa7\xaf\x47\x41\x62\xb0\xc8\x47\x14\x1e\xc2\xf9\xfc\xa9\x4b\x83\xab\xd8\xf5\x84\x08\xad\x63\x30\xf3\x61\x42\xa0\x71\x64\x03\xc2\x7c\xdc\x35\xa0\xcb\x97\xe4\xd4\x1f\x53\x4c\x34\x03\xa1\xa5\x55\xda\x94\xe8\x62\x3c\x1e\xc5\x01\xaf\x95\xfa\x22\xa1\x9e\xe9\xbe\xd1\x25\x3a\xf3\x12\x0e\x8d\x71\xbf\xe2\x59\x0d\xee\xe9\x4a\xe0\xad\x94\x8d\x3b\x3e\xff\x07\x73\x5f\xff\xd7\xe6\x9e\x7b\x09\x07\xb6\xa4\xd6\x0e\x3b\xbc\x17\x18\xce\x6d\xcc\x82\x99\x5d\x72\x46\x3e\xcd\x6f\x7d\x59\x6f\x14\x13\x06\x9d\xb4\xad\xeb\x04\x7d\x97\x5f\x83\x62\x5b\xa0\x79\x00\x76\x2d\xcc\x35\x00\x83\x99\x00\xb5\x08\xb9\xf6\x3d\xfa\x37\xba\xb7\xd2\xb8\xee\x36\x12\xa1\x07\xf7\x05\x32\x9e\xca\xd8\x9b\x63\x87\x24\x8c\x2a\x57\x5b\xf3\xd3\xb3\xb7\x21\x37\x2f\xbc\x75\x6b\xa9\x4d\xc8\xdc\x5b\x10\x95\x59\x97\xe8\x5d\x12\xd7\xe9\x2c\x4a\xb9\x9a\x5e\xcf\xa3\xa4\x38\x06\x14\xce\x21\x71\xef\x99\xbf\x6c\x85\x41\x47\x01\x5d\x63\x53\xf4\xde\x90\x5b\x9d\x45\x5c\xe3\x7b\x55\x7f\x66\x12\xe1\xc3\x73\x23\xf7\xa7\x49\xac\x35\x98\xaf\xe8\xbf\x93\x82\x48\xa1\x25\x87\xe2\x24\xf5\xa5\x9b\x0f\xb1\x30\xe9\xb5\xb1\x06\xb3\x96\xb4\x44\xd8\x1a\xd7\xc2\x19\x05\x61\x98\xd9\xcd\x62\x4d\x8d\x4e\xe1\xb2\x62\x22\x99\xec\x6b\xdc\x34\x4c\x54\xef\x23\x33\xe1\x98\xd5\xa3\xfe\x6e\xf2\xf8\x88\xbe\x63\x82\xc2\xc3\xa1\x6e\xf9\x4c\xc9\x06\x94\x61\xa0\xf3\x89\x35\xeb\x99\x92\xae\xa4\xe6\xd3\xe1\xc6\x68\xfc\x7d\xee\x5c\xbe\xaf\xbf\x2f\xa1\x49\xb5\x7f\xe6\xb6\xe6\x15\x4a\x2e\x3f\x50\x63\xc6\xd3\x2b\x9b\x5f\xe8\xbe\x19\x4d\x69\xda\x2e\x47\x7b\x77\xad\x84\xe6\xbe\xbb\xcf\x46\xc1\x0a\x94\x02\xfa\x29\x8e\xd3\x29\xd2\x0a\x76\x6f\xe1\x5f\x09\x43\xa8\xd5\xd3\xeb\xaf\xe7\x9f\xf6\x23\x8f\x2d\xe5\x7a\xe8\xac\x76\xd3\x05\x10\x05\xe6\x1b\x6c\x1c\x04\x1f\x6e\x1b\x66\xad\x0f\x0d\x88\xe9\xf5\x50\x42\x84\xb4\xe3\x6d\x0c\xa3\x35\x6b\xa9\xd8\x2f\x70\x2c\xf9\x7d\xfa\xe5\x35\x23\x4a\x6a\xb9\x32\x52\x70\x26\xdc\x18\x50\xbb\x63\xf1\x55\xed\xf9\x08\x02\x7b\x47\x9e\x14\xfe\x88\x9e\x15\x9d\x62\x27\x87\x56\x22\x64\xe4\x06\xc4\xef\x4d\x65\xaf\xd4\x40\xdd\xd8\xa8\x27\xc9\x68\xfb\x2d\xab\x76\x2b\xfd\x59\xb9\x5f\x34\xfe\xe6\xaf\xd7\x77\xfb\xd2\x34\x0c\x1e\xc0\xba\xa5\xf7\xf8\x61\x52\xc1\xc2\xb5\x22\xea\x3a\x59\xdb\x0c\x23\x39\x54\x6d\xad\x45\xba\x18\xb2\x56\x3f\x3f\x20\x05\x58\xa6\x03\x2e\xdf\xe1\xda\x15\x0b\xef\xd7\x54\x05\xd7\xcc\xb5\xfe\xe8\x96\x07\x6a\xbc\x7d\xdd\xce\x20\x5d\xfe\x1c\x83\x5d\x8e\xc7\xa3\x46\xc9\xcf\x40\x92\xa2\x1c\x2f\x2e\x6e\x18\x5b\xf8\xfb\xb6\x54\x25\x12\x92\x42\xa6\x24\x87\x7c\xef\xee\x56\x10\x59\x37\xd6\xc0\x9f\x62\x69\xd6\x40\xac\x62\x66\xe7\xae\xbd\x04\x3b\xce\x50\xaf\x89\xee\x56\xe2\x70\xa7\xc7\x65\x71\xd6\x12\x6f\xf1\x12\xb8\x9e\x81\x9a\x05\x65\x4a\x74\x19\xde\x09\x18\x1d\xf2\x9d\x8e\xdb\xbf\xec\xf4\x5d\xfb\x57\xf8\xd5\x91\x92\xd6\xb8\xfb\x7d\x67\x8a\xb6\x4b\x2a\x6b\xcc\xc4\x8b\x4b\xcf\x5c\x5a\xe3\xd5\x70\x99\x1f\x12\xdd\xe7\xdd\xa2\x95\x94\xe6\x45\xec\xb3\x13\x42\xa4\x4d\xdb\x5a\x8d\x05\xae\x80\x76\x6f\x2c\x59\xeb\x53\xff\xdb\x3f\x70\xf9\x32\xe4\xd6\x1b\x2e\x77\xfe\xe3\xc8\x09\x69\x14\xdb\x62\x03\x3f\x0d\x1e\x1d\x70\xd8\xcf\x0d\x52\x9e\xde\xde\xef\xbc\xa2\x11\x1c\xf7\x3d\xe0\xf0\x18\xcf\xa0\xc3\x63\x48\x7b\x0f\x38\xfa\x16\x71\x71\x71\xfc\x29\xe2\xc8\xa5\x41\xfb\x4b\x63\x7b\x6b\xed\x9e\xa2\x3a\x5b\x86\xf7\x87\x88\x6f\x6f\x2b\x0f\xf3\xf8\x40\x3b\x15\x37\x9c\x55\x6b\x13\x92\xb3\x7b\xe8\xfa\xc8\x6a\x90\xd6\x0c\xcf\x99\x2b\x05\xf4\xca\xc5\x6e\xe5\x86\xcd\x38\xe5\x66\x89\x7a\x47\x8e\x97\x67\x6a\x27\x94\xfe\x71\xa7\xd3\xf0\x57\x59\x82\xd2\xb1\x3d\x77\x4d\x24\xf3\xaf\x09\x2f\x2d\x57\x69\x1e\x6d\x25\xb7\x75\xf2\x3a\x41\x77\x02\xd7\x8c\xf8\x12\xeb\x0a\x01\x13\xd5\x0f\x7b\x0f\x94\xff\x09\x00\x00\xff\xff\x0c\x50\x75\x29\x92\x17\x00\x00")

func etcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterConfigYaml,
		"etc/origin/master/master-config.yaml",
	)
}

func etcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := etcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func etcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdCaCrt,
		"etc/origin/master/master.etcd-ca.crt",
	)
}

func etcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\x80\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func etcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdClientCrt,
		"etc/origin/master/master.etcd-client.crt",
	)
}

func etcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x71\xce\xc9\x4c\xcd\x2b\xd1\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func etcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdClientKey,
		"etc/origin/master/master.etcd-client.key",
	)
}

func etcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\x80\x15\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func etcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterKubeletClientCrt,
		"etc/origin/master/master.kubelet-client.crt",
	)
}

func etcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x21\x10\x06\xe0\xf7\x4e\x31\x27\x98\x3b\x94\x8f\x12\x04\x9d\xc0\xe2\x57\x06\xc4\x60\xe6\x6f\x41\x5c\xef\xbe\xdf\x5a\xf2\x72\x3b\x0a\x91\x31\xef\xf1\x98\x44\x88\xa6\xdf\xa8\xd6\x34\xc1\x69\xd5\xbe\x85\x08\x7d\x96\x20\x3c\xff\x3f\xe8\x60\xea\x86\x41\xcd\x98\x72\xca\x9b\x6e\xa3\xc9\xde\xb7\x2b\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func etcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterKubeletClientKey,
		"etc/origin/master/master.kubelet-client.key",
	)
}

func etcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\x80\xa5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func etcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterProxyClientCrt,
		"etc/origin/master/master.proxy-client.crt",
	)
}

func etcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x03\x21\x0c\x06\xe0\xf7\x4e\x91\x09\xb2\x43\xeb\xa3\x14\x84\x4e\x20\xe5\x57\x02\x87\x42\x12\x8e\x0b\x9e\xbb\xdf\xb7\x16\x15\x95\xb3\x3a\x32\xe2\x6d\x9f\x70\x18\x71\x9a\xa3\x49\xe7\x04\x75\x69\xf2\xaf\x0e\xe3\x6f\x35\x87\x16\x9d\x57\xa4\x43\x30\x9c\x33\x82\x6e\xfa\xb9\xca\xe8\xb4\xf7\xeb\x09\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func etcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterProxyClientKey,
		"etc/origin/master/master.proxy-client.key",
	)
}

func etcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\x81\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func etcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterServerCrt,
		"etc/origin/master/master.server.crt",
	)
}

func etcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x06\xe0\xfb\x9b\x22\x13\x64\x87\x57\x8f\x52\x28\x38\x81\x94\x5f\xc9\xc5\x42\x12\x84\x60\xdd\xbd\xdf\x5a\x74\xa9\xcc\xea\xc8\x88\xbf\x1d\xe1\x30\xe2\xf4\x8c\x26\x9d\x13\xd4\xa5\xc9\x5d\x1d\xc6\x67\x35\x87\x16\xe8\x84\x72\x46\xd0\x4b\xc5\x55\x46\xa7\xbd\x7f\x5f\x00\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func etcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterServerKey,
		"etc/origin/master/master.server.key",
	)
}

func etcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x38\xe7\xe7\x15\xe7\xe7\xa4\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x9f\x5c\xc1\x1c\x46\x00\x00\x00")

func etcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterNamedConsoleCrt,
		"etc/origin/master/named/console.crt",
	)
}

func etcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := etcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc4\x20\x0c\x06\xe0\xf7\x9b\x22\x13\x64\x87\x3b\x1f\x7d\xb8\x82\x13\x48\xf9\xb5\x81\x12\x8b\x09\x05\xb1\xee\xde\x6f\x4e\xda\xba\xdc\xd9\x11\x31\xbe\xf6\x1b\x0e\x23\x0e\x4d\x8b\x54\x0e\xe8\x2e\x45\xf6\xec\x30\xfe\x5f\xd0\x74\x48\xf1\xd0\xd4\xda\x09\x8e\x18\xf4\x50\xf2\x2e\x5a\x69\xad\xcf\x1b\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func etcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterNamedConsoleKey,
		"etc/origin/master/named/console.key",
	)
}

func etcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := etcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func etcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterOpenshiftMasterKubeconfig,
		"etc/origin/master/openshift-master.kubeconfig",
	)
}

func etcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := etcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\x1a\x31\x10\x85\xef\xf9\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\xb2\x20\xca\xa1\x55\x0e\xae\xfd\x80\x11\xc6\x43\xc7\x5e\x5a\x12\xe5\xbf\x57\x66\xc9\x16\xaa\x36\xec\x86\x9c\xd6\x3b\x9e\x6f\x76\x3c\x7e\x6f\x9f\x2f\x94\x52\x4a\xdb\x35\x3d\x40\x12\x71\xd4\x7d\xa5\x37\x57\xfa\xb2\x8e\x2f\x29\xfa\x12\x31\x1c\xc8\x6d\x5f\xa3\x6b\x81\x27\x67\x33\x92\xee\xab\x6f\xbb\x98\x52\xcf\xfb\xa7\x52\x3a\xda\x15\x0a\x35\xe6\x07\x0e\xd5\x0a\x5f\x39\x62\xc4\x71\x16\xc8\x65\xbd\x4f\x7b\xb9\xfc\x3f\x77\x67\x7f\xdd\x0c\xa7\x35\x3b\xe2\x2a\xb6\x85\x6e\x47\x37\xe6\xba\x3b\x36\x78\xaa\x04\xd7\x94\x96\x9d\xd1\xec\x16\x9f\x63\x86\x18\xf6\x83\xd9\x8c\x22\xe5\x6d\x1b\x70\xcc\xe5\x6b\x5d\x26\x72\x8b\x08\xb1\xc1\xfc\x19\x7c\x0b\xc8\xb0\xbf\xe7\x00\x29\xf9\x63\xf6\xb8\xb7\x14\x73\x2b\x72\xb4\x80\x5b\x16\xe4\x0e\x2b\x96\xad\x11\xa4\x54\x09\x3a\xa1\xe5\x88\x9d\xc1\xfa\x06\x86\x14\x3d\xc5\xf9\x5b\x94\x95\x79\xb5\x42\xcc\xba\x7f\x10\x55\x4a\x27\xc8\x86\x1c\x9a\xdb\x38\xde\x56\x4a\x07\xfb\x1d\xe1\x50\xb7\xcd\x8e\x60\x5e\xf4\x7f\x14\x7e\x3c\x78\x7b\x69\xd6\x4d\x43\x07\xed\x4f\x8e\xe8\x3a\xf7\xb1\xf1\x0b\xb1\x50\xa6\x53\x7e\x99\x22\xc0\x65\x96\xe9\x5a\x60\xbd\xa9\xa9\x57\xd7\xed\x32\x7f\x82\xe6\x8b\x72\xe8\xab\x16\x13\xfd\x5b\x9a\x67\x17\xfc\x02\x9b\xf2\x04\x3f\x2a\xa4\x8c\xf3\xfb\x1b\xda\x60\xa3\x83\x9f\x20\x71\x25\x0e\x83\x10\xd8\xd9\x5c\xc6\xf8\xde\x92\x45\x78\x46\x30\x83\x0c\x36\x4c\xde\xb0\x4f\x6f\xb7\xd9\xeb\xf5\x7a\x2d\xeb\x7e\xd8\x18\x77\x3e\xdc\x3b\x93\x38\xbe\xbb\xde\x29\x0f\xc4\x4c\x27\x7c\x50\xba\x79\xe2\x08\xdd\x5a\xe6\xe5\x57\xfe\xcf\x46\x3f\x1d\x2b\xff\xa2\xac\x7e\x07\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func etcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterSchedulerJson,
		"etc/origin/master/scheduler.json",
	)
}

func etcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := etcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func etcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceSignerCrt,
		"etc/origin/master/service-signer.crt",
	)
}

func etcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := etcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x03\x21\x0c\x05\xd0\x7d\x4f\x91\x13\xe4\x0e\xad\xcb\xd9\x14\x3c\x81\x0c\xdf\xf0\x37\x29\xc4\x20\x88\xf5\xee\xf3\xf6\x96\x6f\x70\xb6\xc4\x85\xf5\x1e\x9f\x95\x18\xa2\xe5\xe7\x9d\xa6\x05\x91\xec\xbc\x5b\x62\x68\x45\x4c\xde\xa8\x34\xa7\x5b\x69\x7a\x61\xc9\x5f\x6a\x06\xdd\xe4\x9c\xd7\x13\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func etcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceSignerKey,
		"etc/origin/master/service-signer.key",
	)
}

func etcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func etcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceaccountsPrivateKey,
		"etc/origin/master/serviceaccounts.private.key",
	)
}

func etcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\xd4\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func etcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceaccountsPublicKey,
		"etc/origin/master/serviceaccounts.public.key",
	)
}

func etcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\xa5\x25\x19\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x0a\x35\x0a\x85\xa5\xf9\x25\xa9\x0a\xb5\xb5\x5c\x0a\x0a\xa9\x79\xc9\x45\x95\x05\xf8\x0d\x71\xcd\x4b\xc6\x63\x06\x20\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func etcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterSessionSecretsYaml,
		"etc/origin/master/session-secrets.yaml",
	)
}

func etcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := etcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeCaCrt,
		"etc/origin/node/ca.crt",
	)
}

func etcOriginNodeCaCrt() (*asset, error) {
	bytes, err := etcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeClientCaCrt,
		"etc/origin/node/client-ca.crt",
	)
}

func etcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := etcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func etcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeNodeKubeconfig,
		"etc/origin/node/node.kubeconfig",
	)
}

func etcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := etcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x0c\x72\xc9\x49\xf6\x06\x9b\xbd\x10\xc8\x21\xc8\x02\x6d\x81\x34\x35\x90\xa0\xf7\xb1\x34\x91\x06\xa6\x38\x2c\x39\x52\xaa\xa6\xf9\xef\x05\x25\xca\x4d\x62\x3b\x6d\x81\x9e\xec\xf9\x7a\xef\xe9\x71\x48\xf4\xfc\x99\x42\x64\x71\x06\xfa\xb3\xc5\x96\x5d\x65\x60\x2d\xd5\xa2\x25\xc5\x0a\x15\xcd\x02\x00\x9d\x13\x45\x65\x71\x31\x85\x00\xb1\x6c\xa8\xea\x2c\x85\x25\x5a\xdf\xe0\x72\xdb\x6d\x28\x38\x52\x8a\x4b\x96\x55\x19\x58\xb9\x44\x5b\x78\xa9\x0c\x9c\x9e\x2e\x00\x2c\x6e\xc8\xe6\x61\xf1\xe4\x62\xc3\xf7\x3a\xf6\x4a\xeb\xc5\x91\x53\x03\xe8\xf9\x50\xdd\x69\x10\x5b\x78\x8b\x8e\x0c\x9c\x6a\xe8\x28\x01\x3a\x6c\xc9\x40\x8b\x51\x29\x14\xd3\x64\x4a\x45\x8f\x25\x19\x48\x7a\x8a\x38\x44\xa5\x76\x11\x3d\x95\x89\x38\x21\x21\x3b\x0a\xa3\x8c\x02\x30\xd4\x59\x50\x01\x51\x31\x68\xfe\x3f\x61\xe6\x60\xd6\x54\x40\x51\x94\xe2\xee\xb9\xbe\x58\x91\x96\x2b\x09\x5c\xb3\x5b\x4d\xbd\xf9\x27\x37\x2c\x07\x6c\x6d\x1e\x7a\x7c\x04\x1f\xd8\x29\x9c\x14\x85\x95\xda\x52\x4f\xf6\xe2\x04\x96\x57\x53\xe7\x95\xed\xd2\xe0\xb5\xd4\xd7\xa9\xb2\xbc\xf4\x7c\x4b\xa1\xa7\x00\xdf\xe1\x4b\x27\x4a\xf0\xf4\x34\x22\x95\xd2\xb6\xe8\xaa\x59\xee\xce\xa1\x31\xe6\x16\x6b\x32\x89\x6b\xc6\xfd\x90\x32\x31\x45\xc9\xbb\x75\xb2\xee\x35\xe2\x38\xb4\xee\xac\x5d\x8b\xe5\x72\x30\x70\x69\x1f\x70\x88\x63\xcd\x72\x4f\x8e\x62\x5c\x07\xd9\xd0\xc4\x09\xd0\xa8\xfa\x77\xa4\x73\x08\xe0\x51\x1b\x03\x0d\xa1\xd5\xe6\xdb\xcf\xac\x04\x35\x70\x7e\xfe\xef\x2e\x93\x76\x25\x9d\xd5\xfb\xbb\xbb\xf5\x6d\xce\xb2\x63\x65\xb4\xff\x93\xc5\xe1\x96\x4a\x71\x55\x34\x70\xfe\x5f\xae\x2a\xb7\x24\x9d\xee\x0a\x67\xff\x8c\x85\xe9\xc8\xe7\x13\x09\x84\x15\xff\xa1\xca\x55\x1a\x1a\xfe\x86\xd6\x2c\xe9\xa8\xd6\x48\x65\x17\x58\x87\x74\x04\xf4\x75\xa7\xc7\x07\xee\xd9\x52\x4d\x95\x81\xb4\xc9\x63\xba\x17\xdb\xb5\xf4\x51\x3a\xa7\xbb\x85\x6c\x53\xb4\x1e\xb5\xef\xef\x5b\x06\x7b\x71\x05\xa6\xdd\xcb\x95\xf4\x99\x9f\x9c\x1d\x9e\x91\x1c\x85\x2c\xad\x74\x95\x0f\xd2\x73\x75\x04\x39\x35\x14\xaf\x3a\x7e\xc9\xd0\x63\x58\x59\xde\xcc\x2c\x87\x80\xd3\xeb\x72\x44\x9b\xdf\xf2\xa1\x89\x29\xdd\x48\xd4\x1b\xd2\x07\x09\xdb\x1d\xbd\x0f\x2c\xa3\xdf\x16\x63\xbc\x19\x67\xa6\xeb\x5f\x38\xa9\xa8\x98\x5f\xa4\xc5\xec\x76\x7e\x03\x12\xd4\x48\xbb\x78\xbe\x2d\x47\x1c\x3f\xec\xf7\xef\x80\xec\x7b\xfc\xb6\xc3\x47\x31\x5f\xba\xba\x8f\x94\x2d\x7d\x53\xd3\xec\xed\x9e\xb3\x3f\x02\x00\x00\xff\xff\x6a\xa2\x28\xec\x0b\x06\x00\x00")

func etcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsApiserverYaml,
		"etc/origin/node/pods/apiserver.yaml",
	)
}

func etcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcd\x4e\xdb\x40\x10\xbe\xe7\x29\x46\xb9\x3b\x6e\x25\x0e\x95\x25\x0e\x94\x54\xa5\x2a\xa1\x96\xa0\xa8\x37\x34\x59\x0f\xce\x28\xeb\x5d\x77\x67\x6c\x48\x29\xef\x5e\xad\xed\x84\x26\x38\xa8\x4d\x0e\xde\xf9\xfb\xe6\xe7\x9b\x5d\xac\xf9\x96\x82\xb0\x77\x19\xb4\xef\x27\x6b\x76\x45\x06\xb9\x2f\x26\x15\x29\x16\xa8\x98\x4d\x00\x1c\x56\x94\x81\xf1\x4e\x83\xb7\x96\x82\x0c\x3a\xa9\xd1\x50\x06\xeb\x66\x49\x89\x6c\x44\xa9\x9a\x00\x58\x5c\x92\x95\x18\x06\xe0\x6b\x72\xb2\xe2\x7b\x9d\xb1\x4f\x8d\xaf\x6a\xef\xc8\xe9\x21\xd4\x2b\xbf\xce\x98\xd4\x16\x1d\x65\x30\xd5\xd0\xd0\x74\x22\x35\x99\x08\x1a\xad\xc8\x8e\x42\x97\x22\x01\x0c\xe5\x90\x2c\x01\x51\x0c\x3a\x9c\x2b\x14\xa5\x30\x08\x87\xf9\x12\x48\x12\xe3\xdd\x3d\x97\xa7\x29\xa9\x49\x7d\xe0\x92\x5d\xda\xc7\x0c\x9f\xc1\x61\xb6\xc1\xca\xee\x82\x2c\x8b\x92\x3b\x5d\xa9\xd6\x92\xa5\xe9\xbb\x59\xf7\xcf\x3e\x9c\x9c\x9c\x0c\x3e\x4f\x4f\x50\x07\x76\x0a\xd3\x24\xb1\xbe\xb4\xd4\x92\x3d\x9d\xc2\xec\xbc\x47\x3b\xb7\x4d\x04\xbf\xf4\xe5\x65\xb4\x44\xf5\x50\xd9\x02\x1d\x96\x14\xe0\x37\xfc\x6c\xbc\x12\x3c\x3f\x77\x88\xc6\x57\x15\xba\x62\xdb\xe2\x6e\x52\x9d\x4c\xae\xdd\x1a\x7a\x8e\xbe\x7e\xff\xf8\xe9\x6e\x71\xf6\xe3\x2e\x9f\xdf\xdd\x7e\xbb\xbc\xee\x8c\x00\x2d\xda\x86\xb2\x58\xdb\x6c\x4e\x81\x5b\x2a\x66\x0b\x7c\x9c\xa3\xe2\x9c\x65\x2d\x39\x85\xdb\x45\x57\x62\x3f\xda\x6b\x0a\x2d\x1b\x3a\x2c\x85\x2b\x2c\x07\x94\xa1\x9b\x2f\x51\x23\xdb\x26\xf2\x48\xd8\x68\x50\xde\x58\x9b\x7b\xcb\x66\x93\xc1\x99\x7d\xc0\x4d\x4f\x83\xe5\x96\x1c\x89\xe4\xc1\x2f\x29\x1b\x6a\x8d\xb3\xfd\x4c\xba\x15\x01\x6a\xd4\x55\x06\x2b\x42\xab\xab\x5f\x2f\x5a\x1f\x34\x83\xdd\xe0\xe3\x4f\xcc\x8a\xe2\x10\x2e\x6e\x6e\xf2\xbe\xf3\xb1\xc5\x05\x10\x32\x4d\x60\xdd\xc4\xb2\xe9\x71\x97\xa9\x0e\xdc\xb2\xa5\x92\x8a\x0c\xe2\xce\x75\xea\xd6\xdb\xa6\xa2\x85\x6f\x9c\xee\xd6\xac\x8a\x52\xde\x55\x35\xb2\x3d\x03\x5a\x9f\x7a\x6f\x95\xde\x0e\x37\xd6\x37\x45\x1d\x7c\xcb\xc5\x31\x94\xe8\x91\x6c\x5d\x8e\xa0\xbd\xdc\x8f\x34\x50\xc9\xa2\x81\x49\x66\xc5\x3e\xa0\x70\xe9\x50\x9b\x40\x09\x57\x71\x90\x23\x58\x8d\x84\xd4\xf2\x92\x1e\xc9\xa4\xf1\x82\x07\x47\x4a\xd2\x1d\x2d\x69\x52\xdb\xa6\x64\x27\x03\x6a\x1f\x18\x7c\x8d\x25\x6a\xf7\x96\x5c\x78\xd1\x1b\xbf\xdb\xa8\xbd\xec\xaf\x31\x56\x5e\xf4\x8a\xf4\xc1\x87\xf5\x6e\xf6\x75\x60\xdf\xb1\x64\x51\xe4\xaa\x2f\xbb\x7b\x63\x12\xe7\x0b\x4a\x4c\x60\x65\x83\xf1\x6a\xf6\x1c\x0d\xef\x41\x84\xea\x5a\x98\xfc\xbd\x3d\xc7\x78\x1a\x67\xe9\x5f\x50\xf6\xe8\x1a\xc1\x3a\xe4\xea\x4d\xcc\x23\xa4\x4d\xde\x64\xec\x28\xe2\x7f\x50\x37\x4e\xc8\x9f\x00\x00\x00\xff\xff\xdc\x57\x94\xd6\x15\x06\x00\x00")

func etcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsControllersYaml,
		"etc/origin/node/pods/controllers.yaml",
	)
}

func etcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4d\x6f\x22\x39\x10\xbd\xf3\x2b\x2c\x2e\x39\xb9\x11\xc9\x6e\x76\xe3\x5b\x04\x91\x36\xd2\x86\x41\x4a\x34\xd7\x51\x61\x57\x68\x0b\x77\xb9\xc7\xae\xee\x04\x25\xfc\xf7\x91\xdd\xdd\xd0\xf9\xe0\x00\xd8\xaf\xaa\x9e\xeb\x3d\x97\x81\xda\xfe\xc4\x10\xad\x27\x25\xda\xf9\x64\x67\xc9\x28\xb1\xf6\x66\x52\x21\x83\x01\x06\x35\x11\x02\x88\x3c\x03\x5b\x4f\x31\x6d\x85\x88\xba\x44\xd3\x38\x0c\x05\xb8\xba\x84\x62\xd7\x6c\x30\x10\x32\xc6\xc2\xfa\x99\x0e\x96\xad\x06\x27\x6b\x6f\x94\xb8\xb8\x98\x08\xe1\x60\x83\xae\x2f\xf6\x35\x52\x2c\xed\x33\xe7\x5c\x5f\xd5\x9e\x90\x58\x09\x64\x6d\xbe\x4b\x20\x0e\xde\xc9\xda\x01\xa1\x12\x17\x1c\x1a\x4c\x8c\x04\x15\x2a\x51\x41\x64\x0c\xb2\x2f\x4d\x58\xac\x41\xa3\x12\xa9\x23\x19\xf7\x91\xb1\x9a\xc4\x1a\x75\x3a\x3a\x51\x81\x25\x0c\xb9\x11\x29\x20\x6c\xfb\x96\xa4\x78\xcf\xbf\x42\x44\x64\x21\xa1\xdf\x14\x62\x86\xac\xd3\xc7\xe4\xaf\x42\x7b\x7a\xee\x63\xf8\x8a\xfa\xd4\xb2\xf6\x55\x05\x64\x06\xb6\xd9\xc6\xd2\x2c\x96\xfd\x4e\xea\xbc\x40\x6a\x87\x78\xd7\xfc\xdd\xd3\x62\xb9\x78\xfa\xff\xd7\xed\xfa\xbe\x27\x6d\xc1\x35\xa8\xc4\xf4\x6a\x9a\x01\x5b\xc1\x16\x95\x78\x7b\x13\xc5\xc2\xd3\xb3\xdd\x16\xf7\x09\x89\xc5\x43\x96\x7d\xc7\xda\x88\x77\xf1\xbb\xf1\x8c\xe2\x70\x38\x95\xac\x1b\xe7\xd6\xde\x59\xbd\x57\xe2\xd6\xbd\xc0\x3e\xe6\x98\xb3\x2d\x12\xc6\xb8\x0e\x7e\x83\x6a\xa4\x63\x58\x7f\xd2\xd1\xf5\x9a\x34\x6a\x76\x23\x44\x4a\x0d\x1a\x03\x8f\xa0\x93\x4f\x1a\x0a\xfd\x21\x24\xe5\xd9\xdc\x1a\x31\x7c\xc9\xde\xe1\xfe\x7c\xf2\xc7\xa0\x94\x48\xa6\xf6\x96\x38\x8e\xd0\x92\xb9\x8e\x6a\x36\x4b\xb6\xdd\xbd\x72\x80\xe2\x3f\x1f\x39\x59\x2e\x0e\x07\x75\x79\xf5\xcf\xcd\x58\x5d\x4f\x30\xae\x47\x70\x5c\xf6\x80\x25\xcb\x16\xdc\x12\x1d\xec\x1f\x51\x7b\x32\x51\x89\xbf\xfe\xce\xd1\xee\x16\x8f\x33\x10\x51\x37\xc1\xf2\x7e\xe1\x89\xf1\x95\x07\x0f\xeb\x60\x5b\xeb\x70\x8b\x46\x89\x34\xbc\x19\x6e\xbd\x6b\x2a\x7c\xf0\x0d\xf1\x71\x04\xab\xb4\x5b\x03\x97\xea\xa4\xba\xe7\x38\x9d\x24\x75\x1e\x84\x1e\x0f\x08\xe6\x07\xb9\xfd\x88\xf9\x23\x4f\x0b\x61\xe6\xec\xe6\x0c\x57\x7a\xdf\x19\x7d\xf1\x61\x67\x69\xbb\xb4\xe1\x6b\x4d\xe9\x23\xaf\x90\x53\xca\xf1\x18\x43\x71\x98\xaf\xe9\xca\x13\x4e\x3b\xac\x1b\x52\x75\x34\x27\x62\x68\xfb\xd7\xd6\xb5\x36\xbf\xfe\xb7\xb8\xbe\x2a\xe6\x97\x37\xc5\xfc\xba\x37\x0d\x82\x2e\x71\x94\x73\xba\xb6\xe5\xea\x71\x74\x73\x93\x6c\xa5\xcf\x0e\x3b\x88\x71\x95\x75\x74\x4f\x5c\x92\x37\x28\x87\xff\x9d\xc9\xe0\x6f\xff\xce\x93\x82\xec\xc7\x70\x23\xdf\x78\xfc\x9d\xc3\x67\x2b\xbf\xb8\xfa\xd9\xd3\x3f\x01\x00\x00\xff\xff\xd0\x60\x41\x6b\x56\x05\x00\x00")

func etcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsEtcdYaml,
		"etc/origin/node/pods/etcd.yaml",
	)
}

func etcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsSyncYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\xce\xdb\x30\x0c\x84\x77\x3f\x05\xb7\x4c\xb6\xd1\x55\x5b\x91\xa9\x43\x5b\x03\x05\xba\x06\x8a\xcc\x38\x44\x24\x52\x95\x28\xa7\x46\x9a\x77\x2f\x64\xbb\x01\x02\x14\xff\xc8\xe3\x81\xdf\x1d\x6d\xa4\x9f\x98\x32\x09\x1b\x98\x3f\x35\x37\xe2\xd1\xc0\x20\x63\x13\x50\xed\x68\xd5\x9a\x06\x80\x6d\x40\x03\x79\x61\xb7\x0f\x39\x5a\x87\x06\x6e\xe5\x8c\x6d\x5e\xb2\x62\x68\x00\xbc\x3d\xa3\xcf\xd5\x0f\x20\x11\x39\x5f\xe9\xa2\x1d\x49\xef\x24\x44\x61\x64\x35\xe0\x84\x35\x89\xf7\x98\xf2\xff\x7c\xeb\xb2\x8d\xde\x32\x1a\x38\x68\x2a\x78\x68\x72\x44\x57\x8f\xd6\xad\x25\xc6\xb4\x22\x5a\xa0\x60\x27\x34\xf0\x78\x40\x77\x14\xbe\xd0\xd4\x7d\xa9\x4a\xee\x7e\x2c\xec\xe0\x0f\xfc\x2a\xa2\x08\xcf\xe7\xca\x59\xcd\x43\xf1\x7e\x10\x4f\x6e\x31\xf0\xd9\xdf\xed\xb2\x65\x78\x6b\x07\x90\xd1\x95\x44\xba\x1c\x85\x15\x7f\xeb\xd6\x07\x20\x26\x9a\xc9\xe3\x84\xa3\x81\x1a\x6c\x95\x67\xf1\x25\xe0\x57\x29\xac\x7b\xf1\x16\x42\x9d\x06\xab\x57\x03\xfd\xa9\x7e\xb0\x3f\x49\xd1\xfd\xca\xc6\x0a\x36\x2b\xa6\xd6\x79\x29\x63\x1b\x93\xcc\x34\x62\xda\x1d\x09\xed\xf8\x9d\xfd\xf2\xa2\x5c\x25\xeb\x37\xd4\xbb\xa4\xdb\x4b\xdb\xb8\xfb\x23\xaa\x61\xe5\xfd\x4b\xba\xb1\x51\x5d\x2f\x89\x26\xe2\x7e\x05\xbd\x71\x3e\xca\xf1\x37\x00\x00\xff\xff\x33\x9e\x4e\x27\x13\x02\x00\x00")

func etcOriginNodePodsSyncYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsSyncYaml,
		"etc/origin/node/pods/sync.yaml",
	)
}

func etcOriginNodePodsSyncYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsSyncYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/sync.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func etcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := etcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x6d\x73\xdb\x38\x0e\xfe\x5c\xfe\x0a\x54\xce\x5e\xda\x4c\x29\x25\x69\xae\xd7\x73\xeb\xde\xe4\xc5\xed\x66\x2e\xdb\x64\x92\xdc\x76\x6e\xba\x9d\x0c\x2d\x42\x16\x6b\x89\xd4\x92\x90\x53\x37\xf5\x7f\xdf\x21\x65\xf9\x2d\x6e\xda\x99\xcd\x07\x5b\x21\x41\x00\x04\xf0\x3c\x80\xdc\x79\x9c\x0c\x94\x4e\x06\xc2\xe5\xc0\xf1\x0b\x63\x1d\xb8\x3e\x3f\x39\xef\x42\x82\x94\x26\x52\xbb\x52\xb8\x3f\x63\x99\x18\xab\x86\x4a\xf3\xba\x72\x64\x51\x94\x5c\x6a\x17\xa7\x46\x67\xa0\x1c\xa4\xb5\xb5\xa8\xa9\x98\x40\x2e\xac\x4c\x8d\x44\xf9\x0a\x14\xb1\x0e\x54\xd6\x0c\xc4\xa0\x98\x80\xcb\x4d\x5d\x48\xbd\x4d\x30\x40\xc6\xae\xfa\x97\xbf\x9f\x1e\xf7\x6f\xae\xff\x7f\xd1\xef\x35\x9a\x99\xca\xe0\x23\xf0\x0c\xa2\x60\xd8\x4d\x9c\xd7\xae\x86\x89\x20\x53\xaa\x94\x9b\x0a\xb5\xcb\x55\x46\x5c\x1b\x89\x11\x7c\x7a\x05\x94\xa3\x66\x00\x00\x2b\xea\xd6\xe5\x59\xa6\xfc\xa5\x2c\x96\x66\x8c\x60\x71\xa8\x1c\xd9\x09\xa4\x68\x49\x65\x2a\x15\x84\xe0\x4c\x46\x85\xd2\x23\xc8\xac\x29\x41\x9a\x74\x84\x96\xd5\x3a\x2c\x35\x61\x08\x4b\x89\x3f\xe3\x62\x99\xb4\x4a\x62\x91\xa6\xe8\x5c\x6c\x51\xe6\x82\xe2\xd4\x94\x49\xf3\xc8\x53\x11\xa7\x96\x98\xbf\xd4\x63\x18\x5a\xac\x20\x19\x0b\x9b\x14\x6a\x30\xd3\xd5\xe8\xcd\x1c\x89\xc1\xfc\x22\x6e\xe2\x08\xcb\x94\x0a\x70\x64\xaa\x99\x1f\xb1\x43\x3b\x56\x29\x32\x80\x72\x94\xb9\xf8\x4b\xe6\x7c\x94\x12\x89\xe3\x44\x2a\x37\x4a\xc4\xd7\xda\x62\x62\xd1\x99\xda\xa6\xc8\x2b\x61\x69\x8f\x01\x60\x9a\x1b\xd8\x7e\x58\x0c\xee\x79\x05\x5e\x3d\x0c\x6d\xf5\x67\x6d\x48\x00\xec\xc2\xee\x36\xbc\x79\xb3\x70\xd6\xbb\x61\x6a\x4d\xeb\x27\x19\x80\x45\x47\xc6\x62\x6a\x34\xf0\xcb\x0d\xfb\xa9\x20\x78\xb3\x1c\x4e\x29\xb0\x34\x3a\xfe\xec\x8c\x86\xd7\xaf\xb7\xfb\xe7\x6f\xb7\xd9\x1d\x03\x88\x0a\x33\xe4\xd2\xaa\x31\xda\xa8\x0b\xd1\x67\x53\x5b\x2d\x0a\x19\xb1\x29\xeb\x9f\xbf\x5d\x0b\x94\xb0\xb4\x1e\xa9\x26\xe1\x99\x2a\x70\x56\x76\x30\x40\x48\xac\x31\x94\xc4\x6d\x26\x43\x6d\x05\xd3\xcf\x60\x50\x13\x88\x94\x6a\x51\x14\x13\xd0\x88\x12\x14\x81\xd2\xac\xb3\xb8\x44\x53\xa3\x40\xb9\xd0\x23\x07\x64\x20\x27\xaa\x5c\x37\x49\x86\x8a\xf2\x7a\x10\x52\x3f\xaa\x07\x68\x35\x12\xba\xe5\x47\xe5\x5c\x8d\x2e\x39\xf8\xe7\xc1\xcb\x7f\xb1\x93\x8b\xc3\xeb\x5f\x7b\x6b\x5a\x5b\xa7\x58\x39\x92\xca\x02\xaf\x60\x2b\xc8\xb1\x81\x70\xf8\xe2\x00\xb8\x84\xd7\xaf\x5f\xc3\xdd\x1d\xc4\xc7\x8d\xdb\xa7\xa5\x18\xa2\x6b\xbe\x2e\xea\xa2\xb8\xc2\xd4\x22\xc1\x37\x38\x0a\x27\xfa\xda\x43\x10\xa6\x53\x78\xb3\x75\x17\x54\x4d\x97\x2f\xcc\xd2\xbc\x34\x12\x76\x5f\xec\xee\xc2\xc6\xfd\x39\x05\xa4\x46\x3b\x25\xd1\x42\x26\x52\xf2\x97\xa7\x7b\x75\xe7\x52\xa7\xf6\x92\xa2\xd6\xbb\xdf\x23\x02\xcf\x02\xc2\x92\x22\x65\xf4\x03\xc7\x5f\x2d\x59\xab\xa9\xb6\x08\x8e\xac\x20\x1c\x4e\x20\x33\xd6\x17\x97\xfa\x8a\x0e\x54\xc6\x3a\x21\x47\x28\x37\x81\x0b\x29\x95\x9b\xa0\x35\x87\xce\x03\xfe\x7f\xfb\x06\x64\x6b\xfc\x2e\x76\x96\x44\xd7\x0c\x36\xa8\x91\x98\x89\xba\x20\xf7\x53\xa8\xf1\xe7\xbe\x8f\x99\xb0\xeb\xcb\x38\x78\x12\x1d\x9d\x9f\x5f\x5f\x5d\x5f\x1e\x5e\xdc\x1c\x9f\xbf\x7f\x7b\xfa\xee\xe6\xfd\xe1\x6f\xfd\x9e\xe7\x41\xde\xe4\x8d\x97\xc2\x11\xda\xa8\x35\xba\x60\xcf\xad\xbb\x65\x72\x9c\x06\xf2\x64\xcc\xa1\x04\xae\x80\x23\x44\xae\x73\xd2\x3f\xfa\xdf\xbb\x9b\xb3\xf3\x77\x67\xfd\xdf\xfb\x67\xbd\xfd\xf5\x85\xa5\xc2\x3b\x2e\x6a\x6f\xe7\xcc\x0c\xcf\x70\x8c\x45\xfc\xbe\xa9\xb3\x4e\x04\x3f\x65\xd6\x27\x52\x3a\x8f\x2d\xa0\xb4\x7a\xf6\xf2\xe0\xe0\xe0\x15\x48\xc3\x1e\x55\xd6\x90\xe9\x6d\xdd\x49\x47\xbf\xfc\xf2\x6c\x67\xca\x1e\x55\xc6\x52\xb3\xd0\xe9\xec\x3c\x9b\xb2\x47\xaa\x22\x31\x28\xd0\x01\x3f\x84\xf3\xab\x9b\xb7\xa7\x97\xfd\x0f\x87\x67\x67\x37\x87\x67\x67\xe7\x1f\x02\x68\x82\x12\xe0\xa5\x27\x05\x42\xe0\xbc\xf9\x7e\xdf\xff\xe0\x17\xdb\x6d\x2e\xbd\x6a\xd8\x0a\x9f\xfc\x33\x1c\x1e\x1f\xf7\x2f\xae\x99\x34\x1a\x19\x6b\x8d\x70\x27\xc6\x08\xeb\xb1\x6c\x77\x19\xb3\x25\x70\x9b\x35\x97\xf6\xb9\x4a\x76\x9a\xe7\x19\xa0\x9b\x6c\x24\x3b\x6c\x01\xe9\xe5\xed\xb4\x30\xb5\xac\xac\x19\xfb\x6a\x67\x0b\x5a\xdc\xb4\xdd\xd4\x5e\xd3\x69\xe7\x1c\x79\x07\xf1\x09\x7a\x7e\x94\xf1\x6f\xc1\xd4\xb1\x3f\x72\x31\x3b\xe2\x73\x15\x32\x46\x42\x69\xb4\x57\x0d\x2b\xc2\x37\xb8\x22\xab\xf4\x10\xa6\x0d\x8d\xb2\x0e\xdc\xe6\xa8\x1b\x0a\xf5\xeb\x3e\x47\x70\x2b\xc4\x10\x35\x81\xd0\x12\x34\xd2\xad\xb1\x23\xa8\x49\x15\x8a\x14\x3a\x18\x1a\x0f\x41\x4d\x06\xac\x48\xd1\x23\x56\x06\x5c\xc7\xac\x03\x2a\x9b\x1f\xb6\xb5\x76\x30\xc0\xcc\x58\x04\xa9\x9d\x67\x86\x91\x36\xb7\xda\x13\x27\xe5\x38\xb3\x84\x80\x5a\x42\x5d\xc1\xad\xa2\x1c\xb0\xac\x68\xe2\x31\xaf\xf4\x90\xdd\xe6\x9e\xbc\x3f\x7e\x84\xad\x27\xb9\x71\xa4\x45\x89\xc0\xe5\x53\xe8\xf5\x20\x8a\xe0\xd3\x27\x5f\x35\xe0\x0a\xc4\x0a\xf6\xfc\xb3\xcf\x5d\x61\x86\x43\xb4\xc0\x09\x9a\xf0\xf3\x70\xb1\xba\x8a\x5d\x0e\x91\xad\xb5\xf6\x77\x9c\xad\x79\xcf\x9b\xe8\x44\x33\x5b\x8f\x67\x4d\x04\xaa\xba\x28\x36\x70\xed\xd5\xec\xe0\x74\x1a\x2a\x16\xe0\x41\x73\xb7\x42\x85\x90\xfa\x82\x57\x5e\x41\xa3\x96\x0c\xf8\x80\x46\xbe\x85\x35\xce\xef\x36\x85\x37\xb3\x6d\x6b\x0d\x9c\x57\x56\x8d\x55\x81\x43\x8f\x51\xee\x2b\x8d\xb7\x89\xf0\xb1\x00\x3e\x0e\xc5\xd4\x0d\x1f\x5f\x1f\x74\xf5\xe1\x98\x64\x4a\x2b\x97\xa3\x84\xef\x06\x07\x6c\xda\xdd\xfa\x4f\xc4\x58\x5d\x49\x41\xc8\x53\xc1\xc9\xd6\x8e\x1a\x5a\xda\xf6\x69\xf1\x3d\x17\x2d\xec\xbd\x78\x19\xbf\x78\x1e\xef\xed\xff\x3b\xde\x7b\xb1\xbd\x5a\xcf\x3e\xdb\x61\xf0\x28\xc6\xa1\x8e\x17\xf4\x63\x03\xff\x3c\x81\x9d\x46\x4b\x17\x9e\xc6\x3b\x9d\x3f\xf6\xda\xde\xba\x48\xfe\xd3\x96\x61\x56\x01\xb6\x98\x09\x9b\x85\xd8\xf7\xdd\x06\xac\x7f\xdf\x46\x70\xdb\x7f\x2c\x6b\xed\xc0\xaf\x87\xc7\xff\xf5\x9d\xb1\x9a\xc0\xda\xa6\x4f\xef\xc0\x18\xf2\x7d\xab\x5a\x5e\x77\xa6\xe9\x9d\x73\x77\x67\x63\x4b\x80\x41\xed\x1d\x0d\xa3\x05\x82\x9b\xe8\x94\x75\xa0\x99\x8b\x1c\x12\xdc\xaa\xa2\x00\x6d\x08\x32\xa1\x8a\x80\x49\xbf\xea\x45\x9b\x0b\x37\x2a\x0a\x31\xc0\xc2\x41\x6a\xac\xc5\x94\x8a\x49\xcc\xd2\xea\x87\x57\xb9\x2f\xb0\xc9\x77\xc6\xee\xee\xb8\x87\xf6\x56\xdc\xff\x42\x56\xc4\xa7\xee\x12\x53\x33\x46\x3b\xf9\x61\x7d\xcd\x89\xc5\xb6\x27\x8c\x5e\x02\xf4\xd3\x88\x75\xc0\x91\x47\x01\x0c\x67\xb7\x1a\x88\x74\x54\x57\x81\x5e\x2f\xb3\xd5\x76\x98\xec\x30\xc2\xb2\x3a\x12\xe9\xe8\x44\xd9\xde\xea\xde\xec\x5c\xc3\xb6\x5b\x4b\x72\x3f\x89\xee\x3e\xa5\xf2\x28\xe8\x98\x01\x7c\x8e\xcf\x19\xbb\xac\x00\xf4\x3e\x26\xff\x60\xd0\xe2\x72\xb5\x44\xbb\xf7\x97\x36\x09\xaf\x52\x7e\x37\xb9\x91\x82\x44\x72\x63\xea\xb9\xea\xe5\x4b\x75\x13\x53\x53\xf7\x6b\xd8\xfa\xc1\x5d\x9a\xe3\x83\xc2\x0c\x7c\xc8\x43\x2b\x6f\xf2\xd8\x48\x1c\x15\x66\xf0\xde\x93\x6b\x2b\x29\xd1\x91\xd2\xc2\x73\x7a\xcf\x5b\x99\x45\x36\x96\x03\x88\xa4\xb9\xd5\x85\x11\x32\x7a\x38\xed\xcd\x09\x68\xa5\x51\x7a\x5c\x44\xb0\xf5\xa4\x70\x2b\xb7\x78\xca\xda\xfc\xef\xb7\x63\xd0\x0f\x38\x3c\x08\x05\xa2\xd2\xa2\x72\xb9\xa1\x9f\x25\xef\xa6\x49\xfa\xc0\xfc\xfd\xf4\xfa\x7a\xeb\xce\x9f\xe6\x5b\xcb\xe5\xd8\x5d\xfd\xaf\x49\x14\x47\xe8\x5f\x1f\x9f\x1c\x5f\x9f\xdd\x1c\x5e\x9c\xf6\xa2\xe7\xd1\x77\xf2\xb7\xe2\x6c\x90\xf1\x5a\xc2\xcb\xce\xec\xda\x6d\xb8\x56\xc2\xb9\x94\xa9\x60\x8e\xfb\x12\xe2\x1e\x0f\xab\x50\xd1\x78\x3b\x13\x08\x5d\x75\x09\x8f\xb3\x65\xa5\x15\x29\x51\xf0\xb4\x99\xf5\x20\x9a\xa5\x62\x37\xfc\xf5\x5a\xe2\x5c\x59\xed\xee\x3f\x7f\xb9\xfb\x6c\x79\x69\x6f\xa3\xe0\xde\x7d\xc1\xfd\x8d\x82\xfb\x41\x30\xda\xec\x12\x27\x33\x42\x1d\xc2\xc2\x33\x63\x79\x18\x91\xd6\x44\x85\x1c\xfb\x17\x7c\x87\xbc\x42\xb4\xbc\xb6\x85\x83\x0d\x9c\x1f\xcc\x30\x56\x8e\xef\x47\xc9\xcf\x74\x2b\x6b\xf3\xa9\x6f\x5d\xb2\xdd\x58\x21\x9e\x95\xc9\x7e\x4d\xfd\xcf\xd4\x39\x86\xca\x8c\x02\xff\xfa\x39\x69\x3a\x65\xac\xd3\xb2\xbf\xd7\x5b\x96\xa8\x3d\xba\x16\x4d\xd0\xf7\x6d\x6b\x0a\x5e\x15\x42\x23\x54\xd6\x84\x57\x60\xa3\x21\x53\xd6\x51\xe8\x4d\x8c\x6a\x8d\x92\x0b\x59\x2e\xf6\x37\x9f\xf7\xe8\xd4\x86\xb0\x0b\x9b\x66\x79\x48\xad\x70\x39\x14\xc6\x54\x0e\x6a\x4d\xaa\x68\x3b\x92\x72\x50\x57\x6c\xf1\x86\x8e\xda\xcf\xcc\x1b\x95\xcc\x5f\xd8\xd7\xdf\xe7\x1f\x12\x86\x7f\x78\xcf\xa4\x72\x62\x50\x84\xe6\xe2\x26\xae\x30\x43\x70\x4a\xa7\x61\xa8\x2c\x85\xf6\x03\x17\xfa\x8e\x43\xb9\x17\xa1\xdc\x9a\x7a\x98\x43\xfb\x43\xc2\x92\xbd\x46\x0f\xb6\x5a\x36\x7a\x64\xaa\x7b\xdb\x4b\x73\x7d\xf3\xb3\x82\xef\x98\xeb\x5d\x77\x36\xa4\x08\x59\x2a\xbd\xd2\x78\x17\x47\x92\xb6\xcb\xfe\x15\x00\x00\xff\xff\x6a\xec\x13\x77\x86\x13\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x6d\x6f\xdb\x36\x10\xfe\xce\x5f\x71\xb5\x8b\x65\x2b\x26\x29\xe9\xba\xac\x4b\x93\x00\x79\x71\xbb\xa2\x69\x1d\x24\x59\x87\x62\x18\x02\x8a\x3c\x59\xac\x29\x52\x3d\x9e\xdc\x7a\xae\xff\xfb\x40\x29\x7e\x69\xe2\x35\x1d\xf6\xc9\x32\x79\x7c\xee\xb9\xe3\xdd\x3d\xec\x3f\xc8\x72\xe3\xb2\x5c\x86\x12\x12\xfc\x24\x44\x1f\xae\x86\xa7\xc3\x3d\xc8\x90\x55\xa6\x5d\xa8\x64\xf8\x90\xea\xcc\x93\x19\x19\x97\x34\x75\x60\x42\x59\x25\xda\x85\x54\x79\x57\x80\x09\xa0\x1a\x22\x74\x6c\xa7\x50\x4a\xd2\xca\x6b\xd4\xcf\xc0\xb0\xe8\x43\x4d\x3e\x97\xb9\x9d\x42\x28\x7d\x63\xb5\xdb\x62\xc8\x51\x88\xcb\xc1\xc5\xdb\x97\x27\x83\xeb\xab\x77\xe7\x83\x83\x0e\x59\x98\x02\xfe\x84\xa4\x80\x5e\xeb\x38\x4c\x43\x44\x37\xa3\x4c\xb2\xaf\x8c\x4a\x7c\x8d\x2e\x94\xa6\xe0\xc4\x79\x8d\x3d\xf8\xeb\x19\x70\x89\x4e\x00\x00\x7c\x01\x77\xdb\x5e\x14\x26\x06\x45\x58\xf9\x09\x02\xe1\xc8\x04\xa6\x29\x28\x24\x36\x85\x51\x92\x11\x82\x2f\xd8\x1a\x37\x86\x82\x7c\x05\xda\xab\x31\x92\x68\x5c\xbb\xd4\xa5\xa1\x5d\xca\xe2\x99\x90\xea\x6c\x01\x92\x4a\xa5\x30\x84\x94\x50\x97\x92\x53\xe5\xab\xac\xfb\x4c\x94\x4c\x15\xb1\x88\x41\x3d\x80\x11\x61\x0d\xd9\x44\x52\x66\x4d\x7e\x83\xd5\xe1\x16\x81\x65\xbe\x0c\x24\x4c\x03\x63\xa5\xd8\x42\x60\x5f\xdf\xf0\x48\x03\xd2\xc4\x28\x14\x00\xd5\xb8\x08\xe9\xa7\x22\xc4\x2c\x65\x1a\x27\x99\x36\x61\x9c\xc9\xbf\x1b\xc2\x8c\x30\xf8\x86\x14\x26\xb5\x24\xde\x11\x00\xa8\x4a\x0f\x5b\x5f\x37\x83\x3b\xac\x20\xc2\xc3\x88\xea\x0f\x8d\x67\x09\xb0\x0d\xdb\x5b\x70\x78\xb8\x22\x1b\x69\xf8\xc6\xf1\xed\x93\x02\x80\x30\xb0\x27\x54\xde\x41\x72\x71\x67\x7f\x36\x4b\xc0\x14\x80\x1f\x20\x1d\x7c\x62\x92\xe9\x85\xb7\x08\x3d\xe3\x0a\x92\x3d\x98\xcf\x05\x80\x92\x0c\x87\xeb\xf9\xd6\x12\x2b\xef\xd2\xf7\xc1\x3b\xd8\xdf\xdf\x1a\x0c\x9f\x6f\x89\x99\x00\xe8\x59\x3f\x4a\x34\x99\x09\x52\x6f\x0f\x7a\xef\x7d\x43\x4e\x5a\xdd\x13\x73\x31\x18\x3e\x6f\x5d\xa1\xd3\x1d\xe8\x7a\x52\x25\xf1\xed\xac\x76\xc5\x51\x18\x8b\x37\x25\x0a\x39\x42\x46\xde\x73\x96\x2e\x6e\xbd\xad\xc3\x96\xc5\x8f\x90\x37\x0c\x52\x71\x23\xad\x9d\x82\x43\xd4\x60\x18\x8c\x13\xfd\x55\xc0\x5d\x3d\x03\x97\xd2\x8d\x03\xb0\x87\x92\xb9\x0e\x7b\x59\x36\x32\x5c\x36\x79\x5b\x26\xe3\x26\x47\x72\xc8\x18\xd6\x3f\x4d\x08\x0d\x86\xec\xc9\xcf\x4f\x9e\xfe\x22\x4e\xcf\x8f\xae\x7e\x3b\xb8\x85\xba\x20\x25\xaa\xb1\x36\x04\x49\x0d\x0f\x5b\x3b\x91\xcb\x80\xbb\x4f\x20\xd1\xb0\xbf\xbf\x0f\xb3\x19\xa4\x27\x1d\xed\x97\x95\x1c\x61\xe8\x7e\xce\x1b\x6b\x2f\x51\x11\x32\x7c\x86\xe3\xf6\xc4\xc0\xc5\x76\x85\xf9\x1c\x0e\x1f\xce\x5a\xa8\xf9\x7a\xc0\x42\x95\x95\xd7\xb0\xbd\xbb\xbd\x0d\x1b\xf7\x45\x57\x67\xc7\xc3\xe1\xd5\xe5\xd5\xc5\xd1\xf9\xf5\xc9\xf0\xcd\xf3\x97\x2f\xae\xdf\x1c\xbd\x1e\x1c\xc4\x4e\x4d\x3a\xeb\x24\x52\x5a\xbb\xf8\xf9\x7c\x59\x57\xab\x56\x7f\x38\x5b\xef\xe4\x79\xdb\xe9\x42\x04\xd4\x90\x18\x48\x10\x7a\xa1\x7f\x3a\x38\xfe\xfd\xc5\xf5\xd9\xf0\xc5\xd9\xe0\xed\xe0\xec\xe0\xf1\xed\x85\xb5\xc8\x4f\x6c\x13\x18\xe9\xcc\x8f\xce\x70\x82\x36\x7d\xd3\x05\xda\xef\xc1\x37\xb9\xa5\x0a\x12\x2a\x3a\x5b\x64\xa5\xb3\x47\xdd\xf7\xcd\x45\x54\x32\x82\x67\x8f\xc4\xdd\xd4\x7f\x91\xd9\xef\xdf\xc9\xca\xbe\x96\x14\x4a\x69\x97\xd4\x22\x95\x63\xef\x39\x30\xc9\xfa\x55\x93\x63\xc7\xe4\x87\xf6\x1e\xd6\xbd\x44\x2a\x59\xbe\xb0\x4c\xc7\x4b\xd3\xfb\xbc\x9e\x20\xf1\x51\x38\x9e\x32\x86\x55\x42\x56\x23\x2f\x7c\x49\xa1\xdd\xfa\x17\xef\xed\x25\x2e\x29\xd4\x48\xed\x64\xbb\xc7\xfd\x39\x99\x89\x64\x7c\x85\xd3\xff\x40\xe2\x15\x4e\xbf\x99\xc3\x18\xa7\xeb\xb5\xf9\x6d\x27\xee\x9a\x6d\x4c\xed\xff\xce\xed\x89\xfc\x5a\x42\x6f\xb4\x41\xd5\x77\xe9\x74\x5b\xdd\x7a\x3d\x36\x99\x92\x09\x53\x13\x38\xeb\xa6\x76\x26\x9d\x2a\x3d\x85\x6c\x25\x86\x37\x60\x4d\xad\x25\x63\xb2\xb0\x5f\xb4\xa5\x93\x15\xc6\x49\x87\x04\x3b\xbb\x4f\xd3\xdd\x9f\xd2\x9d\xc7\xbf\xa6\x3b\xbb\x5b\x1b\x68\x45\x69\xb0\x93\x56\xd3\x57\xd3\x65\xdd\x4a\x59\xdf\xe8\x9a\xfc\xc4\x68\x24\x21\x56\xd3\x7a\xd3\x7e\xa7\x37\xdd\x0b\x61\x39\xba\x67\x90\x9e\x62\x1c\xdb\x3a\xfd\xc3\xd3\x18\xe9\x24\x1e\x39\xbf\x39\x12\x33\xd9\xe6\x93\xa5\x71\x48\x97\xdd\x84\x86\xcf\x70\xc9\x64\xdc\x28\x8e\xf3\x38\xdd\x45\x1f\x9c\x67\xdc\x83\x4d\x6d\x0b\x8a\xe2\x43\xc6\x7a\x5f\x07\x68\x1c\x1b\x0b\x5d\xa3\xc6\x67\x4a\x53\x8b\x95\x1a\xa0\x93\xb9\xc5\x8d\x20\x4b\x71\xb8\xad\x1d\x5f\x33\x86\xef\x22\x33\x6d\x82\xcc\x6d\x64\x4b\x61\x1a\xac\x1f\x41\x30\x4e\x21\x7c\x44\xa8\xa4\x93\x23\x04\x9c\x20\x4d\xb9\x8c\x26\x5c\x92\x6f\x46\x25\x2c\xf4\x6b\xcd\x5f\x87\x83\x0b\x94\x8d\x8c\x7c\x7d\x67\x5b\xf4\xad\x97\x3a\xbe\x27\x80\x1b\x87\x3a\xbe\xbf\x5a\x6d\xfb\x58\x1a\x55\xc6\x1c\x44\x7d\xae\x2a\x74\x1a\x3b\xb3\xd2\x07\x86\xf7\xde\xb8\xd0\xfe\x55\xdd\xcc\xbc\x5f\xad\x5b\xf8\x44\xea\x6a\xe9\x62\xad\x26\xbd\x63\xf2\x36\xa9\xad\x74\xd8\xa9\xb1\x0d\x78\xdf\xa9\x76\xea\xae\x49\xf7\x3f\x01\x00\x00\xff\xff\xb9\x1c\xf1\xe8\x99\x0a\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"etc/etcd/ca.crt":                                  etcEtcdCaCrt,
	"etc/etcd/etcd.conf":                               etcEtcdEtcdConf,
	"etc/etcd/peer.crt":                                etcEtcdPeerCrt,
	"etc/etcd/peer.key":                                etcEtcdPeerKey,
	"etc/etcd/server.crt":                              etcEtcdServerCrt,
	"etc/etcd/server.key":                              etcEtcdServerKey,
	"etc/origin/master/admin.kubeconfig":               etcOriginMasterAdminKubeconfig,
	"etc/origin/master/aggregator-front-proxy.crt":     etcOriginMasterAggregatorFrontProxyCrt,
	"etc/origin/master/aggregator-front-proxy.key":     etcOriginMasterAggregatorFrontProxyKey,
	"etc/origin/master/ca.crt":                         etcOriginMasterCaCrt,
	"etc/origin/master/ca.key":                         etcOriginMasterCaKey,
	"etc/origin/master/front-proxy-ca.crt":             etcOriginMasterFrontProxyCaCrt,
	"etc/origin/master/master-config.yaml":             etcOriginMasterMasterConfigYaml,
	"etc/origin/master/master.etcd-ca.crt":             etcOriginMasterMasterEtcdCaCrt,
	"etc/origin/master/master.etcd-client.crt":         etcOriginMasterMasterEtcdClientCrt,
	"etc/origin/master/master.etcd-client.key":         etcOriginMasterMasterEtcdClientKey,
	"etc/origin/master/master.kubelet-client.crt":      etcOriginMasterMasterKubeletClientCrt,
	"etc/origin/master/master.kubelet-client.key":      etcOriginMasterMasterKubeletClientKey,
	"etc/origin/master/master.proxy-client.crt":        etcOriginMasterMasterProxyClientCrt,
	"etc/origin/master/master.proxy-client.key":        etcOriginMasterMasterProxyClientKey,
	"etc/origin/master/master.server.crt":              etcOriginMasterMasterServerCrt,
	"etc/origin/master/master.server.key":              etcOriginMasterMasterServerKey,
	"etc/origin/master/named/console.crt":              etcOriginMasterNamedConsoleCrt,
	"etc/origin/master/named/console.key":              etcOriginMasterNamedConsoleKey,
	"etc/origin/master/openshift-master.kubeconfig":    etcOriginMasterOpenshiftMasterKubeconfig,
	"etc/origin/master/scheduler.json":                 etcOriginMasterSchedulerJson,
	"etc/origin/master/service-signer.crt":             etcOriginMasterServiceSignerCrt,
	"etc/origin/master/service-signer.key":             etcOriginMasterServiceSignerKey,
	"etc/origin/master/serviceaccounts.private.key":    etcOriginMasterServiceaccountsPrivateKey,
	"etc/origin/master/serviceaccounts.public.key":     etcOriginMasterServiceaccountsPublicKey,
	"etc/origin/master/session-secrets.yaml":           etcOriginMasterSessionSecretsYaml,
	"etc/origin/node/ca.crt":                           etcOriginNodeCaCrt,
	"etc/origin/node/client-ca.crt":                    etcOriginNodeClientCaCrt,
	"etc/origin/node/node.kubeconfig":                  etcOriginNodeNodeKubeconfig,
	"etc/origin/node/pods/apiserver.yaml":              etcOriginNodePodsApiserverYaml,
	"etc/origin/node/pods/controllers.yaml":            etcOriginNodePodsControllersYaml,
	"etc/origin/node/pods/etcd.yaml":                   etcOriginNodePodsEtcdYaml,
	"etc/origin/node/pods/sync.yaml":                   etcOriginNodePodsSyncYaml,
	"etc/pki/ca-trust/source/anchors/openshift-ca.crt": etcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master-startup.sh":                                masterStartupSh,
	"node-startup.sh":                                  nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"etc": {nil, map[string]*bintree{
		"etcd": {nil, map[string]*bintree{
			"ca.crt":     {etcEtcdCaCrt, map[string]*bintree{}},
			"etcd.conf":  {etcEtcdEtcdConf, map[string]*bintree{}},
			"peer.crt":   {etcEtcdPeerCrt, map[string]*bintree{}},
			"peer.key":   {etcEtcdPeerKey, map[string]*bintree{}},
			"server.crt": {etcEtcdServerCrt, map[string]*bintree{}},
			"server.key": {etcEtcdServerKey, map[string]*bintree{}},
		}},
		"origin": {nil, map[string]*bintree{
			"master": {nil, map[string]*bintree{
				"admin.kubeconfig":           {etcOriginMasterAdminKubeconfig, map[string]*bintree{}},
				"aggregator-front-proxy.crt": {etcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
				"aggregator-front-proxy.key": {etcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
				"ca.crt":                     {etcOriginMasterCaCrt, map[string]*bintree{}},
				"ca.key":                     {etcOriginMasterCaKey, map[string]*bintree{}},
				"front-proxy-ca.crt":         {etcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
				"master-config.yaml":         {etcOriginMasterMasterConfigYaml, map[string]*bintree{}},
				"master.etcd-ca.crt":         {etcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
				"master.etcd-client.crt":     {etcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
				"master.etcd-client.key":     {etcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
				"master.kubelet-client.crt":  {etcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
				"master.kubelet-client.key":  {etcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
				"master.proxy-client.crt":    {etcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
				"master.proxy-client.key":    {etcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
				"master.server.crt":          {etcOriginMasterMasterServerCrt, map[string]*bintree{}},
				"master.server.key":          {etcOriginMasterMasterServerKey, map[string]*bintree{}},
				"named": {nil, map[string]*bintree{
					"console.crt": {etcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
					"console.key": {etcOriginMasterNamedConsoleKey, map[string]*bintree{}},
				}},
				"openshift-master.kubeconfig": {etcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
				"scheduler.json":              {etcOriginMasterSchedulerJson, map[string]*bintree{}},
				"service-signer.crt":          {etcOriginMasterServiceSignerCrt, map[string]*bintree{}},
				"service-signer.key":          {etcOriginMasterServiceSignerKey, map[string]*bintree{}},
				"serviceaccounts.private.key": {etcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
				"serviceaccounts.public.key":  {etcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
				"session-secrets.yaml":        {etcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
			}},
			"node": {nil, map[string]*bintree{
				"ca.crt":          {etcOriginNodeCaCrt, map[string]*bintree{}},
				"client-ca.crt":   {etcOriginNodeClientCaCrt, map[string]*bintree{}},
				"node.kubeconfig": {etcOriginNodeNodeKubeconfig, map[string]*bintree{}},
				"pods": {nil, map[string]*bintree{
					"apiserver.yaml":   {etcOriginNodePodsApiserverYaml, map[string]*bintree{}},
					"controllers.yaml": {etcOriginNodePodsControllersYaml, map[string]*bintree{}},
					"etcd.yaml":        {etcOriginNodePodsEtcdYaml, map[string]*bintree{}},
					"sync.yaml":        {etcOriginNodePodsSyncYaml, map[string]*bintree{}},
				}},
			}},
		}},
		"pki": {nil, map[string]*bintree{
			"ca-trust": {nil, map[string]*bintree{
				"source": {nil, map[string]*bintree{
					"anchors": {nil, map[string]*bintree{
						"openshift-ca.crt": {etcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
