// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x73\x13\x39\x16\x7e\xe7\x57\xa8\x7a\xb7\x2a\x30\x15\xdf\x92\xc0\x52\x79\x0b\x64\x58\x5c\x4c\xc0\x95\x86\xd9\x87\x29\x8a\x91\xd5\xc7\xb6\x26\xdd\x52\xaf\x2e\x06\x93\xcd\x7f\xdf\x52\xdf\xec\xbe\x59\xdd\xb6\x21\x81\x69\xf1\xe0\xd0\x7d\xce\x91\x74\x74\x6e\xfa\xa4\xbe\x7d\x84\x10\x42\xce\x3f\x25\x59\x40\x80\x9d\x73\xe4\x2c\x94\x0a\xe5\xf9\x60\x10\x3f\xe9\x07\x98\xe1\x39\x04\xc0\x54\x1f\x7f\xd5\x02\xfa\x84\x07\xc9\x3b\x39\x38\x19\x8e\x9e\xf6\x86\xa3\xde\x70\x34\xf0\x20\xf4\xf9\xca\xd0\xbd\x87\x20\xf4\xb1\x82\xfe\x5f\x92\xb3\x7f\x38\xc7\x71\x0f\x84\x33\x05\x4c\xfd\x0e\x42\x52\xce\x4c\x47\xa3\xfe\xd0\xfc\x4b\x09\x42\x2c\x70\x00\x0a\x84\x74\xce\xd1\xed\x5d\xf2\x74\x89\x05\xc5\x53\x1f\x72\x0f\x05\x48\xae\x05\x89\x1e\xfe\x11\x3d\x32\xed\x36\xfb\x2b\x22\x52\xab\x10\x4c\x37\x57\x94\x08\x2e\xf9\x4c\xf5\xdf\x82\xfa\xcc\xc5\xcd\x80\xc5\xbf\x2e\x10\x2d\xa8\x5a\xfd\x5b\x70\x1d\xca\x64\x18\x19\x3b\x0e\xe9\xc6\x58\x4f\x86\xa3\x67\xbd\xe1\x69\xef\x74\x58\xa4\xf3\x39\xc1\x2a\xa1\xba\xbd\x45\xfd\x2b\xcc\xe8\x0c\xa4\xea\xff\x96\xbc\x40\xff\x43\x7f\x49\x74\x77\x57\x64\x64\x38\x88\xc6\xc7\xe4\xbc\x47\x78\x10\x6a\x05\x45\x92\x50\xf0\x10\x84\xa2\xf1\xec\x73\xef\xa2\xf7\x32\x99\xc1\xb5\xf6\x0b\xba\xd8\x6c\x65\xc6\xd2\x18\xb0\xef\xf3\xcf\x9f\xa4\x5c\x14\x46\xd0\x66\x34\x79\xed\x11\x02\xd2\xd0\x39\x17\x46\xf4\x16\xb1\x11\xb9\x07\x92\x08\x1a\xa6\x7a\x8c\x78\x90\xeb\xbe\x46\x4a\xe0\xd9\x8c\x92\x06\xfc\x8a\xb2\x48\xdd\x17\x9e\x27\x40\xca\x89\x80\x19\xfd\x62\x84\xfd\xd2\x82\x79\xc2\x85\xba\xc6\x6c\x1e\x29\xe5\xe4\xa4\x77\x72\x62\x65\xa6\x02\x48\x3a\xee\x31\x9b\x72\xcd\x3c\x1b\x4f\x28\x28\x37\xcb\xe6\x9c\xa3\xd1\x70\x64\x25\xe6\x8a\x13\xee\x1b\xf9\xef\x49\x68\x93\x1d\x3b\x46\x7b\x25\xc4\x7c\xb9\xf9\xff\xe2\xd4\xb2\xdc\x55\xbe\x29\x3f\xfd\xf8\xa8\xfa\xfd\xdd\xf1\xcf\xe0\xb5\x94\xcd\x04\xee\x7c\xb6\xf3\xd9\x32\xf1\x8f\xe3\xb3\xd5\x7d\x34\xb6\x3f\x53\x2d\x3c\x24\x03\x34\xe3\xb9\x57\x0b\x7c\x5e\x8c\x35\x65\xce\x7d\xcd\xef\xa4\x33\xbf\x4d\xf3\x2b\x26\x81\x1c\xf9\x7d\xd8\x9f\xbc\x57\x03\x3c\x3b\x3b\xfd\xe6\x16\x78\xfa\x13\x59\xe0\x37\x2d\x5a\x96\x54\x28\x8d\xfd\xe4\xbf\xf7\x57\xae\x2c\x19\xa8\xb6\x95\x0a\x8e\xd7\xc3\x0d\x31\x81\x5a\xe7\x49\xa9\xe2\x55\xdb\x52\xd1\x44\xc4\xa3\x61\xbc\xe7\x1b\x3c\xaf\x5e\xa6\x8f\xa5\xa7\x15\x01\xc2\x91\x7a\xca\x40\xed\x55\x3c\xc5\x22\x0e\x16\x38\x8a\x96\x9b\xcd\xf3\xe4\xec\x61\xd9\x63\xa8\xa7\x3e\x25\xe3\x49\xe2\x6b\x70\x7f\x16\x49\xc3\x9e\xe0\x5a\x81\x68\x6b\x96\xd9\x14\xfc\x74\x0c\x57\xa0\x16\xdc\x33\x42\x5d\x85\x55\x65\xd8\x75\xa8\xe7\xc3\x7b\x1a\x00\xd7\x6a\xcc\xae\x28\xd3\x2a\x92\x3f\x7a\x9a\x57\x6e\x61\x2c\xf2\x46\x57\x0f\x22\x9d\xc5\x0b\x2c\x29\x71\x0e\xb8\x40\x3e\xc7\xde\x0b\xec\x63\x46\x40\xec\xbc\x38\x1e\x84\xc0\x3c\xf9\x8e\x55\xba\x88\xf3\x47\x8a\x9f\x8c\xbd\xc7\x47\x0d\x6c\xe4\xe8\x18\x1d\x65\xcb\x75\xf4\xe4\x63\x7e\xbe\x1f\x0f\x6d\x19\xfe\x74\x47\xcb\x98\x62\x72\x03\xcc\x4b\xf3\x08\xe7\xfe\x5e\x31\x22\x11\x57\xed\xc0\x15\x6e\x5a\x61\x75\x33\x11\xa1\x5e\xde\x78\xf2\x92\xb3\x19\x9d\x6b\x11\x69\x60\xaf\x61\xa5\x32\x0f\x15\xbc\x42\x41\x97\x58\x41\xb5\x43\x5d\xae\x18\x0e\xec\x85\x4c\xc1\x64\xac\x9d\xa2\xd8\x25\x4d\x0f\x87\x35\xc6\x62\xab\x8e\xb1\xf5\x6f\x9a\x2d\x2b\x8d\x4b\xa6\xb7\x58\x65\x46\xb6\x9d\x2c\xdb\xec\x57\x91\xad\x5d\x9e\xb2\xf9\xde\xb0\x40\xc8\x85\xea\x6d\xdd\x84\xb4\xb2\x8e\xb2\x4f\xb5\x5a\x5c\xc2\x19\xc1\xea\xf1\xf6\x35\xce\xc5\x3c\xb3\xbe\x59\x04\x38\x7a\x72\x8c\x8e\x06\x15\x7e\x9d\x3e\xb3\x1b\x80\xc5\x72\x13\x39\xa6\x86\x74\xce\xd1\xf3\xa1\x85\x1c\x18\x9e\xfa\xf0\xca\xe7\x58\x51\x36\x1f\x4f\x9c\x73\x34\xc3\xbe\x04\x0b\x5b\x4d\x1c\xf8\xfe\xaa\xac\x0b\x48\xd9\x8b\xbd\x15\x9a\x0a\x6a\xaa\xd1\xda\xc4\x6c\xe1\x33\x33\xbd\xa4\x52\x09\x3a\xd5\x69\xba\xb9\x84\x19\xd6\xfe\xb6\xb2\x0e\x25\xf6\x3f\xad\xaf\x68\x0b\xa3\x3b\x9c\xee\xa3\x6e\xe5\x20\x71\xd0\xbd\x15\x5d\xdc\x63\x7d\xb7\x9d\x77\x34\x81\xed\xbb\xcc\x2e\xc4\x94\xe7\x97\x38\xc4\xd9\x99\x6d\xf3\xdc\xc5\x98\x96\x31\xc6\xae\xd2\xbf\x67\x90\x39\x3b\x3b\xbd\xf7\x28\xd3\xa8\x9e\xe2\x5a\x35\xaa\x94\xe2\xc9\x3d\xa0\xea\x88\x32\x05\x62\x89\xfd\x31\x73\x81\x70\xe6\x19\x16\x9b\x4d\x31\x1d\x4c\x41\xbc\x9b\x4d\xd2\xc9\x58\xe1\xdc\x86\x99\xf4\xa7\x49\x08\xdf\x53\xab\xf6\xd8\x71\x78\x0f\x78\x20\x90\x83\xab\xb8\xc0\x73\x18\xc8\xf8\xf7\x82\x10\xae\x99\xb2\x83\x0e\x4f\x7b\xc3\x67\xbd\xd1\xd3\x83\x23\x42\x86\x29\xce\x18\xfd\x6b\x98\x9b\xa8\xbb\x72\x73\x43\xab\x13\x60\x05\x32\x63\xf6\xf7\x89\x06\x5c\x85\x99\x87\x85\xf7\xe9\xb7\x6b\xf7\x10\x7a\x7c\x19\x5f\xde\x48\xb1\xde\x2b\x4c\x16\x94\x81\x4b\xb0\x0f\x2e\x34\xd0\xe7\xbf\x7a\xa3\x93\xde\x70\x74\x30\x7d\xee\x87\xfe\x14\x10\x6b\x93\x62\x96\x0c\x94\x49\x24\x15\x11\xd9\x22\xac\xf2\xcc\xde\x88\xdc\xb8\xf4\x62\x05\x94\x32\xcc\x56\xd6\xdd\x93\xa9\xf5\x19\x45\x41\x6c\x2e\x79\xd5\x14\x08\x0e\x31\x89\x0f\x36\xf2\x7a\x4e\xd6\xf5\xe5\x16\xd3\x43\x45\xfb\xcd\x98\x7f\xbf\x72\xe9\x57\x48\x44\x64\xdc\x45\xcf\xbf\xbd\x45\x74\x86\xe0\xbf\x99\xe1\x8f\x03\x3c\x87\xeb\x44\xa7\x6f\x71\x00\xc8\x71\xd0\xdd\x5d\xc1\xde\x7d\x5c\x5d\xd6\x55\xb9\x52\x24\xd1\x7d\xf3\x61\xdb\x0c\x22\x90\x45\x2e\x62\x5d\x15\x79\x27\xe9\xcb\xad\x12\x04\xf7\x34\x51\x55\xfc\xef\x66\xb3\x0d\xde\x0a\x0d\x00\xf3\xca\x53\xb4\xb8\x34\x5f\x82\x08\x05\x5f\xd2\xc4\x8f\x6a\x0a\x64\x47\x87\x73\x81\x3d\x98\x70\x9f\x92\x55\xfd\x21\x46\xc0\xbd\xd8\xa9\x31\xd3\xd8\x2f\x87\xf8\xaa\x53\x88\xbc\xbb\x4f\x04\x9f\x51\x7f\xcb\x39\x09\x97\x36\x12\x14\x1f\x25\x04\x94\x7d\x90\x20\xd2\xa5\x24\x3e\xd7\x5e\x4f\xcb\x12\x1c\x9a\x63\x4b\x1c\x43\x18\x93\x59\x1f\x43\x24\x4f\x7b\xdb\x38\x7d\xca\xf4\x97\x76\x3b\x06\xc7\xa3\xd2\x6c\x51\x26\x58\xca\xcf\x5c\x78\x17\x5a\x2d\x80\x29\x9a\xc5\x2b\x25\xb4\x6d\xb7\x22\xe5\xa2\x59\x71\x1c\x03\x80\x6f\x60\xb5\xfd\x68\x69\xb3\xd9\xa5\x66\xd2\x6f\x60\x75\x89\x15\x4e\xec\xd6\x75\x5f\x4f\xd2\xee\x2e\xa4\xab\x04\x65\xf3\xcc\x98\x5d\xf7\xf5\x1b\x58\xf5\x33\x82\x2d\xee\x50\x3f\x19\xac\xcc\xb4\x9d\xc1\x82\x07\x30\x58\x2f\xed\xa0\x2f\xe5\x62\x80\xb5\x5a\x70\x41\xbf\x82\xf7\xe9\xc6\xcc\xb7\x91\xdc\x7a\x84\x33\x6d\xe5\x43\xb5\x66\xfc\xad\xca\x44\x27\xa9\x22\x1a\x19\x39\x8d\xa3\xdc\x0c\x04\xb0\xe4\x6c\x71\xa7\x48\x58\x12\xcc\x4d\xac\xb1\x07\xa1\x26\x68\xf6\x3e\xe1\x30\xaf\x98\x28\x39\xb5\x0c\xc9\x39\x09\xcb\x75\xb9\x50\x94\x92\x54\x12\xeb\xf0\x6a\xe2\xa9\x2f\xc1\xaa\xa9\x0a\xf0\xbd\x28\x3b\x55\x7e\x94\xb5\xd3\x1e\x4c\xf2\x2e\x97\x3e\xd1\x82\x46\x89\xbd\x4e\x48\xb4\x82\xa9\x0c\x93\xf1\xab\x03\xff\x66\xdb\xb2\x35\x75\xb8\xbc\xa4\xf2\xc6\x1e\xa9\x48\x14\x9d\xe7\x66\xae\xd7\x80\xbd\xff\x08\x5a\xaa\x1e\xca\x3c\x02\xb0\x82\x77\xd9\xc5\x8e\x57\x82\x07\xd1\x5c\x6c\x8c\xf1\x55\x69\xaf\xd1\xc8\xd0\x86\xcf\x5c\xe4\xeb\xd3\x89\x80\x80\xea\xa0\x5c\x9e\x16\xdb\xa1\x5c\x37\xa9\xd2\x1a\xb9\x6e\x42\x3b\x36\x5b\xb4\x19\x26\xd0\xf0\x5c\x2b\x6d\x0d\x94\x92\xdd\xb0\xb4\x1e\x3b\xa1\x96\x1b\xcb\x0d\x1e\x1a\x60\xb1\x6a\x94\xa9\x32\xa6\x18\x96\x1b\x4f\x5e\x71\xf1\x19\x0b\x2f\xb6\xaa\x16\xfc\x55\xb5\x70\xe3\x21\xa3\xc6\x07\x66\x3b\x95\xdc\x75\xcd\x82\x0e\xad\x47\x16\xb6\xb4\x83\xcd\xd6\x5c\x03\x28\x7f\x81\x80\x44\x7d\xb6\xc8\xbf\x68\x47\x83\x29\xf0\xb7\x37\x9e\x9c\x80\xe4\xee\xc9\x2e\x9d\xa3\xb6\x70\x61\xed\x6e\xee\x18\x1d\x0d\x92\x7b\x34\xc9\x6f\x63\xa3\xd8\x6c\x0d\x0d\x24\x37\xfe\xe4\x48\x37\x4c\xc0\xf6\xf6\x68\x75\xa5\xd4\xb5\x59\xb4\x34\x88\xf5\xb8\xf6\x33\x8c\x4c\x4e\xb3\xab\x26\x4d\x9b\xbd\xbe\xdb\x8f\xa3\x39\x75\x33\xca\xed\xd5\xa6\x5d\x4e\xfd\xdb\x6a\xc9\x75\x49\x0d\xbe\x28\x60\xa6\x36\x6a\x94\xd6\x32\xea\x83\xa6\x30\x22\x6d\x35\x03\xda\x35\x85\x61\xad\xf8\x87\x78\x73\x7b\x45\x19\x17\x6b\x48\xa9\x45\x4a\x0a\x05\x57\x40\x14\x78\x2e\x28\x45\xd9\xbc\x9d\xe1\x3b\xf1\xf5\xd7\xa4\x2c\x7d\x81\x25\x3c\x3b\xfb\x95\x11\xee\x01\x7a\xec\x2a\x2c\x94\x0e\xd1\x9f\x49\xc6\xf9\xf3\x49\x35\x02\x50\xd7\x9a\x26\x9e\x5c\xa9\xbe\x0e\x7f\x17\xd1\x97\x6a\xbf\xae\x17\xb5\xa1\x38\xb9\xa1\x87\xa6\x43\x48\x01\xc1\x97\x5a\x2a\x1e\xb8\xb1\x4e\x5a\xf0\xbe\xc6\xcc\xf3\x41\x6c\x62\x82\xfd\xa1\x5d\x4b\x07\xf6\xa2\x32\xe4\xd1\x21\xa3\xf7\x86\x8c\x46\x1f\x16\xed\x26\x77\xdb\xf9\x60\x73\x9c\xb5\xf2\xcb\xa6\x6f\x83\xb2\x8e\x4d\x57\xfb\x60\xac\x91\x80\x0e\x61\xad\xd5\x00\xea\x20\xd6\x3c\xd9\x41\x21\xd6\xc8\x53\x3a\x80\xb5\x56\x7a\x07\xb0\x76\x00\x6b\x49\x4a\x07\xb0\x76\x00\x6b\x07\xb0\x56\x0f\xb9\x03\x58\x7f\x64\x80\x35\xab\xdc\x3b\x78\xb5\x83\x57\x3b\x78\x35\x37\xae\x9f\x05\x5e\xdd\x61\x4d\x36\x77\xe5\x2f\x5a\x7c\xa5\x66\x6b\x7b\xa9\xf1\x61\xdc\x9e\xaf\x6b\xed\x17\xc6\x8e\x3c\xef\x26\xbf\xc3\xbd\xa3\xd6\xe1\xde\x29\x7b\x13\xdc\x3b\x2a\x04\x3a\xd4\xbb\x96\xf7\x47\x43\xbd\xa3\xbf\x12\xc4\xd4\xe1\x5a\x85\x5a\xc5\xfa\x7a\x74\xf7\xe8\xff\x01\x00\x00\xff\xff\x35\x83\xf1\x5f\x44\x4f\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x7f\x4f\xe3\x46\x10\xfd\x7f\x3f\xc5\x34\x54\x4d\x7b\xaa\xbd\x70\x3d\xa1\x96\xe3\x4e\x82\x10\x10\xe2\x47\x10\x49\x4f\x3a\x55\x15\x5a\xef\x8e\xf1\x2a\xf6\xae\xd9\x19\x47\xb8\x21\xdf\xbd\x72\x0c\x21\x09\x29\xc7\xf5\x3f\x98\x79\xf3\xde\xec\xec\xfa\x4d\xb6\x7e\x90\x89\x75\x32\x51\x94\x41\x84\xf7\x42\x6c\xc1\x68\x70\x34\xd8\x03\x89\xac\xa5\x71\x54\x28\xba\x8b\x8d\xf4\xc1\xde\x5a\x17\x55\x25\x71\x40\x55\x44\xc6\x51\xac\xbd\x4b\xc1\x12\xe8\x2a\x04\x74\x9c\xd7\x90\xa9\x60\xb4\x37\x68\x3e\x82\x65\xb1\x05\x65\xf0\x89\x4a\xf2\x1a\x28\xf3\x55\x6e\x5c\x97\x21\x41\x21\x86\xfd\xeb\x2f\xa7\xbd\xfe\xcd\xe8\xeb\x55\xff\x53\xcb\x2c\x6c\x0a\x7f\x41\x94\x42\x67\x2e\x4c\x35\x35\xec\xf6\x56\x2a\xf6\x85\xd5\x91\x2f\xd1\x51\x66\x53\x8e\x9c\x37\xd8\x81\xbf\x3f\x02\x67\xe8\x04\x00\xc0\x0a\xdd\x3a\x5e\xa4\x56\x08\xaa\x89\xb1\xd0\x9c\x03\xb1\x2f\xc1\x78\x3d\xc6\x10\x13\x86\x89\xd5\x28\xaa\xc2\x57\x8e\x41\x16\x8e\x65\x40\xf2\x55\xd0\x08\x0f\x0f\xc0\xa1\x42\x51\x8c\x53\x8a\xef\x53\x6a\x7a\x93\x06\x27\x92\x4c\xb2\x23\x50\x67\x1e\xba\x8b\xff\x01\xe4\x44\x05\x99\xdb\x44\xb6\xdc\x00\x4d\x09\xdc\x86\xf2\xae\xf2\xac\x00\xb6\x61\xbb\x0b\x9f\x3f\xcf\x0f\x97\x12\xab\x44\x3c\x8a\xae\xd6\x89\x80\xc4\x3e\xa0\xf6\x0e\xa2\xeb\x17\xd9\xe5\x73\xa8\xc0\xeb\x07\x11\xd3\xa9\x4d\x01\xef\x20\xee\xdf\x73\x50\xf1\xb5\xcf\x11\x3a\xd6\xa5\x41\x75\x66\xb3\xb6\xe9\xce\xe1\x60\x30\x1a\x8e\xae\x0f\xae\x6e\x7a\x83\xcb\xe3\xd3\x93\x9b\xcb\x83\x8b\xfe\xa7\x66\xaa\x51\x3b\xf2\xa8\x2d\x78\xea\xf6\xf9\x2a\x7e\x9c\x2e\x4f\x7a\x36\xbf\x09\x31\x9d\x62\x4e\xf8\x1d\xec\xda\x17\x65\xc5\xf8\x1d\xfc\xce\xcc\x66\x42\x10\x1a\x88\x2c\x44\x08\x1d\xda\x3a\xea\x1f\xfe\x79\x72\x73\x3e\x38\x39\xef\x7f\xe9\x9f\x7f\x7a\xbf\x1e\xf8\xb0\xd5\x81\xb7\xb0\x8b\x50\x40\x14\xd2\x16\x8b\xac\x8d\x7c\xd7\xfe\xdd\xbe\x4a\x59\x28\x62\x0c\xf2\x9d\x10\x89\x22\xdc\xfd\x00\x91\x81\xfd\xfd\x7d\x98\x4e\xe1\x70\x1e\xe8\xbb\xe6\xbd\xc3\xcf\x5f\x55\x91\x5f\xa8\x40\x99\xca\x21\xee\xcd\x15\xe3\x4b\x6f\xf0\xd0\x7b\x26\x0e\xaa\x3c\xab\x12\x6c\x3b\xf9\x05\x66\x33\xf8\xbc\xac\xd2\xb4\x22\x93\x27\x64\x3c\x5e\x40\xbf\xa5\xda\xc3\xc0\x07\x74\x58\x33\xd2\x66\xd5\x06\xf0\x1f\x7a\xf3\x3b\x59\x88\x96\x18\x62\x1d\xf8\x5b\x82\x57\xc1\x4e\x14\xe3\x19\xd6\xaf\xca\x9e\x61\xfd\x66\xd5\x31\xd6\x42\x67\x85\x37\xb0\xbd\xbb\xbd\x0d\x6f\xab\x78\x09\xdb\x38\xbe\xff\x33\xbf\x9e\x7a\x65\x68\x5a\xcd\xa7\xa4\xcb\x97\x0d\xb4\xa9\x36\x5e\x8e\xad\xd4\x2a\xe2\x50\x11\xcb\xd6\x50\xa4\x72\x3a\xf3\x81\xe4\xb3\x93\x3d\x92\x55\xa5\x51\x8c\xd1\x13\x5e\x3c\x9a\x8b\x53\x05\x36\x1f\x36\x06\xd8\xd9\xfd\x3d\xde\xfd\x2d\xde\x79\xff\x47\xbc\xb3\xdb\xdd\xd0\x56\xe3\x5a\xf9\x64\x6e\xc8\xa2\x18\x1b\x1b\x20\x5a\xed\x50\xe7\xbe\x32\x65\xf0\x13\x6b\x30\x3c\x9b\x3c\x67\x96\x1a\x07\x37\x55\x99\x5b\xad\x18\x0d\x58\xd7\x18\x2b\x64\x98\x17\xa0\x33\x15\x98\x20\xf5\x61\x1e\x6b\x3f\x06\x28\xbd\xa1\x5f\x41\x39\x03\x9c\x29\xee\x12\x38\xcf\x60\x0d\xaa\x5c\x68\xc5\xab\xdd\xad\xe8\x4a\xf5\x4f\x15\xb0\x5d\x1b\xfb\xfb\xdd\xfe\xe0\xb8\x2b\x18\x9d\x72\x7c\x6a\xf6\x9a\xcb\x89\x2f\x94\xb3\x29\x12\xc7\xa3\x36\x7c\x04\x0f\xd0\x18\x28\xc2\x6c\x26\xa8\x4a\x48\x07\x5b\xb2\xf5\xee\x45\xc1\x70\x39\xb9\x52\xa6\x94\xe9\xe5\x16\x37\x88\x3c\x86\x37\xa3\x87\xa8\x03\xf2\xc6\x8a\x36\xb5\x56\x35\x7a\xfb\x41\x9e\x76\xcc\x49\xf0\x55\xb9\x86\xbf\x5e\xce\x2d\x17\xe5\x5e\xab\xe6\x70\x6b\xf8\xf3\xc7\xf0\xca\xa0\x50\x57\xc1\x72\x3d\xe7\xb8\x54\x05\xee\x81\xa3\x85\xf1\x8a\x32\xd8\x42\x85\x7a\xa8\x55\x8e\x43\xe4\x16\x40\xb4\xc8\x4f\x8a\x51\x5d\xe2\x1e\x4c\x0a\x22\xd1\x1f\x1c\x37\xcf\xc5\x79\xc6\x3d\xd8\x64\xa1\xa0\x43\xf3\xdb\x21\xf7\xbe\x24\xa8\x1c\xdb\xfc\xe9\x9d\x58\x82\xaa\x5c\x5a\x59\xe8\x54\x92\xe3\x46\x92\xc5\x06\x5b\x5f\x70\xaf\x81\xe1\x27\xf1\x6f\x00\x00\x00\xff\xff\x1b\x92\x5d\x23\xbe\x08\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
