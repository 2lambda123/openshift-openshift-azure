// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xeb\x73\x13\x39\x12\xff\xce\x5f\x31\x35\x77\x55\x81\xad\xf8\x95\x04\x8e\xca\xb7\x40\x96\xc3\xc5\x06\x5c\x19\xd8\xfb\xb0\x45\x81\xac\x69\xdb\xba\xcc\x48\x73\x7a\x04\x4c\xca\xff\xfb\x95\xe6\x65\xcf\xcb\xd2\xd8\x86\x04\x76\xb4\x1f\xc2\xce\x74\xb7\x5a\xad\x7e\xe9\xa7\xf1\xdd\x23\xc7\x71\x1c\xf7\x9f\x02\x2f\x20\x44\xee\xb9\xe3\x2e\xa4\x8c\xc4\xf9\x60\x90\x3c\xe9\x87\x88\xa2\x39\x84\x40\x65\x1f\x7d\x53\x1c\xfa\x98\x85\xe9\x3b\x31\x38\x19\x8e\x9e\xf6\x86\xa3\xde\x70\x34\xf0\x21\x0a\xd8\x52\xd3\xbd\x87\x30\x0a\x90\x84\xfe\x7f\x05\xa3\xff\x70\x8f\x93\x19\x30\xa3\x12\xa8\xfc\x13\xb8\x20\x8c\xea\x89\x46\xfd\xa1\xfe\x2f\x23\x88\x10\x47\x21\x48\xe0\xc2\x3d\x77\xee\x56\xe9\xd3\x5b\xc4\x09\x9a\x06\x50\x78\xc8\x41\x30\xc5\x71\xfc\xf0\xaf\xf8\x91\x1e\x77\xf9\xbf\x62\x22\xb9\x8c\x40\x4f\x73\x45\x30\x67\x82\xcd\x64\xff\x2d\xc8\x2f\x8c\xdf\x0c\x68\xf2\xd7\x03\xac\x38\x91\xcb\x7f\x73\xa6\x22\x91\xaa\x91\xb3\xa3\x88\x6c\xe8\x7a\x32\x1c\x3d\xeb\x0d\x4f\x7b\xa7\xc3\x32\x5d\xc0\x30\x92\x29\xd5\xdd\x9d\xd3\xbf\x42\x94\xcc\x40\xc8\xfe\x1f\xe9\x0b\x67\xb5\x2a\xf3\x50\x14\xc6\xaa\x51\x31\xef\x61\x16\x46\x4a\x42\x99\x24\xe2\x2c\x02\x2e\x49\xb2\xf0\xc2\xbb\xf8\xbd\x48\x95\xbf\x56\x41\xc9\x0c\x9b\xa3\xca\x58\xd1\x01\x05\x01\xfb\xf2\x49\x88\x45\x49\x83\x36\xda\x14\x0d\x87\x31\x08\x4d\xe7\x5e\x68\xd1\x5b\xc4\xc6\xe4\x3e\x08\xcc\x49\x94\x99\x30\xe6\x71\x3c\xef\xb5\x23\x39\x9a\xcd\x08\xb6\xe0\x97\x84\xc6\x96\xbe\xf0\x7d\x0e\x42\x4c\x38\xcc\xc8\x57\x2d\xec\xb7\x16\xcc\x13\xc6\xe5\x35\xa2\xf3\xd8\x28\x27\x27\xbd\x93\x13\x23\x33\xe1\x80\x33\xbd\xc7\x74\xca\x14\xf5\x4d\x3c\x11\x27\x4c\x6f\x9b\x7b\xee\x8c\x86\x23\x23\x31\x93\x0c\xb3\x40\xcb\x7f\x8f\x23\x93\xec\x24\x26\xda\x1b\x21\xe1\x2b\xac\xff\x37\xb7\x91\x65\x55\xfb\xa6\xfa\xf4\xe3\xa3\xfa\xf7\xab\xe3\x9f\x3c\x60\x09\x9d\x71\xd4\x85\x6b\x17\xae\x55\xe2\x9f\x27\x5c\xeb\xe7\xb0\xf6\x3f\xdd\x23\x3c\x24\x07\xd4\xfa\xdc\xab\x07\x3e\x2f\xa7\x99\x2a\xe7\xbe\xee\x77\xd2\xb9\xdf\xa6\xfb\x95\xf3\x7f\x81\xfc\x3e\xfc\x4f\xdc\xab\x03\x9e\x9d\x9d\x7e\x77\x0f\x3c\xfd\x85\x3c\xf0\xbb\xf6\x2b\xb7\x84\x4b\x85\x82\xf4\x7f\xef\xa5\x53\xb9\xa5\x20\xdb\x36\x29\x28\xd9\x0a\x2f\x42\x18\x1a\xe3\x26\xa3\x4a\x36\x6c\x4b\x33\x13\x13\x8f\x86\xc9\x21\x6f\xf0\xbc\x7e\x87\x3e\x56\x9e\xd6\xe4\x06\x57\xa8\x29\x05\xb9\x57\xdf\x94\x88\x38\x58\xce\x28\x3b\x6d\xbe\xce\x93\xb3\x87\xe5\x8a\x91\x9a\x06\x04\x8f\x27\x69\x98\xc1\xbd\x38\x23\x89\x7a\x9c\x29\x09\xbc\xad\x47\xe6\xda\x07\xd9\xf4\x57\x20\x17\xcc\xd7\x42\x3d\x89\x64\x6d\xb2\x75\x89\x1f\xc0\x7b\x12\x02\x53\x72\x4c\xaf\x08\x55\x32\x96\x3f\x7a\x5a\xb4\x6b\x49\x17\x71\xa3\xea\x95\xc8\x56\xf1\x02\x09\x82\xdd\x03\xee\x4d\xc0\x90\xff\x02\x05\x88\x62\xe0\x3b\xef\x8b\x0f\x11\x50\x5f\xbc\xa3\xb5\xd1\xe1\xfe\x95\x61\x25\x63\xff\xf1\x91\x85\x7b\x1c\x1d\x3b\x47\xf9\x76\x1d\x3d\xf9\x58\x5c\xef\xc7\x03\x3a\x45\x30\xdd\xd1\x29\xa6\x08\xdf\x00\xf5\xb3\xc2\xc1\x58\xb0\x57\x66\x48\xc5\xd5\x87\x6d\x4d\x70\xd6\x38\xdc\x8c\xc7\xe0\x96\x3f\x9e\xbc\x64\x74\x46\xe6\x8a\xc7\x8b\xdf\x4b\xad\x4c\xe6\xa1\x52\x56\xc4\xc9\x2d\x92\x50\x1f\x4b\x97\x4b\x8a\x42\x73\xe7\x52\xf2\x16\xe3\xa4\x4e\x12\x8d\x7a\x86\xc3\xfa\x61\x79\xd4\x67\xd6\xe6\x37\x76\xdb\x4a\x92\x1e\xe9\x2d\x92\xb9\x93\x6d\x27\xcb\x4f\xf7\x75\x64\xeb\x68\x27\x74\xbe\x37\x0e\x10\x31\x2e\x7b\x5b\x4f\x1d\xad\xbc\xa3\x1a\x53\xad\x36\x17\x33\x8a\x91\x7c\xbc\x7d\x8f\x0b\xe9\x4e\xef\x6f\x9e\x01\x8e\x9e\x1c\x3b\x47\x83\x9a\xb8\xce\x9e\x99\x1d\xc0\xe0\xb9\xa9\x1c\xdd\x34\xba\xe7\xce\xf3\xa1\x81\x1c\x28\x9a\x06\xf0\x2a\x60\x48\x12\x3a\x1f\x4f\xdc\x73\x67\x86\x02\x01\x06\xb6\x86\x3c\xf0\xe3\x4d\xd9\x94\x90\xf2\x17\x7b\x1b\x34\x13\x64\x6b\xd1\xc6\x9a\x6c\xe0\xd3\x2b\xbd\x24\x42\x72\x32\x55\x59\xa5\xb9\x84\x19\x52\xc1\xb6\x66\xce\x49\xfd\x7f\xda\xdc\xc7\x96\xb4\x3b\x9c\xed\xe3\x69\xc5\x20\x0d\xd0\xbd\x0d\x5d\x3e\x54\xfd\xb0\xa3\x76\xbc\x80\xed\xc7\xca\x2e\xc5\x54\xd7\x97\x06\xc4\xd9\x99\xe9\xb4\xdc\xe5\x98\x96\x39\xc6\x6c\xd2\xbf\x67\x92\x39\x3b\x3b\xbd\xf7\x2c\x63\xd5\x4f\x31\x25\xad\x3a\xa5\x64\x71\x0f\xa8\x3b\x22\x54\x02\xbf\x45\xc1\x98\x7a\x80\x19\xf5\x35\x8b\xc9\xa7\xa8\x0a\xa7\xc0\xdf\xcd\x26\xd9\x62\x8c\xf8\xad\x65\x25\xfd\x65\x0a\xc2\x8f\xb4\xaa\x39\x77\x1c\x3e\x02\x1e\x08\xda\xe0\x49\xc6\xd1\x1c\x06\x22\xf9\x7b\x81\x31\x53\x54\x9a\xf1\x86\xa7\xbd\xe1\xb3\xde\xe8\xe9\x21\x71\x20\x4d\x9f\x14\x8b\xfe\x35\xcc\x75\xc2\x5d\x7a\x05\xad\x6a\x78\x8d\xa0\x65\xc2\xf9\x3e\x5d\xb7\x27\x11\xf5\x11\xf7\x3f\xfd\x71\xed\x1d\xc2\x7a\x2f\x93\xcf\x33\x32\x48\xf7\x0a\xe1\x05\xa1\xe0\x61\x14\x80\x07\x16\x56\xfc\x57\x6f\x74\xd2\x1b\x8e\x0e\x61\xc5\xfd\x90\x9e\x12\x26\xad\x6b\xca\x2d\x05\xa9\x2b\x47\x4d\x0a\x36\x08\xab\xbd\x90\xd7\x22\x37\xbe\x68\x31\x82\x47\x39\x34\x2b\x9a\x3e\x82\x69\x0c\x12\x49\x80\x6f\xee\x76\xdd\x12\x30\x8a\x10\x4e\xae\x2e\x8a\x26\x4e\xb7\xf4\x65\xbd\xc3\x39\x65\x87\xcd\xf9\xfe\xbc\xf2\xc8\x37\x48\xb9\x35\x63\x39\xc0\xef\xee\x1c\x32\x73\xe0\x7f\xb9\x93\x8f\x43\x34\x87\xeb\xd4\x92\x6f\x51\x08\x8e\xeb\x3a\xab\x55\xc9\xc1\x03\x54\xdf\xbd\xd5\x85\x4d\x2c\xd1\x7b\xf3\xa1\x41\xef\x18\x46\x11\x8b\xc4\x38\x65\xb6\x49\xf6\xb2\x89\x99\x33\x5f\x61\x59\xc7\xfa\x6e\x36\x4b\xd8\x6a\x96\x0c\xd4\xaf\xae\xc9\x10\xb4\xec\x16\x78\xc4\xd9\x2d\x49\x23\xa5\xa1\xf1\x75\x55\x34\xe7\xc8\x87\x09\x0b\x08\x5e\x36\x5f\x49\x84\xcc\x4f\xc2\x16\x51\x85\x82\x6a\xea\xae\xbb\x53\x28\x06\xf4\x84\xb3\x19\x09\xb6\xdc\x7a\x30\x61\x22\x71\x92\x8b\x81\x90\xd0\x0f\x02\x78\xb6\x77\x38\x60\xca\xef\x29\x51\x81\x39\x0b\x6c\xa9\xff\x73\xed\x23\xeb\x4b\x85\xf4\x69\x6f\x1b\x67\x40\xa8\xfa\xda\xee\x24\xe0\xfa\x44\xe8\xa3\xc7\x04\x09\xf1\x85\x71\xff\x42\xc9\x05\x50\x49\xf2\x8c\x24\xb9\x32\x9d\x42\x84\x58\xd8\x35\xbd\x09\xb0\xf7\x06\x96\xdb\x2f\x8a\x36\x87\x59\x6a\x2e\xfd\x06\x96\x97\x48\xa2\xd4\x65\x3d\xef\xf5\x24\x9b\xee\x42\x78\x92\x13\x3a\xcf\xfd\xd8\xf3\x5e\xbf\x81\x65\x3f\x27\xa8\x0f\x82\xe6\x75\x20\xa9\x57\xec\x0e\x16\x2c\x84\xc1\x7a\x57\x07\x7d\x21\x16\x03\xa4\xe4\x82\x71\xf2\x0d\xfc\x4f\x37\x7a\xa9\x56\x72\x9b\x41\xcb\x6c\x54\x6f\xc7\xec\xf8\x5b\x75\x7e\x6e\xda\x18\x58\xf9\x37\x49\x32\xda\x0c\x38\xd0\xf4\x92\x70\xa7\xac\x57\x11\xcc\x74\x86\xd9\x9a\x7a\x6c\xb0\xe9\x1d\x53\x5f\xd1\x1c\x71\xd1\xb1\x4f\xba\x05\xe6\xdb\x75\xf1\x2f\x0b\x48\xfb\x82\x38\x8b\xea\xb4\x19\x08\x30\x5a\xa5\x06\x3b\x2f\x8b\xcd\x0c\x1d\xd7\x60\x67\xb5\xd2\x55\xb8\xda\xbe\xc4\xfb\x16\x57\xe8\x26\xfe\x78\xa3\x56\xab\xb8\x6a\xd7\x67\xf5\xcd\xb1\xe5\x3c\xe9\x32\x71\x49\xc4\x8d\x39\x0d\xe1\x38\xf5\xce\xf5\x0a\xaf\x01\xf9\xff\xe1\xa4\xd2\x01\x54\x79\x38\x20\x09\xef\xf2\xcf\x2f\x5e\x71\x16\xc6\xcb\x30\x31\x26\x9f\x31\xfb\x56\x9a\x39\x1b\x51\x71\x51\x6c\x2f\x27\x1c\x42\xa2\xc2\x6a\x77\x59\x1e\x87\x0a\xce\xb4\xd3\xb2\x0a\xce\x94\x76\xac\xcf\x55\x33\x84\xc1\xf2\x32\x2a\x1b\x16\x46\xc9\xbf\x83\x34\xde\x15\x39\x2d\x4f\x83\x1b\x3c\x24\x44\x7c\x69\x55\x86\x72\xa6\x04\x4b\x1b\x4f\x5e\x31\xfe\x05\x71\x3f\xf1\xaa\x16\xfc\x75\xfd\xac\xb5\xca\x8e\xf5\x2d\xd7\x4e\x6d\x73\xd3\x30\x40\x3a\x6b\xcd\xa2\x96\x7e\xb0\x39\xec\x2d\xe0\x14\x2f\xfc\x71\x3c\x67\x8b\x0a\xeb\xec\xe8\x30\x25\xfe\xf6\xce\x53\x10\x90\x7e\x26\xb2\xcb\xe4\x4e\x5b\x8c\xaf\xf1\x44\x76\xec\x1c\x0d\xd2\x4f\x5e\xd2\xbf\xd6\x4e\xb1\x39\x2c\x1d\xa4\xa0\x7f\x7a\x0f\x1b\xa5\x08\x79\x7b\x88\xb9\x56\xea\xda\x2d\x5a\x3a\xc4\x5a\xaf\xfd\x1c\x23\x97\x63\xf7\x69\x88\xed\x30\x77\x70\xfb\x71\xd8\x53\xdb\x51\x6e\xef\x27\xcd\x72\x9a\xdf\xd6\x4b\x6e\x2a\x6a\xf0\x55\x02\xd5\xcd\x90\x55\x59\xcb\xa9\x0f\x5a\xc2\xb0\x30\xf5\x0c\xce\xae\x25\x0c\x29\xc9\x3e\x24\x27\xd7\x2b\x42\x19\x5f\x23\x42\x2d\x4a\x52\xc4\x99\x04\x2c\xc1\xf7\x40\x4a\x42\xe7\xed\x1c\xdf\x4d\x3e\x52\x4d\xfb\xd0\x17\x48\xc0\xb3\xb3\xdf\x29\x66\x3e\x38\x8f\x3d\x89\xb8\x54\x91\xf3\x39\xad\x38\x9f\x9f\x54\x4e\xf6\x4d\xc3\xb6\xe6\x14\x9a\xf1\x75\xe6\xbb\x88\x7f\x40\xf6\xfb\x7a\x3f\x2d\xc5\x89\x0d\x13\xd8\xaa\x90\x41\x79\x2f\x95\x90\x2c\xf4\x12\x73\xb4\xe0\x7d\x8d\xa8\x1f\x00\xdf\x44\xf3\xfa\x43\xb3\x95\x0e\x1c\x40\x55\x28\xa3\xc3\x34\xef\x03\xd3\x8c\x7f\xf4\xb3\x9b\xdc\x6d\x57\x79\xf6\x08\x69\xed\xaf\x8e\xbe\x0f\x3e\x3a\xd6\x53\xed\x88\x8e\xc6\xbc\x1d\x36\x9a\xc4\x63\x07\x8e\x16\xc9\x0e\x0a\x8e\xc6\x01\xd1\x41\xa3\x8d\xd2\x3b\x68\xb4\xc5\x9b\x0e\x1a\xed\xa0\xd1\x0e\x1a\xed\xa0\xd1\xa6\xd1\x41\xa3\xf7\x0a\x8d\xe6\xdd\x77\x07\x8c\x76\xc0\x68\x07\x8c\x16\xf4\xfa\x55\x80\xd1\x1d\xf6\x64\xf3\x64\xfd\xa2\xc5\x8f\xc2\x4c\x63\x2f\x33\x3e\x8c\x8f\xd5\x9b\x46\xfb\x8d\x31\x63\xc6\xbb\xc9\xef\x10\xeb\x78\x74\x88\x75\xc6\x6e\x83\x58\xc7\x8d\x40\x87\x57\xd7\xf1\xfe\x6c\x78\x75\xfc\xaf\x14\xf0\x74\x99\x92\x91\x92\x89\xbd\x1e\xad\x1e\xfd\x3f\x00\x00\xff\xff\x1f\xfc\xc0\xf8\x95\x4e\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x6f\x4f\xe3\xc6\x13\x7e\xbf\x9f\x62\x7e\xe1\xa7\xa6\x3d\xd5\x36\x5c\x4f\xa8\xe5\x00\x09\x42\x40\x88\x3f\x41\x24\x3d\xe9\x54\x55\x68\xbd\x3b\xc6\xab\xd8\xbb\x66\x67\x1c\xe1\xe6\xf2\xdd\x2b\xdb\x09\x24\x21\x05\xae\x2f\x9a\x57\xc9\xcc\xb3\xf3\x3c\x3b\xbb\xfb\x4c\xb6\xfe\x17\xc5\xc6\x46\xb1\xa4\x14\x02\x7c\x14\x62\x0b\x46\x83\x93\xc1\x1e\x44\xc8\x2a\xd2\x96\x72\x49\x0f\xa1\x8e\x9c\x37\xf7\xc6\x06\x65\x41\xec\x51\xe6\x81\xb6\x14\x2a\x67\x13\x30\x04\xaa\xf4\x1e\x2d\x67\x15\xa4\xd2\x6b\xe5\x34\xea\xcf\x60\x58\x6c\x41\xe1\x5d\x2c\xe3\xac\x02\x4a\x5d\x99\x69\xdb\x65\x88\x51\x88\x61\xff\xf6\xcb\x79\xaf\x7f\x37\xfa\x7a\xd3\x3f\x68\x2b\x0b\x93\xc0\x1f\x10\x24\xd0\x69\x88\xa9\xa2\xba\xba\xb9\x8f\x24\xbb\xdc\xa8\xc0\x15\x68\x29\x35\x09\x07\xd6\x69\xec\xc0\x9f\x9f\x81\x53\xb4\x02\x00\x60\xa5\xdc\x3a\x5e\x24\x46\x08\xaa\x88\x31\x57\x9c\x01\xb1\x2b\x40\x3b\x35\x46\x1f\x12\xfa\x89\x51\x28\xca\xdc\x95\x96\x21\xca\x2d\x47\x1e\xc9\x95\x5e\x21\x7c\xfb\x06\xec\x4b\x14\xf9\x38\xa1\xf0\x31\xa1\x5a\x5b\xa4\x71\x12\x91\x8e\x77\x04\xaa\xd4\x41\xf7\xe9\x37\x40\x34\x91\x3e\xca\x4c\x1c\xb5\xb5\x01\xea\x25\x70\xef\x8b\x87\xd2\xb1\x04\xd8\x86\xed\x2e\x1c\x1e\x36\x9b\x4b\x88\x65\x2c\xe6\xa4\xab\xeb\x84\x47\x62\xe7\x51\x39\x0b\xc1\xed\x8b\xec\xf2\x3e\xa4\xe7\xf5\x8d\x88\xe9\xd4\x24\x80\x0f\x10\xf6\x1f\xd9\xcb\xf0\xd6\x65\x08\x1d\x63\x13\x2f\x3b\xb3\x59\x2b\xba\x73\x3c\x18\x8c\x86\xa3\xdb\xa3\x9b\xbb\xde\xe0\xfa\xf4\xfc\xec\xee\xfa\xe8\xaa\x7f\x50\x77\x35\x68\x5b\x1e\xb4\x0b\x16\x6a\x9f\x8f\xe2\xff\xd3\xe5\x4e\xcf\x9a\x93\x10\xd3\x29\x66\x84\xdf\x51\x5d\xb9\xbc\x28\x19\xbf\xa3\xbe\xd5\xb3\x99\x10\x84\x1a\x02\x03\x01\x42\x87\xb6\x4e\xfa\xc7\xbf\x9f\xdd\x5d\x0e\xce\x2e\xfb\x5f\xfa\x97\x07\x1f\xd7\x03\x9f\xb6\x3a\xf0\x9e\xea\xc2\xe7\x10\xf8\xa4\xc5\x22\x2b\x1d\x7d\x68\xbf\xb7\xb7\x32\xca\x25\x31\xfa\xe8\x83\x10\xb1\x24\xdc\xfd\x04\x81\x86\xfd\xfd\x7d\x98\x4e\xe1\xb8\x09\xf4\x6d\x7d\xdf\xe1\xc7\xaf\x32\xcf\xae\xa4\xa7\x54\x66\x10\xf6\x1a\xc6\xf0\xda\x69\x3c\x76\x8e\x89\xbd\x2c\x2e\xca\x18\x5b\x25\x3f\xc1\x6c\x06\x87\xcb\x2c\xb5\x94\x28\x5e\x20\xc3\xf1\x13\xf4\x2d\xd6\x1e\x7a\x3e\xa2\xe3\x8a\x91\x36\xb3\xd6\x80\x7f\xe0\x6b\xce\xe4\x89\xb4\x40\x1f\x2a\xcf\x6f\x11\xde\x78\x33\x91\x8c\x17\x58\xbd\x4a\x7b\x81\xd5\xbb\x59\xc7\x58\x09\x95\xe6\x4e\xc3\xf6\xee\xf6\x36\xbc\x6f\xc5\x4b\xd8\xc6\xf6\xfd\x9b\xfe\xf5\xe4\x2b\x4d\x53\xb2\xe9\x92\x2a\x5e\x0a\x68\x53\x6d\xbc\x18\x9b\x48\xc9\x80\x7d\x49\x1c\xb5\x86\x12\x49\xab\x52\xe7\x29\x7a\x76\xb2\x79\xb1\xb2\xd0\x92\x31\x58\xe0\xc5\xdc\x5c\xac\xcc\xb1\x7e\xd8\xe8\x61\x67\xf7\xd7\x70\xf7\x97\x70\xe7\xe3\x6f\xe1\xce\x6e\x77\x83\xac\xda\xb5\xb2\x49\x63\xc8\x22\x1f\x6b\xe3\x21\x58\x55\xa8\x32\x57\xea\xc2\xbb\x89\xd1\xe8\x9f\x4d\x9e\x53\x43\xb5\x83\xeb\xb2\xc8\x8c\x92\x8c\x1a\x8c\xad\x8d\x15\x52\xcc\x72\x50\xa9\xf4\x4c\x90\x38\xdf\xc4\xda\xc7\x00\x85\xd3\xf4\x33\x48\xab\x81\x53\xc9\x5d\x02\xeb\x18\x8c\x46\x99\x09\x25\x79\x55\xdd\x0a\x6f\x24\xff\x2a\x3d\xb6\x63\x63\x7f\xbf\xdb\x1f\x9c\x76\x05\xa3\x95\x96\xcf\xf5\x5e\x7d\x38\xe1\x95\xb4\x26\x41\xe2\x70\xd4\x86\x4f\x60\x36\x13\x54\xc6\xa4\xbc\x29\xd8\x38\xfb\x02\x38\x5c\x4e\x36\x70\x29\x75\x2f\x33\xb8\xa1\xe8\x3c\xbc\x8a\x1a\xa2\xf2\xc8\x1b\x91\x6d\x6a\x8e\x1e\xbd\x2d\x74\x31\x3b\xce\xbc\x2b\x8b\x35\xdc\xed\x72\xae\x06\x67\x4e\xc9\x5a\xf4\x1a\xee\x72\x1e\x6e\x36\x8e\xaa\xf4\x86\xab\x66\xcd\xb5\xcc\x71\x0f\x2c\x3d\x19\xa8\x28\xbc\xc9\xa5\xaf\x86\x4a\x66\x38\x44\x6e\x01\x44\x8b\x3c\xfc\x37\x1f\x31\xc9\x47\x55\x81\x7b\x30\xc9\x89\x44\x7f\x70\x5a\xdf\x2e\xeb\x18\xf7\x60\x93\xe3\x82\xf2\xf5\x5f\x8d\xcc\xb9\x82\xa0\xb4\x6c\xb2\xc5\xb5\x32\x04\x65\xb1\x34\xe1\xd0\xca\x38\xc3\x8d\x45\x9e\x06\xde\xfa\x3c\x7c\x0d\x0c\x3f\x88\xbf\x03\x00\x00\xff\xff\xa0\xf4\x47\x99\xed\x08\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
