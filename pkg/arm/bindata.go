// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x41\xe8\x16\x48\xbb\x88\x3f\x93\xf6\x8a\x00\xf7\x90\x26\xdb\xab\xd1\x4d\x6b\x44\xed\xde\xc3\xa2\xe8\xd2\xd4\xd8\x66\x23\x91\x3a\x92\x72\xeb\xfa\xf2\xbf\x1f\x44\x7d\xd8\xfa\x32\x25\xdb\x6d\xd2\xac\xd8\x87\xb8\xd2\xcc\x70\x38\x9c\x19\x0e\x7f\xa4\x56\x47\x08\x21\x64\xfd\x22\xc9\x1c\x3c\x6c\x9d\x23\x6b\xae\x94\x2f\xcf\x7b\xbd\xe8\x49\xd7\xc3\x0c\xcf\xc0\x03\xa6\xba\xf8\x5b\x20\xa0\x4b\xb8\x17\xbf\x93\xbd\x61\x7f\xf0\xac\xd3\x1f\x74\xfa\x83\x9e\x03\xbe\xcb\x97\x21\xdd\x7b\xf0\x7c\x17\x2b\xe8\x7e\x96\x9c\xfd\xc3\x3a\x89\x7a\x20\x9c\x29\x60\xea\x0f\x10\x92\x72\x16\x76\x34\xe8\xf6\xc3\x7f\x09\x81\x8f\x05\xf6\x40\x81\x90\xd6\x39\x5a\xdd\xc5\x4f\x17\x58\x50\x3c\x71\x21\xf3\x50\x80\xe4\x81\x20\xfa\xe1\x9f\xfa\x51\xd8\x56\xe9\x2f\x4d\xa4\x96\x3e\x84\xdd\x5c\x53\x22\xb8\xe4\x53\xd5\x7d\x0b\xea\x0b\x17\xb7\x3d\x16\xfd\xb5\x81\x04\x82\xaa\xe5\xbf\x05\x0f\x7c\x19\xab\x91\xb2\x63\x9f\x6e\xe8\x3a\xec\x0f\x9e\x77\xfa\xa7\x9d\xd3\x7e\x9e\xce\xe5\x04\xab\x98\x6a\xb5\x42\xdd\x4b\xce\x14\xa6\x0c\x84\x0d\x62\x41\x09\x74\x7f\x8f\x09\xd0\xff\xd0\x67\x89\xee\xee\xf2\x02\x18\xf6\xb4\x9e\x4c\xce\x3a\x84\x7b\x7e\xa0\x20\x4f\xe2\x0b\xee\x83\x50\x34\xb2\x42\xe6\x9d\x7e\x2f\xe3\x91\xdc\x04\x6e\xce\x26\x9b\xad\xc8\x58\xd0\x01\xbb\x2e\xff\xf2\x49\xca\x79\x4e\x83\x26\xda\x64\xad\x48\x08\xc8\x90\xce\xba\x08\x45\x6f\x11\xab\xc9\x1d\x90\x44\x50\x3f\xb1\xa7\xe6\x41\xb6\xfd\x1a\x29\x81\xa7\x53\x4a\x6a\xf0\x2b\xca\xb4\xb9\x2f\x1c\x47\x80\x94\x63\x01\x53\xfa\x35\x14\xf6\x6b\x03\xe6\x31\x17\xea\x06\xb3\x99\x36\xca\x70\xd8\x19\x0e\x8d\xcc\x54\x00\x49\xf4\x1e\xb1\x09\x0f\x98\x63\xe2\xf1\x05\xe5\xe1\xb4\x59\xe7\x68\xd0\x1f\x18\x89\xb9\xe2\x84\xbb\xa1\xfc\xf7\xc4\x37\xc9\x8e\x02\xa4\xb9\x11\x22\xbe\xcc\xf8\x7f\xb5\x2a\x59\xee\x4a\xdf\x14\x9f\x7e\x3c\x2a\x7f\x7f\x77\xf2\x98\xa2\x97\xb2\xa9\xc0\x6d\xec\xb6\xb1\x5b\x24\xfe\x79\x62\xb7\xbc\x8f\xda\xfe\x17\x56\x0f\x0f\xc9\x01\x43\x7d\xee\xd5\x03\x5f\xe4\x73\x4e\x91\x73\x5f\xf7\x1b\xb6\xee\xb7\xe9\x7e\xf9\xc5\x20\x43\x7e\x1f\xfe\x27\xef\xd5\x01\xcf\xce\x4e\xbf\xbb\x07\x9e\x3e\x22\x0f\xfc\xae\xc5\xcb\x82\x0a\x15\x60\x37\xfe\xef\xfd\x97\x2d\x0b\x06\xaa\x69\xc5\x82\xa3\x79\xb1\x7d\x4c\xa0\x32\x88\x12\xaa\x68\xf6\xb6\x54\x36\x9a\x78\xd0\x8f\xf6\x82\xbd\x17\xe5\xd3\xf5\xb1\xf0\xb4\x24\x51\x58\x32\x98\x30\x50\x7b\x15\x51\x91\x88\x83\x25\x90\xbc\x07\xa7\xe3\x1c\x9e\x3d\x2c\xbf\xf4\x83\x89\x4b\xc9\x68\x1c\xc7\x1c\xdc\xbf\x67\x52\xbf\x23\x78\xa0\x40\x34\x75\xcf\x74\x28\x6e\xa2\xcb\x35\xa8\x39\x77\x42\xa1\xb6\xc2\xaa\x34\x0d\x5b\xd4\x71\xe1\x3d\xf5\x80\x07\x6a\xc4\xae\x29\x0b\x94\x96\x3f\x78\x96\x35\x72\x4e\x17\x79\x1b\x94\x2b\x91\x8c\xe2\x25\x96\x94\x58\x07\x9c\x28\x97\x63\xe7\x25\x76\x31\x23\x20\x76\x9e\x24\x07\x7c\x60\x8e\x7c\xc7\x4a\x43\xc5\xfa\x33\xc1\x57\x46\xce\x93\xe3\x1a\xbe\x72\x7c\x82\x8e\xd3\xe9\x3a\x7e\xfa\x31\x3b\xde\x8f\xdf\xcb\x43\xdc\xc9\x8e\x1e\x32\xc1\xe4\x16\x98\x93\xac\x2f\x9c\xbb\x7b\xe5\x8c\x58\x5c\x79\x40\x97\x84\x6d\x89\xf7\x4d\x85\x46\xc7\x9c\xd1\xf8\x92\xb3\x29\x9d\x05\x42\x5b\x60\x2f\xb5\x12\x99\x87\x4a\x66\xbe\xa0\x0b\xac\xa0\x3c\xb0\xae\x96\x0c\x7b\xe6\x02\x27\xe7\x3a\xc6\x4e\x51\x14\x9a\x61\x0f\x87\x75\xca\x7c\x2b\xcf\xb9\xd5\x6f\xea\x4d\x2b\x8d\x4a\xa9\xb7\x58\xa5\x4e\xb6\x9d\x2c\x05\x01\xca\xc8\xd6\xa1\x4f\xd9\x6c\x6f\xb8\xc0\xe7\x42\x75\xb6\x6e\x4e\x1a\x79\x47\x31\xa6\x1a\x4d\x2e\xe1\x8c\x60\xf5\x64\xfb\x1c\x67\x72\x5f\x38\xbf\x69\x06\x38\x7e\x7a\x82\x8e\x7b\x25\x71\x9d\x3c\x33\x3b\x80\xc1\x73\x63\x39\x61\x6d\x69\x9d\xa3\x17\x7d\x03\x39\x30\x3c\x71\xe1\x95\xcb\xb1\xa2\x6c\x36\x1a\x5b\xe7\x68\x8a\x5d\x09\x06\xb6\x8a\x3c\xf0\xe3\x4d\x59\x95\x90\xd2\x17\x7b\x1b\x34\x11\x54\xd7\xa2\x95\x0b\xb4\x81\x2f\x1c\xe9\x15\x95\x4a\xd0\x49\x90\x2c\x3b\x57\x30\xc5\x81\xbb\xad\xcc\x43\xb1\xff\x4f\xaa\x2b\xdc\x9c\x76\x87\xb3\xbd\xee\x56\xf6\xe2\x00\xdd\xdb\xd0\xf9\xbd\xd7\x0f\xdb\x91\xeb\x01\x6c\xdf\x7d\xb6\x29\xa6\x38\xbe\x38\x20\xce\xce\x4c\x9b\xea\x36\xc7\x34\xcc\x31\x66\x93\xfe\x3d\x93\xcc\xd9\xd9\xe9\xbd\x67\x99\x5a\xf5\x14\x0f\x54\xad\x4a\x29\x1a\xdc\x03\xaa\x8e\x28\x53\x20\x16\xd8\x1d\x31\x1b\x08\x67\x4e\xc8\x62\xf2\x29\x16\x78\x13\x10\xef\xa6\xe3\x64\x30\x46\x98\xb7\xe6\x4a\xfa\x68\x16\x84\x1f\x69\x55\x73\xee\x38\x7c\x04\x3c\x10\xe8\xc1\x56\x5c\xe0\x19\xf4\x64\xf4\xf7\x82\x10\x1e\x30\x65\x06\x1f\x9e\x75\xfa\xcf\x3b\x83\x67\xdf\x0d\x21\x8a\x99\xa7\x74\xd6\xbd\x81\x59\x98\x7d\x97\x76\x46\xc5\x2a\x01\x46\x80\x33\x62\x7f\x1f\x5b\xc2\x56\x98\x39\x58\x38\x9f\x7e\xbf\xb1\x0f\x61\xcf\xcb\xe8\x92\x47\x82\x05\x5f\x63\x32\xa7\x0c\x6c\x82\x5d\xb0\xa1\x86\x5d\xff\xd9\x19\x0c\x3b\xfd\xc1\xc1\xed\xba\x1f\x2a\x94\x43\xb6\xc3\x25\x67\xc1\x40\x85\x0b\x4b\x49\x86\x36\x08\x2b\x3d\xe3\x0f\x45\x6e\x5c\x92\x31\x02\x4d\x29\xa6\x2b\xab\xee\xd5\x54\xc6\x90\xa2\x20\x36\xa7\xde\x3a\x39\x5a\xad\x3a\x48\x60\x36\x03\xf4\x0b\xf6\x7d\x74\xfe\xaf\x12\x0b\x8f\x53\xc7\xea\x5e\xcc\x80\xe9\x5d\xff\x58\xf0\x29\x75\x21\x34\xf8\x6a\x85\xe8\x14\xc1\x7f\xb5\x84\xee\x5b\xec\x01\xfa\x2b\xd6\xec\x2f\x74\x57\x4c\x00\x16\xc1\x3e\x26\xd1\x19\x4b\x38\xa5\x9a\xed\x72\x8b\x67\xa3\x5c\x78\x68\x86\x3f\xae\x6d\xfa\x0d\x52\x0e\x3d\x10\x60\x4e\xa4\x4f\xf4\x23\x9f\x68\x42\x92\x48\xd3\x24\xc0\x46\x1e\x9e\xc1\x4d\x3c\x67\x5a\x73\xcb\xca\x33\x5a\xbe\x8b\xcb\xcb\xc8\xb2\x90\xd5\x12\xed\x37\x1f\xb6\x0d\x45\x83\x3a\x72\x1e\xcd\x45\x9e\x77\x9c\xbc\xdc\x2a\x41\x70\x27\x20\xaa\x8c\xff\xdd\x74\xba\xc1\x5b\x66\x82\x12\xe3\x18\x73\x07\x5f\x80\xf0\x05\x5f\xd0\x38\x60\x2b\x2a\x72\x2b\xf0\x67\x02\x3b\x30\xe6\x2e\x25\xcb\xea\x53\x14\x8f\x3b\x51\xf6\xc0\x2c\xc0\x6e\x71\x4d\x29\x3b\x06\xc9\xe6\x95\xd8\xff\xaa\xbb\xe0\xd2\x44\x82\xa2\xb3\x0c\x8f\xb2\x0f\x12\x44\x32\x97\xc4\xe5\x81\xd3\x09\x64\x01\x7f\xcd\xb0\xc5\xfe\x2d\x42\x9f\x59\x9f\x83\xc4\x4f\x3b\xdb\x38\x5d\xca\x82\xaf\xcd\xb6\x28\x96\x43\x65\xb8\x27\x1a\x63\x29\xbf\x70\xe1\x5c\x04\x6a\x0e\x4c\xd1\x34\x31\x2a\x11\x98\xb6\x47\x52\xce\xeb\x55\xe3\x11\xe2\xf8\x06\x96\xdb\xcf\xb6\x36\x9b\x59\x6a\x2a\xfd\x16\x96\x57\x58\xe1\xd8\x71\x6d\xfb\xf5\x38\xe9\xee\x42\xda\x4a\x50\x36\x4b\xbd\xd9\xb6\x5f\xbf\x81\x65\x37\x25\xd8\x12\x0f\xd5\x83\xc1\x2a\x1c\xb6\xd5\x9b\x73\x0f\x7a\xeb\xa9\xed\x75\xa5\x9c\xf7\x70\xa0\xe6\x5c\xd0\x6f\xe0\x7c\xba\x0d\xc7\x5b\x4b\x6e\x35\xa4\x9a\xb4\xe2\xa9\x5e\x3d\xfe\x46\x75\xa9\x15\x97\x2d\xb5\x9c\x9c\x46\x69\x6e\x0a\x02\x58\x7c\xb8\xb9\x5b\x2e\x2c\x48\xe6\x61\xb6\x31\xa7\xa1\x3a\xf8\xf9\x3e\x09\x31\x6b\x19\xbd\xfc\x35\x4c\xca\x19\x09\x8b\x75\x61\x92\x97\x12\xd7\x2c\xb9\x75\xc7\x95\x60\x34\x55\x09\xde\x9f\x17\x9e\x58\x5f\x17\x06\x49\x17\x61\x7d\x50\xac\xb2\xf4\x94\xea\xda\xa1\x4a\x88\x9e\xc2\x44\x46\x58\x54\x54\xe4\xfe\xcd\xb6\x65\x3b\x6c\x71\x79\x45\xe5\xad\x39\x59\x11\x9d\xa0\x67\xe1\x60\x6f\x00\x3b\xff\x11\xb4\x50\xa1\x14\x79\x04\x60\x05\xef\xd2\x4b\x26\xaf\x04\xf7\xf4\x60\x4c\x8c\xd1\x35\x6e\xa7\x96\x66\x68\x23\x6c\x2e\xb2\xb5\xf0\x58\x80\x47\x03\xaf\x58\x0a\xe7\xdb\xa1\xa2\x37\xae\x04\x6b\x45\x6f\x4c\x3b\x0a\xb7\x85\x53\x4c\xa0\xe6\x59\x5a\xd2\x6a\x18\x25\xbd\xed\x69\x3c\xea\x42\x0d\x37\xb3\x1b\x3c\xd4\xc3\x62\x59\x6b\xb1\x4a\x99\x22\x28\x70\x34\x7e\xc5\xc5\x17\x2c\x9c\xc8\xab\x1a\xf0\x97\xd5\xdb\xb5\x55\x46\xb5\x0f\xe9\x76\x2a\xeb\xab\x9a\x01\x91\x5a\x6b\xe6\x37\xf4\x83\xcd\x56\xdf\x02\x28\x7b\x79\x81\xe8\x3e\x1b\x2c\xc1\x68\x47\x87\xc9\xf1\x37\x77\x9e\x8c\x80\xf8\xfe\xcb\x2e\x9d\xa3\xa6\x10\x65\xe5\x8e\xf1\x04\x1d\xf7\xe2\xbb\x3c\xf1\xdf\xda\x4e\xb1\xd9\x6a\x3a\x48\x46\xff\xf8\x18\xd9\x8f\x01\xfe\xe6\x08\x79\xa9\xd4\xb5\x5b\x34\x74\x88\xb5\x5e\xfb\x39\x46\x2a\xa7\xde\x35\x97\xba\xcd\x5c\xe2\xed\xc7\x51\x9f\xba\x1e\xe5\xf6\x82\xd3\x2c\xa7\xfa\x6d\xb9\xe4\xaa\x45\x0d\xbe\x2a\x60\x61\x75\x54\x6b\x59\x4b\xa9\x0f\xba\x84\x11\x69\xaa\x19\xd0\xae\x4b\x18\x0e\x14\xff\x10\xed\x6f\xaf\x29\xe3\x62\x0d\x5f\x35\x58\x92\x7c\xc1\x15\x10\x05\x8e\x0d\x4a\x51\x36\x6b\xe6\xf8\x56\x74\x15\x37\x2e\x4c\x5f\x62\x09\xcf\xcf\x7e\x63\x84\x3b\x80\x9e\xd8\x0a\x0b\x15\xf8\x6b\xec\xe5\x69\x39\x0a\x50\xd5\xea\x2e\x3c\x99\x62\x7d\x9d\xfe\x2e\xf4\x57\x74\xbf\xad\x27\xb5\xa6\x38\xb9\x61\x87\xba\x2a\x24\xe0\xe3\x65\x20\x15\xf7\xec\xc8\x26\x0d\x78\x5f\x63\xe6\xb8\x20\x36\xf1\xc7\x6e\xdf\x6c\xa5\x03\x47\x51\x11\xf5\x68\x51\xd8\x7b\x47\x61\xf5\xc7\x4e\xbb\xc9\xdd\x76\x36\x59\x1f\xd3\x2d\xfd\xda\xea\x01\x20\xba\x5a\xaf\x16\xcf\x6d\xf1\xdc\x92\xf6\x58\xf1\x5c\xed\xf3\x2d\x9a\x5b\x29\xbd\x45\x73\x5b\x34\xb7\x28\xa5\x45\x73\x5b\x34\xb7\x45\x73\xab\x54\x6e\xd1\xdc\x9f\x19\xcd\x4d\xb7\x07\x2d\x96\xdb\x62\xb9\x2d\x96\x9b\xd1\xeb\xb1\x60\xb9\x3b\xcc\xc9\xe6\xd6\xff\x65\x83\xcf\xf0\x4c\x6d\x2f\x33\x3e\x8c\xcf\x03\xaa\x5a\xf3\x89\x31\xc3\xdc\xbb\xc9\x6f\x41\x76\xdd\x5a\x90\x3d\x61\xaf\x03\xb2\x47\x70\x58\x0b\xb1\x57\xf1\xfe\x6c\x10\xbb\xfe\x15\xc3\xb2\x16\x0f\x94\x1f\xa8\xc8\x5e\x47\x77\x47\xff\x0f\x00\x00\xff\xff\x7a\x54\x86\x8a\x4d\x50\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xe1\x4e\xe3\x46\x10\xc7\xbf\xef\x53\x4c\x43\xd5\xb4\xa7\xda\x86\xeb\x09\xb5\x1c\x20\x41\x08\x08\xc1\x91\x88\xa4\x27\x9d\xaa\x0a\xad\x77\xc7\x78\x15\x7b\xd7\xcc\x8e\x23\x7c\x21\xef\x5e\x39\x4e\x42\x02\x39\x0e\x4e\xfd\x06\xb3\x33\xbf\xff\xec\xcc\x7a\x26\x5b\x3f\x45\xb1\xb1\x51\x2c\x7d\x0a\x01\xde\x0b\xb1\x05\xc3\xde\x49\x6f\x0f\x22\x64\x15\x69\xeb\x73\xe9\xef\x42\x1d\x39\x32\xb7\xc6\x06\x65\xe1\x99\x50\xe6\x81\xb6\x3e\x54\xce\x26\x60\x3c\xa8\x92\x08\x2d\x67\x15\xa4\x92\xb4\x72\x1a\xf5\x47\x30\x2c\xb6\xa0\x20\x17\xcb\x38\xab\xc0\xa7\xae\xcc\xb4\x6d\x33\xc4\x28\xc4\xa0\x7b\xfd\xf9\xbc\xd3\xbd\x19\x7e\xe9\x77\x0f\x1a\xb2\x30\x09\xfc\x03\x41\x02\xad\x99\xb0\xaf\x7c\x4d\x37\xb7\x91\x64\x97\x1b\x15\xb8\x02\xad\x4f\x4d\xc2\x81\x75\x1a\x5b\xf0\xef\x47\xe0\x14\xad\x00\x00\x58\xc3\x3d\xf5\x17\x89\x11\xc2\x57\x9e\x31\x57\x9c\x81\x67\x57\x80\x76\x6a\x84\x14\x7a\xa4\xb1\x51\x28\xca\xdc\x95\x96\x21\xca\x2d\x47\x84\xde\x95\xa4\x10\x1e\x1e\x80\xa9\x44\x91\x8f\x12\x1f\xde\x27\xbe\xce\x2d\xd2\x38\x8e\xbc\x8e\x77\x04\xaa\xd4\x41\x7b\xf9\x3f\x40\x34\x96\x14\x65\x26\x8e\x1a\x36\x40\x1d\x02\xb7\x54\xdc\x95\x8e\x25\xc0\x36\x6c\xb7\xe1\xf0\x70\x76\xb9\xc4\xb3\x8c\xc5\x5c\x74\x3d\x4e\x10\x7a\x76\x84\xca\x59\x08\xae\x9f\x9d\xae\xde\x43\x12\x3f\xbd\x88\x98\x4c\x4c\x02\x78\x07\x61\xf7\x9e\x49\x86\xd7\x2e\x43\x68\x19\x9b\x90\x6c\x4d\xa7\x4d\xd2\xad\xe3\x5e\x6f\x38\x18\x5e\x1f\xf5\x6f\x3a\xbd\xab\xd3\xf3\xb3\x9b\xab\xa3\x4f\xdd\x83\xba\xaa\x41\x53\xf2\xa0\x09\x58\x64\xfb\xd8\x8a\x9f\x27\xab\x95\x9e\xce\x3a\x21\x26\x13\xcc\x3c\xbe\x81\xae\x5c\x5e\x94\x8c\x6f\xe0\x5b\x3d\x9d\x0a\xe1\x51\x43\x60\x20\x40\x68\xf9\xad\x93\xee\xf1\xdf\x67\x37\x97\xbd\xb3\xcb\xee\xe7\xee\xe5\xc1\xfb\xa7\x86\x0f\x5b\x2d\x78\x0d\x5d\x50\x0e\x01\x25\x8d\x2f\xb2\xd2\xd1\xbb\xe6\xef\xe6\x55\x46\xb9\xf4\x8c\x14\xbd\x13\x22\x96\x1e\x77\x3f\x40\xa0\x61\x7f\x7f\x1f\x26\x13\x38\x9e\x19\xba\xb6\x7e\xef\xf0\xeb\x17\x99\x67\x9f\x24\xf9\x54\x66\x10\x76\x66\x8a\xe1\x95\xd3\x78\xec\x1c\x7b\x26\x59\x5c\x94\x31\x36\x99\xfc\x06\xd3\x29\x1c\xae\xaa\xd4\xa9\x44\xf1\xc2\x33\x1c\x2d\x5d\xbf\xa7\xda\x41\xe2\x23\x7f\x5c\x31\xfa\xcd\xaa\xb5\xc3\x37\xf4\x66\x3d\x59\x8a\x16\x48\xa1\x22\xfe\x9e\x60\x9f\xcc\x58\x32\x5e\x60\xf5\xa2\xec\x05\x56\xaf\x56\x1d\x61\x25\x54\x9a\x3b\x0d\xdb\xbb\xdb\xdb\xf0\xba\x88\xe7\x6e\x1b\xcb\xf7\x23\xf5\xeb\xc8\x17\x8a\xa6\xe4\xac\x4a\xaa\x78\x9e\x40\x73\xd4\xd8\x8b\x91\x89\x94\x0c\x98\x4a\xcf\x51\x33\x50\x22\x69\x55\xea\xc8\x47\x8f\x93\x6c\x0e\x2b\x0b\x2d\x19\x83\x85\xbf\x98\x0f\x17\x2b\x73\xac\x3f\x6c\x24\xd8\xd9\xfd\x33\xdc\xfd\x23\xdc\x79\xff\x57\xb8\xb3\xdb\xde\x90\x56\x3d\xb5\xb2\xf1\x6c\x20\x8b\x7c\xa4\x0d\x41\xb0\x9e\xa1\xca\x5c\xa9\x0b\x72\x63\xa3\x91\x1e\x87\x3c\xa7\xc6\xd7\x13\x5c\x97\x45\x66\x94\x64\xd4\x60\x6c\x3d\x58\x21\xc5\x2c\x07\x95\x4a\x62\x0f\x89\xa3\x99\xad\xf9\x18\xa0\x70\xda\xff\x0e\xd2\x6a\xe0\x54\x72\xdb\x83\x75\x0c\x46\xa3\xcc\x84\x92\xbc\x9e\xdd\x9a\x6e\x24\xbf\x96\x84\xcd\xda\xd8\xdf\x6f\x77\x7b\xa7\x6d\xc1\x68\xa5\xe5\x73\xbd\x57\x37\xa7\x6e\x01\x4b\x63\x91\x06\xcd\x44\x0b\xfb\xe4\x0a\x24\x36\xe8\xc3\xa3\xaf\x7d\x72\x89\xc9\x30\x1c\x36\x31\x27\xf0\x00\xf5\x74\x45\x98\x4e\x85\x2f\x63\xaf\xc8\x14\x6c\x9c\x7d\x1b\x6d\xb0\x1a\xb9\xc6\x94\x52\x77\x32\x83\xaf\x4b\x6f\x6e\xea\x93\xb1\xca\x14\x32\x5b\xe0\xe7\x84\xcd\xe0\x01\x2a\x42\xfe\x71\x78\x13\xff\x04\x3d\xfc\x9f\x4a\xba\x58\x85\x67\xe4\xca\xe2\x2d\xb0\xeb\xd5\xc0\x55\x62\xe6\x94\xac\xcb\xfc\x0d\xd8\xe5\xfc\x78\xad\xaf\xa8\x4a\x32\x5c\xcd\x58\x57\x32\xc7\x3d\xb0\x7e\xb9\x44\x44\x41\x26\x97\x54\x0d\x94\xcc\x70\x80\xdc\x38\x78\xbf\x3c\x1f\xe7\xc3\xaa\xc0\x3d\x18\xe7\xde\x8b\x6e\xef\xb4\x7e\xfa\xd6\x31\xee\xc1\xa6\x75\x00\x8a\xea\xdf\x41\x99\x73\x85\x87\xd2\xb2\xc9\x16\x6f\xde\x78\x28\x8b\x95\xf5\x8b\x56\xc6\x19\x6e\x84\x2c\xb7\xf1\xd3\x65\xfd\x92\x33\xfc\x22\xfe\x0b\x00\x00\xff\xff\xb5\xd4\x96\x92\x8a\x09\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
