// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x73\xdb\x36\x12\x7f\xf7\x5f\x81\xe1\x75\xc6\x49\xc7\xfa\xb2\x9d\x5c\xc6\x33\xf7\xe0\xd8\xcd\x45\x93\x3a\xd1\x98\x49\xef\xa1\xe3\x49\x21\x70\x25\xa1\x26\x01\x1e\x3e\x94\x28\x3e\xfd\xef\x37\xe0\x97\x44\x8a\x14\x40\x49\x89\x3d\x77\x45\x1f\xdc\x8a\x8b\x05\x76\xf7\xb7\x1f\x58\xa0\x0f\x47\x08\x21\xe4\xfd\x24\xc9\x0c\x22\xec\x5d\x20\x6f\xa6\x54\x2c\x2f\x7a\xbd\xf4\x97\x6e\x84\x19\x9e\x42\x04\x4c\x75\xf1\x37\x2d\xa0\x4b\x78\x94\x7d\x93\xbd\xd3\xfe\xe0\x45\xa7\x3f\xe8\xf4\x07\xbd\x00\xe2\x90\x2f\x0c\xdd\x47\x88\xe2\x10\x2b\xe8\xfe\x29\x39\xfb\x9b\x77\x92\xae\x40\x38\x53\xc0\xd4\x6f\x20\x24\xe5\xcc\x2c\x34\xe8\xf6\xcd\x3f\x39\x41\x8c\x05\x8e\x40\x81\x90\xde\x05\x7a\x58\x66\xbf\xce\xb1\xa0\x78\x1c\x42\xe9\x47\x01\x92\x6b\x41\x92\x1f\x7f\x3f\x7a\x78\x40\x74\x82\x18\x57\xe8\x19\xa2\x2c\x80\xaf\xa8\x7b\xc5\x99\xc2\x94\x81\xf0\x41\xcc\x29\x81\xee\x48\xf0\x18\x84\xa2\x20\xbb\x97\x53\x60\x6a\xc4\x79\x38\x12\x7c\x42\x43\x90\xa8\xff\xbc\xfb\x1b\x03\xe5\xeb\x31\x03\x35\xbc\x46\xcb\x25\x2a\x8d\xa3\xfc\x5f\x1e\x8e\xd6\x7f\xf6\xd4\x22\x06\x23\xc8\x0d\x25\x82\x4b\x3e\x51\xdd\xf7\xa0\xbe\x70\x71\xdf\x9b\x53\xa1\x34\x0e\xb3\xff\x94\x99\x88\xc5\x44\x1c\xd3\x35\x3d\x9c\xf6\x07\x2f\x3b\xfd\xb3\xce\x59\xbf\x4a\x17\x72\x82\x55\x46\xf5\xf0\x50\x23\xd6\xaf\x19\x01\xfa\x0f\xfa\x53\xa2\xe5\xb2\xca\x80\xe1\x28\xd9\xe1\x9c\x81\xaa\x7e\x8b\x0b\x95\x18\xd5\x1e\xa1\xca\xf0\x70\x10\x08\x90\xd2\x8f\x31\x81\x5a\x8a\x75\xaa\x91\x80\x09\xfd\x9a\x19\xa4\x8e\x30\x21\x1e\xf4\x53\x93\xf7\x5e\x79\xb5\x44\x77\x1b\xbf\x2e\x4f\x36\x37\x26\x13\x3b\x35\x2f\x55\xbf\x53\xb4\xae\x8f\x00\x26\x58\x87\x55\x95\x94\x48\x2d\xea\x29\xd1\x96\x94\x90\x40\x3b\x17\xf4\xf4\xbc\x5e\xd2\x44\xb6\xda\x2f\x9b\xbf\x96\xb5\xb2\xfa\xbe\x3c\x31\xd0\x07\x16\xa0\xe5\xb2\x3d\x44\x63\x3d\x0e\x29\x19\x8e\x2e\xd3\xbd\xc3\xe3\x83\x94\xc6\x1d\xc1\xb5\x02\xd1\x16\xa9\x85\x28\x61\xbe\x97\x1b\x50\x33\x1e\x18\xa6\xbe\xc2\x8a\x92\x1a\x43\x7b\x34\x08\xe1\x23\x8d\x80\x6b\x35\x64\x37\x94\x69\x95\xf0\x1f\xbc\x28\xab\xbb\xb2\x17\x79\xaf\xeb\x37\x91\x4b\xf1\x1a\x4b\x4a\xbc\x66\x93\xb5\x36\x54\xc8\x71\xf0\x1a\x87\x98\x11\x13\x1a\x77\x34\x52\x00\x31\xb0\x40\x7e\x60\xb5\x5e\xe3\xfd\x9e\x47\xd4\x61\xf0\xec\xd8\x01\x2b\xc7\x27\xe8\xb8\x30\xd7\xf1\xf3\xbb\xb2\xbc\x77\xdf\x0b\x21\xe1\x78\x47\x84\x8c\x31\xb9\x07\x16\x64\xfb\x37\xc1\x7f\xaf\xf0\x91\xb1\xab\x77\xed\x1a\x07\xae\x41\xdf\x44\x24\xf9\x30\x18\x8e\xae\x38\x9b\xd0\xa9\x16\x89\x06\xf6\xda\x56\xce\xf3\x50\x61\x2d\x16\x74\x8e\x15\xd4\x3b\xd6\xf5\x82\xe1\xa8\xd6\xb3\xca\x3c\xca\xd0\xb1\x2e\x8a\x52\xd7\x34\x2b\x1c\x16\x94\xd5\x51\x1f\x7d\x9b\xbf\xb8\x99\x95\xb2\x31\xd7\x2c\x78\x8f\x55\x01\xb2\xed\x64\xb7\x3a\xad\x6d\x6a\xc9\x56\xae\x4f\xd9\xb4\xa0\xdc\x15\x1e\x31\x17\xaa\xf3\xaa\x1a\x1a\x4a\xa4\x6d\xd0\xb1\xe9\x53\xad\x8c\x4b\x38\x23\x58\x3d\xdb\x6e\xe3\x52\xec\x33\xf6\x2d\x22\xc0\xf1\xf3\x13\x74\xdc\xab\xf1\xeb\xfc\x37\x3b\x00\x2c\xc8\xcd\xf8\x8c\xb8\x50\xde\x05\x7a\xd5\xb7\x90\x03\x33\x65\xea\x9b\x90\x63\x45\xd9\x74\x38\xf2\x2e\xd0\x04\x87\x12\x2c\xd3\x1a\xe2\xc0\x8f\x57\x65\x53\x40\x2a\x3e\xec\xad\xd0\x9c\x91\xab\x46\x1b\x13\xb4\x65\x9e\x91\xf4\x9a\x4a\x25\xe8\x58\xe7\x69\xe7\xda\x5a\xf0\xa1\x0c\xff\xe3\xe6\x62\xb7\xb2\xbb\xc3\xe9\x3e\x59\x56\xf6\x32\x07\xdd\x5b\xd1\xb1\xe0\x8a\x93\xc4\x1f\xbd\x8f\x24\x6e\x5d\x81\xd6\xb3\x77\x8d\x30\xe7\xe7\x67\x7f\x85\x98\x74\xb4\x0b\x31\xe7\xe7\x67\x7f\xc5\x98\xc3\xc6\x18\xbb\x4a\xff\x3f\x83\xcc\xf9\xf9\xd9\xa3\x47\x19\xa7\x7a\x8a\x6b\xe5\x54\x29\xa5\xc2\x3d\xa1\xea\x88\x32\x05\x62\x8e\xc3\x21\xf3\x81\x70\x16\x98\x29\x36\x4c\x31\x1d\x8d\x41\x7c\x98\x8c\x72\x61\x4e\x6d\x26\x70\xcc\xa4\xff\x33\x09\xe1\x47\x6a\xd5\x1e\x3b\x0e\xef\x01\x4f\xa4\xf5\xe0\x2b\x2e\xf0\x14\x7a\x32\xfd\x7b\x49\x08\xd7\x4c\xd9\x9b\x0f\x2f\x3a\xfd\x97\x9d\xc1\x8b\xef\xd6\x21\xca\x26\x4f\xe8\xb4\x7b\x0b\x53\x13\x7d\x17\x7e\x69\x8b\x4d\x0c\xac\xbd\xce\x74\xfa\xc7\x4c\x13\xbe\xc2\x2c\xc0\x22\xf8\xfc\xeb\xad\xdf\xa8\xcf\xa3\x87\x87\x0e\x12\x98\x4d\x01\xfd\x84\xe3\x18\x5d\xfc\xa3\x6d\xdf\x79\xb9\xb2\x89\x73\x37\x88\xa5\x7f\x7d\x20\x5a\x50\xb5\xf8\xa7\xe0\x3a\x3e\x54\xeb\xee\xa7\x2d\x96\x69\x36\x0a\x93\xd3\x8e\x99\x8c\xe3\xb8\xfb\x1e\x47\xb0\x83\xfa\x65\x26\xcd\xde\x47\x5c\x1c\x86\xfc\xcb\x67\x29\x67\x07\xeb\xec\x12\x92\x76\x2d\xbc\x4b\xc3\xda\x96\xda\x03\x90\x44\xd0\x38\xd7\x69\x32\x07\xf9\xfe\x5b\xa4\x04\x9e\x4c\xec\xdd\x92\x00\xa4\xa2\x2c\xd1\xf8\x65\xb5\xa7\xfc\x73\x8b\xc9\xa6\xfc\xb9\x35\xd0\x4c\xec\x7f\xda\x39\x3d\xb5\x4e\xa6\x02\x48\xbe\xef\x61\xda\x9e\xb0\x17\x32\x94\x1b\xb3\x99\x7a\xa9\x3f\x68\x19\x2c\x2d\xe4\x69\xa5\xd3\x5e\x09\xe9\xbc\x92\xfc\x3f\xbb\xf6\xe9\x96\xd9\x55\x12\xfc\x3b\x45\xf3\x2d\x0f\x01\xfd\x41\xd9\x44\xe0\x3f\x92\x4b\xa1\x5a\x3e\x27\xce\xb8\x9c\x29\xb5\x4d\xee\x1f\x0e\x4c\xb3\x9f\x47\x45\xe6\xd6\x72\x0b\x1d\x04\x96\xd6\x64\xff\xd4\x60\x89\xbe\x43\x19\xb6\x82\x5f\x35\x55\x94\xc8\x1f\x03\x7f\xf2\x51\x01\xb8\xbd\x34\x45\x07\x41\x60\xdb\x2a\xf2\x29\x23\xb0\xe6\xc2\x31\x1f\x5b\x6e\x29\xdd\x0b\xcf\x2b\x1e\xc5\x5a\x41\x7e\x7f\x7e\x83\xc9\x8c\x32\xf0\x09\x0e\xc1\x07\x87\x02\xf4\xef\x9d\xc1\x69\xa7\x3f\xd8\xa3\xce\x69\x28\x20\xcb\xf7\x67\x96\x34\x51\x1e\x9b\xe5\x8e\xe5\x62\x63\xdb\x41\xfe\xce\x5b\xbf\xf4\x5d\xbd\x7c\x48\x36\x52\x79\xc4\xd0\x7a\xe1\xca\xab\x05\xb3\xf4\x9c\x81\xaa\xae\xda\x96\x6d\x6d\xc9\x6a\x98\xd7\x54\x8e\xd6\xbb\xc4\x3c\xa4\x49\x69\x2b\x3a\x1b\x8f\x4b\x8a\x82\x58\xaf\xf2\xeb\x2e\x87\x09\x8e\x31\x49\x3d\xd8\xcb\xd7\xb9\xda\x72\xc2\x40\x95\x63\x4a\x6a\x8f\x1b\x9f\x7e\x83\x62\x46\xf5\x70\x67\xce\x0f\x19\x8c\xf2\x53\xcd\x30\xc2\x53\xb8\xcd\xb4\x99\xc8\xe5\x79\x55\x95\x7b\x71\x88\xeb\x7b\x77\xa5\x0d\x94\x58\xfa\xef\x3e\x6d\xdb\x78\x72\x95\x26\x67\xa9\x5a\x36\x26\x8f\xf2\xaf\x5b\x59\x08\x1e\x68\xa2\x6a\x19\x7c\x98\x4c\xd6\x26\xd7\xa9\xa1\x06\x59\xd6\x43\x03\x9f\x83\x88\x05\x9f\xd3\xcc\xff\x1b\x3a\xa1\x9e\x8e\xa7\x02\x07\x30\xe2\x21\x25\x8b\xe6\x87\x2c\x11\x0f\xd2\x60\x84\x99\xc6\xe1\x66\x64\xac\x7b\x89\x52\x0e\x53\xd9\xb9\xae\x79\x09\x2e\x6d\x24\x09\x19\x0e\x22\xca\x3e\x49\x10\xb9\x39\x49\xc8\x75\xd0\xd1\x72\xe3\xde\xbb\x34\x8d\xa4\xb1\x53\x18\xd8\xac\xf2\x42\xc5\x49\x3a\xdb\x38\x84\x94\xe9\xaf\xed\x5a\xc4\x5e\x40\x25\x1e\x87\x30\xc2\x52\x7e\xe1\x22\xb8\xd4\x6a\x06\x4c\xd1\x22\xde\x2a\xa1\x6d\xed\x69\x73\x5c\x73\xea\x86\xa6\x37\xbe\xef\x60\xb1\xfd\x99\xd1\xfa\xb0\x73\x2d\xb8\xdf\xc3\xe2\x1a\x2b\x9c\x29\xcd\xf7\xdf\x8e\xf2\xe5\x2e\xa5\xaf\x04\x65\xd3\x15\xac\x7d\xff\xed\x3b\x58\x74\x0b\x8a\x7a\xa7\x68\x16\x04\x2b\x23\xb2\xd7\x9b\xf1\x08\x7a\x2b\xf3\xf6\xba\x52\xce\x7a\x58\xab\x19\x17\xf4\x1b\x04\x9f\xef\x8d\xac\x4e\x7c\x9b\xaf\xb3\xf3\xb1\xf9\xb8\xca\x6d\x7e\xab\x62\xd4\xcb\x5a\x46\x4e\x40\xa7\x69\xb4\x9b\x80\x00\x96\xbd\x31\xdb\x31\x26\x6e\xb0\xe6\x26\xe4\x38\x04\x23\x97\xd7\x0b\x7b\x05\xc6\xb2\x72\x92\x94\xd4\x36\x3c\x97\x58\xcc\x57\xf5\xce\x06\x9b\xac\x16\x5a\x45\xda\x24\xb4\x86\x12\xac\xea\xaa\x79\x70\xb1\xc1\x3d\x37\x41\x92\xbf\xf3\x35\x4c\x1a\xdf\x2c\xdf\x12\xc3\x26\x29\xbe\x91\x4b\x62\xc8\x9c\x89\x49\xfa\x0d\x69\x60\x7d\x6c\xb9\x91\xf0\xb8\xbc\xa6\xf2\xde\x1e\xaf\x48\x12\xab\xa7\x46\xdc\x5b\xc0\xc1\xbf\x04\x55\x60\xd3\x39\x11\x80\x15\x7c\x28\x4e\x2f\x6f\x04\x8f\x12\x61\x6c\x13\xd3\xb7\xb3\x81\xd3\xce\xd0\x9a\xf7\x5c\x96\xdb\x91\x23\x01\x11\xd5\xd1\x66\x37\xb2\x3a\x0e\xe5\xc4\x59\xc5\xe6\xe4\xc4\x19\xed\x90\x29\x10\x13\x4c\xc0\xf1\x39\x53\x3e\x1c\x94\x52\x34\x1a\xad\x87\x44\xd4\xf2\x14\xbb\x36\x87\x46\x58\x2c\x9c\xf2\x55\x31\x29\xbd\x8d\x1d\x8e\xde\x70\xf1\x05\x8b\x20\x45\x55\x8b\xf9\x75\x75\xb1\xf3\x96\x51\x83\xdb\x1e\xb8\xfc\x6e\x1a\x96\xcb\xc1\xd5\x0e\xe3\x96\x78\x58\x1f\xee\x9a\x40\xa8\xf4\x8e\x94\x24\x6b\xb6\xc8\xc8\x68\x47\xe0\x54\xe6\xb7\x07\x51\x89\x41\xfa\xb0\x39\xcb\x83\x26\x0d\x3a\x9d\xea\x9c\x58\xa7\x48\x29\x0e\x26\x65\x96\x5e\x72\xb8\x73\xc8\x13\x16\xf6\x6e\xf7\xd4\x8d\xa7\xcc\x13\x74\xdc\xcb\xde\x76\xf7\xb2\x07\xda\x59\x66\xb0\x25\x86\xa6\xe1\x88\xd2\x92\x28\xd9\xb3\xc2\x38\xeb\xb0\xb4\x7f\x31\x51\xcb\x75\x85\xcd\x96\xa8\x5c\xed\x6b\x3f\x74\x16\x7c\xdc\x9e\x3d\xbb\x8e\x1d\x6c\xb2\x53\x93\x7d\xdb\x38\xf1\xd6\x3b\x26\xaf\x5b\x3c\xf5\xb5\x8d\xbd\xd4\xfc\x34\x9e\x20\x35\x8d\xf6\x86\xbb\xdb\xd1\x11\xdd\xa9\xdd\x28\xb7\x9f\x63\xec\x7c\x9a\xbf\xd6\x73\x6e\x2a\x92\xe0\xab\x02\x66\xea\x6d\xa7\x32\xa9\xa0\x3e\x68\x49\x44\xa4\xad\x06\x45\xbb\x96\x44\x58\x2b\xfe\x29\x6d\x9d\xdc\x50\xc6\xc5\xaa\xd1\xda\xa2\xc4\x89\x05\x57\x40\x14\x04\x3e\x28\x45\xd9\xb4\x5d\xec\xf2\xd2\x3b\x83\x2c\x73\xbd\xc6\x12\x5e\x9e\xff\xc2\x08\x0f\x00\x3d\xf3\x15\x16\x4a\xc7\x6b\xd5\xcb\xf3\x8d\xe6\x52\xd3\x70\x2d\x5e\x4a\xa7\xbf\x95\xdb\x5e\x26\xff\x1b\xdc\x2f\x2b\x83\x3a\xb2\x93\x6b\x3a\x70\xdd\x42\xde\x22\xbf\xd2\x52\xf1\xc8\x4f\xf5\xd1\x62\xee\x5b\xcc\x82\x10\xc4\x7a\x97\xbc\xdb\xb7\x6b\xe9\xc0\x1e\xb4\xd9\x4c\x6b\xba\x2c\xa8\xc4\x98\xac\xfb\xeb\x71\xad\x62\xad\x52\xcd\x1d\x2d\x8f\xfe\x1b\x00\x00\xff\xff\x06\x4d\x7f\xb4\xb5\x38\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xe1\x4e\xe3\x46\x10\xc7\xbf\xef\x53\x4c\x43\xd5\xb4\xa7\xda\x86\xeb\x09\xb5\x1c\x20\x41\x08\x08\xc1\x91\x88\xa4\x27\x9d\xaa\x0a\xad\x77\xc7\x78\x15\x7b\xd7\xcc\x8e\x23\x7c\x21\xef\x5e\x39\x4e\x42\x02\x39\x0e\x4e\xfd\x06\xb3\x33\xbf\xff\xec\xcc\x7a\x26\x5b\x3f\x45\xb1\xb1\x51\x2c\x7d\x0a\x01\xde\x0b\xb1\x05\xc3\xde\x49\x6f\x0f\x22\x64\x15\x69\xeb\x73\xe9\xef\x42\x1d\x39\x32\xb7\xc6\x06\x65\xe1\x99\x50\xe6\x81\xb6\x3e\x54\xce\x26\x60\x3c\xa8\x92\x08\x2d\x67\x15\xa4\x92\xb4\x72\x1a\xf5\x47\x30\x2c\xb6\xa0\x20\x17\xcb\x38\xab\xc0\xa7\xae\xcc\xb4\x6d\x33\xc4\x28\xc4\xa0\x7b\xfd\xf9\xbc\xd3\xbd\x19\x7e\xe9\x77\x0f\x1a\xb2\x30\x09\xfc\x03\x41\x02\xad\x99\xb0\xaf\x7c\x4d\x37\xb7\x91\x64\x97\x1b\x15\xb8\x02\xad\x4f\x4d\xc2\x81\x75\x1a\x5b\xf0\xef\x47\xe0\x14\xad\x00\x00\x58\xc3\x3d\xf5\x17\x89\x11\xc2\x57\x9e\x31\x57\x9c\x81\x67\x57\x80\x76\x6a\x84\x14\x7a\xa4\xb1\x51\x28\xca\xdc\x95\x96\x21\xca\x2d\x47\x84\xde\x95\xa4\x10\x1e\x1e\x80\xa9\x44\x91\x8f\x12\x1f\xde\x27\xbe\xce\x2d\xd2\x38\x8e\xbc\x8e\x77\x04\xaa\xd4\x41\x7b\xf9\x3f\x40\x34\x96\x14\x65\x26\x8e\x1a\x36\x40\x1d\x02\xb7\x54\xdc\x95\x8e\x25\xc0\x36\x6c\xb7\xe1\xf0\x70\x76\xb9\xc4\xb3\x8c\xc5\x5c\x74\x3d\x4e\x10\x7a\x76\x84\xca\x59\x08\xae\x9f\x9d\xae\xde\x43\x12\x3f\xbd\x88\x98\x4c\x4c\x02\x78\x07\x61\xf7\x9e\x49\x86\xd7\x2e\x43\x68\x19\x9b\x90\x6c\x4d\xa7\x4d\xd2\xad\xe3\x5e\x6f\x38\x18\x5e\x1f\xf5\x6f\x3a\xbd\xab\xd3\xf3\xb3\x9b\xab\xa3\x4f\xdd\x83\xba\xaa\x41\x53\xf2\xa0\x09\x58\x64\xfb\xd8\x8a\x9f\x27\xab\x95\x9e\xce\x3a\x21\x26\x13\xcc\x3c\xbe\x81\xae\x5c\x5e\x94\x8c\x6f\xe0\x5b\x3d\x9d\x0a\xe1\x51\x43\x60\x20\x40\x68\xf9\xad\x93\xee\xf1\xdf\x67\x37\x97\xbd\xb3\xcb\xee\xe7\xee\xe5\xc1\xfb\xa7\x86\x0f\x5b\x2d\x78\x0d\x5d\x50\x0e\x01\x25\x8d\x2f\xb2\xd2\xd1\xbb\xe6\xef\xe6\x55\x46\xb9\xf4\x8c\x14\xbd\x13\x22\x96\x1e\x77\x3f\x40\xa0\x61\x7f\x7f\x1f\x26\x13\x38\x9e\x19\xba\xb6\x7e\xef\xf0\xeb\x17\x99\x67\x9f\x24\xf9\x54\x66\x10\x76\x66\x8a\xe1\x95\xd3\x78\xec\x1c\x7b\x26\x59\x5c\x94\x31\x36\x99\xfc\x06\xd3\x29\x1c\xae\xaa\xd4\xa9\x44\xf1\xc2\x33\x1c\x2d\x5d\xbf\xa7\xda\x41\xe2\x23\x7f\x5c\x31\xfa\xcd\xaa\xb5\xc3\x37\xf4\x66\x3d\x59\x8a\x16\x48\xa1\x22\xfe\x9e\x60\x9f\xcc\x58\x32\x5e\x60\xf5\xa2\xec\x05\x56\xaf\x56\x1d\x61\x25\x54\x9a\x3b\x0d\xdb\xbb\xdb\xdb\xf0\xba\x88\xe7\x6e\x1b\xcb\xf7\x23\xf5\xeb\xc8\x17\x8a\xa6\xe4\xac\x4a\xaa\x78\x9e\x40\x73\xd4\xd8\x8b\x91\x89\x94\x0c\x98\x4a\xcf\x51\x33\x50\x22\x69\x55\xea\xc8\x47\x8f\x93\x6c\x0e\x2b\x0b\x2d\x19\x83\x85\xbf\x98\x0f\x17\x2b\x73\xac\x3f\x6c\x24\xd8\xd9\xfd\x33\xdc\xfd\x23\xdc\x79\xff\x57\xb8\xb3\xdb\xde\x90\x56\x3d\xb5\xb2\xf1\x6c\x20\x8b\x7c\xa4\x0d\x41\xb0\x9e\xa1\xca\x5c\xa9\x0b\x72\x63\xa3\x91\x1e\x87\x3c\xa7\xc6\xd7\x13\x5c\x97\x45\x66\x94\x64\xd4\x60\x6c\x3d\x58\x21\xc5\x2c\x07\x95\x4a\x62\x0f\x89\xa3\x99\xad\xf9\x18\xa0\x70\xda\xff\x0e\xd2\x6a\xe0\x54\x72\xdb\x83\x75\x0c\x46\xa3\xcc\x84\x92\xbc\x9e\xdd\x9a\x6e\x24\xbf\x96\x84\xcd\xda\xd8\xdf\x6f\x77\x7b\xa7\x6d\xc1\x68\xa5\xe5\x73\xbd\x57\x37\xa7\x6e\x01\x4b\x63\x91\x06\xcd\x44\x0b\xfb\xe4\x0a\x24\x36\xe8\xc3\xa3\xaf\x7d\x72\x89\xc9\x30\x1c\x36\x31\x27\xf0\x00\xf5\x74\x45\x98\x4e\x85\x2f\x63\xaf\xc8\x14\x6c\x9c\x7d\x1b\x6d\xb0\x1a\xb9\xc6\x94\x52\x77\x32\x83\xaf\x4b\x6f\x6e\xea\x93\xb1\xca\x14\x32\x5b\xe0\xe7\x84\xcd\xe0\x01\x2a\x42\xfe\x71\x78\x13\xff\x04\x3d\xfc\x9f\x4a\xba\x58\x85\x67\xe4\xca\xe2\x2d\xb0\xeb\xd5\xc0\x55\x62\xe6\x94\xac\xcb\xfc\x0d\xd8\xe5\xfc\x78\xad\xaf\xa8\x4a\x32\x5c\xcd\x58\x57\x32\xc7\x3d\xb0\x7e\xb9\x44\x44\x41\x26\x97\x54\x0d\x94\xcc\x70\x80\xdc\x38\x78\xbf\x3c\x1f\xe7\xc3\xaa\xc0\x3d\x18\xe7\xde\x8b\x6e\xef\xb4\x7e\xfa\xd6\x31\xee\xc1\xa6\x75\x00\x8a\xea\xdf\x41\x99\x73\x85\x87\xd2\xb2\xc9\x16\x6f\xde\x78\x28\x8b\x95\xf5\x8b\x56\xc6\x19\x6e\x84\x2c\xb7\xf1\xd3\x65\xfd\x92\x33\xfc\x22\xfe\x0b\x00\x00\xff\xff\xb5\xd4\x96\x92\x8a\x09\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
