// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x73\xd3\x38\x14\x7e\xcf\xaf\xd0\x78\x99\x69\x61\x9a\x6b\x5b\x96\xe9\xcc\x3e\x64\x0b\x6c\x33\x50\xc8\xd4\x85\x7d\x60\x18\x50\xe5\x93\x44\xd4\x96\xb4\xba\xb4\x0d\xd9\xfc\xf7\x1d\xf9\x92\xf8\x1a\xdb\x6d\x19\x76\x57\x3c\x04\xec\x73\x3e\x49\x47\x9f\xce\xcd\xac\x3a\x08\x21\xe4\x3c\x51\x64\x01\x01\x76\x4e\x90\xb3\xd0\x5a\xa8\x93\x7e\x3f\x7a\xd2\x0b\x30\xc3\x73\x08\x80\xe9\x1e\xfe\x6e\x24\xf4\x08\x0f\xe2\x77\xaa\x3f\x1a\x0c\x8f\xbb\x83\x61\x77\x30\xec\x7b\x20\x7c\xbe\xb4\x72\x97\x10\x08\x1f\x6b\xe8\x7d\x53\x9c\xfd\xe2\x1c\x44\x33\x10\xce\x34\x30\xfd\x11\xa4\xa2\x9c\xd9\x89\x86\xbd\x81\xfd\x93\x08\x08\x2c\x71\x00\x1a\xa4\x72\x4e\xd0\x6a\x1d\x3f\xbd\xc1\x92\xe2\x2b\x1f\x32\x0f\x25\x28\x6e\x24\x09\x1f\x7e\xea\xac\x56\x88\xce\x10\xe3\x1a\xed\x23\xca\x3c\xb8\x43\xbd\x53\xce\x34\xa6\x0c\xa4\x0b\xf2\x86\x12\xe8\x4d\x25\x17\x20\x35\x05\xd5\x1b\xcf\x81\xe9\x29\xe7\xfe\x54\xf2\x19\xf5\x41\xa1\xc1\xd3\xde\x47\x06\xda\x35\x57\x0c\xf4\xe4\x25\x5a\xaf\x51\x66\x74\x92\xbf\xac\x3a\xe9\xc7\x8e\x5e\x0a\xb0\x1b\x39\xa7\x44\x72\xc5\x67\xba\xf7\x0e\xf4\x2d\x97\xd7\xfd\x1b\x2a\xb5\xc1\x7e\xfc\x4f\x15\x6f\x71\xa3\x88\x05\x4d\xd9\x61\x34\x18\x3e\xef\x0e\x0e\xbb\x87\x83\xbc\x9c\xcf\x09\xd6\xb1\xd4\x6a\x55\xb2\xad\xb7\xb1\x00\xfa\x1b\x7d\x53\x68\xbd\xce\x03\x30\x1c\x84\x2b\xbc\x61\xa0\xf3\xef\xc4\xc6\x24\xd6\xb4\x1d\x94\x1b\x0e\xf6\x3c\x09\x4a\xb9\x02\x13\x28\x95\x48\x4b\x4d\x25\xcc\xe8\x5d\x7c\x20\x65\x82\xa1\xf0\x70\x10\x1d\x79\xff\x85\x53\x2a\xf4\xb9\xf0\x74\x7d\x50\x5c\x98\x0a\xcf\xa9\x7a\xaa\xf2\x95\xa2\xb4\x3d\x3c\x98\x61\xe3\xe7\x4d\x92\x11\xad\x31\x4f\x46\x36\x63\x84\x90\xda\xc9\x46\x47\x47\xe5\x3b\x0d\xf7\x56\xfa\xa6\xf8\x34\x6b\x95\xed\xfb\xf5\x81\xa5\x3e\x30\x0f\xad\xd7\xcd\x29\xea\x6a\x2e\xf1\x1c\xfa\x2a\xfa\x1d\x13\xc2\x0d\xd3\xf5\x14\x3d\xee\x0e\x9e\x77\x87\xc7\x3f\x8c\xa2\xb1\xf2\x8c\xce\x7b\x17\x30\xa7\x4a\xcb\xa5\x9b\x59\x62\x15\x40\x2d\x8f\x23\xf5\xcb\xd8\x12\xae\xc6\xcc\xc3\xd2\xfb\xf2\xf6\xc2\x75\xaa\x2c\xdb\x59\xad\xba\x48\x62\x36\x07\xf4\x04\x0b\x81\x4e\x7e\x6b\xeb\x53\xd6\x5b\xe6\x36\xf6\x1a\x2c\xfa\x75\x81\x18\x49\xf5\xf2\x0f\xc9\x8d\x78\x2c\xdf\xf1\x64\xc7\xc9\x54\x1f\x0a\x53\xf3\xae\x55\xc6\x42\xf4\xde\xe1\x00\xee\x61\x7e\x15\xef\xe6\xc2\xf8\x3b\xdc\x43\x83\x3b\x8b\x7d\x9f\xdf\x7e\x51\x6a\xf1\x68\xb7\x96\x10\x50\x56\xce\x19\x5b\xe8\x1d\xb0\xa1\xb8\x07\x8a\x48\x2a\x12\x9b\x86\x3a\xc8\x75\xcf\x90\x96\x78\x36\xa3\xa4\x81\xbe\xa6\x2c\xb4\xf8\x38\xef\x2f\x9e\xb5\x50\x9e\x72\xa9\x2f\x2c\x35\xc3\xf3\x1f\x75\x47\xa3\x5a\x65\x2a\x81\x24\xeb\x9e\xb0\x2b\x6e\x98\x57\xa7\x23\x24\xe5\xf6\xd8\x9c\x13\x34\x1c\x0c\x6b\x85\xb9\xe6\x84\xfb\x16\xff\x92\x88\x3a\xec\x28\x78\xb7\x37\x42\xa4\x97\xd9\xff\xb3\x72\xf7\x5a\x74\xa2\xeb\x38\x4d\x80\xbf\x22\x36\x5f\x70\x1f\xd0\x57\xca\x66\x12\x7f\x0d\x03\x7e\x29\xce\x41\x63\x5e\xda\xac\xe9\xdf\x44\x4c\xbb\x9e\x9f\xca\xcc\x17\x79\x8f\x54\xd4\x7c\x28\x2d\x47\xff\x35\x5a\xa2\xea\xa8\x5f\x3e\x47\x2b\xfa\xe5\x43\x45\x46\xfc\x67\xf0\x4f\xfd\x54\x02\x1e\x1d\x1d\xfe\x70\x06\x1e\xfe\x8f\x18\x58\x92\x4c\x26\x63\x47\x06\xda\x3c\xf1\x3c\xe5\x81\x30\x1a\x92\xda\xe8\x1c\x93\x05\x65\xe0\x12\xec\x83\x0b\x0d\x12\xd0\x5f\xbb\xc3\x51\x77\x30\x7c\x40\x9e\x53\x91\x40\x7a\x20\x80\x79\xea\x3d\xcb\x55\x93\x61\x9c\xc8\x15\x86\xc5\xfc\xe6\x53\x52\x8c\x4e\xbc\xfd\xbd\xda\x4a\x70\xef\x00\xed\xd9\x62\x6c\xef\xe9\x67\xa7\x2c\x7d\x6f\x0a\x5b\x9a\x2a\x5a\xf0\x92\x8c\xcd\xce\x95\x99\xe0\x73\x45\xb6\xa7\x54\x5d\xb2\xa7\xae\x4d\x79\x96\xa7\x29\xc8\x74\x76\x5d\xc2\x58\x87\x60\x81\x49\x74\x73\x9c\x64\x9e\xd3\x1d\x99\x3d\xca\x95\x07\xd1\x79\x9c\xbb\xf4\x3b\x6c\x34\xb2\xc4\x3c\x08\xf3\xf6\x38\xca\x27\xd5\xc4\x24\xc0\x73\xb8\x88\xad\x19\xee\xcb\x71\xf2\x26\x77\x84\x8f\x59\xf9\xce\xd2\x0b\xc8\x40\xba\x6f\x3e\xec\x5a\xb8\x30\x57\x3e\x55\x8b\xc8\x2c\x05\xe5\x69\xf2\x76\x27\x84\xe4\x9e\x21\xba\x14\xe0\xfd\x6c\x96\x52\x2e\x33\x43\x09\xb3\x6a\x93\x75\x7e\x03\x52\x48\x7e\x43\xe3\x7b\x37\xc3\xbe\x82\x92\x95\x19\x31\x97\xd8\x83\x29\xf7\x29\x59\x56\x37\x07\x02\xee\x45\x4e\x00\x33\x83\xfd\xa2\x47\x2a\xab\xee\xb3\xee\x21\xae\xa7\xaa\xa7\xe0\xaa\x4e\x04\x45\x15\x7a\x40\xd9\x07\x05\x32\x39\x4e\xe2\x73\xe3\x75\x8d\x02\xb9\x2b\x6a\x92\xc8\x67\x49\x4b\x9b\xad\x3f\xce\x5d\x92\xee\x2e\x04\x9f\x32\x73\x17\x1d\x9c\x91\x89\xa3\xaa\x89\xbf\x1e\x55\xf8\xca\x87\x29\x56\xea\x96\x4b\x6f\x6c\xf4\x02\x98\xa6\x1b\x3f\xa7\xa5\x29\x39\x94\x0c\x84\x2d\x93\xea\xe6\x41\x1b\x9a\x92\x37\xb0\xdc\xdd\xba\x49\x8f\x7a\xd4\x0d\xfa\x35\x2c\x5f\x62\x8d\x63\xa3\xb9\xee\xd9\x34\x99\x6e\xac\x5c\x2d\x29\x9b\x6f\x69\xed\xba\x67\x6f\x60\xd9\xdb\x48\x94\x5f\x8a\xea\x8d\x60\x6d\xb7\xec\xf4\x17\x3c\x80\xfe\xf6\x78\xfb\x3d\xa5\x16\x7d\x6c\xf4\x82\x4b\xfa\x1d\xbc\x2f\xd7\x76\xaf\x8d\x70\xcb\x03\x65\x7a\x14\x1b\x56\xcd\xf4\x5b\x25\x81\x4e\xdc\xaa\x69\x44\x74\x1a\x79\xbb\x19\x48\x60\x71\xdf\xee\x9e\x3e\xb1\x00\xcd\xad\xcb\x69\xe0\x8c\xea\x72\xa2\x07\x3b\xc6\xac\x71\xc2\x90\xd4\xd6\x3d\x67\x20\x6e\xb6\x79\x46\x01\x26\xce\x41\xb6\x9e\x36\x74\xad\xbe\x82\x5a\x73\x51\xcf\x02\x66\xe2\x78\x01\x3d\x39\x82\x30\x7e\x27\x73\xd8\x30\x5e\x4c\x9b\xc2\x83\x0d\x43\x7c\x25\x4a\x78\x90\x09\x88\x0d\xfa\x15\x61\x20\x3d\x2a\x38\x87\x22\xdf\xfa\x92\xaa\xeb\x7a\x7f\x45\x42\x5f\x3d\xb7\xdb\xbd\x00\xec\xfd\x29\xa9\x86\x3a\x9b\x13\x09\x58\xc3\xfb\x4d\xd5\xf0\x5a\xf2\x20\xdc\x4c\x9d\x62\xf4\x3d\xc2\x6b\xb4\x32\x94\xba\x3d\xe3\x6c\x1b\x70\x2a\x21\xa0\x26\x28\x76\x01\xf3\xe3\xb1\x2e\x71\x9c\xb1\x35\xba\xc4\xb1\xec\x84\x69\x90\x33\x4c\x20\x13\x3f\xea\x1d\x75\x03\xa3\x6c\x1a\x7c\xb5\xc5\x19\x6a\x59\x3d\xa6\x74\x68\x80\xe5\xb2\x51\xbc\xda\x28\x01\xb3\x91\x6f\x32\x7d\xcd\xe5\x2d\x96\x5e\xc4\xaa\x16\xfa\x65\x79\x71\xe3\x25\xa3\x8a\x6b\xfb\xc8\xe9\x77\xd5\xd8\x71\x15\xb3\x2b\x14\x2d\xf9\x90\x1e\xcd\x2d\x81\xd2\x3c\xa1\x82\x84\x73\xb6\x88\xc8\xe8\x9e\xc4\xc9\xe9\xb7\x27\x51\x06\x20\xfa\x58\x14\xc7\x41\x1b\x06\x1b\x55\x75\x8d\xa0\x23\xa6\x6c\x0a\x93\x2c\xa4\x13\x16\x77\x0d\xe2\x44\x0d\xfc\x27\xc2\x19\xc1\x7a\xff\x9e\x55\xe6\x01\xda\xeb\xc7\xdf\xcb\xfa\xf1\x47\xaf\x38\x32\xd4\x05\x86\xaa\xd1\x90\xa5\x99\xad\x44\x49\xe6\x44\xc4\x9d\x8d\x76\xe9\x70\x25\xea\x96\x9b\x2d\x59\xb9\x5d\xd7\xc3\xd8\xb9\xc1\xa1\x9e\x0f\x97\x34\x00\x6e\xf4\x84\x9d\x53\x66\x74\x88\x38\x3c\xbe\x17\xe4\x3d\xce\xa4\x95\x46\x73\xe9\x66\x92\xbb\x93\xe0\x7a\x9c\xea\xb7\xe5\xc8\x55\x11\x16\xee\x34\x30\x9b\xac\x35\x8a\xb1\x1b\xe9\x47\x8d\xa7\x44\xd5\x25\x30\xe8\xbe\xf1\x14\x1b\xcd\x3f\x44\x75\xf7\x39\x65\x5c\x6e\xbb\x63\x2d\xe2\xa3\x90\x5c\x03\xd1\xe0\xb9\xa0\x35\x65\xf3\x76\xc4\x77\xa2\x46\x6f\xec\xf6\x7e\xc7\x0a\x9e\x1f\xbd\x62\x84\x7b\x80\xf6\x5d\x8d\xa5\x36\x22\x15\xfa\x9e\x16\x3a\x13\x55\xa3\x69\xe4\xcb\x94\x0e\x5b\x2f\x38\x0e\xff\x5f\xca\xab\xed\x81\x36\x84\x53\x29\x1b\x34\x5d\x42\xd2\xd7\x3c\x35\x4a\xf3\xc0\x8d\xec\xd1\x42\xf7\x0c\x33\xcf\x07\x99\x6e\x6d\xf6\x06\xf5\x56\x7a\xe4\x1b\x54\xec\xc4\x54\x75\x78\x73\x91\x22\x6e\x1d\x3a\xdc\x68\x61\x74\x64\xb9\xce\xba\xf3\x4f\x00\x00\x00\xff\xff\x23\x3f\x83\x72\x46\x24\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xe1\x4e\xe3\x46\x10\xc7\xbf\xef\x53\x4c\x43\xd5\xb4\xa7\xda\x86\xeb\x09\xb5\x1c\x20\x41\x08\x08\xc1\x91\x88\xa4\x27\x9d\xaa\x0a\xad\x77\xc7\x78\x15\x7b\xd7\xcc\x8e\x23\x7c\x21\xef\x5e\x39\x4e\x42\x02\x39\x0e\x4e\xfd\x06\xb3\x33\xbf\xff\xec\xcc\x7a\x26\x5b\x3f\x45\xb1\xb1\x51\x2c\x7d\x0a\x01\xde\x0b\xb1\x05\xc3\xde\x49\x6f\x0f\x22\x64\x15\x69\xeb\x73\xe9\xef\x42\x1d\x39\x32\xb7\xc6\x06\x65\xe1\x99\x50\xe6\x81\xb6\x3e\x54\xce\x26\x60\x3c\xa8\x92\x08\x2d\x67\x15\xa4\x92\xb4\x72\x1a\xf5\x47\x30\x2c\xb6\xa0\x20\x17\xcb\x38\xab\xc0\xa7\xae\xcc\xb4\x6d\x33\xc4\x28\xc4\xa0\x7b\xfd\xf9\xbc\xd3\xbd\x19\x7e\xe9\x77\x0f\x1a\xb2\x30\x09\xfc\x03\x41\x02\xad\x99\xb0\xaf\x7c\x4d\x37\xb7\x91\x64\x97\x1b\x15\xb8\x02\xad\x4f\x4d\xc2\x81\x75\x1a\x5b\xf0\xef\x47\xe0\x14\xad\x00\x00\x58\xc3\x3d\xf5\x17\x89\x11\xc2\x57\x9e\x31\x57\x9c\x81\x67\x57\x80\x76\x6a\x84\x14\x7a\xa4\xb1\x51\x28\xca\xdc\x95\x96\x21\xca\x2d\x47\x84\xde\x95\xa4\x10\x1e\x1e\x80\xa9\x44\x91\x8f\x12\x1f\xde\x27\xbe\xce\x2d\xd2\x38\x8e\xbc\x8e\x77\x04\xaa\xd4\x41\x7b\xf9\x3f\x40\x34\x96\x14\x65\x26\x8e\x1a\x36\x40\x1d\x02\xb7\x54\xdc\x95\x8e\x25\xc0\x36\x6c\xb7\xe1\xf0\x70\x76\xb9\xc4\xb3\x8c\xc5\x5c\x74\x3d\x4e\x10\x7a\x76\x84\xca\x59\x08\xae\x9f\x9d\xae\xde\x43\x12\x3f\xbd\x88\x98\x4c\x4c\x02\x78\x07\x61\xf7\x9e\x49\x86\xd7\x2e\x43\x68\x19\x9b\x90\x6c\x4d\xa7\x4d\xd2\xad\xe3\x5e\x6f\x38\x18\x5e\x1f\xf5\x6f\x3a\xbd\xab\xd3\xf3\xb3\x9b\xab\xa3\x4f\xdd\x83\xba\xaa\x41\x53\xf2\xa0\x09\x58\x64\xfb\xd8\x8a\x9f\x27\xab\x95\x9e\xce\x3a\x21\x26\x13\xcc\x3c\xbe\x81\xae\x5c\x5e\x94\x8c\x6f\xe0\x5b\x3d\x9d\x0a\xe1\x51\x43\x60\x20\x40\x68\xf9\xad\x93\xee\xf1\xdf\x67\x37\x97\xbd\xb3\xcb\xee\xe7\xee\xe5\xc1\xfb\xa7\x86\x0f\x5b\x2d\x78\x0d\x5d\x50\x0e\x01\x25\x8d\x2f\xb2\xd2\xd1\xbb\xe6\xef\xe6\x55\x46\xb9\xf4\x8c\x14\xbd\x13\x22\x96\x1e\x77\x3f\x40\xa0\x61\x7f\x7f\x1f\x26\x13\x38\x9e\x19\xba\xb6\x7e\xef\xf0\xeb\x17\x99\x67\x9f\x24\xf9\x54\x66\x10\x76\x66\x8a\xe1\x95\xd3\x78\xec\x1c\x7b\x26\x59\x5c\x94\x31\x36\x99\xfc\x06\xd3\x29\x1c\xae\xaa\xd4\xa9\x44\xf1\xc2\x33\x1c\x2d\x5d\xbf\xa7\xda\x41\xe2\x23\x7f\x5c\x31\xfa\xcd\xaa\xb5\xc3\x37\xf4\x66\x3d\x59\x8a\x16\x48\xa1\x22\xfe\x9e\x60\x9f\xcc\x58\x32\x5e\x60\xf5\xa2\xec\x05\x56\xaf\x56\x1d\x61\x25\x54\x9a\x3b\x0d\xdb\xbb\xdb\xdb\xf0\xba\x88\xe7\x6e\x1b\xcb\xf7\x23\xf5\xeb\xc8\x17\x8a\xa6\xe4\xac\x4a\xaa\x78\x9e\x40\x73\xd4\xd8\x8b\x91\x89\x94\x0c\x98\x4a\xcf\x51\x33\x50\x22\x69\x55\xea\xc8\x47\x8f\x93\x6c\x0e\x2b\x0b\x2d\x19\x83\x85\xbf\x98\x0f\x17\x2b\x73\xac\x3f\x6c\x24\xd8\xd9\xfd\x33\xdc\xfd\x23\xdc\x79\xff\x57\xb8\xb3\xdb\xde\x90\x56\x3d\xb5\xb2\xf1\x6c\x20\x8b\x7c\xa4\x0d\x41\xb0\x9e\xa1\xca\x5c\xa9\x0b\x72\x63\xa3\x91\x1e\x87\x3c\xa7\xc6\xd7\x13\x5c\x97\x45\x66\x94\x64\xd4\x60\x6c\x3d\x58\x21\xc5\x2c\x07\x95\x4a\x62\x0f\x89\xa3\x99\xad\xf9\x18\xa0\x70\xda\xff\x0e\xd2\x6a\xe0\x54\x72\xdb\x83\x75\x0c\x46\xa3\xcc\x84\x92\xbc\x9e\xdd\x9a\x6e\x24\xbf\x96\x84\xcd\xda\xd8\xdf\x6f\x77\x7b\xa7\x6d\xc1\x68\xa5\xe5\x73\xbd\x57\x37\xa7\x6e\x01\x4b\x63\x91\x06\xcd\x44\x0b\xfb\xe4\x0a\x24\x36\xe8\xc3\xa3\xaf\x7d\x72\x89\xc9\x30\x1c\x36\x31\x27\xf0\x00\xf5\x74\x45\x98\x4e\x85\x2f\x63\xaf\xc8\x14\x6c\x9c\x7d\x1b\x6d\xb0\x1a\xb9\xc6\x94\x52\x77\x32\x83\xaf\x4b\x6f\x6e\xea\x93\xb1\xca\x14\x32\x5b\xe0\xe7\x84\xcd\xe0\x01\x2a\x42\xfe\x71\x78\x13\xff\x04\x3d\xfc\x9f\x4a\xba\x58\x85\x67\xe4\xca\xe2\x2d\xb0\xeb\xd5\xc0\x55\x62\xe6\x94\xac\xcb\xfc\x0d\xd8\xe5\xfc\x78\xad\xaf\xa8\x4a\x32\x5c\xcd\x58\x57\x32\xc7\x3d\xb0\x7e\xb9\x44\x44\x41\x26\x97\x54\x0d\x94\xcc\x70\x80\xdc\x38\x78\xbf\x3c\x1f\xe7\xc3\xaa\xc0\x3d\x18\xe7\xde\x8b\x6e\xef\xb4\x7e\xfa\xd6\x31\xee\xc1\xa6\x75\x00\x8a\xea\xdf\x41\x99\x73\x85\x87\xd2\xb2\xc9\x16\x6f\xde\x78\x28\x8b\x95\xf5\x8b\x56\xc6\x19\x6e\x84\x2c\xb7\xf1\xd3\x65\xfd\x92\x33\xfc\x22\xfe\x0b\x00\x00\xff\xff\xb5\xd4\x96\x92\x8a\x09\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
