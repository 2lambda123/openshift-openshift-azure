// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x73\xd3\x38\x14\x7e\xcf\xaf\xd0\x78\x3b\xd3\xc2\x34\xd7\xb6\x2c\xd3\x99\x7d\xc8\x16\xd8\x66\xa0\x90\xa9\x0b\xfb\xc0\x30\xa0\xca\x27\x89\xa8\x2d\x69\x75\x69\x1b\xb2\xf9\xef\x3b\xf2\x25\xf1\x35\xb6\x4b\x19\x76\x57\x3c\x04\xec\x73\x3e\x49\x47\x9f\xce\xcd\xac\x3a\x08\x21\xe4\xec\x29\xb2\x80\x00\x3b\xa7\xc8\x59\x68\x2d\xd4\x69\xbf\x1f\x3d\xe9\x05\x98\xe1\x39\x04\xc0\x74\x0f\x7f\x33\x12\x7a\x84\x07\xf1\x3b\xd5\x1f\x0d\x86\x27\xdd\xc1\xb0\x3b\x18\xf6\x3d\x10\x3e\x5f\x5a\xb9\x2b\x08\x84\x8f\x35\xf4\xbe\x2a\xce\x7e\x71\x0e\xa3\x19\x08\x67\x1a\x98\xfe\x00\x52\x51\xce\xec\x44\xc3\xde\xc0\xfe\x49\x04\x04\x96\x38\x00\x0d\x52\x39\xa7\x68\xb5\x8e\x9f\xde\x62\x49\xf1\xb5\x0f\x99\x87\x12\x14\x37\x92\x84\x0f\x3f\x76\x56\x2b\x44\x67\x88\x71\x8d\x0e\x10\x65\x1e\xdc\xa3\xde\x19\x67\x1a\x53\x06\xd2\x05\x79\x4b\x09\xf4\xa6\x92\x0b\x90\x9a\x82\xea\x8d\xe7\xc0\xf4\x94\x73\x7f\x2a\xf9\x8c\xfa\xa0\xd0\xe0\x49\xef\x03\x03\xed\x9a\x6b\x06\x7a\xf2\x02\xad\xd7\x28\x33\x3a\xc9\x5f\x56\x9d\xf4\x63\x47\x2f\x05\xd8\x8d\x5c\x50\x22\xb9\xe2\x33\xdd\x7b\x0b\xfa\x8e\xcb\x9b\xfe\x2d\x95\xda\x60\x3f\xfe\xa7\x8a\xb7\xb8\x51\xc4\x82\xa6\xec\x30\x1a\x0c\x9f\x75\x07\x47\xdd\xa3\x41\x5e\xce\xe7\x04\xeb\x58\x6a\xb5\x2a\xd9\xd6\x9b\x58\x00\xfd\x8d\xbe\x2a\xb4\x5e\xe7\x01\x18\x0e\xc2\x15\xde\x32\xd0\xf9\x77\x62\x63\x12\x6b\xda\x0e\xca\x0d\x07\x7b\x9e\x04\xa5\x5c\x81\x09\x94\x4a\xa4\xa5\xa6\x12\x66\xf4\x3e\x3e\x90\x32\xc1\x50\x78\x38\x88\x8e\xbc\xff\xdc\x29\x15\xfa\x54\x78\xba\x3e\x2c\x2e\x4c\x85\xe7\x54\x3d\x55\xf9\x4a\x51\xda\x1e\x1e\xcc\xb0\xf1\xf3\x26\xc9\x88\xd6\x98\x27\x23\x9b\x31\x42\x48\xed\x64\xa3\xa3\xe3\xf2\x9d\x86\x7b\x2b\x7d\x53\x7c\x9a\xb5\xca\xf6\xfd\xfa\xd0\x52\x1f\x98\x87\xd6\xeb\xe6\x14\x75\x35\x97\x78\x0e\x7d\x15\xfd\x8e\x09\xe1\x86\xe9\x7a\x8a\x9e\x74\x07\xcf\xba\xc3\x93\x1f\x46\xd1\x58\x79\x46\xe7\xbd\x4b\x98\x53\xa5\xe5\xd2\xcd\x2c\xb1\x0a\xa0\x96\xc7\x91\xfa\x55\x6c\x09\x57\x63\xe6\x61\xe9\x7d\x7e\x73\xe9\x3a\x55\x96\xed\xac\x56\x5d\x24\x31\x9b\x03\xda\xc3\x42\xa0\xd3\xdf\xda\xfa\x94\xf5\x96\xb9\x8d\xbd\x06\x8b\x7e\x5d\x20\x46\x52\xbd\xfc\x43\x72\x23\x1e\xcb\x77\xec\xed\x38\x99\xea\x43\x61\x6a\xde\xb5\xca\x58\x88\xde\x5b\x1c\xc0\x03\xcc\xaf\xe2\xdd\x5c\x1a\x7f\x87\x7b\x68\x70\x67\xb1\xef\xf3\xbb\xcf\x4a\x2d\x1e\xed\xd6\x12\x02\xca\xca\x39\x63\x0b\xbd\x03\x36\x14\xf7\x40\x11\x49\x45\x62\xd3\x50\x07\xb9\xee\x39\xd2\x12\xcf\x66\x94\x34\xd0\xd7\x94\x85\x16\x1f\xe7\xfd\xc5\xd3\x16\xca\x53\x2e\xf5\xa5\xa5\x66\x78\xfe\xa3\xee\x68\x54\xab\x4c\x25\x90\x64\xdd\x13\x76\xcd\x0d\xf3\xea\x74\x84\xa4\xdc\x1e\x9b\x73\x8a\x86\x83\x61\xad\x30\xd7\x9c\x70\xdf\xe2\x5f\x11\x51\x87\x1d\x05\xef\xf6\x46\x88\xf4\x32\xfb\x7f\x5a\xee\x5e\x8b\x4e\x74\x1d\xa7\x09\xf0\x57\xc4\xe6\x4b\xee\x03\xfa\x42\xd9\x4c\xe2\x2f\x61\xc0\x2f\xc5\x39\x6c\xcc\x4b\x9b\x35\xfd\x9b\x88\x69\xd7\xf3\x53\x99\xf9\x3c\xef\x91\x8a\x9a\xdf\x4b\xcb\xd1\x7f\x8d\x96\xa8\x3a\xea\x97\xcf\xd1\x8a\x7e\xf9\x50\x91\x11\xff\x19\xfc\x53\x3f\x95\x80\xc7\xc7\x47\x3f\x9c\x81\x47\xff\x23\x06\x96\x24\x93\xc9\xd8\x91\x81\x36\x4f\x3c\xcf\x78\x20\x8c\x86\xa4\x36\xba\xc0\x64\x41\x19\xb8\x04\xfb\xe0\x42\x83\x04\xf4\xd7\xee\x70\xd4\x1d\x0c\xbf\x23\xcf\xa9\x48\x20\x3d\x10\xc0\x3c\xf5\x8e\xe5\xaa\xc9\x30\x4e\xe4\x0a\xc3\x62\x7e\xf3\x31\x29\x46\x27\xde\xc1\x7e\x6d\x25\xb8\x7f\x88\xf6\x6d\x31\xb6\xff\xe4\x93\x53\x96\xbe\x37\x85\x2d\x4d\x15\x2d\x78\x49\xc6\x66\xe7\xca\x4c\xf0\xa9\x22\xdb\x53\xaa\x2e\xd9\x53\x37\xa6\x3c\xcb\xd3\x14\x64\x3a\xbb\x2e\x61\xac\x43\xb0\xc0\x24\xba\x39\x4e\x32\xcf\xd9\x8e\xcc\x1e\xe5\xca\x83\xe8\x3c\x2e\x5c\xfa\x0d\x36\x1a\x59\x62\x1e\x86\x79\x7b\x1c\xe5\x93\x6a\x62\x12\xe0\x39\x5c\xc6\xd6\x0c\xf7\xe5\x38\x79\x93\x3b\xc2\xc7\xac\x7c\x67\x25\xf5\x49\x88\xe8\xbe\x7e\xbf\x6b\xdd\xc2\x5c\xfb\x54\x2d\x22\xab\xe4\x75\xa7\xc9\xcb\x9d\x08\x92\x7b\x86\xe8\x32\xfd\x77\xb3\x59\x4a\xb7\xcc\x06\x25\xb4\xaa\xcd\xd4\xf9\x2d\x48\x21\xf9\x2d\x8d\x2f\xdd\x0c\xfb\x0a\x4a\x16\x66\xc4\x5c\x62\x0f\xa6\xdc\xa7\x64\x59\xdd\x19\x08\xb8\x17\x79\x00\xcc\x0c\xf6\x8b\xee\xa8\xac\xb4\xcf\xfa\x86\xb8\x98\xaa\x9e\x82\xab\x3a\x11\x14\x95\xe7\x01\x65\xef\x15\xc8\xe4\x2c\x89\xcf\x8d\xd7\x35\x0a\xe4\xae\x90\x49\x22\x87\x25\x2d\x67\xb6\xce\x38\x77\x43\xba\xbb\x10\x7c\xca\xcc\x7d\x74\x70\x46\x26\x5e\xaa\x26\xf8\x7a\x54\xe1\x6b\x1f\xa6\x58\xa9\x3b\x2e\xbd\xb1\xd1\x0b\x60\x9a\x6e\x9c\x9c\x96\xa6\xe4\x50\x32\x10\xb6\x46\xaa\x9b\x07\x6d\x48\x4a\x5e\xc3\x72\x77\xdf\x26\x3d\xea\x51\x37\xe8\x37\xb0\x7c\x81\x35\x8e\x8d\xe6\xba\xe7\xd3\x64\xba\xb1\x72\xb5\xa4\x6c\xbe\xbd\xa4\xae\x7b\xfe\x1a\x96\xbd\x8d\x44\xf9\x9d\xa8\xde\x08\xd6\x76\xcb\x4e\x7f\xc1\x03\xe8\x6f\x8f\xb7\xdf\x53\x6a\xd1\xc7\x46\x2f\xb8\xa4\xdf\xc0\xfb\x7c\x63\xf7\xda\x08\xb7\x3c\x4a\xa6\x47\xb1\x5b\xd5\x4c\xbf\x55\x06\xe8\xc4\x7d\x9a\x46\x44\xa7\x91\xab\x9b\x81\x04\x16\x37\xed\x1e\xe8\x10\x0b\xd0\xdc\xba\x9c\x74\x8c\xad\x70\x46\x75\x09\x51\xce\x2d\xee\xb5\xf6\x8b\x59\xe3\x84\xf1\xa8\x08\xb4\xdb\x39\x67\x20\x6e\xb7\x49\x46\x01\x26\x4e\x40\xb6\x9e\x36\x74\xad\xbe\x82\x5a\x73\x51\xcf\x02\x66\x82\x78\x01\x3d\x39\x82\x30\x78\x27\x73\xd8\x18\x5e\xcc\x99\xc2\x83\x0d\xe3\x7b\x25\x4a\x78\x90\x09\x88\x8d\xf8\x15\x61\x20\x3d\x2a\x38\x87\x22\xdf\xfa\x82\xaa\x9b\x7a\x7f\x45\x42\x5f\x3d\xb7\xdb\xbd\x04\xec\xfd\x29\xa9\x86\x3a\x9b\x13\x09\x58\xc3\xbb\x4d\xc9\xf0\x4a\xf2\x20\xdc\x4c\x9d\x62\xf4\x31\xc2\x6b\xb4\x32\x94\xba\x3d\xe3\x6c\x0f\x70\x2a\x21\xa0\x26\x28\xb6\x00\xf3\xe3\xb1\x2e\x71\x9c\xae\x35\xba\xc4\xb1\xec\x84\x69\x90\x33\x4c\x20\x13\x3f\xea\x1d\x75\x03\xa3\x6c\xba\x7b\xb5\x95\x19\x6a\x59\x3a\xa6\x74\x68\x80\xe5\xb2\x51\xbc\xda\x28\x01\xb3\x91\x6f\x32\x7d\xc5\xe5\x1d\x96\x5e\xc4\xaa\x16\xfa\x65\x49\x71\xe3\x25\xa3\x8a\x6b\xfb\xc8\xb9\x77\xd5\xd8\x71\x15\xb3\x2b\x14\x2d\xf9\x90\x1e\xcd\x2d\x81\xd2\x3c\xa1\x82\x84\x73\xb6\x88\xc8\xe8\x81\xc4\xc9\xe9\xb7\x27\x51\x06\x20\xfa\x52\x14\xc7\x41\x1b\x06\x1b\x95\x74\x8d\xa0\x23\xa6\x6c\xaa\x92\x2c\xa4\x13\x56\x76\x0d\xe2\x44\x0d\xfc\x47\xc2\x19\xc1\xfa\xe0\x81\x25\xe6\x21\xda\xef\xc7\x1f\xcb\xfa\xf1\x17\xaf\x38\x32\xd4\x05\x86\xaa\xd1\x90\xa5\x99\xad\x44\x49\xe6\x44\xc4\x6d\x8d\x76\xe9\x70\x25\xea\x96\x9b\x2d\x59\xb9\x5d\xd7\xf7\xb1\x73\x83\x43\x3d\x1f\xae\x68\x00\xdc\xe8\x09\xbb\xa0\xcc\xe8\x10\x71\x78\xf2\x20\xc8\x07\x9c\x49\x2b\x8d\xe6\xd2\xcd\x24\x77\x27\xc1\xf5\x38\xd5\x6f\xcb\x91\xab\x22\x2c\xdc\x6b\x60\x36\x59\x6b\x14\x63\x37\xd2\x8f\x1a\x4f\x89\xaa\x4b\x60\xd0\x43\xe3\x29\x36\x9a\xbf\x8f\xea\xee\x0b\xca\xb8\xdc\xb6\xc6\x5a\xc4\x47\x21\xb9\x06\xa2\xc1\x73\x41\x6b\xca\xe6\xed\x88\xef\x44\x5d\xde\xd8\xed\xfd\x8e\x15\x3c\x3b\x7e\xc9\x08\xf7\x00\x1d\xb8\x1a\x4b\x6d\x44\x2a\xf4\x3d\x29\x74\x26\xaa\x46\xd3\xc8\x97\x29\x1d\xb6\x5e\x70\x1c\xfe\xa7\x94\x97\xdb\x03\x6d\x08\xa7\x52\x36\x68\xba\x84\xa4\xa9\x79\x66\x94\xe6\x81\x1b\xd9\xa3\x85\xee\x39\x66\x9e\x0f\x32\xdd\xd7\xec\x0d\xea\xad\xf4\xc8\x37\xa8\xd8\x89\xa9\x6a\xef\xe6\x22\x45\xdc\x37\x74\xb8\xd1\xc2\xe8\xc8\x72\x9d\x75\xe7\x9f\x00\x00\x00\xff\xff\x5c\xcb\x9f\xab\x43\x24\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xe1\x4e\xe3\x46\x10\xc7\xbf\xef\x53\x4c\x43\xd5\xb4\xa7\xda\x86\xeb\x09\xb5\x1c\x20\x41\x08\x08\xc1\x91\x88\xa4\x27\x9d\xaa\x0a\xad\x77\xc7\x78\x15\x7b\xd7\xcc\x8e\x23\x7c\x21\xef\x5e\x39\x4e\x42\x02\x39\x0e\x4e\xfd\x06\xb3\x33\xbf\xff\xec\xcc\x7a\x26\x5b\x3f\x45\xb1\xb1\x51\x2c\x7d\x0a\x01\xde\x0b\xb1\x05\xc3\xde\x49\x6f\x0f\x22\x64\x15\x69\xeb\x73\xe9\xef\x42\x1d\x39\x32\xb7\xc6\x06\x65\xe1\x99\x50\xe6\x81\xb6\x3e\x54\xce\x26\x60\x3c\xa8\x92\x08\x2d\x67\x15\xa4\x92\xb4\x72\x1a\xf5\x47\x30\x2c\xb6\xa0\x20\x17\xcb\x38\xab\xc0\xa7\xae\xcc\xb4\x6d\x33\xc4\x28\xc4\xa0\x7b\xfd\xf9\xbc\xd3\xbd\x19\x7e\xe9\x77\x0f\x1a\xb2\x30\x09\xfc\x03\x41\x02\xad\x99\xb0\xaf\x7c\x4d\x37\xb7\x91\x64\x97\x1b\x15\xb8\x02\xad\x4f\x4d\xc2\x81\x75\x1a\x5b\xf0\xef\x47\xe0\x14\xad\x00\x00\x58\xc3\x3d\xf5\x17\x89\x11\xc2\x57\x9e\x31\x57\x9c\x81\x67\x57\x80\x76\x6a\x84\x14\x7a\xa4\xb1\x51\x28\xca\xdc\x95\x96\x21\xca\x2d\x47\x84\xde\x95\xa4\x10\x1e\x1e\x80\xa9\x44\x91\x8f\x12\x1f\xde\x27\xbe\xce\x2d\xd2\x38\x8e\xbc\x8e\x77\x04\xaa\xd4\x41\x7b\xf9\x3f\x40\x34\x96\x14\x65\x26\x8e\x1a\x36\x40\x1d\x02\xb7\x54\xdc\x95\x8e\x25\xc0\x36\x6c\xb7\xe1\xf0\x70\x76\xb9\xc4\xb3\x8c\xc5\x5c\x74\x3d\x4e\x10\x7a\x76\x84\xca\x59\x08\xae\x9f\x9d\xae\xde\x43\x12\x3f\xbd\x88\x98\x4c\x4c\x02\x78\x07\x61\xf7\x9e\x49\x86\xd7\x2e\x43\x68\x19\x9b\x90\x6c\x4d\xa7\x4d\xd2\xad\xe3\x5e\x6f\x38\x18\x5e\x1f\xf5\x6f\x3a\xbd\xab\xd3\xf3\xb3\x9b\xab\xa3\x4f\xdd\x83\xba\xaa\x41\x53\xf2\xa0\x09\x58\x64\xfb\xd8\x8a\x9f\x27\xab\x95\x9e\xce\x3a\x21\x26\x13\xcc\x3c\xbe\x81\xae\x5c\x5e\x94\x8c\x6f\xe0\x5b\x3d\x9d\x0a\xe1\x51\x43\x60\x20\x40\x68\xf9\xad\x93\xee\xf1\xdf\x67\x37\x97\xbd\xb3\xcb\xee\xe7\xee\xe5\xc1\xfb\xa7\x86\x0f\x5b\x2d\x78\x0d\x5d\x50\x0e\x01\x25\x8d\x2f\xb2\xd2\xd1\xbb\xe6\xef\xe6\x55\x46\xb9\xf4\x8c\x14\xbd\x13\x22\x96\x1e\x77\x3f\x40\xa0\x61\x7f\x7f\x1f\x26\x13\x38\x9e\x19\xba\xb6\x7e\xef\xf0\xeb\x17\x99\x67\x9f\x24\xf9\x54\x66\x10\x76\x66\x8a\xe1\x95\xd3\x78\xec\x1c\x7b\x26\x59\x5c\x94\x31\x36\x99\xfc\x06\xd3\x29\x1c\xae\xaa\xd4\xa9\x44\xf1\xc2\x33\x1c\x2d\x5d\xbf\xa7\xda\x41\xe2\x23\x7f\x5c\x31\xfa\xcd\xaa\xb5\xc3\x37\xf4\x66\x3d\x59\x8a\x16\x48\xa1\x22\xfe\x9e\x60\x9f\xcc\x58\x32\x5e\x60\xf5\xa2\xec\x05\x56\xaf\x56\x1d\x61\x25\x54\x9a\x3b\x0d\xdb\xbb\xdb\xdb\xf0\xba\x88\xe7\x6e\x1b\xcb\xf7\x23\xf5\xeb\xc8\x17\x8a\xa6\xe4\xac\x4a\xaa\x78\x9e\x40\x73\xd4\xd8\x8b\x91\x89\x94\x0c\x98\x4a\xcf\x51\x33\x50\x22\x69\x55\xea\xc8\x47\x8f\x93\x6c\x0e\x2b\x0b\x2d\x19\x83\x85\xbf\x98\x0f\x17\x2b\x73\xac\x3f\x6c\x24\xd8\xd9\xfd\x33\xdc\xfd\x23\xdc\x79\xff\x57\xb8\xb3\xdb\xde\x90\x56\x3d\xb5\xb2\xf1\x6c\x20\x8b\x7c\xa4\x0d\x41\xb0\x9e\xa1\xca\x5c\xa9\x0b\x72\x63\xa3\x91\x1e\x87\x3c\xa7\xc6\xd7\x13\x5c\x97\x45\x66\x94\x64\xd4\x60\x6c\x3d\x58\x21\xc5\x2c\x07\x95\x4a\x62\x0f\x89\xa3\x99\xad\xf9\x18\xa0\x70\xda\xff\x0e\xd2\x6a\xe0\x54\x72\xdb\x83\x75\x0c\x46\xa3\xcc\x84\x92\xbc\x9e\xdd\x9a\x6e\x24\xbf\x96\x84\xcd\xda\xd8\xdf\x6f\x77\x7b\xa7\x6d\xc1\x68\xa5\xe5\x73\xbd\x57\x37\xa7\x6e\x01\x4b\x63\x91\x06\xcd\x44\x0b\xfb\xe4\x0a\x24\x36\xe8\xc3\xa3\xaf\x7d\x72\x89\xc9\x30\x1c\x36\x31\x27\xf0\x00\xf5\x74\x45\x98\x4e\x85\x2f\x63\xaf\xc8\x14\x6c\x9c\x7d\x1b\x6d\xb0\x1a\xb9\xc6\x94\x52\x77\x32\x83\xaf\x4b\x6f\x6e\xea\x93\xb1\xca\x14\x32\x5b\xe0\xe7\x84\xcd\xe0\x01\x2a\x42\xfe\x71\x78\x13\xff\x04\x3d\xfc\x9f\x4a\xba\x58\x85\x67\xe4\xca\xe2\x2d\xb0\xeb\xd5\xc0\x55\x62\xe6\x94\xac\xcb\xfc\x0d\xd8\xe5\xfc\x78\xad\xaf\xa8\x4a\x32\x5c\xcd\x58\x57\x32\xc7\x3d\xb0\x7e\xb9\x44\x44\x41\x26\x97\x54\x0d\x94\xcc\x70\x80\xdc\x38\x78\xbf\x3c\x1f\xe7\xc3\xaa\xc0\x3d\x18\xe7\xde\x8b\x6e\xef\xb4\x7e\xfa\xd6\x31\xee\xc1\xa6\x75\x00\x8a\xea\xdf\x41\x99\x73\x85\x87\xd2\xb2\xc9\x16\x6f\xde\x78\x28\x8b\x95\xf5\x8b\x56\xc6\x19\x6e\x84\x2c\xb7\xf1\xd3\x65\xfd\x92\x33\xfc\x22\xfe\x0b\x00\x00\xff\xff\xb5\xd4\x96\x92\x8a\x09\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
