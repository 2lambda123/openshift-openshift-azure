// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\xdb\x6e\xdb\x38\xf6\xbd\x5f\x21\x68\x17\x48\x3b\x88\x7c\x49\xdc\x4e\x91\xb7\xb4\x99\x6e\x8d\x99\xb4\x46\xd4\xce\x3e\x0c\x8a\x0e\x4d\x1d\xdb\xdc\x48\xa4\x96\xa4\xdc\xba\x81\xff\x7d\xa1\x6b\x2c\x89\x12\x29\x5b\x69\xd2\x6e\x34\x0f\xe9\x48\x3c\x87\xe4\xb9\xdf\x7c\xf3\xc4\xb2\x2c\xcb\xfe\xa7\xc0\x2b\x08\x90\x7d\x66\xd9\x2b\x29\x43\x71\x36\x1c\xa6\x6f\x06\x01\xa2\x68\x09\x01\x50\x39\x40\xdf\x22\x0e\x03\xcc\x82\xec\x9b\x18\x9e\x8c\xc6\xcf\x9d\xd1\xd8\x19\x8d\x87\x1e\x84\x3e\xdb\xc4\xeb\x3e\x40\x10\xfa\x48\xc2\xe0\x3f\x82\xd1\x7f\xd8\xc7\xe9\x0e\x98\x51\x09\x54\xfe\x09\x5c\x10\x46\xe3\x8d\xc6\x83\x51\xfc\x5f\xbe\x20\x44\x1c\x05\x20\x81\x0b\xfb\xcc\xba\xd9\x66\x6f\xd7\x88\x13\x34\xf7\xa1\xf4\x92\x83\x60\x11\xc7\xc9\xcb\xbf\x92\x57\xf1\x73\x53\xfc\x2b\x59\x24\x37\x21\xc4\xdb\x5c\x12\xcc\x99\x60\x0b\x39\x78\x07\xf2\x0b\xe3\xd7\x43\x9a\xfe\x75\x01\x47\x9c\xc8\xcd\xbf\x38\x8b\x42\x91\x1d\xa3\x00\x47\x21\xd9\x39\xeb\xc9\x68\xfc\xc2\x19\x9d\x3a\xa7\xa3\xea\x3a\x9f\x61\x24\xb3\x55\x37\x37\xd6\xe0\x12\x51\xb2\x00\x21\x07\x7f\x64\x1f\xac\xed\xb6\x0a\x43\x51\x90\x1c\x8d\x8a\xa5\x83\x59\x10\x46\x12\xaa\x4b\x42\xce\x42\xe0\x92\xa4\x17\x2f\x7d\x4b\xbe\x8b\xec\xf0\x57\x91\x5f\x21\xc3\xee\x53\x07\xac\x9d\x01\xf9\x3e\xfb\xf2\x59\x88\x55\xe5\x04\x5d\x4e\x53\x26\x1c\xc6\x20\xe2\x75\xf6\x79\x8c\xba\x05\x6d\xb2\xdc\x03\x81\x39\x09\x73\x12\x26\x30\x96\xeb\xbe\xb5\x24\x47\x8b\x05\xc1\x06\xf0\x92\xd0\x84\xd2\xe7\x9e\xc7\x41\x88\x19\x87\x05\xf9\x1a\x23\xfb\xa5\x03\xf0\x8c\x71\x79\x85\xe8\x32\x21\xca\xc9\x89\x73\x72\xa2\x05\x26\x1c\x70\x7e\xee\x29\x9d\xb3\x88\x7a\x3a\x98\x90\x13\x16\xb3\xcd\x3e\xb3\xc6\xa3\xb1\x76\x31\x93\x0c\x33\x3f\xc6\xff\x01\x87\x3a\xdc\xa9\x4e\x74\x27\x42\x0a\x57\xba\xff\x2f\x76\x23\xc8\x56\xf9\xa5\xfe\xf6\xd3\x13\xf5\xf7\xed\xf1\x0f\xae\xb0\x84\x2e\x38\x7a\x54\xd7\x47\x75\xad\x2f\xfe\x71\xd4\x55\xbd\x87\xb1\xfc\xc5\x31\xc2\x43\x12\xc0\xf8\x3c\xf7\x2a\x81\x2f\xab\x66\xa6\x0e\x79\xa8\xf8\x9d\x3c\x8a\xdf\xae\xf8\x55\xed\x7f\x69\xf9\x7d\xc8\x9f\xb8\x57\x01\x9c\x4c\x4e\xef\x5c\x02\x4f\x7f\x22\x09\xbc\xd3\x78\x65\x4d\xb8\x8c\x90\x9f\xfd\xef\xbd\x44\x2a\x6b\x0a\xb2\x6b\x90\x82\x52\x56\xb8\x21\xc2\xd0\xa8\x37\xf9\xaa\x94\x61\x2d\xc1\x4c\xb2\x78\x3c\x4a\x93\xbc\xe1\x4b\x35\x87\x3e\xd5\xde\x2a\x6c\x83\x2d\xa2\x39\x05\x79\x50\xdc\x94\xa2\xe8\xcd\x66\x54\x85\xb6\xb8\xe7\xc9\xe4\x61\x89\x62\x18\xcd\x7d\x82\xa7\xb3\x4c\xcd\x40\x2f\x8c\xbf\x3a\xa3\x97\xce\x68\xdc\xa7\x30\x92\xd0\xe1\x2c\x92\xc0\xbb\x4a\x64\x71\x7a\x3f\xdf\xfe\x12\xe4\x8a\x79\x31\x52\x57\x22\x49\x70\x99\xda\x15\xe1\xb1\xc5\x75\xa4\x46\x9c\x9f\xec\x15\x12\x35\x1c\x07\xd1\xdb\x67\xc8\x7b\x85\x7c\x44\x31\x70\x13\x5a\x8f\x47\x0a\x5a\x7b\x10\x02\xf5\xc4\x7b\xaa\x94\x78\xfb\xaf\xbc\xfe\x31\xf5\x9e\x1e\x19\xb0\xfc\xe8\xd8\x3a\x2a\x58\x70\xf4\xec\x53\xf9\xbe\x9f\x7a\x64\xb4\x3f\xdf\x93\xd1\x73\x84\xaf\x81\x7a\xb9\x33\x60\xcc\x3f\x48\xdb\x33\x74\x6a\x55\x54\x28\x9c\xc2\xe6\x2c\x78\x52\xb0\xf2\xa6\xb3\xd7\x8c\x2e\xc8\x32\xe2\xc9\xe5\x0f\x3a\x56\x8e\xb3\x2f\x33\x14\x72\xb2\x46\x12\xd4\xfa\x71\xb1\xa1\x28\xd0\x47\x23\x15\x69\xd1\x6e\x9a\x00\x91\x64\x87\x7e\xe5\xb0\xfa\xa8\xad\x65\xf3\x17\x33\xb6\x92\x34\xee\x79\x87\x64\x21\x64\xed\xcb\x8a\x8c\x5d\xb5\xec\x56\xdb\x09\x5d\x1e\x9c\xdb\x87\x8c\x4b\xa7\x35\x93\xe8\x24\x1d\x75\x9d\xea\xc4\x5c\xcc\x28\x46\xf2\x69\x3b\x8f\x4b\xe6\x2e\xe6\x6f\x61\x01\x8e\x9e\x1d\x5b\x47\x43\x85\x5e\xe7\xef\xf4\x02\xa0\x91\xdc\x0c\x4f\x1c\x08\xda\x67\xd6\xcb\x91\x66\x39\x50\x34\xf7\xe1\x8d\xcf\x90\x24\x74\x39\x9d\xd9\x67\xd6\x02\xf9\x02\x34\x60\x0d\x76\xe0\xfb\x93\xb2\xc9\x20\x15\x1f\x0e\x26\x68\x8e\xc8\x94\xa2\xc4\xf3\xe1\x03\x09\x80\x45\x72\x4a\x2f\x09\x8d\x64\x22\x96\x13\x0d\x58\x7c\xd1\x0b\x22\x24\x27\xf3\x28\x77\x34\x17\xb0\x40\x91\xdf\x16\x9f\x59\x99\xf8\xcf\x9b\x43\xd3\xca\xe1\xfa\x23\x7d\xb2\xad\x18\x66\xfa\x79\x30\x9d\xab\x79\xd2\x77\xcb\x9e\x93\x0b\xb4\x67\x8a\x8f\x16\xa6\x7e\xbf\x4c\x1f\x26\x13\x5d\x02\xfc\x68\x62\x3a\x9a\x18\x3d\x49\xff\x2f\x6d\xcc\x64\x72\x7a\xef\x46\xc6\x28\x9a\x62\x91\x34\x8a\x93\xd2\xcb\x3d\xa0\xd8\x88\x50\x09\x7c\x8d\xfc\x29\x75\x01\x33\xea\xc5\x20\xcf\x35\x14\xa5\x51\x30\x07\xfe\x7e\x31\xcb\x2f\xa3\xad\xc8\x1a\xfa\xd1\x9f\xc6\x1f\x7c\x4f\xaa\xea\x4d\x47\xff\x1a\xf0\x40\x6a\x0d\xae\x64\x1c\x2d\x61\x28\xd2\xbf\xe7\x18\xb3\x88\x4a\x7d\xb5\xe1\xb9\x33\x7a\xe1\x8c\x9f\xf7\x59\xd9\x89\xd7\xa7\xbe\x62\x70\x05\xcb\xd8\xe0\x6e\xdc\xd2\xa9\x14\xb0\xda\x32\x64\x0a\xf9\x21\xbb\xb7\x2b\x11\xf5\x10\xf7\x3e\xff\x71\xe5\xf6\x41\xbd\xd7\xe9\xc0\x45\x5e\xa4\xbd\x44\x78\x45\x28\xb8\x18\xf9\xe0\x82\x01\x15\x7f\x75\xc6\x27\x3d\xd5\xc7\x0e\xab\xf3\x54\xaa\xcc\xb1\x4f\x59\x53\x90\xb1\xe7\x50\x98\x60\x0d\x32\x65\x8b\x3d\x46\xb9\x33\xa3\xa2\x2d\x1d\x15\xc5\x56\xd1\x34\xd6\xd2\xa8\x24\x92\x00\xdf\xe5\xb6\xea\x0a\x18\x85\x08\xa7\xcd\x88\x32\x89\x33\x96\xbe\x56\x0b\x9c\x55\x15\xd8\x02\xee\xcf\x4b\x97\x7c\x83\x18\xa2\xaa\xd9\x37\x37\x16\x59\x58\xf0\xdf\x42\xba\xa7\x01\x5a\xc2\x55\x46\xc2\x77\x28\x00\xcb\xb6\xad\xed\xb6\x22\xd9\x3e\x52\x47\x6d\x2a\x7d\x49\x30\xba\xbf\x7f\x6c\x38\x70\x52\x3d\x11\xab\x94\x2a\x55\xb0\x59\xfe\xb1\x09\x98\x33\x2f\xc2\x52\x05\xfa\x7e\xb1\x48\xc1\x14\x57\x06\xea\xd5\xef\xa4\xd1\x56\xb6\x06\x1e\x72\xb6\x26\x99\x8a\x34\x04\xbc\x76\x14\x2e\x39\xf2\x60\xc6\x7c\x82\x37\xcd\xdd\x85\x80\x79\xa9\xbe\x22\x1a\x21\xbf\x6e\xb3\x55\xed\x81\xb2\x26\xcf\x38\x5b\x10\x1f\xec\xb3\x86\x1d\x98\x28\x56\xb4\xf9\x48\xe4\x05\x84\x7e\x14\xc0\x73\xd6\x61\x9f\x45\x9e\x13\x89\x5a\x71\xb3\x04\x96\xc9\x7d\x01\xb5\x0e\x1a\x54\x41\x09\x15\x0b\x56\xde\x54\xb0\x0d\xe0\x7c\x42\xa3\xaf\xdd\x92\x06\xdb\x23\x22\xce\x52\x66\x48\x88\x2f\x8c\x7b\xe7\x91\x5c\x01\x95\xa4\xb0\x5e\x92\x47\xba\x84\x45\x88\x95\x51\x80\x7c\x5b\x5f\xfc\x1d\x36\xed\x9d\xa2\xea\x63\x84\xbc\xd8\xe4\x1a\x36\x17\x48\xa2\x4c\xde\x5d\xf7\xed\x2c\xdf\xf5\x5c\xb8\x92\x13\xba\x2c\x94\xc0\x75\xdf\xfe\x0e\x9b\x41\xb1\x40\xad\x41\xad\x37\x42\x32\xbe\xbe\x3d\x5c\xb1\x00\x86\xb7\x62\x31\x1c\x08\xb1\x1a\xa2\x48\xae\x18\x27\xdf\xc0\xfb\x7c\x1d\x5f\xda\x14\x75\x73\xb9\x73\xf7\xa9\xf7\xcb\xcc\x70\x74\x8a\x1c\xed\x2c\xb0\x30\xd2\x13\x92\x1a\xc6\x05\x70\xa0\x59\xdb\x70\x2f\xe3\x59\x43\xcc\x62\x43\xd5\x6a\xc1\x4c\x2a\xdb\x7b\x5a\xd0\x32\x39\x12\xa7\x65\x6e\xbb\x4b\xc0\xeb\xdb\xe0\xa1\x8a\x20\x8b\x2b\x12\x63\x1c\x5b\x5f\x5f\x80\x96\x2a\x8a\xca\x7b\x15\x6d\x4e\xe8\xc4\x87\x5b\xdb\x6d\xec\xc5\xeb\xe1\x4f\xc2\xb7\xc4\xc3\x37\xc1\x27\x8c\xda\x6e\x13\xaf\xaf\x76\x0e\xbb\x4f\x4b\x3e\x6a\x33\x71\x41\xc4\xb5\xde\x34\xe1\xc4\x82\x2f\xe3\x1b\x5e\x01\xf2\xfe\xcd\x49\xab\xf9\x4b\x61\x38\x20\x09\xef\x8b\x81\x8c\x37\x9c\x05\xc9\x35\x7a\x4a\xa3\xec\x2c\x32\x32\x52\x86\x6c\xed\x34\xce\x83\x16\x08\x83\x61\xeb\x28\x7d\x34\xc4\xa9\x07\x57\x0e\x35\x68\xef\x98\xa7\x6f\xd9\x7a\x12\x20\xbe\x31\xf2\x03\xd6\x6d\xcd\x6b\x3a\x7b\xc3\xf8\x17\xc4\xbd\x94\x7d\x86\xb0\xaa\xa0\xd3\xd4\xb1\x18\x36\xa1\xf6\x8a\x6b\x55\x8f\xa6\xde\x92\x9e\x28\xec\xc4\xf0\xf4\x31\xbc\xed\x6d\x2f\x1d\x27\x7b\x18\x3a\xad\xae\x02\xb0\x03\xd7\x4d\x10\x0a\xc0\x6c\xd2\xa2\xcb\x66\x56\xd7\x62\x5a\x63\xea\x73\x6c\x1d\x0d\xb3\x69\x91\xec\xaf\x11\x73\xf3\xc7\x80\xc9\xc5\x79\xb3\xf6\x66\x98\x55\x9e\xbb\x97\x6e\x4b\xd8\x8a\x92\x4c\x34\xef\x16\x8e\xec\xcd\xe1\x0c\xba\xa1\xc0\x3a\x7e\xde\x09\x91\x59\xf4\x62\xbe\x52\xbf\x4a\xb7\x62\xdf\x48\xa9\xed\x9b\x1a\x67\x93\xe3\x80\xaf\x12\x68\xec\xe0\x8d\x5c\x47\xb1\xba\x7f\x37\x81\x23\x21\x59\xe0\xa4\x73\x8b\x7d\x3b\x0c\x14\x49\xf6\x31\xcd\xed\x2e\x09\x65\xfc\xb6\x58\x62\xe8\x04\x42\xce\x24\x60\x09\x9e\x0b\x52\x12\xba\x34\x97\x62\x3b\xbb\x51\x1a\x5a\xbd\x42\x02\x5e\x4c\x7e\xa3\x98\x79\x60\x3d\x75\x25\xe2\x32\x0a\xad\xbf\x33\x22\xfc\xfd\xac\x96\xf3\xaa\x1e\x13\x2b\x5f\x8a\x2b\x6f\x6d\xd3\x79\xf2\xeb\xa8\xdf\x6e\xd9\x68\x80\x4a\xec\x5c\xd9\x64\xeb\xbc\x9a\xf5\x3a\xe1\xa8\x6b\xc2\xd0\x02\xee\x2d\xa2\x9e\x0f\x7c\xb7\x98\x35\x18\xb5\x52\xa4\x6b\x3a\x61\x35\xab\x48\x3d\x8f\xef\xb1\x92\x87\xd6\x88\xf8\x68\x4e\x7c\x22\x37\x46\x25\xbc\x17\xce\x68\xe2\x9c\x8e\x9c\x90\xc3\x9a\x40\x75\xe4\xf7\xa0\x82\x28\x12\xfb\xfd\x40\x24\xfd\x99\x9d\xd7\xa8\x36\x76\xe8\x23\xb9\x60\x3c\x78\x83\x22\x5f\x5e\xb0\x00\x11\x9a\xd4\xbb\xd4\x15\xf3\x62\xf9\xc7\xd0\x43\x12\xca\xeb\x4f\x7b\xa0\x7d\xef\xf3\x85\x98\x85\xea\xb2\x90\x8d\xb3\x63\x97\x58\x31\x8d\x89\x9c\x17\xfc\x5a\xea\x7d\x3e\x63\x61\xfb\x8c\xe0\x21\xdc\xce\xa3\x95\x23\x12\xa6\x6c\x77\x8e\x8e\xad\xf8\x26\x53\xea\xc1\xd7\xa7\xcf\x6a\xa5\xd8\x83\x26\x1e\xf3\x89\xae\xd6\xeb\x7c\xff\x91\xc7\x6a\xd2\xb3\xf7\xbc\xf3\xbd\x89\xc0\x8f\x52\x87\x4f\x44\x6c\x3f\xbc\x6d\xed\xe7\x7d\xf0\xa9\x86\xfb\x74\xca\x70\x97\x93\xa7\x85\x26\x52\x82\x7b\x52\xc5\x34\xb3\x3d\xc7\x18\x7c\xe0\x48\x82\x97\xdd\x3d\xab\x50\x24\x85\x6e\x15\xe5\x3a\x64\xc4\xe6\x19\xa3\x41\x37\xd7\x20\x33\xec\xd4\xcd\xdd\x15\x99\x57\x1d\xe6\x73\xcd\x8e\x5d\xda\xea\xa1\x0c\x04\x59\xda\xc4\x42\x31\xdd\x50\xba\x49\x97\xb4\xb9\x97\xf9\xdd\x0e\xe9\xf6\xbd\xa5\xd8\xda\x59\x95\x72\x2a\xdd\xff\x0c\x72\x78\x88\x99\xaa\xdd\xa6\x6b\x61\xb1\xf6\x56\x35\x22\xd3\xa9\x16\xd6\x43\xed\xab\xf0\x25\x77\x1a\x9a\x97\x5b\x73\x07\x47\xe6\x3f\x68\x84\x50\x8b\x90\x76\xa4\xb0\xd1\x5f\x75\x72\xcb\x4d\xa9\x50\xcc\xed\x3c\x25\xb9\xd3\x5f\x7e\x14\xfe\x77\x1d\x34\xbb\xdf\xc7\xae\xfa\x0e\xaa\xf6\x19\x98\x32\x1f\xf7\x34\x04\x7b\x49\x85\xd5\xd0\x65\x5f\x21\xee\x7d\x41\x5c\xdb\x15\xb4\xd7\x81\x4b\xbe\x19\x0f\x5b\x34\x6d\x67\xd8\x76\xa9\xb5\x5c\xda\xe3\x12\xdd\x00\x5b\x07\xb3\xda\x59\x9b\x3b\xba\x0d\xb3\x9f\x46\xea\xa7\x19\xf6\x98\x64\xa8\x4d\x31\x18\x69\xb7\x12\x53\xc7\x09\x85\x03\xa7\x13\x8c\x26\x13\xba\x8e\x24\x18\xc6\xb0\xdf\x65\x06\xa1\xef\xe1\x03\x4d\xb0\x7b\x70\xa4\xa3\xfc\x35\xaf\xd9\x74\x81\x6a\xb2\xa0\xe9\x38\x07\x4f\x1c\x1c\x34\x6d\xd0\xcb\xa4\xc1\xde\x53\x06\x3d\x4e\x18\x3c\xcc\xe9\x82\xa6\xfe\x8a\xc1\x54\x41\xd7\x89\x82\xae\xd3\x04\x77\x5b\xd7\xae\x04\xcf\x43\x68\xea\x2d\xfc\xac\x15\xb6\x06\x42\xec\xf8\xdb\x26\x7f\x74\x9f\xa1\x6e\x9c\x20\x63\x01\xf5\xba\x9a\x3e\xea\xeb\xd8\x4b\xeb\xd0\x3b\x33\xea\x95\x25\xb7\x69\xe8\x94\xa9\xf8\xbf\x7f\x27\x4c\xd7\xf9\x32\xed\x74\x99\x76\xb6\x76\x14\x31\xf9\x57\x26\x0f\x36\x8b\x64\x18\xc9\xf4\x14\x4f\xb6\x4f\xfe\x17\x00\x00\xff\xff\x79\x88\xfb\x8a\x0e\x51\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x7f\x4f\xe3\x46\x10\xfd\x7f\x3f\xc5\x34\x54\x4d\x7b\xaa\xbd\x70\x3d\xa1\x96\xe3\x4e\x82\x10\x10\xe2\x47\x10\xa4\x27\x9d\xaa\x0a\xad\x77\xc7\x78\x15\x7b\xd7\xcc\x8e\x23\xd2\x5c\xbe\x7b\x65\x3b\x84\x24\xa4\xc0\xf5\xbf\x64\xf6\xcd\xbc\xb7\x33\xde\x37\x5b\x3f\xc8\xc4\x3a\x99\xa8\x90\x41\x84\x0f\x42\x6c\xc1\x70\x70\x34\xd8\x03\x89\xac\xa5\x71\xa1\x50\xe1\x3e\x36\xd2\x93\xbd\xb3\x2e\xaa\xca\xc0\x84\xaa\x88\x8c\x0b\xb1\xf6\x2e\x05\x1b\x40\x57\x44\xe8\x38\x9f\x40\xa6\xc8\x68\x6f\xd0\x7c\x04\xcb\x62\x0b\x4a\xf2\x89\x4a\xf2\x09\x84\xcc\x57\xb9\x71\x5d\x86\x04\x85\xb8\xe9\x5f\x7f\x39\xed\xf5\x6f\x87\x5f\xaf\xfa\x9f\xda\xca\xc2\xa6\xf0\x17\x44\x29\x74\x1a\xe2\x30\x09\x75\x75\x7b\x27\x15\xfb\xc2\xea\xc8\x97\xe8\x42\x66\x53\x8e\x9c\x37\xd8\x81\xbf\x3f\x02\x67\xe8\x04\x00\xc0\x4a\xb9\x75\xbc\x48\xad\x10\x61\x12\x18\x0b\xcd\x39\x04\xf6\x25\x18\xaf\x47\x48\x71\x40\x1a\x5b\x8d\xa2\x2a\x7c\xe5\x18\x64\xe1\x58\x12\x06\x5f\x91\x46\xf8\xf6\x0d\x98\x2a\x14\xc5\x28\x0d\xf1\x43\x1a\x6a\x6d\xd2\xe0\x58\x06\x93\xec\x08\xd4\x99\x87\xee\xe2\x3f\x80\x1c\x2b\x92\xb9\x4d\x64\x5b\x1b\xa0\x4e\x81\x3b\x2a\xef\x2b\xcf\x0a\x60\x1b\xb6\xbb\xf0\xf9\x73\x73\xb9\x34\xb0\x4a\xc4\x9c\x74\x35\x4f\x10\x06\xf6\x84\xda\x3b\x88\xae\x9f\x9d\x2e\xdf\x43\x11\xaf\x5f\x44\x4c\xa7\x36\x05\xbc\x87\xb8\xff\xc0\xa4\xe2\x6b\x9f\x23\x74\xac\x4b\x49\x75\x66\xb3\x56\x74\xe7\x70\x30\x18\xde\x0c\xaf\x0f\xae\x6e\x7b\x83\xcb\xe3\xd3\x93\xdb\xcb\x83\x8b\xfe\xa7\xba\xab\x51\xdb\xf2\xa8\x4d\x78\x54\xfb\x34\x8a\x1f\xa7\xcb\x9d\x9e\x35\x93\x10\xd3\x29\xe6\x01\xbf\xa3\xba\xf6\x45\x59\x31\x7e\x47\x7d\x67\x66\x33\x21\x02\x1a\x88\x2c\x44\x08\x9d\xb0\x75\xd4\x3f\xfc\xf3\xe4\xf6\x7c\x70\x72\xde\xff\xd2\x3f\xff\xf4\x7e\x3d\xf0\x61\xab\x03\x6f\xa9\x2e\xa8\x80\x88\xd2\x16\x8b\xac\x8d\x7c\xd7\xfe\x6e\xbf\x4a\x59\xa8\xc0\x48\xf2\x9d\x10\x89\x0a\xb8\xfb\x01\x22\x03\xfb\xfb\xfb\x30\x9d\xc2\x61\x13\xe8\xbb\xfa\x7b\x87\x9f\xbf\xaa\x22\xbf\x50\x14\x32\x95\x43\xdc\x6b\x18\xe3\x4b\x6f\xf0\xd0\x7b\x0e\x4c\xaa\x3c\xab\x12\x6c\x95\xfc\x02\xb3\x19\x7c\x5e\x66\xa9\xa5\xc8\xe4\x11\x19\x8f\x16\xd0\xd7\x58\x7b\x48\x7c\x10\x0e\x27\x8c\x61\x33\x6b\x0d\xf8\x0f\xbe\x66\x26\x0b\xd2\x12\x29\xd6\xc4\xaf\x11\x5e\x91\x1d\x2b\xc6\x33\x9c\xbc\x48\x7b\x86\x93\x37\xb3\x8e\x70\x22\x74\x56\x78\x03\xdb\xbb\xdb\xdb\xf0\xb6\x8c\xe7\xb0\x8d\xed\xfb\x3f\xfd\xeb\xa9\x17\x9a\xa6\x55\xd3\x25\x5d\x3e\x17\xd0\x1e\xb5\xf1\x72\x64\xa5\x56\x11\x53\x15\x58\xb6\x86\x22\x95\xd3\x99\xa7\x20\x9f\x9c\x6c\x5e\xac\x2a\x8d\x62\x8c\x1e\xf1\x62\x6e\x2e\x4e\x15\x58\x3f\x6c\x24\xd8\xd9\xfd\x3d\xde\xfd\x2d\xde\x79\xff\x47\xbc\xb3\xdb\xdd\x20\xab\x76\xad\x7c\xdc\x18\xb2\x28\x46\xc6\x12\x44\xab\x0a\x75\xee\x2b\x53\x92\x1f\x5b\x83\xf4\x64\xf2\x9c\xd9\x50\x3b\xb8\xa9\xca\xdc\x6a\xc5\x68\xc0\xba\xda\x58\x21\xc3\xbc\x00\x9d\x29\xe2\x00\xa9\xa7\x26\xd6\x3e\x06\x28\xbd\x09\xbf\x82\x72\x06\x38\x53\xdc\x0d\xe0\x3c\x83\x35\xa8\x72\xa1\x15\xaf\xaa\x5b\xe1\x95\xea\x9f\x8a\xb0\x5d\x1b\xfb\xfb\xdd\xfe\xe0\xb8\x2b\x18\x9d\x72\x7c\x6a\xf6\xea\xe1\xc4\x17\xca\xd9\x14\x03\xc7\xc3\x36\x7c\x04\xb3\x99\x08\x55\x12\x34\xd9\x92\xad\x77\xcf\x80\x37\xcb\x87\x0d\x5c\x29\xd3\xcb\x2d\x6e\x28\x3a\x0f\xaf\xa2\x6e\x50\x13\xf2\x46\x64\x7b\x34\x47\x0f\x5f\x17\xfa\xb8\x3b\x4e\xc8\x57\xe5\x1a\xee\x7a\xf9\xac\x06\xe7\x5e\xab\x5a\xf4\x1a\xee\x7c\x1e\x6e\x2e\x8e\xba\x22\xcb\x93\x26\xe7\x52\x15\xb8\x07\x2e\x2c\x0c\x54\x94\x64\x0b\x45\x93\x83\xb1\xb2\xb9\x4a\x6c\x6e\x79\x72\x83\xdc\xe2\x54\x58\xc0\xfa\x83\xe3\x7a\xe0\xce\x33\xee\xc1\x26\x13\x04\x4d\xf5\xf6\xcf\xbd\x2f\x03\x54\x8e\x6d\xfe\x38\x69\x1b\xa0\x2a\x97\x96\x0e\x3a\x95\xe4\xb8\xb1\xc8\x62\x07\xad\xaf\xa8\x97\xc0\xf0\x93\xf8\x37\x00\x00\xff\xff\x4e\xeb\xd9\x40\x80\x08\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
