// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\xdb\x6e\xdb\x38\xf6\xbd\x5f\x21\x68\x17\x48\x33\x88\x6f\x89\xdb\x2d\xf2\x96\x26\xd3\x1d\x63\x26\xad\x11\xb5\xb3\x0f\x83\xa0\x43\x53\x47\x36\x37\x12\xa9\x25\x29\xa7\x6e\xe0\x7f\x5f\x90\xba\xc4\x96\xa8\x8b\x63\x25\x71\x5a\xab\x0f\x49\x25\x9e\x43\x9e\xfb\x8d\xb9\x7b\x65\x59\x96\x65\xff\x53\xe0\x19\x04\xc8\x3e\xb5\xec\x99\x94\xa1\x38\xed\xf5\xe2\x37\xdd\x00\x51\x34\x85\x00\xa8\xec\xa2\xef\x11\x87\x2e\x66\x41\xf2\x4d\xf4\x8e\xfb\x83\x37\x9d\xfe\xa0\xd3\x1f\xf4\x5c\x08\x7d\xb6\x50\xeb\x3e\x43\x10\xfa\x48\x42\xf7\xbf\x82\xd1\x7f\xd8\x47\xf1\x0e\x98\x51\x09\x54\xfe\x09\x5c\x10\x46\xd5\x46\x83\x6e\x5f\xfd\x4b\x17\x84\x88\xa3\x00\x24\x70\x61\x9f\x5a\x77\xcb\xe4\xed\x1c\x71\x82\x26\x3e\xac\xbd\xe4\x20\x58\xc4\xb1\x7e\xf9\x97\x7e\xa5\x9e\xbb\xec\x37\xbd\x48\x2e\x42\x50\xdb\x5c\x12\xcc\x99\x60\x9e\xec\x7e\x04\x79\xcb\xf8\x4d\x8f\xc6\x3f\x1d\xc0\x11\x27\x72\xf1\x6f\xce\xa2\x50\x24\xc7\xc8\xc0\x51\x48\x56\xce\x7a\xdc\x1f\xbc\xed\xf4\x4f\x3a\x27\xfd\xfc\x3a\x9f\x61\x24\x93\x55\x77\x77\x56\xf7\x12\x51\xe2\x81\x90\xdd\x3f\x92\x0f\xd6\x72\x99\x87\xa1\x28\xd0\x47\xa3\x62\xda\xc1\x2c\x08\x23\x09\xf9\x25\x21\x67\x21\x70\x49\x62\xc2\xd7\xbe\xe9\xef\x22\x39\xfc\x55\xe4\xe7\xd8\xb0\xfa\x14\x01\x0b\x67\x40\xbe\xcf\x6e\xbf\x0a\x31\xcb\x9d\x60\x93\xd3\xac\x33\x0e\x63\x10\x6a\x9d\x7d\xa6\x50\x57\xa0\xd5\xcb\x5d\x10\x98\x93\x30\x65\xa1\x86\xb1\x1c\xe7\x37\x4b\x72\xe4\x79\x04\x37\x80\x97\x84\x6a\x4e\x9f\xb9\x2e\x07\x21\xc6\x1c\x3c\xf2\x4d\x21\xfb\x65\x03\xe0\x31\xe3\xf2\x0a\xd1\xa9\x66\xca\xf1\x71\xe7\xf8\xb8\x16\x98\x70\xc0\xe9\xb9\x47\x74\xc2\x22\xea\xd6\xc1\x84\x9c\x30\x25\x36\xfb\xd4\x1a\xf4\x07\xb5\x8b\x99\x64\x98\xf9\x0a\xff\x67\x1c\xd6\xe1\x8e\x6d\x62\x73\x26\xc4\x70\x6b\xf4\xff\x62\x97\x82\x2c\x8d\x5f\x8a\x6f\xaf\x5f\x99\xbf\x2f\x8f\x5e\xb8\xc1\x12\xea\x71\xb4\x37\xd7\xbd\xb9\x16\x17\xbf\x1c\x73\x35\xef\xd1\x58\xff\x54\x8e\xb0\x4b\x0a\xa8\xce\xf3\xac\x1a\xf8\x2e\xef\x66\x8a\x90\xdb\xaa\xdf\xf1\x5e\xfd\x56\xd5\x2f\xef\xff\xd7\x96\x3f\x87\xfe\x89\x67\x55\xc0\xe1\xf0\xe4\xd1\x35\xf0\xe4\x07\xd2\xc0\x47\xcd\x57\xe6\x84\xcb\x08\xf9\xc9\x7f\x9f\x25\x53\x99\x53\x90\x9b\x26\x29\x28\x16\x85\x13\x22\x0c\xa5\x76\x93\xae\x8a\x05\x56\x91\xcc\xe8\xc5\x83\x7e\x5c\xe4\xf5\xde\x99\x25\x74\x5d\x78\x6b\xf0\x0d\xb6\x88\x26\x14\xe4\x56\x79\x53\x8c\xa2\x35\x9f\x91\x57\xda\x8c\xce\xe3\xe1\x6e\xa9\x62\x18\x4d\x7c\x82\x47\xe3\xc4\xcc\xa0\x5e\x19\xff\xd5\xe9\xbf\xeb\xf4\x07\x6d\x2a\x23\x09\x3b\x9c\x45\x12\xf8\xa6\x1a\x99\x9d\xde\x4f\xb7\xbf\x04\x39\x63\xae\x42\xea\x48\x24\x09\x5e\xe7\x76\x4e\x79\x6c\x71\x13\x99\x11\xa7\x27\x7b\x8f\x44\x01\xc7\x56\xfc\xf6\x19\x72\xdf\x23\x1f\x51\x0c\xbc\x09\xaf\x07\x7d\x03\xaf\x5d\x08\x81\xba\xe2\x13\x35\x6a\xbc\xfd\x57\xda\xff\x18\xb9\xaf\x0f\x1a\x88\xfc\xe0\xc8\x3a\xc8\x44\x70\x70\x78\xbd\x4e\xef\x75\x8b\x82\xf6\x27\x0f\x14\xf4\x04\xe1\x1b\xa0\x6e\x1a\x0c\x18\xf3\xb7\xb2\xf6\x04\x9d\xd9\x14\x0d\x06\x67\xf0\x39\x1e\xd7\x0d\x2b\x77\x34\x3e\x67\xd4\x23\xd3\x88\x6b\xe2\xb7\x3a\x56\x8a\xb3\x2d\x37\x14\x72\x32\x47\x12\xcc\xf6\x71\xb1\xa0\x28\xa8\xcf\x46\x72\xda\x52\xbb\xa9\x06\x22\x7a\x87\x76\xf5\x30\xff\x98\xbd\x65\xf9\x97\x66\x62\x25\x71\xde\xf3\x11\xc9\x4c\xc9\xaa\x97\x65\x15\xbb\x69\xd9\xbd\xb5\x13\x3a\xdd\xba\xb6\x0f\x19\x97\x9d\xca\x4a\x62\x23\xed\x28\xda\xd4\x46\xc2\xc5\x8c\x62\x24\x5f\x57\xcb\x78\xcd\xdd\x29\xf9\x66\x1e\xe0\xe0\xf0\xc8\x3a\xe8\x19\xec\x3a\x7d\x57\xaf\x00\x35\x9a\x9b\xe0\x51\x89\xa0\x7d\x6a\xbd\xeb\xd7\x2c\x07\x8a\x26\x3e\x7c\xf0\x19\x92\x84\x4e\x47\x63\xfb\xd4\xf2\x90\x2f\xa0\x06\xac\xc4\x0f\x3c\x3d\x2b\xcb\x1c\x52\xf6\x61\x6b\x86\xa6\x88\x9a\x72\x94\xb8\x3e\x7c\x26\x01\xb0\x48\x8e\xe8\x25\xa1\x91\xd4\x6a\x39\xac\x01\x53\x84\x5e\x10\x21\x39\x99\x44\x69\xa0\xb9\x00\x0f\x45\x7e\x55\x7e\x66\x25\xea\x3f\x29\x4f\x4d\x73\x87\x6b\x8f\xf5\x7a\x5b\xd1\x4b\xec\x73\x6b\x3e\xe7\xeb\xa4\x27\xab\x9e\x35\x01\xd5\x95\xe2\xde\xc3\x14\xe9\x4b\xec\x61\x38\xac\x2b\x80\xf7\x2e\x66\x43\x17\x53\xcf\xd2\x9f\xd2\xc7\x0c\x87\x27\xcf\xee\x64\x1a\x65\x53\x2c\x92\x8d\xf2\xa4\x98\xb8\x1d\xca\x8d\x08\x95\xc0\xe7\xc8\x1f\x51\x07\x30\xa3\xae\x02\x79\x53\xc3\x51\x1a\x05\x13\xe0\x9f\xbc\x71\x4a\x4c\x6d\x47\xb6\x61\x1c\xfd\x61\xe2\xc1\x53\x72\xb5\xde\x75\xb4\x6f\x01\x3b\xd2\x6b\x70\x24\xe3\x68\x0a\x3d\x11\xff\x3c\xc3\x98\x45\x54\xd6\x77\x1b\xde\x74\xfa\x6f\x3b\x83\x37\x6d\x76\x76\xd4\xfa\x38\x56\x74\xaf\x60\xaa\x1c\xee\xc2\x59\x3b\x95\x01\xb6\xb6\x0d\x19\x43\x7e\x4e\xe8\x76\x24\xa2\x2e\xe2\xee\xd7\x3f\xae\x9c\x36\xb8\x77\x1e\x5f\xb8\xe8\xa1\x39\x22\x3e\x9a\x10\x9f\xc8\x85\x03\x0d\xd8\xf7\xb6\xd3\x1f\x76\x4e\xfa\x9d\x90\xc3\x9c\x40\x7e\x50\xb0\x15\x1b\x91\x78\xe8\x3d\x90\xf8\x7a\x8e\x8a\x43\x92\x47\x86\x44\xc3\x0e\x7d\x24\x3d\xc6\x83\x0f\x2a\xf6\x5d\xb0\x00\x11\x7a\xae\xd8\x6b\xb6\xb4\x6c\xf9\x97\xd0\x45\x12\xd6\xd7\x9f\xec\x62\x5f\x12\xb3\x70\x61\x66\x0d\x4e\x8e\xbd\x26\x8c\x44\xfa\xe7\x89\x6e\x1a\x38\x90\xf5\xb2\x18\x0b\xab\xbb\x8b\xdb\x48\x3c\x4d\x1a\x0e\x48\x98\x8a\xbe\x73\x70\x64\x29\x6a\x46\xd4\x85\x6f\xaf\x0f\x0f\xaf\xdb\xec\x96\xa6\xdd\xa0\x1d\x71\x61\xb9\x9b\x1d\x23\x15\x38\x3c\x84\x1b\xa8\x41\xc9\xac\xe4\x19\xd5\x60\xbb\x6e\x6d\x6e\x56\xa4\x32\xc3\x39\x05\x79\x50\x10\x7f\x13\x64\xc6\x8b\x32\x0a\xe5\xca\x4d\xb3\x87\x61\x36\x35\xf3\xea\x55\xf8\x31\x7b\xcd\x99\x05\x51\x82\x5b\x33\xa1\xb8\x82\x3b\xc3\x18\x7c\xe0\x48\x82\x9b\xd0\x4f\xe8\x54\x37\x70\x55\x35\x67\xe2\x5e\x0c\x37\x1a\x7f\x60\xfc\x16\x71\x37\x5e\x5e\xe2\x91\x49\xd8\x5e\x47\x99\x84\x58\xe3\x6a\xb1\xa3\x1c\x20\xbe\x28\x3d\x7c\x7e\xf1\xd6\xed\xe7\x64\x2e\xd7\x7a\xb9\x55\x6a\x56\xaa\xd6\x4a\xe6\x89\xc9\xcf\xed\x4b\xad\xd8\x36\xc2\x47\x6b\xa1\x87\xdb\x59\x5d\x81\x9e\x47\xa9\x05\x4d\xbe\xa7\x7c\x8a\xdc\x88\xfc\xa6\xee\xac\xb0\xc5\xb2\xc5\x3c\x31\xd1\xa4\x4b\x84\x67\x84\x36\x0b\x50\x55\x69\xe2\x8b\x0d\x54\x85\x50\xbd\xa2\x8b\x15\x2e\x78\xa3\x68\x53\x96\x9b\x2b\x99\xdf\xe7\xc8\x8f\x3a\xc2\xcc\xc2\xca\x3c\xa8\x8a\x2a\x77\x77\x16\xf1\x2c\xf8\x5f\x56\xfe\x8c\x02\x34\x85\xab\x84\xaa\x8f\x28\x00\xcb\xb6\xad\xe5\x32\x17\x7e\x7c\x64\x6e\xeb\x99\x0a\x2a\x8d\xd1\xf9\xfd\x4b\xf1\xb0\x56\xe6\x75\xc4\x0c\xb8\x09\x6c\x9c\x7e\x2c\x03\xe6\xcc\x8d\xb0\x34\x81\x7e\xf2\xbc\x18\x2c\xaf\x4b\x77\x77\x16\x50\xb7\x48\x53\x5d\x39\xb7\x2e\xcb\x07\xba\x84\x07\x6a\x86\x55\x72\xa3\x64\x86\xb8\x7b\x8b\x38\x8c\x39\xf3\x88\x5f\x71\xdb\x65\x1e\x38\xe4\x3b\x14\x14\xe9\xcf\x4b\xf5\xba\xc0\xa5\xb2\xed\x12\xdb\xa9\xdd\xad\x98\x0e\x57\xdd\xae\xa9\xeb\xc6\x6c\xe0\x62\x1f\x60\xd5\x1b\x06\x91\x66\x37\x7d\x98\xa8\xe5\x11\x72\x03\x42\xbf\x08\xe0\xa9\xc9\x60\x9f\x45\x6e\x27\x12\x85\x5b\x07\x19\x48\x42\x04\xdf\xd0\xc6\x8d\xb8\x7c\x42\xa3\x6f\xcd\xfb\xf4\xb6\x4b\x84\x4a\x0d\xc7\x48\x88\x5b\xc6\xdd\xb3\x48\xce\x80\x4a\x92\x39\xa8\xea\x3c\xcb\x16\x62\xd6\x20\x6b\xd3\x69\xc2\xef\xb0\xa8\xd6\x97\xf4\xa9\xcf\x4e\x34\xd6\x1b\x58\x5c\x20\x89\x12\xdd\x77\x9c\xdf\xc6\xe9\x36\x67\xc2\x91\x9c\xd0\x69\xe6\x38\x56\x3f\x9a\x3d\x8e\xf9\xdc\x48\x2a\xea\xec\xde\x8c\x05\xd0\xbb\x97\x63\xaf\x2b\xc4\xac\x87\x22\x39\x63\x9c\x7c\x07\xf7\xeb\x8d\x22\xad\x16\x67\x79\x5e\x63\x19\x15\xb0\x1a\xae\xf8\xd6\x78\x35\x2d\xee\x76\xd5\x6a\x2d\x89\xc3\x83\x07\x1c\x68\x72\xbb\xee\x41\x21\x64\x0d\x29\x53\xae\xba\xd2\x87\x57\x95\x05\x5b\xc4\x8f\x7b\xf2\x75\xc7\xa0\x79\xd4\xca\x00\xe7\xf7\x39\x53\x1e\x38\x49\xa7\xb4\x73\x55\x31\xc7\x17\x50\xc9\x05\x83\x9f\xcb\xa3\x4c\x99\xaa\x33\x48\x6b\xb9\x54\x51\xa3\x18\x5b\xb4\x8c\x74\x44\x29\x83\xd7\x42\x59\x2e\x75\x98\x31\x87\xc3\xf4\x29\xa9\x19\x6c\x26\x2e\x88\xb8\xa9\x76\x19\x58\xa7\x9a\xba\xe0\xbc\x02\xe4\xfe\x87\x93\x42\x5f\x70\x7d\x3d\x07\x24\xe1\x53\x76\x27\xf9\x03\x67\x81\x3e\x76\xd3\xfb\x4f\x8f\x98\x2e\xf7\xe0\x9b\x04\x2a\x74\x9d\xfb\xb3\xb4\x76\x4a\x58\xb1\x12\x59\xcb\xe3\xce\xf3\xa6\xb6\xaa\x38\xc6\xc2\xd0\x22\xaa\xcf\xf2\x22\xc9\xbe\x84\x53\x8e\x5c\xb8\x24\x94\xf1\x7b\xc9\x96\xf5\xa5\x39\x93\x80\x25\xb8\x0e\x48\x49\xe8\xb4\xbc\x6c\xb6\xe3\x0b\xf7\x09\xc5\xef\x91\x80\xb7\xc3\x5f\x29\x66\x2e\x58\xaf\x1d\x89\xb8\x8c\x42\xeb\xef\x84\x9e\xbf\x0f\x1b\xe7\x64\x6b\xfe\xef\x5e\x78\x67\xfa\x8f\x5c\x7f\x2d\xd3\xda\xf8\x40\x2b\x47\x36\xa1\x4e\xad\xe3\x3c\x12\x92\x05\x4e\x7c\xfc\x92\x75\xbf\x21\xea\xfa\xc0\x57\x2d\xa1\xdb\xff\x81\xe7\x1c\x0f\xfa\xf3\xb9\xfd\x94\x63\x33\x1f\x38\x52\x4c\xde\xa9\x19\x87\x16\xfb\x7e\xc2\xf1\x74\x13\x8e\xf6\x54\xe0\xa5\xcc\x37\xb4\x8a\x3d\x0c\x6f\xd5\xe5\x9c\x47\x98\x96\x18\x8d\xe1\xc9\x66\x25\xed\x98\xe2\xcf\x3e\x29\x59\x55\x99\xf7\x1b\xfc\xf5\x42\xb3\x63\xaf\x6d\xb5\x2b\xd7\x25\xad\xfa\x1a\xbb\x7e\x62\xb4\x1f\x2f\xe5\x9f\x9d\x1d\x2f\x35\x72\x53\x05\x6a\xb6\x6e\xb3\xec\xc2\x70\x29\x8b\x25\x4f\x59\x2b\x3f\xf1\x68\x69\x57\x32\x84\xba\x16\x74\x99\x1a\xb6\x36\x56\x32\x0b\xfb\xb1\x2a\xef\xd2\xf0\xbb\x1f\x29\xad\xa0\x7a\xfe\x91\x52\x85\x0b\xd8\x0f\x94\xda\xb7\xe6\x0d\xc3\xc6\xae\x8e\x93\x1a\x25\xd7\x19\xa6\xfd\x30\x69\x3f\x4c\x5a\x21\x61\x8b\x61\x52\xd9\x71\xf6\x43\xa6\xfd\x90\xc9\xb8\x66\x3f\x64\x5a\x27\xef\x65\xe5\xce\x8d\x46\x4c\xcf\xd7\x66\x2a\xd9\xfc\xe5\x8e\x97\x34\x35\x3f\xfa\x70\x49\xff\x96\xe8\x83\xcd\x22\x19\x46\x32\x3e\xc5\xab\xe5\xab\xff\x07\x00\x00\xff\xff\xb6\xd9\x4f\x56\x28\x56\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x7f\x4f\xe3\x46\x10\xfd\x7f\x3f\xc5\x34\x54\x4d\x7b\xaa\x6d\xb8\x9e\x50\xcb\x71\x48\x10\x02\x42\xfc\x08\x82\xf4\xa4\x53\x55\xa1\xf5\xee\x18\xaf\xb2\xde\x35\x3b\xe3\x08\x37\xca\x77\xaf\x6c\x43\x08\x21\x05\xae\xff\x25\x33\x6f\xe6\x3d\xbf\xb1\x67\x36\x7e\x48\x52\xe3\x92\x54\x52\x0e\x11\xde\x0b\xb1\x01\xe3\xd1\xe1\x68\x07\x12\x64\x95\x68\x47\x85\xa4\xbb\x58\x27\x3e\x98\x5b\xe3\xa2\xaa\x24\x0e\x28\x8b\x48\x3b\x8a\x95\x77\x19\x18\x02\x55\x85\x80\x8e\x6d\x0d\xb9\x0c\x5a\x79\x8d\xfa\x33\x18\x16\x1b\x50\x06\x9f\xca\xd4\xd6\x40\xb9\xaf\xac\x76\x7d\x86\x14\x85\xb8\x1e\x5e\x7d\x3d\x19\x0c\x6f\xc6\xdf\x2e\x87\x5f\xba\xce\xc2\x64\xf0\x17\x44\x19\xf4\x5a\x62\xaa\xa9\xe9\x6e\x6e\x13\xc9\xbe\x30\x2a\xf2\x25\x3a\xca\x4d\xc6\x91\xf3\x1a\x7b\xf0\xf7\x67\xe0\x1c\x9d\x00\x00\x78\xd6\x6e\x15\x2f\x32\x23\x04\xd5\xc4\x58\x28\xb6\x40\xec\x4b\xd0\x5e\x4d\x30\xc4\x84\x61\x6a\x14\x8a\x62\x92\x51\x7c\x9f\x51\x43\x9f\x68\x9c\x26\xa4\xd3\x2d\x81\x2a\xf7\xd0\x5f\xfc\x07\x48\xa6\x32\x24\xd6\xa4\x49\x57\x0e\xd0\x94\xc0\x6d\x28\xef\x2a\xcf\x12\x60\x13\x36\xfb\xb0\xb7\xd7\xea\xcf\x88\x65\x2a\x0a\x5f\x39\x5e\xad\x13\x01\x89\x7d\x40\xe5\x1d\x44\x57\x2f\xb2\xcb\x52\x65\xe0\x55\xad\x62\x36\x33\x19\xe0\x1d\xc4\xc3\x7b\x0e\x32\xbe\xf2\x16\xa1\x67\x5c\x16\x64\x6f\x3e\xef\x44\xf7\x0e\x46\xa3\xf1\xf5\xf8\x6a\xff\xf2\x66\x30\xba\x38\x3a\x39\xbe\xb9\xd8\x3f\x1f\x7e\x69\x8c\x8b\x3a\x57\xa3\xae\xe0\x51\xed\x93\xdb\x3f\xce\x96\xcd\x9c\xb7\x66\x8b\xd9\x0c\x2d\xe1\x77\x74\x57\xbe\x28\x2b\xc6\xef\xe8\xef\xf4\x7c\x2e\x04\xa1\x86\xc8\x40\x84\xd0\xa3\x8d\xc3\xe1\xc1\x9f\xc7\x37\x67\xa3\xe3\xb3\xe1\xd7\xe1\xd9\x97\x8f\xab\x81\x4f\x1b\x3d\x78\x4f\x77\x11\x0a\x88\x42\xd6\x61\x91\x95\x4e\x3e\x74\xbf\xbb\x17\x2f\x29\x24\x31\x86\xe4\x83\x10\xa9\x24\xdc\xfe\x04\x91\x86\xdd\xdd\x5d\x98\xcd\xe0\xa0\x0d\x0c\x5d\xf3\x4a\xc3\xcf\xdf\x64\x61\xcf\x65\xa0\x5c\x5a\x88\x07\x2d\x63\x7c\xe1\x35\x1e\x78\xcf\xc4\x41\x96\xa7\x55\x8a\x9d\x92\x5f\x60\x3e\x87\xbd\x65\x96\x46\x4a\x92\x3e\x22\xe3\xc9\x02\xfa\x16\xeb\x00\x03\xef\xd3\x41\xcd\x48\xeb\x59\x1b\xc0\x7f\xf0\xb5\x33\x59\x90\x96\x18\x62\x15\xf8\x2d\xc2\xcb\x60\xa6\x92\xf1\x14\xeb\x57\x69\x4f\xb1\x7e\x37\xeb\x04\x6b\xa1\xf2\xc2\x6b\xd8\xdc\xde\xdc\x84\xf7\x55\xbc\x84\xad\xb5\xef\xff\xf8\x37\x90\xaf\x98\xa6\x64\xeb\x92\x2a\x5f\x0a\xe8\x52\x5d\xbc\x9c\x98\x44\xc9\x88\x43\x45\x9c\x90\xaf\x82\xc2\x44\x3a\x95\xfb\x40\xc9\xd3\xb2\x7a\x68\x56\x95\x5a\x32\x46\x8f\x78\xf1\xb0\x5c\x9c\x2c\xb0\xf9\xb0\x31\xc0\xd6\xf6\xef\xf1\xf6\x6f\xf1\xd6\xc7\x3f\xe2\xad\xed\xfe\x1a\x59\x01\xc9\xdb\x69\xbb\x73\x45\x31\xd1\x26\x40\xf4\x5c\xa1\xb2\xbe\xd2\x65\xf0\x53\xa3\x31\x3c\xed\x71\xce\x0d\x35\x4b\x5a\x57\xa5\x35\x4a\x32\x6a\x30\xae\xd9\x9d\x90\xa3\x2d\x40\xe5\x32\x30\x41\xe6\x43\x1b\xeb\x3e\x06\x28\xbd\xa6\x5f\x41\x3a\x0d\x9c\x4b\xee\x13\x38\xcf\x60\x34\x4a\x2b\x94\xe4\xe7\xea\x9e\xf1\x26\xf2\x9f\x2a\x60\x77\x19\x76\x77\xfb\xc3\xd1\x51\x5f\x30\x3a\xe9\xf8\x44\xef\x34\xc3\x89\xcf\xa5\x33\x19\x12\xc7\xe3\x2e\x7c\x08\xf3\xb9\xa0\x2a\x25\x15\x4c\xc9\xc6\xbb\x17\xc0\xeb\xe5\x64\x0b\x97\x52\x0f\xac\xc1\x35\x4d\x1f\xc2\xcf\x51\xd7\xa8\x02\xf2\x5a\x64\x97\x7a\x40\x8f\xdf\x16\xda\x4c\xa1\x19\xf5\x71\xf0\x55\xb9\x82\xbb\x5a\xce\x35\x60\xeb\x95\x6c\x44\xaf\xe0\xce\x1e\xc2\xed\x83\xa3\xaa\x82\xe1\xba\xad\xb9\x90\x05\xee\x80\xa3\xc5\x02\x15\x65\x30\x85\x0c\xf5\xfe\x54\x1a\x2b\x53\x63\x0d\xd7\xd7\xc8\x1d\x4e\xd2\x02\x36\x1c\x1d\x35\x03\x77\x9e\x71\x07\xd6\x2d\x41\x50\xa1\x39\xf0\xd6\xfb\x92\xa0\x72\x6c\xec\xe3\xa4\x0d\x41\x55\x2e\x1d\x1d\x74\x32\xb5\xb8\xb6\xc9\xe2\x06\xad\x9e\xa8\xd7\xc0\xf0\x93\xf8\x37\x00\x00\xff\xff\xf7\x7f\xa9\x2e\x63\x08\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
