// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/etc/etcd/ca.crt
// data/etc/etcd/etcd.conf
// data/etc/etcd/peer.crt
// data/etc/etcd/peer.key
// data/etc/etcd/server.crt
// data/etc/etcd/server.key
// data/etc/origin/master/admin.kubeconfig
// data/etc/origin/master/aggregator-front-proxy.crt
// data/etc/origin/master/aggregator-front-proxy.key
// data/etc/origin/master/ca-bundle.crt
// data/etc/origin/master/ca.crt
// data/etc/origin/master/ca.key
// data/etc/origin/master/front-proxy-ca.crt
// data/etc/origin/master/master-config.yaml
// data/etc/origin/master/master.etcd-ca.crt
// data/etc/origin/master/master.etcd-client.crt
// data/etc/origin/master/master.etcd-client.key
// data/etc/origin/master/master.kubelet-client.crt
// data/etc/origin/master/master.kubelet-client.key
// data/etc/origin/master/master.proxy-client.crt
// data/etc/origin/master/master.proxy-client.key
// data/etc/origin/master/master.server.crt
// data/etc/origin/master/master.server.key
// data/etc/origin/master/named/console.crt
// data/etc/origin/master/named/console.key
// data/etc/origin/master/openshift-master.kubeconfig
// data/etc/origin/master/scheduler.json
// data/etc/origin/master/service-signer.crt
// data/etc/origin/master/service-signer.key
// data/etc/origin/master/serviceaccounts.private.key
// data/etc/origin/master/serviceaccounts.public.key
// data/etc/origin/master/session-secrets.yaml
// data/etc/origin/node/ca.crt
// data/etc/origin/node/client-ca.crt
// data/etc/origin/node/node-config.yaml
// data/etc/origin/node/node.kubeconfig
// data/etc/origin/node/pods/apiserver.yaml
// data/etc/origin/node/pods/controllers.yaml
// data/etc/origin/node/pods/etcd.yaml
// data/etc/origin/node/pods/ovs.yaml
// data/etc/origin/node/pods/sdn.yaml
// data/etc/origin/node/pods/sync.yaml
// data/etc/origin/node/sdn.kubeconfig
// data/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _etcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func etcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdCaCrt,
		"etc/etcd/ca.crt",
	)
}

func etcEtcdCaCrt() (*asset, error) {
	bytes, err := etcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xd1\x4e\xfa\x30\x14\xc6\xef\xff\x4f\xc1\x03\xfc\xdd\xc6\x44\x70\x24\xbd\x28\xdb\x31\x34\x94\xa2\xdd\x19\x09\x57\xcd\xc4\x26\x1a\x45\x49\x57\x89\x86\xf0\xee\x86\x16\x61\xc2\x88\x6e\xd9\x4d\xbf\x5f\xbf\xb3\xef\x9c\x03\x98\x66\x8a\x66\x53\x90\xc8\x72\x50\x29\x67\x20\x50\x15\x92\xe7\xe4\xd1\xda\x65\xd5\x0f\xc3\xf5\xba\x15\xc0\x87\x35\x65\x30\x7c\xab\xec\x6b\xb9\xd0\xad\xcd\xa6\x1f\x5f\xf6\x92\x7f\xee\x76\x0a\x12\xd5\x0d\xe3\x40\x42\x6d\xe7\xdb\xef\x21\xac\xb4\x59\x69\x13\xcc\x8d\xdd\x31\xde\xd7\xa1\xb4\xc0\x21\xb1\xe6\x5d\x7b\x29\xa3\x48\x55\xc6\x24\x09\x57\xa5\x09\x5f\x9e\xee\x9d\x83\xd7\x80\x43\x8a\x6c\x22\x14\xb2\x31\x4c\x0a\x24\xf1\x55\x14\x79\x69\x08\x54\xe2\x00\x28\x2a\x26\x10\xe4\x94\x72\xb2\xd7\x98\x60\xc8\x28\xaf\xe5\xba\x05\x90\x7f\x4b\x75\x7d\xe4\x91\xf2\x22\x47\x90\x64\x51\x56\x56\x9b\x8b\xc8\x3d\x7b\x97\x1f\xa7\xee\xf6\xff\xfa\x51\xbb\x11\x6c\x9f\x82\x71\x23\x18\xd7\xfe\x67\x04\xb3\x33\x4d\x7e\xd6\x9f\x1e\xe1\x2c\x47\x10\x8d\x33\x8c\x02\xf7\xd6\xa6\xb6\x83\x4f\x1b\x73\x40\xbf\x4b\x0b\x3a\x06\xd2\xd8\x2f\xaf\x3b\x8f\xa6\x2d\x58\xea\xfa\x0e\x78\xec\xfc\x22\x38\xbd\x21\xa6\x73\xd9\x87\x74\x14\xca\xed\x50\x32\x95\xd2\x63\x78\x5e\x1e\x0a\xde\x15\x13\xa4\x6a\x40\xd3\x11\x88\x4c\x0d\x66\x08\x39\xe9\xc4\x49\x27\xe9\xf6\xe2\xa4\xeb\x99\x5f\x9d\xbe\x02\x00\x00\xff\xff\x3d\x31\x31\xc4\x21\x03\x00\x00")

func etcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdEtcdConf,
		"etc/etcd/etcd.conf",
	)
}

func etcEtcdEtcdConf() (*asset, error) {
	bytes, err := etcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\x81\x45\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func etcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdPeerCrt,
		"etc/etcd/peer.crt",
	)
}

func etcEtcdPeerCrt() (*asset, error) {
	bytes, err := etcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x48\x4d\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func etcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdPeerKey,
		"etc/etcd/peer.key",
	)
}

func etcEtcdPeerKey() (*asset, error) {
	bytes, err := etcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\x81\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func etcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdServerCrt,
		"etc/etcd/server.crt",
	)
}

func etcEtcdServerCrt() (*asset, error) {
	bytes, err := etcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x4e\x2d\x2a\x4b\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func etcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdServerKey,
		"etc/etcd/server.key",
	)
}

func etcEtcdServerKey() (*asset, error) {
	bytes, err := etcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func etcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAdminKubeconfig,
		"etc/origin/master/admin.kubeconfig",
	)
}

func etcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := etcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xa7\x17\xa5\xa6\x27\x96\xe4\x17\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x82\x55\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func etcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAggregatorFrontProxyCrt,
		"etc/origin/master/aggregator-front-proxy.crt",
	)
}

func etcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := etcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x00\xd0\xfb\x9f\x22\x13\x64\x07\xbf\xd0\x8b\x17\xa1\x13\x48\x89\x21\x17\x03\x31\x94\x06\xeb\xee\x7d\x6b\x41\x35\xb9\x9b\x53\xa1\x48\xf3\x1f\x4e\x13\x30\xeb\xe8\xc2\x98\xc9\x5c\xba\x5c\xcd\x69\x62\x62\x36\xe2\xe6\x6a\x87\xe9\xf0\x6a\xfa\x04\x16\x0a\x78\xe1\x74\x93\xc1\xb0\xf7\xef\x0b\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func etcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAggregatorFrontProxyKey,
		"etc/origin/master/aggregator-front-proxy.key",
	)
}

func etcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := etcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaBundleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\xe4\xa8\x97\xee\x60\xe3\x06\x9d\xa0\xd8\x8f\x06\x24\x42\x1a\x0b\x52\xbb\xbb\xaf\x77\x62\x98\xf3\x99\x45\xd7\x1a\x5f\x47\xa5\x39\x6c\x30\x69\x28\x81\x73\x7c\xb4\x5c\xa0\xc0\xb7\x7a\x16\x85\x25\x58\x93\x1d\x0b\x7d\x94\xdc\x44\x0f\x1a\x63\xfa\x03\x00\x00\xff\xff\x01\x5e\x1d\x24\x46\x00\x00\x00")

func etcOriginMasterCaBundleCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaBundleCrt,
		"etc/origin/master/ca-bundle.crt",
	)
}

func etcOriginMasterCaBundleCrt() (*asset, error) {
	bytes, err := etcOriginMasterCaBundleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca-bundle.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaCrt,
		"etc/origin/master/ca.crt",
	)
}

func etcOriginMasterCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4e\xd4\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func etcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaKey,
		"etc/origin/master/ca.key",
	)
}

func etcOriginMasterCaKey() (*asset, error) {
	bytes, err := etcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x3a\x27\x82\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func etcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterFrontProxyCaCrt,
		"etc/origin/master/front-proxy-ca.crt",
	)
}

func etcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x73\xdb\xb8\x11\xff\xae\xbf\x02\xe3\x2f\x69\x3b\x25\x29\xbf\xf2\xe0\x4c\x3f\xa8\xf6\xb9\xa7\x39\xc7\x51\xa5\xa4\xd3\x99\x4e\xa7\x03\x01\x2b\x0a\x11\x08\x30\x78\xe8\xac\x73\xfd\xbf\x77\xf0\x20\x09\xd2\x72\x2e\x93\x26\xed\x39\x1f\x22\x62\x7f\xbb\xd8\x17\x76\x17\xc0\xb4\x66\x5a\x33\x29\xae\xa4\xd8\xb0\xaa\x9c\x20\xd4\x70\x5b\xb1\xe4\x1b\xa1\x3f\x5b\xc6\xe9\x35\x6c\xb0\xe5\x46\x87\x25\x84\x88\x07\x58\x85\x0d\x93\xa2\x5d\x44\x08\x37\xec\x6f\xa0\x9c\xc4\x12\xed\x4f\xbb\x65\x10\xfb\x12\xfd\xe3\x9f\xdd\xf7\x8e\x09\x5a\x0e\x05\x87\x1d\x3b\x84\x02\x2d\xad\x22\xa0\x7b\xd9\x08\x71\x56\x33\xa3\x4b\xf4\xf0\x98\x2c\x2a\xf8\x64\x41\x27\xcb\x5e\xec\xbb\x3d\x28\xc5\x28\x7c\xa5\xc2\x89\x82\x9d\xa4\x44\x43\xd9\x80\xd0\x5b\xb6\x31\x39\x93\xc5\xbc\xc6\x15\x2c\x24\x67\xe4\xf0\x95\xde\xb9\x07\x62\x1d\x72\x69\x79\x6a\x70\x86\x6a\x6c\xc8\xd6\xcb\x9f\x09\x21\x8d\x17\x37\xf0\x48\x86\x76\x70\x28\x11\x73\x10\x9d\x0f\xd4\xa2\x20\x0e\x59\x27\x3a\xe1\x41\x68\x8f\xb9\x85\x12\xbd\x30\xca\xc2\x8b\x84\x22\x70\x0d\x65\xaf\x4e\x46\x41\x30\xa0\x09\x40\x8a\xe5\xb1\xb8\x64\x5d\xb8\x4a\xd4\x48\xaa\x9f\x21\xad\x9d\x3b\xf5\x20\x74\x1f\x81\x98\x12\x39\x3d\x92\x65\xbd\x63\xcd\x3b\xbf\x13\xf7\x7a\xdc\x60\xc6\xad\x82\x11\x2e\x84\x28\x71\x7e\x8c\x0f\xb6\x94\x99\x3e\x7f\x41\xe0\x35\x07\x1a\x99\x71\x55\x29\xa8\xb0\x91\x2a\xc9\x78\x25\xef\x0f\x57\x9c\x81\x30\x73\xb1\x91\xc1\x30\x02\xca\xdc\x30\x0e\x25\xea\x59\xb2\x8d\x92\xc2\x64\x1e\x9f\x13\x65\x3c\x70\x07\x87\xcf\xe2\x76\x70\x98\xe0\x86\xdd\xc2\x1e\xb8\x2e\x27\x99\x0b\xfc\x28\x0f\xb0\x35\xdb\x5e\x9d\x98\xcf\x3f\x02\xa6\xa0\xa2\x32\x5e\xb9\xab\x59\x89\x12\xc9\x19\xc1\x9d\x12\x11\x20\xeb\x5a\x8a\x3b\x5c\xb7\xd1\xc9\x9e\x51\x6a\x12\xb2\xce\x28\x1c\x76\x59\x28\xd8\xb0\xfb\x9e\xeb\xef\xd9\x12\x6a\x69\x20\xfb\xc1\x61\x32\xbf\x5a\x29\x69\x9b\x00\x7f\x8a\xfb\x8b\x23\xfa\x45\xab\x41\xb9\x34\x7a\x0e\xf9\x41\x83\x9a\x10\x29\x8c\x92\x9c\x43\x12\x05\xe0\x40\xfa\xd3\xc2\x25\xd9\xdd\xf9\x6c\xec\x72\x3a\xab\xb1\x36\xa0\xb2\x9e\xd9\xa5\x92\x06\xb5\x67\x04\x56\xee\x3f\x51\x5d\x81\x32\x41\x80\x66\x95\x68\xdd\x97\x46\x33\xe2\xb3\x40\xef\x1c\x98\xc4\x71\x84\x70\xf1\x4b\xb6\x2c\xd1\xc9\x1f\x4e\x26\x44\x2a\x3d\xe3\x5c\xfe\x0c\xf4\x9d\x62\x15\x73\x87\x92\x0a\xdd\x5b\xb3\x66\x82\xce\x28\x55\xa0\x75\x89\xa6\xb9\xff\x57\xbe\x9e\x5e\x9e\x47\xda\x1d\x98\x9f\xa5\xda\x95\xc8\x90\xe6\x62\x02\x86\xd0\x61\x02\x12\x5c\xa2\x60\x6f\xee\x88\x7d\xac\x7b\x4b\x06\x64\xcf\x1c\x21\x9d\x25\x47\x10\xce\x1a\x84\xac\xe2\x3e\x32\x19\xda\x1a\xd3\xe8\xb2\x28\x1e\x1e\x50\xee\x83\x9d\xff\x28\xb5\x71\x01\x44\x8f\x8f\xe5\xd9\xf9\xab\x37\x5e\xb9\x95\x91\x0a\x57\xd0\xdb\xb7\xb3\x6b\x50\x02\x0c\xe8\x48\x0a\x29\x54\x26\x84\x9c\xc9\x63\xc0\x61\x01\x74\xd1\x5d\xb9\xe8\x8e\xc4\xa4\x95\xec\x08\x2c\x15\xe2\x6b\x5f\xaf\xd9\x46\xaa\x1a\x9b\x12\x39\x8b\xc2\x6a\x3e\x0f\xd5\xf1\xc6\x53\xd0\xe3\x63\x60\x49\x8b\x86\x63\x64\xc2\xb8\xd4\xe5\x4b\xa8\x98\x36\xea\xd0\x3a\xa2\x44\x54\x92\x1d\xa8\x4c\x45\x42\x4e\x43\xcb\xca\xf5\x9e\x94\x97\xd3\xe9\x74\x12\x4a\xd1\x5b\xef\xee\x58\x85\x9c\xdd\x1c\xcc\xd3\xa8\x3e\x1f\xc9\xc8\xf2\xf9\x60\x8e\x40\x21\x9e\x8d\x54\xa6\x44\xa7\xd3\xb3\xcb\xe9\xa4\x77\x78\xaa\x8f\xdb\x1d\x37\xcc\x1d\x13\x50\x33\x55\xd9\x1a\x44\xdb\xcc\x09\x97\x96\x66\x24\xe9\xf8\x19\x2a\xc0\x90\x42\xfa\xd4\x2e\x3c\xbd\x51\x72\xcf\x28\xa8\x02\xff\x62\x15\xe4\x0e\x9d\x30\xb7\xd4\xae\xec\x38\x50\x38\x87\x21\x60\xd9\x1a\x93\x1d\x08\xda\x02\x5c\x52\x9d\x0f\x00\x35\x50\x86\x33\x73\x68\xa0\x13\xd2\x34\x9c\x11\xdf\xf3\x8a\xbd\xa0\x79\x92\x5a\x8d\x92\x46\xae\xad\x53\xa1\x3f\x9b\xff\x4b\xb3\x08\xb7\xbe\x18\xb9\x22\xc1\x44\x95\xb9\x60\x66\x1b\x17\xa8\x23\x3b\x85\xd0\x15\x83\x7a\x3d\x64\xdf\xc1\xe1\x0b\xb8\x43\xb0\xc3\xf7\x7c\x51\xa2\xd3\xb3\x57\xbe\xb2\x9c\xfe\x7a\x13\x8b\xd9\x13\x1b\x47\x9a\x60\x4f\x53\x6c\x00\x0a\x7b\x6a\xb2\x05\x6a\xbb\x7a\x1d\xe0\x47\x94\xec\x70\xf9\x47\xed\x67\x8e\x58\x4c\xf5\x9d\xa4\xb0\x90\xca\x2c\xb1\xa8\xdc\xe4\xf1\x22\xa1\xad\xec\x5a\x80\xcb\xdf\x57\x67\xf9\xb9\xaf\x94\xc5\xe9\xcb\x49\x90\x18\x2c\xf2\x11\x85\xfb\x70\x3e\x7f\xea\xd2\xe0\x2a\x76\x3d\x21\x42\xeb\x18\xcd\x7c\x98\x10\x68\x1c\xd9\x80\x30\xef\x0f\x0d\xe8\xf2\x4b\x72\xea\x8f\x29\x26\x9a\x81\xd0\xda\x2a\x6d\x4a\x74\x31\x9d\x4e\xe2\x80\xd7\x4a\xfd\x22\xa1\x9e\xe9\x53\xa3\x4b\x74\xe6\x25\x3c\x35\xc6\xfd\x8a\x67\x35\xb8\xa7\x2b\x81\xb7\x52\x36\xee\xf8\xfc\x1f\xcc\x7d\xf9\x5f\x9b\x7b\xee\x25\x3c\xb1\x25\xb5\x76\xdc\xe1\xbd\xc0\x70\x6e\x63\x16\x2c\xec\x9a\x33\xf2\x61\x79\xeb\xcb\x7a\xa3\x98\x30\xe8\xa4\x6d\x5d\x27\xbe\xce\x1b\xcc\x04\xa8\x55\x48\xa9\x7c\xa1\x64\x03\xca\x30\xd0\x79\xe0\xed\xba\xda\xbf\xd1\x27\x2b\x8d\xeb\x6e\x13\x11\x7a\x70\x5f\x20\xe3\xa9\x8c\xbd\x39\x76\x48\xc2\xa8\x72\xb5\x35\x3f\x3d\x7b\x1d\x72\xf3\xc2\x5b\xb7\x95\xda\x84\xcc\xbd\x05\x51\x99\x6d\x89\xde\x24\x71\x9d\x2f\xa2\x94\xab\xf9\xf5\x32\x4a\x8a\x63\x40\xe1\x1c\x12\xf7\x5e\xf8\xcb\x56\x18\x74\x14\xd0\x2d\x36\x45\xef\x0d\xb9\xd7\x59\xc4\x35\xbe\x57\xf5\x67\x26\x11\x3e\x3e\x37\x72\x38\x4d\x62\xad\xc1\x7c\x43\xff\x9d\x14\x44\x0a\x2d\x39\x14\x27\xa9\x2f\xdd\x7c\x88\x85\x49\xaf\x8d\x35\x98\xad\xa4\x25\xc2\xd6\xb8\x16\xce\x28\x08\xc3\xcc\x61\x11\x6b\x6a\x74\x0a\x97\x15\x13\xc9\x64\x5f\xe3\xa6\x61\xa2\x7a\x1b\x99\x09\xc7\xac\x9e\xf4\x77\x93\x87\x07\xf4\x3b\x26\x28\xdc\x7f\x5e\xe9\x99\x35\xdb\x85\x92\xae\xa4\xe6\xf3\xf1\xc6\x68\xfa\xfb\xfc\x6e\x94\x0b\x6e\x87\x61\xb5\x7f\xe6\xb6\xe6\x15\x4a\x2e\x3f\x50\x63\xc6\xd3\x2b\x9b\x5f\xe8\xbe\x19\x4d\x69\xda\xae\x27\x83\xbb\x56\x42\x73\xdf\xdd\x67\xa3\x60\x03\x4a\x01\xfd\x10\xc7\xe9\x14\x69\x05\xfb\x64\xe1\x5f\x09\x43\xa8\xd5\xf3\xeb\x6f\xe7\x9f\xf6\x23\x8f\x2d\xe5\x7a\xec\xac\x76\xd3\x15\x10\x05\xe6\x3b\x6c\x1c\x04\x3f\xdd\x36\xcc\x5a\xef\x1a\x10\xf3\xeb\xb1\x84\x08\x69\xc7\xdb\x18\x46\x6b\xb6\x52\xb1\x5f\xe0\x58\xf2\xfb\xf4\xcb\x6b\x46\x94\xd4\x72\x63\xa4\xe0\x4c\xb8\x31\xa0\x2e\x4e\xbe\xb1\x3d\xef\x41\x60\xef\xc8\x93\xc2\x1f\xd1\xb3\xa2\x53\xec\xe4\xa9\x95\x08\x19\xb9\x03\xf1\x5b\x53\xd9\x2b\x35\x52\x37\x36\xea\x59\x32\xda\x7e\xcf\xaa\xdd\x4a\xff\x3a\xb9\x37\x7f\xbd\xbe\x1b\x4a\xd3\x30\x7a\x00\xeb\x96\xde\xe2\xfb\x59\x05\x2b\xd7\x8a\xa8\xeb\x64\x6d\x33\x8c\xe4\x50\xb5\xb5\x16\xe9\x62\xc8\x5a\xfd\xfc\x80\x14\x60\x99\x0e\xb8\xfc\x80\x6b\x57\x2c\xbc\x5f\x53\x15\x5c\x33\xd7\xfa\xbd\x5b\x1e\xa9\xf1\xfa\x65\x3b\x83\x74\xf9\x73\x0c\x76\x39\x9d\x4e\x1a\x25\x3f\x02\x49\x8a\x72\xbc\xb8\xb8\x61\x6c\xe5\xef\xdb\x52\x95\x48\x48\x0a\x99\x92\x1c\xf2\xc1\xdd\xad\x20\xb2\x6e\xac\x81\x3f\xc5\xd2\xac\x81\x58\xc5\xcc\xc1\x5d\x7b\x09\x76\x9c\xa1\x5e\x13\xdd\xad\xc4\xe1\x4e\x4f\xcb\xe2\xac\x25\xde\xe2\x35\x70\xbd\x00\xb5\x08\xca\x94\xe8\x32\xbc\x13\x30\x3a\xe6\x3b\x9d\xb6\x7f\xd9\xe9\x9b\xf6\xaf\xf0\xab\x13\x25\xad\x71\xf7\xfb\xce\x14\x6d\xd7\x54\xd6\x98\x89\x2f\x2e\x3d\x4b\x69\x8d\x57\xc3\x65\x7e\x48\x74\x9f\x64\xab\x56\x52\x9a\x17\xb1\xcf\xce\x08\x91\x36\x6d\x6b\x35\x16\xb8\x02\xda\xbd\xb1\x64\xad\x4f\xfd\x6f\xff\xc0\xe5\xcb\x90\x5b\x6f\xb8\x3c\xf8\x8f\xf4\x84\x64\x6b\x2b\x28\x87\x78\x50\x1a\xc5\xf6\xd8\xc0\x4f\xa3\xb7\x07\x1c\xb6\x75\xf3\x94\xa7\xb7\xd7\x3c\xaf\x6f\x04\xc7\xed\x9f\x70\x78\x8c\x67\xd0\xe1\x4d\xa4\xbd\x0e\x1c\x7d\x92\xb8\xb8\x38\xfe\x22\x71\xe4\xee\xa0\xfd\xdd\xb1\xbd\xbc\x76\x2f\x52\xdd\xa1\x1f\x5f\x23\x22\xbe\xbd\xb4\xdc\x2f\xe3\x3b\xed\x5c\xdc\x70\x56\x6d\x4d\xc8\xd1\xee\xbd\xeb\x3d\xab\x41\x5a\x33\x3e\x6e\xee\xf8\xd3\x2b\x17\xc2\x8d\x9b\x39\xe3\xb0\x9b\x25\xea\x1d\x39\x65\x9e\xa9\x1d\x54\xfa\x37\x9e\x4e\xc3\x5f\x65\x09\x4a\xc7\x2e\xdd\xf5\x92\xac\x7d\x54\xf8\x8a\xb2\xb5\x97\xdc\xd6\xc9\x33\x05\x3d\x08\x5c\x33\xe2\x6b\xad\xab\x08\x4c\x54\x3f\x0c\x5e\x2a\xff\x13\x00\x00\xff\xff\xee\xba\x28\x8e\x9b\x17\x00\x00")

func etcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterConfigYaml,
		"etc/origin/master/master-config.yaml",
	)
}

func etcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := etcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func etcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdCaCrt,
		"etc/origin/master/master.etcd-ca.crt",
	)
}

func etcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\x80\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func etcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdClientCrt,
		"etc/origin/master/master.etcd-client.crt",
	)
}

func etcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x71\xce\xc9\x4c\xcd\x2b\xd1\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func etcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdClientKey,
		"etc/origin/master/master.etcd-client.key",
	)
}

func etcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\x80\x15\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func etcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterKubeletClientCrt,
		"etc/origin/master/master.kubelet-client.crt",
	)
}

func etcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x21\x10\x06\xe0\xf7\x4e\x31\x27\x98\x3b\x94\x8f\x12\x04\x9d\xc0\xe2\x57\x06\xc4\x60\xe6\x6f\x41\x5c\xef\xbe\xdf\x5a\xf2\x72\x3b\x0a\x91\x31\xef\xf1\x98\x44\x88\xa6\xdf\xa8\xd6\x34\xc1\x69\xd5\xbe\x85\x08\x7d\x96\x20\x3c\xff\x3f\xe8\x60\xea\x86\x41\xcd\x98\x72\xca\x9b\x6e\xa3\xc9\xde\xb7\x2b\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func etcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterKubeletClientKey,
		"etc/origin/master/master.kubelet-client.key",
	)
}

func etcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\x80\xa5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func etcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterProxyClientCrt,
		"etc/origin/master/master.proxy-client.crt",
	)
}

func etcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x03\x21\x0c\x06\xe0\xf7\x4e\x91\x09\xb2\x43\xeb\xa3\x14\x84\x4e\x20\xe5\x57\x02\x87\x42\x12\x8e\x0b\x9e\xbb\xdf\xb7\x16\x15\x95\xb3\x3a\x32\xe2\x6d\x9f\x70\x18\x71\x9a\xa3\x49\xe7\x04\x75\x69\xf2\xaf\x0e\xe3\x6f\x35\x87\x16\x9d\x57\xa4\x43\x30\x9c\x33\x82\x6e\xfa\xb9\xca\xe8\xb4\xf7\xeb\x09\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func etcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterProxyClientKey,
		"etc/origin/master/master.proxy-client.key",
	)
}

func etcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\x81\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func etcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterServerCrt,
		"etc/origin/master/master.server.crt",
	)
}

func etcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x06\xe0\xfb\x9b\x22\x13\x64\x87\x57\x8f\x52\x28\x38\x81\x94\x5f\xc9\xc5\x42\x12\x84\x60\xdd\xbd\xdf\x5a\x74\xa9\xcc\xea\xc8\x88\xbf\x1d\xe1\x30\xe2\xf4\x8c\x26\x9d\x13\xd4\xa5\xc9\x5d\x1d\xc6\x67\x35\x87\x16\xe8\x84\x72\x46\xd0\x4b\xc5\x55\x46\xa7\xbd\x7f\x5f\x00\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func etcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterServerKey,
		"etc/origin/master/master.server.key",
	)
}

func etcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\xce\x48\xcc\xcc\x73\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x49\x64\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x38\xe7\xe7\x15\xe7\xe7\xa4\x82\x65\x8b\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xfc\x0f\x86\x36\x4c\x00\x00\x00")

func etcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterNamedConsoleCrt,
		"etc/origin/master/named/console.crt",
	)
}

func etcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := etcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc4\x20\x0c\x06\xe0\xf7\x9b\x22\x13\x64\x87\x3b\x1f\x7d\xb8\x82\x13\x48\xf9\xb5\x81\x12\x8b\x09\x05\xb1\xee\xde\x6f\x4e\xda\xba\xdc\xd9\x11\x31\xbe\xf6\x1b\x0e\x23\x0e\x4d\x8b\x54\x0e\xe8\x2e\x45\xf6\xec\x30\xfe\x5f\xd0\x74\x48\xf1\xd0\xd4\xda\x09\x8e\x18\xf4\x50\xf2\x2e\x5a\x69\xad\xcf\x1b\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func etcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterNamedConsoleKey,
		"etc/origin/master/named/console.key",
	)
}

func etcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := etcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func etcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterOpenshiftMasterKubeconfig,
		"etc/origin/master/openshift-master.kubeconfig",
	)
}

func etcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := etcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\x1a\x31\x10\x85\xef\xf9\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\xb2\x20\xca\xa1\x55\x0e\xae\xfd\x80\x11\xc6\x43\xc7\x5e\x5a\x12\xe5\xbf\x57\x66\xc9\x16\xaa\x36\xec\x86\x9c\xd6\x3b\x9e\x6f\x76\x3c\x7e\x6f\x9f\x2f\x94\x52\x4a\xdb\x35\x3d\x40\x12\x71\xd4\x7d\xa5\x37\x57\xfa\xb2\x8e\x2f\x29\xfa\x12\x31\x1c\xc8\x6d\x5f\xa3\x6b\x81\x27\x67\x33\x92\xee\xab\x6f\xbb\x98\x52\xcf\xfb\xa7\x52\x3a\xda\x15\x0a\x35\xe6\x07\x0e\xd5\x0a\x5f\x39\x62\xc4\x71\x16\xc8\x65\xbd\x4f\x7b\xb9\xfc\x3f\x77\x67\x7f\xdd\x0c\xa7\x35\x3b\xe2\x2a\xb6\x85\x6e\x47\x37\xe6\xba\x3b\x36\x78\xaa\x04\xd7\x94\x96\x9d\xd1\xec\x16\x9f\x63\x86\x18\xf6\x83\xd9\x8c\x22\xe5\x6d\x1b\x70\xcc\xe5\x6b\x5d\x26\x72\x8b\x08\xb1\xc1\xfc\x19\x7c\x0b\xc8\xb0\xbf\xe7\x00\x29\xf9\x63\xf6\xb8\xb7\x14\x73\x2b\x72\xb4\x80\x5b\x16\xe4\x0e\x2b\x96\xad\x11\xa4\x54\x09\x3a\xa1\xe5\x88\x9d\xc1\xfa\x06\x86\x14\x3d\xc5\xf9\x5b\x94\x95\x79\xb5\x42\xcc\xba\x7f\x10\x55\x4a\x27\xc8\x86\x1c\x9a\xdb\x38\xde\x56\x4a\x07\xfb\x1d\xe1\x50\xb7\xcd\x8e\x60\x5e\xf4\x7f\x14\x7e\x3c\x78\x7b\x69\xd6\x4d\x43\x07\xed\x4f\x8e\xe8\x3a\xf7\xb1\xf1\x0b\xb1\x50\xa6\x53\x7e\x99\x22\xc0\x65\x96\xe9\x5a\x60\xbd\xa9\xa9\x57\xd7\xed\x32\x7f\x82\xe6\x8b\x72\xe8\xab\x16\x13\xfd\x5b\x9a\x67\x17\xfc\x02\x9b\xf2\x04\x3f\x2a\xa4\x8c\xf3\xfb\x1b\xda\x60\xa3\x83\x9f\x20\x71\x25\x0e\x83\x10\xd8\xd9\x5c\xc6\xf8\xde\x92\x45\x78\x46\x30\x83\x0c\x36\x4c\xde\xb0\x4f\x6f\xb7\xd9\xeb\xf5\x7a\x2d\xeb\x7e\xd8\x18\x77\x3e\xdc\x3b\x93\x38\xbe\xbb\xde\x29\x0f\xc4\x4c\x27\x7c\x50\xba\x79\xe2\x08\xdd\x5a\xe6\xe5\x57\xfe\xcf\x46\x3f\x1d\x2b\xff\xa2\xac\x7e\x07\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func etcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterSchedulerJson,
		"etc/origin/master/scheduler.json",
	)
}

func etcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := etcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func etcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceSignerCrt,
		"etc/origin/master/service-signer.crt",
	)
}

func etcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := etcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x03\x21\x0c\x05\xd0\x7d\x4f\x91\x13\xe4\x0e\xad\xcb\xd9\x14\x3c\x81\x0c\xdf\xf0\x37\x29\xc4\x20\x88\xf5\xee\xf3\xf6\x96\x6f\x70\xb6\xc4\x85\xf5\x1e\x9f\x95\x18\xa2\xe5\xe7\x9d\xa6\x05\x91\xec\xbc\x5b\x62\x68\x45\x4c\xde\xa8\x34\xa7\x5b\x69\x7a\x61\xc9\x5f\x6a\x06\xdd\xe4\x9c\xd7\x13\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func etcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceSignerKey,
		"etc/origin/master/service-signer.key",
	)
}

func etcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func etcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceaccountsPrivateKey,
		"etc/origin/master/serviceaccounts.private.key",
	)
}

func etcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\xd4\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func etcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceaccountsPublicKey,
		"etc/origin/master/serviceaccounts.public.key",
	)
}

func etcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\xa5\x25\x19\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x0a\x35\x0a\x85\xa5\xf9\x25\xa9\x0a\xb5\xb5\x5c\x0a\x0a\xa9\x79\xc9\x45\x95\x05\xf8\x0d\x71\xcd\x4b\xc6\x63\x06\x20\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func etcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterSessionSecretsYaml,
		"etc/origin/master/session-secrets.yaml",
	)
}

func etcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := etcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeCaCrt,
		"etc/origin/node/ca.crt",
	)
}

func etcOriginNodeCaCrt() (*asset, error) {
	bytes, err := etcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeClientCaCrt,
		"etc/origin/node/client-ca.crt",
	)
}

func etcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := etcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xdd\x6e\x1b\x37\x13\xbd\xdf\xa7\x20\x72\x9d\xfd\x91\x63\xe3\xfb\x40\x20\x17\xae\xdd\xb4\x46\x0b\xd7\x95\xdc\xde\x53\xe4\x48\x62\xcd\xe5\xd0\xc3\xe1\xd6\x72\x9a\x77\x2f\x66\x77\x6d\x49\x69\x5c\xf4\x4a\xe2\x9e\x33\x3f\x3c\xc3\x39\x26\xf9\xdf\x81\xb2\xc7\xa8\xd5\xb0\xa8\x4c\xe1\xdd\x15\xc6\x8d\xdf\xea\x4a\x29\x39\x41\x64\x6f\x0d\x7b\x8c\x57\xc6\xee\x60\xe5\x9f\x41\xab\x45\xd7\x75\xdf\xc6\xef\xef\x7f\xd6\xea\xa2\x9f\x41\x24\xff\xfc\x2f\xb1\xa7\xf0\x4b\xa8\x8b\xf9\x3b\x1f\xdd\xa5\x73\x04\x39\x6b\xb5\x38\xfb\x5f\xd3\x35\x5d\xb3\xd0\x17\x1f\x04\xbc\xc6\xde\xf8\xa8\x95\x0d\x25\x33\x50\x13\xd0\x9a\x20\xc0\xcd\x9d\x56\xdd\x48\xed\xe4\xb8\x04\x5b\x28\xfb\x01\x96\x90\x31\x0c\x72\x2d\xad\x5a\x60\xdb\x22\xf9\xad\x8f\x6d\x44\x07\x2d\x8d\x60\x63\x31\x6e\x2a\x87\xf6\x01\xe8\x70\xff\xe9\xbc\xda\xf9\x7e\x89\xc8\xd7\x9e\xc0\x32\xd2\x5e\xab\x76\x30\xd4\x06\xbf\x6e\x27\x46\xde\xf9\xfe\x84\xbe\x92\x7f\x3c\xf3\xa8\xc4\x23\x5e\x93\xd1\x3e\x54\x4a\xc1\x13\xd8\x1f\x4d\x74\x01\xe8\xd6\xf4\xa0\x55\x34\xec\x07\xa8\x20\x9a\x75\x80\xdf\xa2\x77\xc1\xc7\xad\x56\x4c\x05\x2a\xdf\x9b\x2d\x1c\xfa\xda\x20\xf5\x86\xb5\xfa\xfc\x59\x35\xd3\xd7\xe6\x46\x18\xb9\xf9\x34\x22\xea\x2f\xf5\x58\x90\x41\x7d\xf9\x52\x29\x15\x0c\x43\x66\xad\x36\x26\x64\xa8\x7c\x62\x29\x90\x57\xfb\x68\xef\x80\x3c\x3a\xad\x3e\x74\xb9\x7a\xf0\xd1\x69\x75\x8b\x6e\xae\x53\x3d\x94\x35\x04\xe0\x4b\xda\x96\x1e\x22\x67\x29\xbc\x46\xe4\xcc\x64\x52\x2d\xa8\x7d\x6d\xa8\xfe\xa7\xae\xaf\xd4\xe6\x40\xad\x94\xb2\x40\x5c\x3b\x4f\x6f\x44\x09\xec\x37\xf2\xa0\x20\x0b\x3b\x60\x71\xf5\x5b\x75\x46\x34\x11\x0e\xde\x01\xb5\xe6\xb9\x10\x4c\x73\x7c\x09\x7c\xc1\xa6\xd0\x91\x20\xca\x8f\x0a\x4b\x56\x26\x0c\x01\xa8\x36\xcc\xc6\xee\x6a\x07\xf2\x33\x91\xdf\x89\xee\xef\x44\x6b\x30\x5c\x08\xea\xad\xb4\x34\x61\x4b\x64\xc3\xf0\xd3\xa4\xcf\x55\xf0\x10\xf9\xea\xd0\xf7\x47\x89\x7c\x7f\xc2\x59\x01\x0d\x40\x5f\x73\x2a\xa5\xe4\xce\x75\x30\x6b\x08\x73\xea\xf1\x03\x61\x80\x51\x35\x8a\xc0\x90\x1b\x8f\xad\x4c\xfa\xfb\x27\x26\xd3\x2c\x31\xc8\x5c\x5f\x32\xd4\x0a\x13\xc4\xbc\xf3\x1b\xae\x7d\xdc\x90\xf9\x68\x92\xcf\x63\xbd\x4a\xa9\x84\xae\xee\x4d\xf4\x1b\xc8\x5c\x27\xc3\xbb\x37\x64\x4f\xe8\x44\x6e\x1a\x9b\xae\x8f\x87\xf0\x95\x1a\x54\x22\xfb\x1e\x6a\x82\xc7\x22\x39\xe5\x80\x85\x27\xd6\xa2\x93\x2d\xc8\xfb\xcc\xd0\xd7\x04\x63\x17\x6e\x82\xa4\xff\x6b\x20\x3f\x80\x6b\x56\x23\x61\x39\xe3\xe3\x0b\x66\xe3\x23\x90\xc8\xe4\x2d\x9c\xdc\xf4\xe8\x25\xf7\x46\xd6\x7d\xd6\x1b\x63\x04\x2b\xd6\xf1\xcb\x00\x44\xde\x4d\x9d\x1a\x6b\x21\x09\xc8\x10\xf9\x7e\x9f\x20\x6b\x65\x52\x0a\xb3\x43\xb5\x43\x74\xc7\xc2\x26\x42\xc6\x75\xd9\xbc\x3f\xe6\xfc\x91\x31\xca\x53\x2f\x24\x4b\x73\x2e\x5e\x65\x0f\x09\xff\x53\xbe\x4a\xa9\xc7\x94\xb5\x3a\xeb\xe6\xa6\xe5\x1d\xcc\xeb\x3b\x8e\xf8\x78\x27\x22\xf0\x9f\x48\x0f\x87\xed\xee\xb9\x68\xb5\x38\xbf\x90\xca\x33\x78\x17\xca\xd6\xc7\xc9\x27\x08\xdc\xce\x70\x7b\x18\x3b\x0e\xb9\x9e\x79\x09\x83\xb7\xfb\x2a\x11\x3e\xed\x4f\x16\x77\xf6\xca\xda\x7a\x47\x2f\xc3\x6a\x16\x67\xff\x17\xaf\x6c\x17\xe7\x95\xcc\xc2\xc7\xed\x4d\xdc\xe0\xb8\xe7\xc7\xfe\x3b\x5b\xaa\x5e\x74\x67\x63\x4f\x02\xde\x4e\xf5\xb4\x62\x9b\xce\xc7\xfc\xe3\x54\x2e\xb5\xb2\xa6\xb1\xc4\xd5\x80\xa1\xf4\x47\x96\x35\x9a\xf4\xaf\x05\xd9\xc8\x49\xa9\x04\xf4\x69\xf5\x03\x61\x49\x5a\xc5\x12\xc2\x1c\xf0\x2d\x8f\x9d\x1f\xea\xeb\x85\x27\xc3\x6f\xa6\x80\x5c\xfd\x1d\x00\x00\xff\xff\x45\x94\x88\xbf\xc2\x06\x00\x00")

func etcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeNodeConfigYaml,
		"etc/origin/node/node-config.yaml",
	)
}

func etcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := etcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func etcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeNodeKubeconfig,
		"etc/origin/node/node.kubeconfig",
	)
}

func etcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := etcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x0c\x72\xc9\x49\xf6\x06\x9b\xbd\x10\xc8\x21\xc8\x02\xbb\x01\xd2\x54\x40\x82\xde\xc7\xd2\xc4\x1a\x98\xe2\xb0\xe4\x48\xa9\x9a\xe6\xbf\x17\x94\x28\x37\x89\xed\xb4\x05\x7a\xb2\xe7\xeb\xbd\xc7\xc7\x11\xd1\xf3\x27\x0a\x91\xc5\x19\xe8\xcf\x16\x5b\x76\xb5\x81\x52\xea\x45\x4b\x8a\x35\x2a\x9a\x05\x00\x3a\x27\x8a\xca\xe2\x62\x0a\x01\x62\xd5\x50\xdd\x59\x0a\x4b\xb4\xbe\xc1\xe5\xb6\x5b\x53\x70\xa4\x14\x97\x2c\xab\x2a\xb0\x72\x85\xb6\xf0\x52\x1b\x38\x3d\x5d\x00\x58\x5c\x93\xcd\xc3\xe2\xc9\xc5\x86\x1f\x74\xec\x95\xd6\x8b\x23\xa7\x06\xd0\xf3\xa1\xba\xd3\x20\xb6\xf0\x16\x1d\x19\x38\xd5\xd0\x51\x02\x74\xd8\x92\x81\x16\xa3\x52\x28\xa6\xc9\x94\x8a\x1e\x2b\x32\x90\xf4\x14\x71\x88\x4a\xed\x22\x7a\xaa\x12\x71\x42\x42\x76\x14\x46\x19\x05\x60\xd8\x64\x41\x05\x44\xc5\xa0\xf9\xff\x84\x99\x83\x59\x53\x01\x45\x51\x89\x7b\xe0\xcd\xc5\x8a\xb4\x5a\x49\xe0\x0d\xbb\xd5\xd4\x9b\x7f\x72\xc3\x72\xc0\xd6\xe6\xa1\xa7\x27\xf0\x81\x9d\xc2\x49\x51\x58\xd9\x58\xea\xc9\x5e\x9c\xc0\xf2\x6a\xea\xbc\x9a\x0f\x7f\x23\x9b\x9b\x54\x5b\x5e\x96\xd7\x77\x14\x7a\x0a\xf0\x0d\x3e\x77\xa2\x04\xcf\xcf\x23\x56\x25\x6d\x8b\xae\x9e\x05\xef\x3c\x1a\x63\x6e\x71\x43\x26\xb1\xcd\xc8\xd7\x29\x13\x53\x94\xdc\x2b\x93\x79\x6f\x11\xc7\xa1\xb2\xb3\xb6\x14\xcb\xd5\x60\xe0\xd2\x3e\xe2\x10\xc7\x9a\xe5\x9e\x1c\xc5\x58\x06\x59\xd3\xc4\x09\xd0\xa8\xfa\xff\x48\xe7\x10\xc0\xa3\x36\x06\x1a\x42\xab\xcd\xd7\x1f\x59\x09\x6a\xe0\xfc\xfc\xef\x5d\x26\x6d\x4b\xba\xad\xff\xef\xef\xcb\xbb\x9c\x65\xc7\xca\x68\xff\x25\x8b\xc3\x1d\x55\xe2\xea\x68\xe0\xfc\x9f\x5c\x55\x6e\x49\x3a\xdd\x15\xce\xfe\x1a\x0b\xd3\xa5\xcf\x77\x12\x08\x6b\xfe\x4d\x95\xab\x34\x34\xfc\x09\xad\x59\xd2\x51\xad\x91\xaa\x2e\xb0\x0e\xe9\x0a\xe8\xcb\x4e\x8f\x0f\xdc\xb3\xa5\x0d\xd5\x06\xd2\x2e\x8f\xe9\x5e\x6c\xd7\xd2\x07\xe9\x9c\xee\x56\xb2\x4d\x51\x39\x6a\xdf\xdf\xb8\x0c\xf6\xea\x23\x98\xb6\x2f\x57\xd2\x31\x3f\x3a\x3b\xbc\x20\x39\x0a\x59\x59\xe9\x6a\x1f\xa4\xe7\xfa\x08\x72\x6a\x28\xde\x74\xfc\x94\xa1\xc7\xb0\xb2\xbc\x9e\x59\x0e\x01\xa7\xf7\xe5\x88\x36\xbf\xe5\x43\x13\x53\xba\x91\xa8\xb7\xa4\x8f\x12\xb6\x3b\x7a\x1f\x58\x46\xbf\x2d\xc6\x78\x3b\xce\x4c\x0f\x40\xe1\xa4\xa6\x62\x7e\x93\x16\xb3\xdb\xf9\x15\x48\x50\x23\xed\xe2\xe5\xb6\x1c\x71\xfc\xb0\xdf\xbf\x02\xb2\xef\xf1\xfb\x0e\x1f\xc5\x7c\xed\xea\x3e\x52\xb6\xf4\x5d\x4d\xb3\xb7\x7b\xce\x7e\x0f\x00\x00\xff\xff\xd2\xc0\xee\x81\x0d\x06\x00\x00")

func etcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsApiserverYaml,
		"etc/origin/node/pods/apiserver.yaml",
	)
}

func etcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x88\xdc\x1d\x6f\x40\x0f\x83\x81\x1e\xba\x66\x58\x87\x35\x9d\x81\x76\xc5\x6e\x05\x23\xb3\x0e\x11\x59\xf2\x44\xda\x6d\xd6\xf5\xdf\x07\xd9\x4e\xba\xa4\x4e\xb1\x25\x07\x4b\x22\xf9\x48\xbe\x47\x09\x6b\xbe\xa5\x20\xec\x5d\x06\xed\xfb\xc9\x9a\x5d\x91\x41\xee\x8b\x49\x45\x8a\x05\x2a\x66\x13\x00\x87\x15\x65\x60\xbc\xd3\xe0\xad\xa5\x20\xc3\x99\xd4\x68\x28\x83\x75\xb3\xa4\x44\x36\xa2\x54\x4d\x00\x2c\x2e\xc9\x4a\x0c\x03\xf0\x35\x39\x59\xf1\xbd\xce\xd8\xa7\xc6\x57\xb5\x77\xe4\xf4\x10\xea\x95\x5f\x67\x4c\x6a\x8b\x8e\x32\x98\x6a\x68\x68\x3a\x91\x9a\x4c\x04\x8d\x56\x64\x47\xa1\x4b\x91\x00\x86\x72\x48\x96\x80\x28\x06\x1d\xd6\x15\x8a\x52\x18\x36\x87\xf9\x12\x48\x12\xe3\xdd\x3d\x97\xa7\x29\xa9\x49\x7d\xe0\x92\x5d\xda\xc7\x0c\x9f\xc1\x61\xb6\xc1\xca\xee\x82\x2c\x8b\x92\x3b\x5d\xa9\xd6\x92\xa5\xe9\xbb\x59\xf7\xcf\x3e\x9c\x9c\x9c\x0c\x3e\x4f\x4f\x50\x07\x76\x0a\xd3\x24\xb1\xbe\xb4\xd4\x92\x3d\x9d\xc2\xec\xbc\x47\x3b\xdf\x92\x70\xe9\xcb\xcb\x68\x8b\x86\xa1\xb6\x05\x3a\x2c\x29\xc0\x6f\xf8\xd9\x78\x25\x78\x7e\xee\x30\x8d\xaf\x2a\x74\xc5\xb6\xc9\x1d\x57\xdd\x9e\x5c\xbb\x35\xf4\x2a\x7d\xfd\xfe\xf1\xd3\xdd\xe2\xec\xc7\x5d\x3e\xbf\xbb\xfd\x76\x79\xdd\x19\x01\x5a\xb4\x0d\x65\xb1\xba\xd9\x9c\x02\xb7\x54\xcc\x16\xf8\x38\x47\xc5\x39\xcb\x5a\x72\x0a\xb7\x8b\xae\xc8\x9e\xdc\x6b\x0a\x2d\x1b\x3a\x2c\x85\x2b\x2c\x07\x94\xa1\x9f\x2f\xf1\x44\xb6\x4d\xe4\x51\xb2\xd1\xa0\xbc\xb1\x36\xf7\x96\xcd\x26\x83\x33\xfb\x80\x9b\x5e\x08\xcb\x2d\x39\x12\xc9\x83\x5f\x52\x36\xd4\x1a\xd9\xfd\x4c\xba\xdd\x02\xd4\xa8\xab\x0c\x56\x84\x56\x57\xbf\x5e\x4e\x7d\xd0\x0c\x76\xd4\xc7\x9f\x98\x15\x45\x12\x2e\x6e\x6e\xf2\xbe\xf3\xb1\xd1\x05\x10\x32\x4d\x60\xdd\xc4\xb2\xe9\x71\x97\xa9\x0e\xdc\xb2\xa5\x92\x8a\x0c\xe2\xd4\x75\xc7\xad\xb7\x4d\x45\x0b\xdf\x38\xdd\x0d\x5a\x15\x77\x79\x57\xd5\xc8\xfc\x0c\x68\x7d\xea\xbd\x61\x7a\x3b\xdc\x58\xdf\x14\x75\xf0\x2d\x17\xc7\x50\xa2\x47\xb2\x75\x39\x82\xf6\x72\x43\xd2\x40\x25\x8b\x06\x26\x99\x15\xfb\x80\xc2\xa5\x43\x6d\x02\x25\x5c\x45\x22\x47\xb0\x1a\x09\xa9\xe5\x25\x3d\x92\x49\xe3\x15\x0f\x8e\x94\xa4\x5b\x5a\xd2\xa4\xb6\x4d\xc9\x4e\x06\xd4\x3e\x30\xf8\x1a\x4b\xd4\xee\x35\xb9\xf0\xa2\x37\x7e\x37\x51\x7b\xd9\x5f\x63\xac\xbc\xe8\x15\xe9\x83\x0f\xeb\x1d\xf7\x75\x60\xdf\xa9\x64\x51\xe4\xaa\x2f\xbb\x7b\x65\x12\xe7\x0b\x4a\x4c\x60\x65\x83\xf1\x72\xf6\x1a\x0d\x2f\x42\x84\xea\x5a\x98\xfc\x3d\x3d\xc7\x74\x1a\x57\xe9\x5f\x50\xf6\xe4\x1a\xc1\x3a\xd4\xea\x4d\xcc\x23\xa2\x4d\xde\x54\xec\x28\xe2\x7f\x48\x37\x2e\xc8\x9f\x00\x00\x00\xff\xff\xf2\x0e\x80\xb7\x17\x06\x00\x00")

func etcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsControllersYaml,
		"etc/origin/node/pods/controllers.yaml",
	)
}

func etcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x6f\xe2\x3a\x10\x7d\xe7\x57\x58\xbc\xf4\xc9\x41\xb4\xf7\xf6\xde\xfa\xad\x82\x4a\x5b\x69\xcb\x22\x6d\xb5\xaf\xab\xc1\x9e\x12\x0b\x67\x9c\xb5\x27\x69\x51\xcb\x7f\x5f\xd9\x49\x20\xfd\xe0\x01\xb0\xcf\xcc\x1c\xcf\x39\x1e\x03\xb5\xfd\x85\x21\x5a\x4f\x4a\xb4\xf3\xc9\xce\x92\x51\x62\xed\xcd\xa4\x42\x06\x03\x0c\x6a\x22\x04\x10\x79\x06\xb6\x9e\x62\xda\x0a\x11\x75\x89\xa6\x71\x18\x0a\x70\x75\x09\xc5\xae\xd9\x60\x20\x64\x8c\x85\xf5\x33\x1d\x2c\x5b\x0d\x4e\xd6\xde\x28\x71\x71\x31\x11\xc2\xc1\x06\x5d\x5f\xec\x6b\xa4\x58\xda\x27\xce\xb9\xbe\xaa\x3d\x21\xb1\x12\xc8\xda\x7c\x95\x40\x1c\xbc\x93\xb5\x03\x42\x25\x2e\x38\x34\x98\x18\x09\x2a\x54\xa2\x82\xc8\x18\x64\x5f\x9a\xb0\x58\x83\x46\x25\x52\x47\x32\xee\x23\x63\x35\x89\x35\xea\x74\x74\xa2\x02\x4b\x18\x72\x23\x52\x40\xd8\xf6\x2d\x49\xf1\x96\x7f\x85\x88\xc8\x42\x42\xbf\x29\xc4\x0c\x59\xa7\x8f\xc9\x5f\x85\xf6\xf4\xd4\xc7\xf0\x05\xf5\xa9\x65\xed\xab\x0a\xc8\x0c\x6c\xb3\x8d\xa5\x59\x2c\xfb\x9d\xd4\x79\x81\xd4\x0e\xf1\xae\xf9\xbb\xc7\xc5\x72\xf1\xf8\xfd\xf7\xed\xfa\xbe\x27\x6d\xc1\x35\xa8\xc4\xf4\x6a\x9a\x01\x5b\xc1\x16\x95\x78\x7d\x15\xc5\xc2\xd3\x93\xdd\x16\xf7\x09\x89\xc5\x43\x96\x7d\xc7\xda\x88\x37\xf1\xa7\xf1\x8c\xe2\x70\x38\x95\xac\x1b\xe7\xd6\xde\x59\xbd\x57\xe2\xd6\x3d\xc3\x3e\xe6\x98\xb3\x2d\x12\xc6\xb8\x0e\x7e\x83\x6a\xa4\x63\x58\x7f\xd0\xd1\xf5\x9a\x34\x6a\x76\x23\x44\x4a\x0d\x1a\x03\x8f\xa0\x93\x4f\x1a\x0a\xfd\x2e\x24\xe5\xd9\xdc\x1a\x31\x7c\xca\xde\xe1\xfe\x7c\xf2\xfb\xa0\x94\x48\xa6\xf6\x96\x38\x8e\xd0\x92\xb9\x8e\x6a\x36\x4b\xb6\xdd\xbd\x70\x80\xe2\x9b\x8f\x9c\x2c\x17\x87\x83\xba\xbc\xfa\xef\x66\xac\xae\x27\x18\xd7\x23\x38\x2e\x7b\xc0\x92\x65\x0b\x6e\x89\x0e\xf6\x3f\x51\x7b\x32\x51\x89\x7f\xfe\xcd\xd1\xee\x16\x8f\x33\x10\x51\x37\xc1\xf2\x7e\xe1\x89\xf1\x85\x07\x0f\xeb\x60\x5b\xeb\x70\x8b\x46\x89\x34\xbc\x19\x6e\xbd\x6b\x2a\x7c\xf0\x0d\xf1\x71\x04\xab\xb4\x5b\x03\x97\xea\xa4\xba\xe7\x38\x9d\x24\x75\x1e\x84\x1e\x0f\x08\xe6\x07\xb9\xfd\x88\xf9\x3d\x4f\x0b\x61\xe6\xec\xe6\x0c\x57\x7a\xdf\x19\x7d\xf6\x61\x67\x69\xbb\xb4\xe1\x73\x4d\xe9\x23\xaf\x90\x53\xca\xf1\x18\x43\x71\x98\xaf\xe9\xca\x13\x4e\x3b\xac\x1b\x52\x75\x34\x27\x62\x68\xfb\xd7\xd6\xb5\x36\xbf\xfe\xbf\xb8\xbe\x2a\xe6\x97\x37\xc5\xfc\xba\x37\x0d\x82\x2e\x71\x94\x73\xba\xb6\xa5\xaf\xc0\xd2\xaa\xbb\xb8\x49\x76\xd2\x67\x83\x1d\xc4\xb8\xca\x32\xba\x17\x2e\xc9\x1b\x94\xc3\xdf\xce\x64\xb0\xb7\x7f\xe6\x49\x40\xb6\x63\xb8\x90\x2f\x2c\xfe\xca\xe0\xb3\x95\x9f\x4c\xfd\x68\xe9\xdf\x00\x00\x00\xff\xff\x45\x17\x38\x32\x55\x05\x00\x00")

func etcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsEtcdYaml,
		"etc/origin/node/pods/etcd.yaml",
	)
}

func etcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x73\x13\x37\x10\x7e\xf7\x5f\xb1\x4d\x19\x02\xd3\xde\x9d\x9d\x92\xc9\x70\x99\xd0\x61\x68\xa7\xc3\x03\x3f\x86\xb4\xbc\x30\x0c\xc8\xba\xb5\x6f\x1b\x9d\x24\xb4\x2b\x1b\x37\xe4\x7f\xef\x48\xbe\x73\x6c\xe2\x50\x0a\x4f\xb6\x56\xbb\x9f\x76\xbf\xfd\x56\x3a\xe5\xe9\x35\x06\x26\x67\x6b\x58\x4c\x46\x17\x64\x9b\x1a\x5e\xba\x66\xd4\xa1\xa8\x46\x89\xaa\x47\x00\xca\x5a\x27\x4a\xc8\x59\x4e\x4b\x00\xd6\x2d\x36\xd1\x60\x28\x95\xf1\xad\x2a\x2f\xe2\x14\x83\x45\x41\x2e\xc9\x55\x3a\x90\x90\x56\xa6\xf0\xae\xa9\xe1\xf0\x70\x04\x60\xd4\x14\x4d\x1f\xac\xbc\xaf\xc1\x2d\x38\x2f\xb4\xeb\xbc\xb3\x68\xa5\x06\x8b\xb2\x74\xe1\x22\x9b\x9d\x47\xcb\x2d\xcd\x24\xe3\xed\xf7\x91\x95\xc7\x1a\xc8\xce\x82\x1a\x01\x58\xd5\xe1\x00\x9b\xfe\xb3\x57\x3a\x19\x06\xa0\x82\x1b\x3b\x62\x8f\x3a\x25\xa1\x9d\x15\x45\x16\x43\x4e\xa9\x48\x59\x74\xca\x36\xeb\xfc\x0a\xa8\xa6\x64\xab\xa9\xe2\xb6\x5f\x17\xba\xff\xf3\x29\xff\x02\xfc\xf8\xc3\xae\x0b\x00\xa3\x40\x81\xd1\x81\x27\x8f\x33\x45\x66\x34\xb8\x02\xcd\x40\x59\x27\x2d\x06\xf0\xc1\x69\x64\x06\x62\x30\xc4\x82\x96\xec\x1c\x9c\x05\x69\x11\xb4\xa5\x82\x31\x2c\x30\x00\x3b\x7d\x81\xf2\x33\x2c\x15\x09\x44\x2b\x64\x80\x04\xf0\x23\x09\xf7\xa8\x12\x94\x87\xc3\x0b\x32\x06\xee\xdc\xfb\xdb\x4d\x19\x0a\x7f\xff\x34\xbb\xc0\xf8\x10\xfe\xfc\xfd\xd5\xb3\xde\x33\xa0\x04\x42\x3e\x1b\xf7\xeb\x65\x4b\x06\x41\x42\xc4\x53\x68\x5c\x6f\x84\x94\x64\x15\x39\x54\xdc\xaa\x80\x55\x62\x6d\xc1\x4b\x12\xdd\x56\xac\x03\x79\xe1\xca\x2d\xb8\xd0\x62\x80\x45\x49\x64\xb8\xfb\xa8\x6a\x70\x51\xd9\x68\xcc\x69\xca\xdf\x6e\xa0\x00\x50\xb7\x0e\x0e\x96\x2a\xa4\xfa\x6a\x78\x7c\xb3\x7a\x1d\x43\x40\x2b\x66\x05\x9d\xb2\x6a\x9e\x68\x78\xf1\xfa\x7c\x5d\x71\x5a\x4c\x8e\x19\xca\xb2\x3c\x80\xa3\x47\x77\x27\x5b\xc8\x6c\x10\x3d\x4c\x8e\xe1\x6e\x76\xdd\xda\xb9\x77\x6f\x28\x15\x7e\x3a\x83\x09\xdc\xbf\xbf\xd9\x44\xc3\xb8\xe5\x39\x0d\xa8\x2e\x36\xeb\x19\x6d\x73\xf0\xe6\x0d\x1c\xdc\xb9\xec\x81\xae\x0e\xa0\x98\x0b\x3c\x18\xc3\xdb\xb7\xb7\xd4\x88\x21\xb8\xf0\xbf\x2a\x4c\x2d\x22\x3b\xbf\x51\x59\x6e\xdd\xe4\x66\x5a\x8d\xb3\x78\xad\x25\xa3\xa2\xd5\x6d\x42\xea\x4d\xb3\x68\x75\x1a\x4c\xf8\x10\x49\xe0\x72\x0b\xf0\xab\xdb\xe9\xfc\xe7\x69\x0c\x5a\xb9\xda\x56\x5b\x3e\xe0\xfc\xe9\x1f\x5b\xda\xfa\x7a\xc5\x04\x81\xa2\xb0\xae\x48\xa6\xde\xad\x81\xa2\xe0\x15\x0b\x76\x05\x35\x67\x41\xd9\xc6\x75\xd7\x85\xbe\x42\x96\x40\x5a\xf2\x68\xd8\xd8\x4d\x31\x80\x9b\x81\x97\x36\xa0\x6a\x18\x76\x80\x74\x40\x25\xc8\x20\x0e\x02\x36\x51\x63\x8a\xda\x40\xa9\xce\x45\x2b\x29\xfa\xd5\xf9\x79\x1a\xa4\xc8\xc8\x69\xea\x5a\xc7\xc2\xb0\x24\x69\x53\x8f\x56\xa0\x5d\x40\xde\x84\xb5\x22\x9e\xeb\xaa\x9a\xc6\xf9\x3f\x64\x8c\x2a\x03\x36\xad\x92\x52\xbb\xae\xe2\xd6\x2d\xdf\x4d\xe3\xbc\xd4\x73\xfa\x95\x9a\xb3\xc9\xf1\xc9\xe4\x97\x93\x87\xdf\x1a\x7b\x74\xf2\xf0\x64\xb4\xad\xc1\xf7\x36\x29\xe9\x7d\x96\xdf\xe4\x68\x9f\xfc\xd6\xf5\x27\x76\x33\xaf\xf9\xa6\x48\x77\xd0\x0b\x8f\xf6\xdd\xe2\x3c\x13\x03\x25\x64\x59\xbe\xd3\xce\xce\x68\x5e\xdb\x22\xe0\x42\x19\x6a\x94\xb8\x50\xf4\x4c\x9e\x3d\xf8\x6e\xd4\x56\xd9\xc6\xe0\x35\xe2\x64\xd0\xcf\x46\xc4\xdf\x24\x94\x66\x3a\xdc\x87\x7b\x84\xb2\xc6\xdd\xbd\xcc\xfa\xdb\xe1\xf8\x74\x3d\x34\x99\xce\x4e\xcd\xb1\x86\xcb\x4b\x28\x9f\xe4\x74\xcb\xa7\xc9\xc2\xe5\x73\xd7\x20\x7c\x82\x0f\xd1\x09\xc2\xd5\x5a\xe8\xfd\x13\x72\x9d\x60\xb6\x06\x64\x17\x83\xc6\xfe\xf5\x02\x30\xd4\x91\x6c\x56\x00\xda\xc7\x1a\x8e\xc6\xe3\x6e\x63\xe9\xb0\x73\x61\x55\xc3\x83\xf1\xf8\x19\x6d\xee\xe1\x0f\x11\xf9\x46\xdc\x64\x4f\xd8\x64\x13\xc6\xa8\x63\x20\x59\x3d\x71\x56\xf0\xa3\x0c\xb1\x3e\xd0\x82\x0c\xce\xb1\xa9\x73\xf1\xc3\x11\xd1\x3e\xe6\xbf\x18\x43\xdd\x4f\xf0\xc2\x99\xd8\xe1\xb3\x24\x7f\x1e\xde\xb6\x3c\x0c\x2f\x95\xb4\x35\x54\x86\xa6\x55\xe7\xd2\x43\x3e\xc8\x7e\x4d\x41\x1a\x8c\x62\x77\x23\x75\xf6\x85\x35\xab\xad\x03\x77\xb1\x42\xb4\xd5\xe7\xd4\xed\xe0\x85\x68\x8b\xe1\xd5\xdf\x0d\x5d\xa8\xf0\x3d\xe1\xbc\xda\x93\xfd\xb5\xf1\x3f\x33\x47\xd1\x5f\x3e\x7a\x2d\xf4\x62\xd7\x27\xed\x3c\x5f\x7f\x8d\x6c\x90\x93\xed\xe5\xd3\xdf\x36\x6b\x1f\xc8\xe5\xf6\x19\xc5\xfc\x3c\x03\xf6\x42\xb6\xae\xc1\x62\xf8\x4e\x1a\x0d\x9d\xea\xbf\x46\x32\x4c\xca\x6d\x68\xf7\xfe\x6e\xed\xed\xd5\xad\xd1\xfb\x08\xde\x4b\xef\xad\x08\x03\xa5\x37\x58\xbe\x35\x22\x33\x1b\x68\x4e\x5f\x3c\x7a\x0f\xbd\xff\x06\x00\x00\xff\xff\x44\x82\x43\x11\x96\x0a\x00\x00")

func etcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsOvsYaml,
		"etc/origin/node/pods/ovs.yaml",
	)
}

func etcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcd\x8a\xa6\xdd\x46\x29\x2e\xd6\x61\x50\x91\x02\x5d\x92\x75\x01\x1a\x27\x68\xd3\x62\x40\x50\x14\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x7a\x69\xfe\xfb\x40\xea\xc5\x76\x14\x39\x49\xf7\x69\x5f\x5a\x93\x77\xf7\xdc\xeb\x73\x54\x78\x21\x3f\xa2\x75\xd2\xe8\x04\xaa\xf1\x68\x21\x75\x9a\xc0\x99\x49\x47\x39\x12\x4f\x39\xf1\x64\x04\xc0\xb5\x36\xc4\x49\x1a\xed\xfc\x11\xc0\x89\x0c\xd3\x52\xa1\x8d\xb8\x2a\x32\x1e\x2d\xca\x29\x5a\x8d\x84\x2e\x92\x26\x16\x56\x92\x14\x5c\xb1\xc2\xa4\x09\xec\xec\x8c\x00\x14\x9f\xa2\x6a\x8c\x79\x51\x24\xe0\x52\x1d\x0e\xc2\xe4\x85\xd1\xa8\x29\x01\x8d\x74\x69\xec\x22\x5c\x9b\x02\xb5\xcb\xe4\x8c\x02\xde\xed\x3a\xb4\x2c\x30\x01\xa9\x67\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xbf\x5d\xc1\x05\x26\x2b\x20\xe6\x45\xae\x40\xe1\x83\x10\x46\x13\x97\x1a\x6d\x08\x89\xf9\x28\x72\xae\xd3\x3a\x3e\x06\xf1\x54\xea\x78\xca\x5d\xd6\x9c\x99\x68\x7e\x7c\x0b\xff\x03\xfc\xf0\x68\x53\x05\xc0\x21\x01\xc3\xd2\x40\x21\x0b\x9c\x71\xa9\x46\xad\x2a\xc8\x19\x70\x6d\x28\x43\x0b\x85\x35\x02\x9d\x03\xe9\x40\x49\x47\xa8\xa5\x9e\x83\xd1\x40\x19\x82\xd0\x92\x39\xb4\x15\x5a\x70\x46\x2c\x90\x7e\x86\x4b\x2e\x09\x4a\x4d\x52\x81\x24\xc0\xaf\x92\x5c\x83\x4a\x96\x17\xb0\xbb\x90\x4a\xc1\xe3\xa7\x7f\x9b\xa9\x03\x56\x3c\x7b\x19\x54\x60\x6f\x17\xce\x8f\xde\x9d\x34\x9a\x16\xc9\x4a\x74\xfb\x7b\xcd\xf9\x32\x93\x0a\x81\x6c\x89\x2f\x21\x35\xcd\x25\xf8\x20\x51\x64\x06\x76\x09\x1d\xed\xc2\x37\x1f\x03\x27\x60\xf0\x61\x72\xfc\x17\x3b\x38\x9d\x4c\x8e\x0e\xce\x93\xb8\xe2\x36\xb6\xa5\x8e\x37\xca\x1a\xaf\x42\x8f\x7c\xe8\xf0\x2a\x4e\xb1\x8a\x75\xa9\xd4\x4b\x9f\x9a\xee\xbc\x40\xed\x64\xe7\x92\x5b\x9f\x7a\x02\xaf\xfb\x85\x11\xa5\xb5\xa8\x49\x2d\xfb\x25\x3a\x98\x1c\x6f\xd4\xc6\x8b\xc6\x2f\x1c\x44\x51\xb4\x03\xcf\x5f\x3d\x19\xaf\x39\x72\x0a\xb1\x80\xf1\x0b\x78\x12\x54\xd7\x24\x4f\x9f\xb6\x45\x81\x9f\xf6\x61\x0c\xcf\x9e\x75\x42\x54\x0e\xd7\x34\xa7\x16\xf9\xa2\x3b\xcf\xe4\x7a\xb5\x2e\x2e\x60\xe7\xf1\x55\x03\x74\xbd\x03\x6c\x4e\xf0\xcb\x1e\x7c\xfa\x34\x90\x32\x5a\x6b\xec\x7f\x49\xd8\xf7\x56\xea\x79\x2f\xd1\xd0\xf3\x71\x3f\xca\xd4\x68\x5c\x9f\x41\x8f\xa7\x4d\x8a\x7e\xf8\x67\x72\x0e\xa9\x41\xa7\x77\xc3\x58\x39\x82\x65\x7f\xde\xbc\xc2\x83\x87\xe8\xe2\x02\x1e\x01\x9b\x41\x8c\x24\x62\x63\xe5\x5c\xea\xd8\x7b\x0d\xff\xb0\xda\x75\xb4\xe4\xb9\x1a\xae\x54\x37\x1c\x07\x61\xef\xc0\x4c\xea\xb4\x8e\xd2\x57\xe6\x26\xce\xff\x76\x12\x26\x66\x5b\x52\xdf\xd5\xed\xae\xdd\xe7\x7c\x81\x60\xfc\x2a\x69\x16\x26\xcc\x4a\x2d\xc2\x02\x6f\x47\xcb\xbb\x6c\xbb\x9b\x03\x7b\xd7\xb4\x4c\x68\x19\x6b\xa4\x28\x8d\x7f\xdb\x63\x2b\x96\x37\x30\x91\x8f\xb1\xb1\x12\x45\x6d\x65\x0a\x0a\x56\x7e\x21\xfe\x08\x71\x66\x1c\x6d\xdc\xb5\x51\xd5\x95\x6a\x47\xc3\x2d\x5d\x9d\x6f\x33\x24\x2c\x8c\x66\xaf\x66\x61\xad\x1a\xe0\x4a\xe1\xd7\xc2\xd8\x55\xf3\x9c\x29\xad\xc0\x2d\x58\xa3\xae\x40\xa3\xb6\x72\x28\x56\xcf\x01\x38\xe2\x96\xba\xf2\xb0\xa6\xfa\xfb\x77\xcf\x2d\x63\xfe\xb5\x1b\x52\x77\xa9\x8e\x56\x72\x60\x4c\x99\xb9\xc2\x0a\xd5\xfe\xe3\xab\xc3\xa3\xdf\x3f\xbc\xf9\xfc\xf6\xf4\xcd\xdb\xa3\x8f\x47\x6f\x13\xf6\xfc\x3a\x84\x86\xba\x6a\x1f\x9e\xfa\x11\x3b\x3d\x3b\x9a\xbc\xff\xf3\xf8\x8f\xf3\xcf\x87\x93\xf7\x9f\x0f\x4f\x4f\x5e\x1f\x4f\x9a\x24\x2a\xae\x4a\x4c\x40\xa8\xd2\x11\xda\x48\x19\xc1\x55\x10\xc9\x9c\xcf\x31\x81\xab\x2b\x88\x0e\xea\x60\x8f\xfd\x8d\x8b\x26\xbe\xae\xdf\xe0\x4b\x69\x08\xe1\xba\xf6\xb8\xfe\x56\x02\xf8\xba\xba\x36\x82\xee\x65\x3c\x33\x96\x12\x18\xef\x3d\x7f\xf1\x6b\xe3\xdb\x77\xb6\x7f\x5b\x63\x65\xc8\x15\x65\xff\x8c\xea\x65\x51\x37\xa7\xc1\xf4\x17\x5f\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x2e\x72\xcc\x8d\x5d\xfa\xbb\xbd\x93\x7a\xa4\x1d\x8a\xd2\x4a\x5a\x1e\x18\x4d\xf8\x95\x5a\xdb\xc2\xca\x4a\x2a\x9c\x63\x9a\x84\xfd\xd3\xba\x28\xf5\x6b\xf7\xc1\xa1\x4d\xa0\xde\x51\x95\x51\x65\x8e\x27\xa6\xd4\xab\xdc\x72\x7f\x3a\xe3\x94\x25\xfd\xf5\xb4\x99\x8d\x71\xd4\xf4\xbc\x4b\x81\xa7\xa7\x5a\x2d\xd7\x9c\xf6\xf1\xb6\xcd\xe1\x1a\x70\xa7\xb6\x2e\xbf\xd3\x41\xf3\xf2\xf6\xe1\x2a\x6e\x59\x2b\xb8\xd5\x24\x4e\xa7\xa5\xbb\x25\xc1\xc6\x90\x79\xf1\x03\xa3\x08\xef\x7f\xe5\x2e\x25\x89\x6c\x0b\xb2\xa9\x1e\x0c\xbc\xfa\x92\xdc\x82\xbb\x52\xfa\x9e\xb8\x57\x9f\x83\xc3\x81\xf7\xd4\x36\xe1\x6e\x2e\xb9\x3e\x92\x29\x88\xf9\xcf\xa2\x56\xd8\x9f\x96\x6e\xd3\xf6\x8d\x91\x44\x30\xd6\x48\xe9\x40\x32\x4a\x4e\x5b\x04\xbf\xc0\xdc\x7d\x32\x53\x72\xda\xc2\x06\x9b\x5e\x9a\x5e\x73\x52\x0b\xbb\x4a\x06\xd6\x1f\x1f\x76\xe7\xc2\x4a\x13\x78\xa9\xb8\x73\x93\x7a\x91\x2c\x1d\x61\xce\xea\x4d\xd9\x7c\xfb\x8f\x5a\x0a\x36\x5f\xd8\x01\xc6\x87\xdf\xf2\xf8\x56\x1a\x8e\x86\x38\xb8\x15\x60\x98\x77\xdb\x58\x37\x08\xe9\x4b\x9b\x1b\xff\xe7\x8d\xbb\x09\xb2\xba\x1e\xb4\x5e\xe7\xe9\xad\x2c\xbd\xcb\x32\xee\xf8\x38\xcc\xd5\x3b\x31\xd6\xf8\x39\x04\x55\x93\xf3\x4e\xa4\x1b\x5c\xbb\x8b\x8d\xf7\x8a\x6c\x73\x4e\xef\xc1\xbf\x41\xd4\x9b\x1c\x1c\x64\xe0\xd6\x01\xda\xa4\xe2\x30\x11\xb7\x26\x77\x0f\x46\x3e\x8c\x8f\xff\x06\x00\x00\xff\xff\x1a\xb6\xf4\xf5\x9b\x0f\x00\x00")

func etcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsSdnYaml,
		"etc/origin/node/pods/sdn.yaml",
	)
}

func etcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsSyncYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x3d\x4e\x03\x31\x10\x85\xfb\x3d\xc5\x5c\x60\xb3\xa2\x75\x87\x52\x51\x00\x2b\x21\xd1\x46\xc6\x1e\x36\xa3\xd8\x9e\xc5\x33\xde\x60\x85\xdc\x1d\xed\x0f\x91\xd2\x50\xbe\xe7\x4f\xfe\x9e\x6d\x47\x7a\xc7\x2c\xc4\xc9\xc0\xf4\xd0\x9c\x28\x79\x03\x3d\xfb\x26\xa2\x5a\x6f\xd5\x9a\x06\x20\xd9\x88\x06\xa4\x26\xb7\x05\x19\xad\x43\x03\xa7\xf2\x81\xad\x54\x51\x8c\x8d\x8c\xe8\x66\xd6\x71\x52\x4b\x09\xb3\xcc\xa9\x05\x8a\x76\x40\x03\x97\x0b\xec\xf6\x9c\x3e\x69\xd8\x3d\xcd\x8d\xec\xde\x6a\x72\xf0\x03\x5f\x85\x15\xe1\x7a\x6d\x00\x60\x85\xfb\x12\x42\xcf\x81\x5c\x35\xf0\x18\xce\xb6\xca\x72\x76\x37\x02\x40\xd0\x95\x4c\x5a\xf7\x9c\x14\xbf\xd5\x2c\x25\xc0\x98\x69\xa2\x80\x03\x7a\x03\x9a\x0b\x2e\xf5\xc4\xa1\x44\x7c\xe6\x92\x54\x56\xb0\x85\x38\xa7\xde\xea\xd1\x40\x77\x98\x1f\xda\x1d\xb8\xe8\x76\xcb\xea\x8a\x56\x14\x73\xeb\x02\x17\xdf\x8e\x99\x27\xf2\x98\x37\x22\xa3\xf5\xaf\x29\xd4\x9b\xe5\xc8\xa2\x2f\xa8\x67\xce\xa7\x5b\xb7\x7a\xb7\x8f\x98\x81\xc5\xf7\xb7\x74\x75\xa3\xba\x8e\x33\x0d\x94\xba\x45\x74\xe7\xf9\x6f\xc7\x6f\x00\x00\x00\xff\xff\xca\xef\xb1\x1f\xba\x01\x00\x00")

func etcOriginNodePodsSyncYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsSyncYaml,
		"etc/origin/node/pods/sync.yaml",
	)
}

func etcOriginNodePodsSyncYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsSyncYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/sync.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func etcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeSdnKubeconfig,
		"etc/origin/node/sdn.kubeconfig",
	)
}

func etcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := etcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func etcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := etcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x6d\x73\xdb\x36\x12\xfe\x5c\xfc\x8a\x2d\xe5\xd6\x8d\x27\x20\xed\xd4\x97\xcb\x29\x71\x6e\xfc\xa2\xa4\x9e\x73\x63\x8f\xed\x6b\xe6\x26\xcd\x78\x20\x62\x29\x22\x22\x01\x16\x58\xca\x51\x1c\xfd\xf7\x1b\x80\xa4\xde\xac\x38\x9e\x69\x3e\xc8\x0c\xb0\x58\xec\xdb\xf3\xec\x92\xbd\x1f\x93\xa1\xd2\xc9\x50\xb8\x1c\x38\x7e\x66\xac\x07\xd7\xe7\x27\xe7\x7d\x48\x90\xd2\x44\x6a\x57\x0a\xf7\x57\x2c\x13\x63\xd5\x48\x69\x5e\x57\x8e\x2c\x8a\x92\x4b\xed\xe2\xd4\xe8\x0c\x94\x83\xb4\xb6\x16\x35\x15\x53\xc8\x85\x95\xa9\x91\x28\x5f\x82\x22\xd6\x83\xca\x9a\xa1\x18\x16\x53\x70\xb9\xa9\x0b\xa9\xb7\x09\x86\xc8\xd8\xd5\xe0\xf2\x8f\xd3\xe3\xc1\xcd\xf5\xff\x2e\x06\x07\x8d\x66\xa6\x32\xf8\x00\x3c\x83\x28\x5c\xec\xa6\xce\x6b\x57\xa3\x44\x90\x29\x55\xca\x4d\x85\xda\xe5\x2a\x23\xae\x8d\xc4\x08\x3e\xbe\x04\xca\x51\x33\x00\x80\x15\x75\xeb\xf2\x2c\x53\xde\x29\x8b\xa5\x99\x20\x58\x1c\x29\x47\x76\x0a\x29\x5a\x52\x99\x4a\x05\x21\x38\x93\x51\xa1\xf4\x18\x32\x6b\x4a\x90\x26\x1d\xa3\x65\xb5\x0e\x4b\x4d\x18\xc2\x52\xe2\xcf\xb8\x58\x26\x9d\x92\x58\xa4\x29\x3a\x17\x5b\x94\xb9\xa0\x38\x35\x65\xd2\x3c\xf2\x54\xc4\xa9\x25\xe6\x9d\xfa\x11\x46\x16\x2b\x48\x26\xc2\x26\x85\x1a\xb6\xba\x1a\xbd\x99\x23\x31\x9c\x3b\xe2\xa6\x8e\xb0\x4c\xa9\x00\x47\xa6\x6a\xed\x88\x1d\xda\x89\x4a\x91\x01\x94\xe3\xcc\xc5\x9f\x33\xe7\xa3\x94\x48\x9c\x24\x52\xb9\x71\x22\xbe\xd4\x16\x13\x8b\xce\xd4\x36\x45\x5e\x09\x4b\x7b\x0c\x00\xd3\xdc\xc0\xf6\xc3\x62\x70\xcf\x2a\xf0\xea\x61\x64\xab\xbf\x6a\x43\x02\x60\x17\x76\xb7\xe1\xf5\xeb\x85\xb1\xde\x0c\x53\x6b\x5a\x3f\xc9\x00\x2c\x3a\x32\x16\x53\xa3\x81\x5f\x6e\xd8\x4f\x05\xc1\xeb\xe5\x70\x4a\x81\xa5\xd1\xf1\x27\x67\x34\xbc\x7a\xb5\x3d\x38\x7f\xb3\xcd\xee\x18\x40\x54\x98\x11\x97\x56\x4d\xd0\x46\x7d\x88\x3e\x99\xda\x6a\x51\xc8\x88\xcd\xd8\xe0\xfc\xcd\x5a\xa0\x84\xa5\xf5\x48\xf9\x84\xb7\xfe\x54\x75\x51\xc0\xdd\x1d\xc4\xc7\xa1\x98\xe2\xd3\x52\x8c\xd0\xc5\xef\x8c\x44\x98\xcd\xe0\xe7\xd7\x21\x40\xda\x4b\xfd\xec\xab\x24\x53\x05\xb6\xb5\x0a\x43\x84\xc4\x1a\x43\x49\xdc\xa5\xbf\xd1\xe1\xed\x7d\x0a\xc3\x9a\x40\xa4\x54\x8b\xa2\x98\x82\x46\x94\xa0\x08\x94\x66\xbd\x85\xe7\x4d\x61\x03\xe5\x42\x8f\x1d\x90\x81\x9c\xa8\x72\xfd\x24\x19\x29\xca\xeb\x61\xa8\x97\x71\x3d\x44\xab\x91\xd0\x2d\x3f\x2a\xe7\x6a\x74\xc9\xfe\x3f\xf6\x5f\xfc\x93\x9d\x5c\x1c\x5e\xff\x76\xb0\xa6\xb5\x33\x8a\x95\x63\xa9\x2c\xf0\x0a\xb6\x82\x1c\x1b\x0a\x87\xcf\xf7\x81\x4b\x78\xf5\xea\xd5\x06\xd7\xc3\x9f\x8b\xba\x28\xae\x30\xb5\x48\xf0\x15\x8e\xc2\x89\x81\x4e\xdb\xa0\xbc\xde\xba\x0b\xaa\x66\xcb\x0e\xbf\x84\x34\x2f\x8d\x84\xdd\xe7\xbb\xbb\xb0\x49\x60\x41\x1c\xa9\xd1\x4e\x49\xb4\x90\x89\x94\xbc\xf7\x74\xaf\x5a\x5d\xea\xd4\x5e\x52\xd4\x7a\xf7\x5b\xf4\xe1\xb9\x43\x58\x52\xa4\x8c\x7e\xe0\xf8\xcb\xa5\xdb\x6a\xaa\x2d\x82\x23\x2b\x08\x47\x53\xc8\x8c\xf5\x25\xa9\xbe\xa0\x03\x95\xb1\x5e\x48\x12\xca\x4d\x90\x44\x4a\xe5\x26\x40\xce\x01\xf7\x80\xfd\x5f\xbf\x02\xd9\x1a\xbf\x89\xb8\x25\xd1\xb5\x0b\x1b\xac\x49\xcc\x44\x5d\x90\x7b\x14\xd6\xfc\xb9\x6f\x23\x2d\xec\xfa\xe2\x0f\x96\x44\x47\xe7\xe7\xd7\x57\xd7\x97\x87\x17\x37\xc7\xe7\xef\xde\x9c\xbe\xbd\x79\x77\xf8\xfb\xe0\xc0\xb3\x27\x6f\xf2\xc6\x4b\xe1\x08\x6d\xd4\x5d\xba\xe0\xdc\xad\xbb\x65\x4a\x9d\x05\xca\x65\xcc\xa1\x04\xae\x80\x23\x44\xae\x77\x32\x38\xfa\xef\xdb\x9b\xb3\xf3\xb7\x67\x83\x3f\x06\x67\x07\xf1\xce\xfa\xca\x52\xe9\x1d\x9b\xb2\x32\x1a\x35\x9d\x99\xd1\x19\x4e\xb0\xe8\x00\xd8\x8b\xe0\x51\x37\xfb\x5c\x4a\xe7\xf1\x05\x94\x56\x4f\x5f\xec\xef\xef\xbf\x04\x69\xd8\x0f\x95\x35\x64\x0e\xb6\xee\xa4\xa3\x9f\x7e\x7a\xba\x33\x63\x3f\x54\xc6\x52\xb3\xd0\xeb\xed\x3c\x9d\xb1\x1f\x54\x45\x62\x58\xa0\x03\x7e\x08\xe7\x57\x37\x6f\x4e\x2f\x07\xef\x0f\xcf\xce\x6e\x0e\xcf\xce\xce\xdf\x07\xe0\x04\x25\xc0\x4b\xcf\x26\x84\xc0\x79\xf3\xf7\xdd\xe0\xbd\x5f\xec\xb6\xb9\xf4\xaa\x61\x2b\xfc\xf2\x4f\x70\x78\x7c\x3c\xb8\xb8\x66\xd2\x68\x64\xac\xbb\x84\x3b\x31\x41\x58\x0f\x67\xb7\xcb\x98\x2d\x81\xdb\xac\x71\xda\xa7\x2b\xd9\x69\x9e\x5b\x50\x37\x09\x49\x76\xd8\x02\xd6\xcb\xdb\x69\x61\x6a\x59\x59\x33\xf1\x05\xcf\x16\x7c\xba\x69\xbb\x29\xbf\xa6\x45\xb7\xe4\xba\x82\xe1\xc7\x1c\x64\x3e\x87\x27\xe8\x99\x58\xc6\xbf\x07\xdb\x8e\xbd\xe8\x45\x2b\xea\xd3\x1b\x92\x4c\x42\x69\xb4\x57\x0d\xff\xc2\x57\xb8\x22\xab\xf4\x08\x66\x0d\x61\xb3\x1e\xdc\xe6\xa8\x1b\xb2\xf6\xeb\x3e\xa9\x70\x2b\xc4\x08\x35\x81\xd0\x12\x34\xd2\xad\xb1\x63\xa8\x49\x15\x8a\x14\x3a\x18\x19\x0f\x5b\x4d\x06\xac\x48\xd1\xa3\x5c\x06\x2e\x88\x59\x0f\x54\x36\x3f\x6c\x6b\xed\x60\x88\x99\xb1\x08\x52\x3b\xcf\x26\x63\x6d\x6e\xb5\x67\x5b\xca\xb1\xbd\x09\x01\xb5\x84\xba\x82\x5b\x45\x39\x60\x59\xd1\xd4\xf3\x84\xd2\x23\x76\x9b\x7b\xc6\xff\xf0\x01\xb6\x7e\xc9\x8d\x23\x2d\x4a\x04\x2e\x9f\xc0\xc1\x01\x44\x11\x7c\xfc\xe8\xcb\x0c\x5c\x81\x58\xc1\x9e\x7f\xf6\xc9\x2e\xcc\x68\x84\x16\x38\x41\x93\x2f\x1e\x1c\xab\xab\xd8\xe5\x10\xd9\x5a\x6b\xef\x63\xbb\xe6\x2d\x6f\xa2\x13\xb5\x77\xfd\x08\x0f\xf7\xa6\xab\xf6\xe0\x6c\x16\x4a\x1c\xe0\xc1\xeb\x6e\x85\x0a\x21\xf5\x08\x51\x5e\x41\xa3\x96\x0c\xf8\x80\x46\xbe\x59\x36\xc6\xef\x36\x95\xda\xde\x6d\x6b\x0d\x9c\x57\x56\x4d\x54\x81\x23\x8f\x6b\xee\x4b\x93\x77\x89\xf0\xb1\x00\x3e\x09\x55\xd2\x0f\x3f\x5f\x1e\x34\xf5\xe1\x98\x64\x4a\x2b\x97\xa3\x84\x6f\x06\x07\x6c\xda\xdf\xfa\x77\xc4\x58\x5d\x49\x41\xc8\x53\xc1\xc9\xd6\x8e\x1a\x2a\xdb\xf6\x69\xf1\xdd\x1d\x2d\xec\x3d\x7f\x11\x3f\xff\x35\xde\x7b\xf6\xaf\x78\xef\xf9\xf6\x2a\x00\x7c\xb6\xc3\x88\x53\x4c\x9a\xfa\x9d\x53\x96\x0d\x9c\xf5\x0b\xec\x34\x5a\xfa\xf0\x24\xde\xe9\xfd\xb9\xd7\x35\xe4\x45\xf2\x9f\x74\x94\xb4\x8a\xc8\xc5\xf4\xd9\x2c\xc4\xbe\x59\x37\xe8\xfe\xfb\x77\x04\xb3\xfd\xcf\xb2\xd6\x1e\xfc\x76\x78\xfc\x1f\xdf\x4d\xab\x29\xac\x6d\xfa\xf4\x0e\x8d\x21\xdf\xeb\xaa\xe5\x75\x67\x9a\x7e\x3b\x37\xb7\x1d\x90\x02\x0c\x6a\x6f\x68\x98\x47\x10\xdc\x54\xa7\xac\x07\xcd\x04\xe6\x90\xe0\x56\x15\x05\x68\x43\x90\x09\x55\x04\x4c\xfa\x55\x2f\xda\x38\xdc\xa8\x28\xc4\x10\x0b\x07\xa9\xb1\x16\x53\x2a\xa6\x31\x4b\xab\xef\xba\x72\x5f\x60\x93\xed\x8c\xdd\xdd\x71\x0f\xed\xad\x78\xf0\x99\xac\x88\x4f\xdd\x25\xa6\x66\x82\x76\xfa\xdd\xfa\x9a\x13\x8b\xed\x4e\x18\xbd\x04\xe8\x27\x11\xeb\x81\x23\x8f\x02\x18\xb5\x5e\x0d\x45\x3a\xae\xab\xc0\xc7\x97\xd9\x6a\x0b\x4d\x76\x18\x61\x59\x1d\x89\x74\x7c\xa2\xec\xc1\xea\x5e\x7b\xae\xa1\xe7\xad\x25\xb9\x47\xa2\x7b\x40\xa9\x3c\x0a\x3a\x5a\x80\xcf\xf1\xd9\xb2\xcb\x0a\x40\xef\x63\xf2\x4f\x06\x1d\x2e\x57\x4b\xb4\x7f\x7f\x69\x93\xf0\x2a\xd5\xf7\x93\x1b\x29\x48\x24\x37\xa6\x9e\xab\x5e\x76\xaa\x9f\x98\x9a\xfa\x5f\xc2\xd6\x77\x7c\x69\x8e\x0f\x0b\x33\xf4\x21\x0f\xdd\xbf\xc9\x63\x23\x71\x54\x98\xe1\x3b\x4f\xae\x9d\xa4\x44\x47\x4a\x0b\xcf\xe9\x07\xfe\x96\x36\xb2\xb1\x1c\x42\x24\xcd\xad\x2e\x8c\x90\xd1\xc3\x69\x6f\x4e\x40\x27\x8d\xd2\xe3\x22\x82\xad\x5f\x0a\xb7\xe2\xc5\x13\xd6\xe5\xff\x59\x37\x3a\x7d\x87\xc3\x83\x50\x20\x2a\x2d\x2a\x97\x1b\x7a\x2c\x79\x37\x4d\xd2\x07\xe6\xef\xa7\xd7\xd7\x5b\x7f\xfe\x34\xdf\x5a\x2e\xc7\xfe\xea\xff\x9a\x44\x71\x84\xc1\xf5\xf1\xc9\xf1\xf5\xd9\xcd\xe1\xc5\xe9\x41\xf4\x6b\xf4\x8d\xfc\xad\x18\x1b\x64\xbc\x96\xf0\x5a\xd5\xba\xdd\x85\x6b\x25\x9c\x4b\x99\x0a\xd7\x71\x5f\x42\xdc\xe3\x61\x15\x2a\x1a\x6f\x5b\x81\xd0\x55\x97\xf0\xd8\x2e\x2b\xad\x48\x89\x82\xa7\x45\x1d\xca\x35\x6a\x53\xb1\x1b\xfe\x1d\x74\xc4\xb9\xb2\xda\x7f\xf6\xeb\x8b\xdd\xa7\xcb\x4b\x7b\x1b\x05\xf7\xee\x0b\x3e\xdb\x28\xf8\x2c\x08\x46\x9b\x4d\xe2\x64\xc6\xa8\x43\x58\x78\x66\x2c\x0f\xa3\xd1\x9a\xa8\x90\x13\xb4\xa4\x1c\xf2\x0a\xd1\xf2\xda\x16\x0e\x36\x70\x7e\xb8\x86\xb1\x72\x72\x3f\x4a\x7e\x08\x5c\x59\x9b\x8f\x89\xeb\x92\xdd\xc6\x0a\xf1\xac\xbc\x0d\xac\xa9\x7f\x4c\x9d\x63\xa8\xcc\x28\xf0\xaf\x9f\x93\x66\x33\xc6\x7a\x1d\xfb\x7b\xbd\x65\x89\xda\xa3\x6b\xd1\x04\x7d\xdf\xb6\xa6\xe0\x55\x21\x34\x42\x65\x4d\x78\x6f\x36\x1a\x32\x65\x1d\x85\xde\xc4\xa8\xd6\x28\xb9\x90\xe5\x62\x7f\xf3\x79\x8f\x4e\x6d\x08\xfb\xb0\x69\xf8\x87\xd4\x0a\x97\x43\x61\x4c\xe5\xa0\xd6\xa4\x8a\xae\x23\x29\x07\x75\xc5\x16\xdf\x02\x50\xfb\x21\x7b\xa3\x92\xf9\xa7\x81\xf5\x2f\x07\x0f\x09\x37\x5f\x04\xa4\x72\x62\x58\x84\xe6\xe2\xa6\xae\x30\x23\x70\x4a\xa7\x61\xa8\x2c\x85\xf6\x03\x17\xfa\x8e\x43\xb9\x17\xa1\xdc\x9a\x7a\x94\x43\xf7\xc9\x62\xe9\xbe\x46\x0f\x76\x5a\x36\x5a\x64\xaa\x7b\xdb\x4b\x2f\x02\xcd\xb7\x08\xdf\x31\xd7\xbb\x6e\x3b\xa4\x08\x59\x2a\xbd\xd2\x78\x17\x47\x92\xae\xcb\xfe\x3f\x00\x00\xff\xff\xce\x00\x0f\x1f\xf0\x13\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xff\x73\xdb\xb6\x92\xff\x9d\x7f\xc5\x56\xc9\xd4\x6d\xaf\x24\x25\xd7\x4e\x5a\x26\xce\x8d\x63\x3b\xa9\xa7\x89\xed\xb3\xdc\xde\xbd\xc9\x74\xfc\x20\x62\x25\x22\x02\x01\x06\x00\xe5\x28\x8e\xff\xf7\x1b\x7c\xa1\x44\x7d\xb5\x93\xf7\xae\x73\x77\xf3\xfc\x8b\x45\x60\x77\xb1\x58\xec\x97\xcf\x82\x7c\xf4\x4d\x3a\x60\x22\x1d\x10\x5d\x40\x8c\x1f\xa3\xe8\x11\x5c\x9d\x1f\x9f\x67\x90\xa2\xc9\x53\x2a\x74\x49\xf4\x87\x84\xa6\x52\xb1\x11\x13\x71\x5d\x69\xa3\x90\x94\x31\x15\x3a\xc9\xa5\x18\x02\xd3\x90\xd7\x4a\xa1\x30\x7c\x0a\x05\x51\x34\x97\x14\xe9\x33\x60\x26\x7a\x04\x95\x92\x03\x32\xe0\x53\xd0\x85\xac\x39\x15\x3b\x06\x06\x18\x45\xfd\x93\xcb\x3f\x4e\x8f\x4e\xae\xaf\xfe\x76\x71\x72\xe0\x25\x47\x6c\x08\xef\x20\x1e\x42\xc7\x2d\xac\xa7\xda\x4a\x67\xa3\x94\x18\x59\xb2\x3c\x96\x15\x0a\x5d\xb0\xa1\x89\x85\xa4\xd8\x81\x3f\x9f\x81\x29\x50\x44\x00\x00\x0b\xe2\x96\xe9\xa3\x21\xb3\x9b\x52\x58\xca\x09\x82\xc2\x11\xd3\x46\x4d\x21\x47\x65\xd8\x90\xe5\xc4\x20\x68\x39\x34\x9c\x89\x31\x0c\x95\x2c\x81\xca\x7c\x8c\x2a\xaa\x85\x1b\xf2\x66\x70\x43\xa9\xe5\xd1\x09\x4d\x1b\x21\x09\xc9\x73\xd4\x3a\x51\x48\x0b\x62\x92\x5c\x96\xa9\xff\x19\xe7\x24\xc9\x95\x89\xec\xa6\xbe\x81\x91\xc2\x0a\xd2\x09\x51\x29\x67\x83\x20\xcb\xcb\x1d\x6a\x43\x06\xb3\x8d\xe8\xa9\x36\x58\xe6\x86\x83\x36\xb2\x0a\x7a\x24\x1a\xd5\x84\xe5\x18\x01\x94\xe3\xa1\x4e\x3e\x0e\xb5\xb5\x52\x4a\x71\x92\x52\xa6\xc7\x29\xf9\x54\x2b\x4c\x15\x6a\x59\xab\x1c\xe3\x8a\x28\xd3\x8b\x00\x30\x2f\x24\xec\x6c\x27\x83\x15\xad\xc0\x8a\x87\x91\xaa\x3e\xd4\xd2\x10\x80\x2e\x74\x77\xe0\xc5\x8b\xb9\xb2\x56\x0d\x59\x0b\xb3\xcc\x19\x01\x28\xd4\x46\x2a\xcc\xa5\x80\xf8\x72\x65\xfe\xf6\x36\x06\x36\x04\xfc\x00\xc9\xc9\x47\xa3\x48\x72\x29\x39\x42\x87\x89\xa1\x22\x1d\xb8\xbb\x8b\x00\x72\x62\xe0\x45\xdb\xde\x94\x60\x29\x45\xf2\x5e\x4b\x01\xcf\x9f\xef\x9c\x9c\xbf\xda\x89\x6e\x23\x80\x0e\x97\xa3\x98\x2a\x36\x41\xd5\xc9\xa0\xf3\x5e\xd6\x4a\x10\x4e\x3b\xd1\x5d\x74\x72\xfe\xca\x2d\x85\x82\x7a\xa1\x6d\xa3\x12\x65\x96\xad\x6a\x9d\x23\xec\xbd\xaa\x39\x87\xdb\x5b\x48\x8e\x9c\xe3\x25\xa7\x25\x19\xa1\x4e\xce\x24\x45\xb8\xbb\x83\x6f\x5f\x38\x63\x0a\x4b\xf5\xad\xf5\xa8\x21\xe3\x18\xfc\x1a\x06\x08\xa9\x92\xd2\xa4\x49\xe3\x2a\x5e\x86\x55\xfd\x47\x18\xd4\x06\x48\x6e\x6a\xc2\xf9\x14\x04\x22\x05\x66\x80\x89\xe8\xd1\xdc\x4a\x3e\x08\xc0\x14\x44\x8c\x35\x18\x09\x85\x31\x95\xce\xd2\x74\xc4\x4c\x51\x0f\x9c\x6f\x8d\xeb\x01\x2a\x81\x06\x75\xfb\x27\xd3\xba\x46\x9d\xee\xed\xef\xfd\xfc\x34\x3a\xbe\x38\xbc\xfa\xf5\x60\x49\x6a\xa3\x54\x54\x8e\x29\x53\x10\x57\xf0\xd8\xd1\x45\x03\xa2\xf1\xc9\x1e\xc4\x14\x9e\x3f\x7f\xbe\x66\xeb\xee\xdf\x45\xcd\x79\x1f\x73\x85\x06\x3e\xc3\x4b\xc7\x71\x22\xf2\x60\x94\x17\x8f\x6f\x9d\xa8\xbb\xf6\x86\x9f\x41\x5e\x94\x92\x42\xf7\x49\xb7\x0b\xeb\x08\xa2\xc8\x7b\xe7\xcb\xf3\xf3\xab\xfe\xd5\xe5\xe1\xc5\xf5\xd1\xf9\xd9\xab\xd3\xd7\xd7\x67\x87\x6f\x4f\x0e\x6c\x7c\xc7\x9e\x3a\xb6\x3a\xb5\xdc\xe5\xee\x6e\xe6\x8d\xf3\x04\xf1\xf8\xb6\x1d\xff\x77\x2e\x3f\x44\x91\x46\x0a\x31\x83\x18\xa1\xa3\x1f\x1d\x9f\xbc\xfc\xfd\xf5\xf5\x9b\xf3\xd7\x6f\x4e\xfe\x38\x79\x73\x90\xfc\xb0\x3c\xd2\xda\xfb\x91\x2c\x2b\x29\x50\x98\x37\x72\xf4\x06\x27\xc8\x1b\x0f\x78\xd4\x81\x07\xad\xac\x4a\x88\xd5\xd0\xd3\xa2\xc9\x69\xfa\x83\xff\x1d\x0e\xa3\x24\xda\xa0\x4a\x7f\x88\x56\xcd\xbf\x60\xdd\xef\xfe\x46\x4a\xfe\x96\x28\x5d\x10\x3e\x53\xce\xaa\xf2\x52\x4a\xa3\x8d\x22\xd5\x6f\xf5\x00\xbd\x26\xdf\xbb\xb3\x68\xaf\x62\x55\x49\x07\x0d\x65\x32\x9e\x91\x2e\x1c\xce\x83\x38\xbe\x46\xcf\xfe\xf1\xd9\xbd\xda\x69\x2a\x1e\xac\xd7\x22\xed\x7d\x1a\x1d\xa1\x32\x87\xfa\xe5\xd4\xa0\x9e\x1f\xeb\x3c\xdf\xeb\x45\x33\xba\xa9\x0d\x3a\x3a\x5f\x9c\x19\xa5\x42\xe5\xd2\xfa\x3d\xcb\x5f\x28\x36\x21\x06\x7f\xc3\xe9\x17\x28\xf1\x1b\x4e\x1f\xac\xc3\x18\xa7\xdb\xcd\xb5\x96\xe5\x5e\x87\xbb\xd7\x6c\x47\x64\x9b\xad\x42\xcd\xcb\xab\x55\x7d\xfc\x94\x1f\xaf\xc6\x2c\xcd\x49\x6c\x54\xad\x4d\xea\xab\x51\x4a\x44\x5e\x48\xa5\xd3\x79\x91\x0f\xc2\xea\x8a\x12\x83\x71\x43\xdf\x24\x0e\x41\x4a\xb4\x19\x1c\x15\xf4\x9e\xfc\x9c\x3c\xf9\x29\xe9\xed\xfe\x92\xf4\x9e\xec\xac\x51\xcb\x96\x3c\x3e\x71\x58\x65\x9e\x00\xdb\x54\x39\x97\x35\xad\x94\x9c\x30\x8a\x2a\x8a\xe6\x55\x68\xdd\xbc\xaf\xa3\x1e\xf9\x84\x92\xb4\xf1\x28\x36\x31\x46\x36\xdb\x1c\xa3\xad\x5f\x34\xf9\x4f\xa9\xc6\xa8\x8e\x2c\xe9\x45\x20\xb5\xa6\x77\x07\x60\x08\x13\xa8\xfa\xbe\x54\xc1\x67\xe8\x1b\xc5\xc4\xc8\xd6\x35\x5b\xe6\x56\x35\x9d\x9f\x7d\x48\xb6\x53\x52\xf2\x59\xe5\x24\x15\xfb\x03\x95\x66\x52\x64\x30\xe9\x45\xa4\x36\x85\x3f\xe4\x2c\x02\xb0\x4f\x28\x8c\x3d\x68\x26\xc5\x11\xc9\x0b\xec\xb3\x4f\x98\x41\xaf\xdb\xed\xae\x9f\xbf\xba\x7a\x93\xc1\x7e\x19\x26\xa5\x62\x9f\xb6\xf0\x2e\x4e\x37\xac\x54\xe8\x97\x4c\xd0\x43\x4a\x15\x6a\x9d\x41\x6f\xf7\x69\xd2\x4d\xba\x49\x2f\xdb\xff\xc9\x4e\x1e\xcb\x92\x30\x91\x41\xce\x6b\x9b\x34\x13\x2e\x73\xc2\xed\xc4\xe9\x45\x06\x5d\x47\xda\xb5\x8f\x97\x98\xd7\x4a\xb3\x09\x5e\xba\xc3\xb6\xdb\xca\x56\xbd\xb0\xed\x09\xbe\x22\xce\xf7\xef\x9f\xfb\x05\x2b\x2f\xa5\x34\xc7\x4c\x61\x6e\xa4\x9a\x66\xcb\x38\x46\x17\xac\x5c\x20\xef\xdb\x5f\x26\xd0\xa9\x5a\xb4\xe8\x12\x2d\xf3\xb1\x85\x62\x1f\x31\xff\x95\x08\xca\x51\x9d\x91\x12\x33\x10\xc4\xb0\x09\x46\x28\xc8\x80\xe3\xef\x82\x51\xce\xc4\x28\x03\xa3\x6a\x8c\x98\xad\xb9\x73\xbd\x86\x52\x95\xc4\x64\x6b\x8a\xf3\x2b\x37\x03\x9f\xc1\x42\x35\xf4\x60\x87\xdb\x30\x35\x19\x0c\x09\xd7\x18\xb1\xca\xd8\x05\x74\x7f\x2a\xf2\x0b\x54\x4c\xd2\x0c\x7e\xea\xea\x68\xcc\x04\xcd\xc0\xa6\x1f\x2f\x31\xb2\x99\x95\xa3\x39\x54\xa3\xba\x44\x61\xb4\x5d\x78\x96\x3d\xe2\x79\xde\xb5\xe3\xf1\x03\x8b\x06\x38\x84\x1d\x53\xa6\x36\x70\xb5\x00\xb8\xb6\xd4\x36\x02\xe2\x4d\xeb\x6c\x0c\xa5\x86\xb1\x99\xf3\xac\x8e\xc0\x5a\xde\x59\xd8\x4a\x35\x4a\x72\x8e\x2a\x26\xc6\x90\xbc\x88\x29\xda\x7f\x9e\xb8\x63\xed\xde\xb1\xb6\x46\x62\x6a\x85\xf1\xc8\xaa\xe4\xe7\x2e\xa5\xb1\x99\xdc\xdb\xe7\x88\x33\x14\xa6\x95\x11\x0f\x2c\xe7\x8f\x0b\x34\x7d\x97\x95\x96\x69\x22\x00\x17\x96\x9c\x0c\x90\x07\xd1\x6e\x40\x49\x8e\xc9\x1c\xcc\x25\x4c\xa6\x2b\x90\xa7\x91\x50\x49\x1a\x97\x44\xb0\x21\x6a\x13\x57\xc4\x14\x1b\x0c\x5b\x49\x6a\x0d\xaa\x9c\x5a\x71\xdb\xcc\x4b\xfb\x55\xb5\x30\xac\xc4\x58\xe1\x87\xda\xca\xb4\x0f\xb2\x36\x9e\xaa\xd7\xb5\x7e\x6e\x55\x8b\x95\xcf\xb5\xd4\x4f\xb4\x93\x97\xdd\xf4\x65\x98\x5d\x93\xb1\xda\xfb\x58\xf0\x53\x0f\xca\xb7\x08\xee\x3b\x82\x2f\x17\xed\xc1\x55\x38\x28\x29\x04\xe6\x36\xe7\x9c\x4f\x50\x29\x46\xbd\x01\x6c\xcf\x56\xd9\x49\x83\xc2\x5c\x4d\x2b\xd4\x19\x90\xaa\xe2\x21\xb5\xa5\x13\x41\xdb\x27\x52\x29\x69\xe4\xa0\x1e\xfe\xd8\xa6\x71\x20\x16\x60\x50\x2b\x1b\x6d\x7b\x36\xc9\xe5\x73\x81\x0f\x92\x17\x01\x7c\xa8\x74\x06\xbb\xdd\xa0\xb4\xb5\x65\x88\x7b\xe7\x1b\xed\x60\x12\x68\x6e\xa4\x1a\xcf\xd3\x42\x69\xea\x0c\x7a\x7b\xfb\x76\xe5\x30\x79\xc1\xeb\x11\x13\x3e\xc1\xf8\x2e\xb4\x55\x4e\xe5\x44\xc7\x81\xae\x92\x9c\xe5\xd3\xa8\x52\xf2\xe3\x74\x21\xe2\x43\x92\x8d\x73\x46\x55\xe3\x03\x49\x6f\xf7\x67\x9b\x64\xd3\xde\x5e\xe4\x5a\x26\x31\x3a\x15\x43\xe9\x12\x44\x3b\x71\x87\x5c\x9c\xf5\xba\xbb\x4e\x27\x3b\x79\xe6\xd7\xcb\xc0\xe4\xd5\x9e\x93\xef\x4e\xe5\x30\x83\x50\xdc\x27\x92\xd7\x65\x2b\xd7\xb9\xec\xfe\x1f\xb6\xf1\xcc\x5c\x5b\x5f\xa1\x7a\xd5\x7f\xad\x64\x5d\x65\x60\xdb\xae\xc0\xb0\x2e\x39\x07\xff\x9f\x6d\xd8\x57\x8a\xc4\x33\x68\x5f\x2e\xd7\x16\xff\x79\xc4\xac\xaf\xa6\x76\x2a\x95\x13\xbd\xb5\x94\xfa\x84\x7a\x21\x69\x54\xa2\x21\x94\xf8\x0d\x10\x21\x6c\x08\x32\x29\xb4\xdf\x8f\xce\x0b\xa4\x35\x47\x95\x10\x5e\x15\x64\x29\xee\x73\xc5\x6c\x79\xe5\x71\x65\xf3\xf4\xce\x8e\x4b\xe7\x4d\xba\x00\xeb\x52\x19\xc8\x89\x76\x0f\x79\xd3\xa3\x64\xcd\xe9\xbb\xe1\xf9\xf6\xad\xbc\xf5\x34\xc6\x39\xa8\x6b\xbb\xad\xef\x38\x77\xf1\x62\x1d\xa8\xaa\x48\x6e\x07\x66\x8e\xa3\xa9\x88\x74\x85\x79\x16\x5c\xdc\x05\x61\x48\x24\xb9\x2c\x4b\x22\xa8\xd7\x2f\x86\xd9\x3d\x52\x78\x8e\xf3\xf0\xe3\xb3\xfb\x0f\xd0\xba\x6a\x0a\x23\x1a\x0d\xc4\x58\x4b\xa8\x58\x85\x43\xc2\x78\xd4\x90\x02\x1b\x02\x11\xd2\x14\xb6\x31\x57\x32\x47\xad\x81\x69\xe0\x4c\x1b\x14\x16\x04\x49\xdb\x2c\x23\xe4\x82\xc5\x01\x09\x6a\x57\x89\x7f\x84\x1b\xc2\x0c\xd8\xd4\xc6\x6d\x9b\x8d\x1f\x99\xd1\x41\xaa\xad\x51\xb0\x33\x66\x9c\xc3\xe3\xef\xde\xcb\x81\x86\xb8\xfa\xfe\x99\x23\x81\xee\x0e\x5c\x9d\x5c\xbe\x0d\x94\x0a\x8d\x62\xa8\x0f\xba\xe1\xf9\xa6\xb0\xcd\xbe\x4d\x9c\xcf\x80\xca\x30\x08\x56\xc9\xb4\xd6\x2a\xd5\x05\x51\xe8\xbc\x6f\xa2\x6f\x98\xc9\x8b\x54\xe7\x8a\x55\xc6\xb9\x4e\x1c\x2e\x1f\x4c\xad\xdb\x97\x08\xad\xfb\x2b\xff\xe7\xa0\x6d\xe7\x86\x28\xe1\xd0\xc0\xe1\xea\xee\xe7\xf7\x6c\x25\x11\x64\x64\xcd\x70\xfe\x47\xdf\xef\xd8\x3e\xf4\xf6\x35\x24\x49\xd2\x81\xdd\x17\xdf\xf6\x5a\x92\x35\x47\xac\xa0\xb7\x0f\xdf\x3a\xd2\xd6\xcc\x77\xdf\x35\x5b\x85\x7f\x3b\x80\x1e\x7c\xff\xfd\x6c\x12\x2d\x84\x98\x53\x0e\x14\x92\xf1\xec\x79\xc8\xda\x36\x78\xf7\x0e\x3a\x8f\x6f\x83\xa0\xbb\x0e\xc4\x23\x03\x7b\x5d\xf8\xf3\xcf\x0d\x7b\x44\xa5\xa4\xfa\xa2\x1d\xda\x23\x62\x62\xb4\xb2\x33\x77\x74\xbd\x55\xb5\xa8\x14\x38\xf7\x25\x4e\x6a\x91\x17\x56\x52\x18\x1a\xd6\xc2\x15\x06\xf8\x50\x33\x03\xb7\x2d\x81\x0f\x3e\x4e\x59\x2d\xab\xd1\xf8\xca\x5d\xdb\xdb\xdc\x02\xfd\xd3\xd7\x2d\xdf\x7a\xb8\xc7\x28\x03\x71\x2c\xa4\xcb\xde\x81\x8c\x42\x1c\x87\xea\xc9\xe8\x81\x22\x82\xca\x72\xbe\xd1\x4b\xd4\x46\xb1\xdc\xb8\xd0\x10\x75\x39\x40\x05\x72\x08\x95\x29\x14\x12\xaa\x61\x41\x50\xae\xd0\x82\x02\x30\xd2\xd6\x8b\x3a\x47\xcb\x35\x13\x45\xfc\x35\x9f\x1c\xc2\x65\xbf\x6f\x03\xa9\xd6\xa8\x6d\xd4\x15\x52\x1b\x0d\x37\xcc\x14\xf6\x8c\xa6\x90\x4b\x85\x7a\xc6\xd6\x5c\x5b\x0d\xea\xd1\x27\xc6\x39\x69\xdf\x8d\xea\x42\xde\x5c\x0f\xea\x51\x92\x8f\xd8\xbf\x33\x7a\xd0\xdb\x7f\xda\xfb\xe9\xe9\x2f\x5f\xcb\xbb\xfb\xf4\x97\xa7\x51\xdb\x07\xff\x2e\xac\x27\xfd\xdd\xb9\x5f\x6f\x77\x9d\xfb\xf9\xfd\x5b\xeb\x3a\xbb\xba\x4c\x61\x73\xd0\x79\x85\xe2\x7a\xd2\x77\x86\x81\x04\x9c\x5b\x5e\x07\x2c\x2a\x62\x85\x13\xc2\x19\x25\x46\xaa\x38\x58\xf2\x60\xef\x1f\x96\x5a\xf8\x8e\x60\x26\xb1\xd7\xf8\xcf\xcc\x89\xbf\xca\x51\xe8\xa0\xc9\x87\x6b\x1c\xc5\xcb\x5d\x4c\x66\x21\x3b\xec\x3f\xf3\x41\xe3\xcc\x69\x3b\x8c\x75\x3d\x87\xbb\x09\x5b\x40\x72\xb3\x12\x32\x57\xd0\x8d\x36\x17\xcd\xa1\x7a\x01\x70\x56\x32\x33\x7b\x02\xc8\xab\xda\x82\x9f\x6e\x39\x1b\x29\xb1\x74\x45\x7d\xaf\xdb\x7d\xcb\x66\x79\xd8\x41\xd3\x65\xbe\xde\x1a\xb6\xde\x8c\x4d\xdb\x6e\x90\x99\xa9\xc3\x78\x1f\x4d\xc3\x5b\x29\x36\x61\x1c\x47\x48\x43\xab\x15\x96\xa8\xc5\xa1\xfe\x5d\xa3\xca\x42\x04\x7b\xd0\xf0\xd6\xba\xbf\x6e\x6a\x9b\x0b\x86\x0b\x8b\xb9\xc1\xe1\x8d\x52\xda\x42\xde\xb8\xbd\x37\x81\x0d\x8c\x78\x71\xc2\x9e\xec\xb9\xe0\xd3\xd6\x82\x8b\xb2\x6c\xc3\xb8\x6c\xba\x05\x79\xaa\x16\x71\x53\xf5\x17\x59\x9b\x7e\xf3\x2b\xd9\xf5\x74\x8d\xf6\xf3\xc1\x7b\x35\x77\x40\x69\xdb\xd2\xe1\x06\x77\x91\xc6\xce\xcc\x71\xa1\x97\x6c\xc7\x2e\x4e\x8f\x67\xcf\x95\x62\xd2\x1d\x1f\x27\x5a\x7b\x3c\x1b\x1c\xd9\x5f\x6d\x04\x9c\x14\x35\x27\x15\xd0\x88\x13\x13\xba\x22\x77\xdc\xeb\x4f\x6b\xed\x59\x6d\xe4\x5e\x67\xe0\xb5\xe6\xdd\x28\xa1\x31\xe9\x8a\x95\x37\x72\xb4\x20\xe8\x96\xa5\xd7\x98\x77\xcb\xa5\x90\x83\xb1\x9a\x8a\xbf\x1a\xc6\x76\x3a\xeb\x60\xac\x05\x95\xf0\xcf\x87\xb1\x5e\xec\xbf\x60\xec\xd7\xc0\x58\x7f\xaf\x6a\x50\x9b\x1d\xf8\x6c\x75\x20\x06\x62\xf8\xfd\xec\xf4\xbf\xe2\xa3\xf3\xb3\xb3\x93\xa3\xab\x6c\x21\xe3\xcc\xcc\x9a\xce\x55\x77\xf7\x5d\xf0\x4f\x42\xb8\x2b\x26\x3a\x3a\x3b\x5d\xb0\xcd\xff\x37\xc0\xbb\x75\xc3\x5f\x85\x7f\x5b\x3e\xe8\xf0\xa0\x2d\xde\x3e\x6d\x00\x95\xa8\xc5\x8e\x73\x2b\x6d\x60\xba\xea\x6f\x96\xe0\x8b\x9d\xe8\xdd\x3b\xf8\xc6\xbd\x9c\xbe\xf7\x4e\x7a\xa3\xa5\x66\xce\x71\xe4\xf2\x0e\x0c\x99\xa0\x5e\x4b\x6b\x99\x65\x39\xff\x67\x3d\xe1\x4c\x6e\xdb\xd4\x3f\xd6\xed\x5c\x91\x31\x82\xb4\xa9\x24\x24\xcc\x59\xbb\xa3\x1b\xd7\x72\x2f\x2a\xc3\xe9\x96\x10\x5f\x86\x23\xcb\x05\x4b\x05\x9a\x84\xa6\x3f\x77\xdb\x1f\x5c\x78\x31\xcd\x85\x2b\x38\x14\xe6\xb9\x64\x65\x1c\x97\x4d\x88\x3f\x40\x6a\x2b\xd3\xc2\x58\xb4\x00\xd0\x1b\xd7\x98\xbf\x41\x0d\x5f\x95\x38\xd7\x5c\xb1\x99\x4b\xab\x12\x08\xe7\xf8\xb1\x92\x6a\x7e\x78\x1e\x5a\x6e\x91\x35\x47\xd2\x51\x63\x39\xcc\xe7\xe5\x20\x40\xe6\xc6\x3c\x71\xb0\xfe\xc1\xfd\x7e\x1b\xb7\x6e\xc3\x57\xc9\x17\xdf\x52\x42\x1c\x73\x39\xe2\x38\x41\x7e\xf0\xf8\x76\xf1\x85\x73\x16\xef\x7a\xf4\x8c\x62\xd2\x14\x1e\x5f\xc4\xce\x2f\x4e\xce\xfa\xbf\x9e\xbe\xba\xba\x3e\x3e\xeb\x5f\x1f\x9f\xbf\x3d\x3c\x3d\x0b\x9b\x98\x10\x5e\xe3\xf2\xcb\x10\xf8\x3a\xbc\xde\x94\x60\x6b\xd7\x19\xca\x9d\x55\xc6\x0b\xa9\x8c\x45\xd4\xbb\xfb\x4f\xc2\xda\x0e\xab\xac\x8c\x06\x3c\x82\x84\x9b\xe2\xd3\x7a\xdc\xff\xbf\x11\xc1\x2f\x9f\xdb\x26\xf0\xfa\x25\x58\x78\x9b\x1f\x2e\x62\xbf\x80\xdc\xda\x31\x78\xdf\x02\xa1\xf2\xae\x8a\x9b\x10\x15\x37\x13\xeb\xdb\x03\x3a\xa8\xf5\x9a\x0d\x06\xc6\xd8\x4e\x7f\xa1\x16\x0b\xcd\xe8\x66\xc9\x4d\xdb\xf1\x05\x82\x5b\x5f\xb5\x6c\x96\x3b\x27\xfa\x1a\xbd\xe7\x70\x70\xb3\xe2\x2b\x64\x8b\xe2\x96\x93\xdc\xaa\x24\x59\x99\xd8\xc2\xa2\x66\x72\xd5\x5b\x66\x99\x76\x95\x19\x4d\xee\x98\x05\x1a\xba\x61\x33\xb6\xa7\x09\x12\x6c\x02\xd3\x0f\xd9\x19\x67\x83\x46\xac\xe3\x59\xd9\xe6\x5f\xdf\x9a\x2d\x85\xe1\xfa\x0e\xe7\x3e\x01\x9b\xe3\x6e\x5b\xd4\xfd\x0f\xb5\x8b\xed\x38\x5d\x1b\xa5\xf7\x71\xa6\xb3\x78\xdc\x1c\xab\xf7\xca\xd8\xd2\x35\x2e\x06\xe7\xbd\x92\x96\x62\xed\xbe\x68\x7c\x90\x66\x8b\x7e\xfa\x80\xf8\xdb\x28\x75\x39\x06\x37\x46\xe0\x56\x07\x5a\x0c\xc5\xcd\x81\xb8\x75\x73\x0f\x88\xc8\x2f\x8b\x47\xd7\xcb\x3f\x02\x21\x0d\x66\xb0\xee\x3b\x33\xc8\x15\xd1\x05\x70\x29\x2b\x1d\x60\xbb\x7f\x8f\x68\xbb\x8a\xba\x8a\xe6\xdf\x3d\xfa\x97\xe0\x6b\x85\xcc\x3e\x83\x5c\xfe\x4a\x72\x1b\xb1\xff\xfa\x91\x32\x4d\x06\xdc\xe2\x57\xa5\xa7\x9a\xcb\x11\x68\x26\x72\x84\x1b\xf4\x57\xf7\x08\x38\x41\x35\x35\x85\x25\x31\x85\x92\xf5\xa8\x80\xe6\x4b\xcd\xd6\x7a\x5e\x0e\x36\x52\xd6\x6a\x24\xab\x95\xe9\xe8\x11\x97\x84\x3a\x30\x6b\x6a\x81\xd4\xf6\x54\xee\x83\xcc\x9b\x82\xe5\x85\xb5\x81\x42\xdb\xd8\xa3\xa0\xe8\xc9\xac\xe5\xe1\xbd\x64\x42\xfb\x8e\xdb\xa3\xa8\xfb\xbf\x4b\x75\xe2\x63\x42\xcb\xd9\x12\xad\xaf\x94\xfc\x87\x05\x71\xc5\x89\x40\xff\xdd\x29\xd7\x78\x1f\x97\xcb\x41\xad\x8f\x54\xff\x3b\x00\x00\xff\xff\xed\x3f\x72\x3b\x83\x2d\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"etc/etcd/ca.crt":                                  etcEtcdCaCrt,
	"etc/etcd/etcd.conf":                               etcEtcdEtcdConf,
	"etc/etcd/peer.crt":                                etcEtcdPeerCrt,
	"etc/etcd/peer.key":                                etcEtcdPeerKey,
	"etc/etcd/server.crt":                              etcEtcdServerCrt,
	"etc/etcd/server.key":                              etcEtcdServerKey,
	"etc/origin/master/admin.kubeconfig":               etcOriginMasterAdminKubeconfig,
	"etc/origin/master/aggregator-front-proxy.crt":     etcOriginMasterAggregatorFrontProxyCrt,
	"etc/origin/master/aggregator-front-proxy.key":     etcOriginMasterAggregatorFrontProxyKey,
	"etc/origin/master/ca-bundle.crt":                  etcOriginMasterCaBundleCrt,
	"etc/origin/master/ca.crt":                         etcOriginMasterCaCrt,
	"etc/origin/master/ca.key":                         etcOriginMasterCaKey,
	"etc/origin/master/front-proxy-ca.crt":             etcOriginMasterFrontProxyCaCrt,
	"etc/origin/master/master-config.yaml":             etcOriginMasterMasterConfigYaml,
	"etc/origin/master/master.etcd-ca.crt":             etcOriginMasterMasterEtcdCaCrt,
	"etc/origin/master/master.etcd-client.crt":         etcOriginMasterMasterEtcdClientCrt,
	"etc/origin/master/master.etcd-client.key":         etcOriginMasterMasterEtcdClientKey,
	"etc/origin/master/master.kubelet-client.crt":      etcOriginMasterMasterKubeletClientCrt,
	"etc/origin/master/master.kubelet-client.key":      etcOriginMasterMasterKubeletClientKey,
	"etc/origin/master/master.proxy-client.crt":        etcOriginMasterMasterProxyClientCrt,
	"etc/origin/master/master.proxy-client.key":        etcOriginMasterMasterProxyClientKey,
	"etc/origin/master/master.server.crt":              etcOriginMasterMasterServerCrt,
	"etc/origin/master/master.server.key":              etcOriginMasterMasterServerKey,
	"etc/origin/master/named/console.crt":              etcOriginMasterNamedConsoleCrt,
	"etc/origin/master/named/console.key":              etcOriginMasterNamedConsoleKey,
	"etc/origin/master/openshift-master.kubeconfig":    etcOriginMasterOpenshiftMasterKubeconfig,
	"etc/origin/master/scheduler.json":                 etcOriginMasterSchedulerJson,
	"etc/origin/master/service-signer.crt":             etcOriginMasterServiceSignerCrt,
	"etc/origin/master/service-signer.key":             etcOriginMasterServiceSignerKey,
	"etc/origin/master/serviceaccounts.private.key":    etcOriginMasterServiceaccountsPrivateKey,
	"etc/origin/master/serviceaccounts.public.key":     etcOriginMasterServiceaccountsPublicKey,
	"etc/origin/master/session-secrets.yaml":           etcOriginMasterSessionSecretsYaml,
	"etc/origin/node/ca.crt":                           etcOriginNodeCaCrt,
	"etc/origin/node/client-ca.crt":                    etcOriginNodeClientCaCrt,
	"etc/origin/node/node-config.yaml":                 etcOriginNodeNodeConfigYaml,
	"etc/origin/node/node.kubeconfig":                  etcOriginNodeNodeKubeconfig,
	"etc/origin/node/pods/apiserver.yaml":              etcOriginNodePodsApiserverYaml,
	"etc/origin/node/pods/controllers.yaml":            etcOriginNodePodsControllersYaml,
	"etc/origin/node/pods/etcd.yaml":                   etcOriginNodePodsEtcdYaml,
	"etc/origin/node/pods/ovs.yaml":                    etcOriginNodePodsOvsYaml,
	"etc/origin/node/pods/sdn.yaml":                    etcOriginNodePodsSdnYaml,
	"etc/origin/node/pods/sync.yaml":                   etcOriginNodePodsSyncYaml,
	"etc/origin/node/sdn.kubeconfig":                   etcOriginNodeSdnKubeconfig,
	"etc/pki/ca-trust/source/anchors/openshift-ca.crt": etcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master-startup.sh":                                masterStartupSh,
	"node-startup.sh":                                  nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"etc": {nil, map[string]*bintree{
		"etcd": {nil, map[string]*bintree{
			"ca.crt":     {etcEtcdCaCrt, map[string]*bintree{}},
			"etcd.conf":  {etcEtcdEtcdConf, map[string]*bintree{}},
			"peer.crt":   {etcEtcdPeerCrt, map[string]*bintree{}},
			"peer.key":   {etcEtcdPeerKey, map[string]*bintree{}},
			"server.crt": {etcEtcdServerCrt, map[string]*bintree{}},
			"server.key": {etcEtcdServerKey, map[string]*bintree{}},
		}},
		"origin": {nil, map[string]*bintree{
			"master": {nil, map[string]*bintree{
				"admin.kubeconfig":           {etcOriginMasterAdminKubeconfig, map[string]*bintree{}},
				"aggregator-front-proxy.crt": {etcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
				"aggregator-front-proxy.key": {etcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
				"ca-bundle.crt":              {etcOriginMasterCaBundleCrt, map[string]*bintree{}},
				"ca.crt":                     {etcOriginMasterCaCrt, map[string]*bintree{}},
				"ca.key":                     {etcOriginMasterCaKey, map[string]*bintree{}},
				"front-proxy-ca.crt":         {etcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
				"master-config.yaml":         {etcOriginMasterMasterConfigYaml, map[string]*bintree{}},
				"master.etcd-ca.crt":         {etcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
				"master.etcd-client.crt":     {etcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
				"master.etcd-client.key":     {etcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
				"master.kubelet-client.crt":  {etcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
				"master.kubelet-client.key":  {etcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
				"master.proxy-client.crt":    {etcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
				"master.proxy-client.key":    {etcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
				"master.server.crt":          {etcOriginMasterMasterServerCrt, map[string]*bintree{}},
				"master.server.key":          {etcOriginMasterMasterServerKey, map[string]*bintree{}},
				"named": {nil, map[string]*bintree{
					"console.crt": {etcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
					"console.key": {etcOriginMasterNamedConsoleKey, map[string]*bintree{}},
				}},
				"openshift-master.kubeconfig": {etcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
				"scheduler.json":              {etcOriginMasterSchedulerJson, map[string]*bintree{}},
				"service-signer.crt":          {etcOriginMasterServiceSignerCrt, map[string]*bintree{}},
				"service-signer.key":          {etcOriginMasterServiceSignerKey, map[string]*bintree{}},
				"serviceaccounts.private.key": {etcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
				"serviceaccounts.public.key":  {etcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
				"session-secrets.yaml":        {etcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
			}},
			"node": {nil, map[string]*bintree{
				"ca.crt":           {etcOriginNodeCaCrt, map[string]*bintree{}},
				"client-ca.crt":    {etcOriginNodeClientCaCrt, map[string]*bintree{}},
				"node-config.yaml": {etcOriginNodeNodeConfigYaml, map[string]*bintree{}},
				"node.kubeconfig":  {etcOriginNodeNodeKubeconfig, map[string]*bintree{}},
				"pods": {nil, map[string]*bintree{
					"apiserver.yaml":   {etcOriginNodePodsApiserverYaml, map[string]*bintree{}},
					"controllers.yaml": {etcOriginNodePodsControllersYaml, map[string]*bintree{}},
					"etcd.yaml":        {etcOriginNodePodsEtcdYaml, map[string]*bintree{}},
					"ovs.yaml":         {etcOriginNodePodsOvsYaml, map[string]*bintree{}},
					"sdn.yaml":         {etcOriginNodePodsSdnYaml, map[string]*bintree{}},
					"sync.yaml":        {etcOriginNodePodsSyncYaml, map[string]*bintree{}},
				}},
				"sdn.kubeconfig": {etcOriginNodeSdnKubeconfig, map[string]*bintree{}},
			}},
		}},
		"pki": {nil, map[string]*bintree{
			"ca-trust": {nil, map[string]*bintree{
				"source": {nil, map[string]*bintree{
					"anchors": {nil, map[string]*bintree{
						"openshift-ca.crt": {etcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
