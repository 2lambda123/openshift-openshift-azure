// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x5b\x53\xdb\x3a\xfa\xbd\xbf\xc2\xe3\xdd\x19\xda\x33\xe4\x06\x69\xb7\xc3\x1b\x85\xd3\x6d\xa6\x87\x36\x83\xdb\xb3\x0f\x67\x98\x1e\x45\xfe\x9c\x68\xb1\x25\xaf\x24\x87\xa6\x4c\xfe\xfb\x8e\xe4\x0b\x89\x2d\x5f\x42\x0c\x84\x36\xee\x03\xd4\xd6\xf7\x49\xdf\xfd\x26\x6e\x5f\x58\x96\x65\xd9\xff\x14\x78\x06\x01\xb2\x4f\x2c\x7b\x26\x65\x28\x4e\x7a\xbd\xf8\x4d\x37\x40\x14\x4d\x21\x00\x2a\xbb\xe8\x47\xc4\xa1\x8b\x59\x90\x7c\x13\xbd\xa3\xfe\xe0\x75\xa7\x3f\xe8\xf4\x07\x3d\x17\x42\x9f\x2d\xd4\xba\x2f\x10\x84\x3e\x92\xd0\xfd\xaf\x60\xf4\x1f\xf6\x61\xbc\x03\x66\x54\x02\x95\x7f\x02\x17\x84\x51\xb5\xd1\xa0\xdb\x57\xff\xd2\x05\x21\xe2\x28\x00\x09\x5c\xd8\x27\xd6\xed\x32\x79\x3b\x47\x9c\xa0\x89\x0f\x6b\x2f\x39\x08\x16\x71\xac\x5f\xfe\xa5\x5f\xa9\xe7\x36\xfb\x4d\x2f\x92\x8b\x10\xd4\x36\x17\x04\x73\x26\x98\x27\xbb\x9f\x40\xde\x30\x7e\xdd\xa3\xf1\x4f\x07\x70\xc4\x89\x5c\xfc\x9b\xb3\x28\x14\xc9\x31\x32\x70\x14\x92\x95\xb3\x1e\xf5\x07\x6f\x3a\xfd\xe3\xce\x71\x3f\xbf\xce\x67\x18\xc9\x64\xd5\xed\xad\xd5\xbd\x40\x94\x78\x20\x64\xf7\x8f\xe4\x83\xb5\x5c\xe6\x61\x28\x0a\xf4\xd1\xa8\x98\x76\x30\x0b\xc2\x48\x42\x7e\x49\xc8\x59\x08\x5c\x92\x98\xf0\xb5\x6f\xfa\xbb\x48\x0e\x7f\x19\xf9\x39\x36\xac\x3e\x45\xc0\xc2\x19\x90\xef\xb3\x9b\x6f\x42\xcc\x72\x27\xd8\xe4\x34\xeb\x8c\xc3\x18\x84\x5a\x67\x9f\x2a\xd4\x15\x68\xf5\x72\x17\x04\xe6\x24\x4c\x59\xa8\x61\x2c\xc7\xf9\x60\x49\x8e\x3c\x8f\xe0\x06\xf0\x92\x50\xcd\xe9\x53\xd7\xe5\x20\xc4\x98\x83\x47\xbe\x2b\x64\xbf\x6d\x00\x3c\x66\x5c\x5e\x22\x3a\xd5\x4c\x39\x3a\xea\x1c\x1d\xd5\x02\x13\x0e\x38\x3d\xf7\x88\x4e\x58\x44\xdd\x3a\x98\x90\x13\xa6\xc4\x66\x9f\x58\x83\xfe\xa0\x76\x31\x93\x0c\x33\x5f\xe1\xff\x82\xc3\x3a\xdc\xb1\x4d\x6c\xce\x84\x18\x6e\x8d\xfe\xdf\xec\x52\x90\xa5\xf1\x4b\xf1\xed\xd5\x0b\xf3\xf7\xe5\xe1\x33\x37\x58\x42\x3d\x8e\xf6\xe6\xba\x37\xd7\xe2\xe2\xe7\x63\xae\xe6\x3d\x1a\xeb\x9f\xca\x11\x76\x49\x01\xd5\x79\x9e\x54\x03\xdf\xe6\xdd\x4c\x11\x72\x5b\xf5\x3b\xda\xab\xdf\xaa\xfa\xe5\xfd\xff\xda\xf2\xa7\xd0\x3f\xf1\xa4\x0a\x38\x1c\x1e\x3f\xb8\x06\x1e\xff\x44\x1a\xf8\xa0\xf9\xca\x9c\x70\x19\x21\x3f\xf9\xef\x93\x64\x2a\x73\x0a\x72\xd3\x24\x05\xc5\xa2\x70\x42\x84\xa1\xd4\x6e\xd2\x55\xb1\xc0\x2a\x92\x19\xbd\x78\xd0\x8f\x8b\xbc\xde\x5b\xb3\x84\xae\x0a\x6f\x0d\xbe\xc1\x16\xd1\x84\x82\xdc\x2a\x6f\x8a\x51\xb4\xe6\x33\xf2\x4a\x9b\xd1\x79\x34\xdc\x2d\x55\x0c\xa3\x89\x4f\xf0\x68\x9c\x98\x19\xd4\x2b\xe3\xbf\x3a\xfd\xb7\x9d\xfe\xa0\x4d\x65\x24\x61\x87\xb3\x48\x02\xdf\x54\x23\xb3\xd3\xfb\xe9\xf6\x17\x20\x67\xcc\x55\x48\x1d\x89\x24\xc1\xeb\xdc\xce\x29\x8f\x2d\xae\x23\x33\xe2\xf4\x64\xef\x90\x28\xe0\xd8\x8a\xdf\x3e\x43\xee\x3b\xe4\x23\x8a\x81\x37\xe1\xf5\xa0\x6f\xe0\xb5\x0b\x21\x50\x57\x7c\xa6\x46\x8d\xb7\xff\x4a\xfb\x1f\x23\xf7\xe5\x41\x03\x91\x1f\x1c\x5a\x07\x99\x08\x0e\x5e\x5d\xad\xd3\x7b\xd5\xa2\xa0\xfd\xc9\x3d\x05\x3d\x41\xf8\x1a\xa8\x9b\x06\x03\xc6\xfc\xad\xac\x3d\x41\x67\x36\x45\x83\xc1\x19\x7c\x8e\xc7\x75\xc3\xca\x1d\x8d\xcf\x18\xf5\xc8\x34\xe2\x9a\xf8\xad\x8e\x95\xe2\x6c\xcb\x0d\x85\x9c\xcc\x91\x04\xb3\x7d\x9c\x2f\x28\x0a\xea\xb3\x91\x9c\xb6\xd4\x6e\xaa\x81\x88\xde\xa1\x5d\x3d\xcc\x3f\x66\x6f\x59\xfe\xa5\x99\x58\x49\x9c\xf7\x7c\x42\x32\x53\xb2\xea\x65\x59\xc5\x6e\x5a\x76\x67\xed\x84\x4e\xb7\xae\xed\x43\xc6\x65\xa7\xb2\x92\xd8\x48\x3b\x8a\x36\xb5\x91\x70\x31\xa3\x18\xc9\x97\xd5\x32\x5e\x73\x77\x4a\xbe\x99\x07\x38\x78\x75\x68\x1d\xf4\x0c\x76\x9d\xbe\xab\x57\x80\x1a\xcd\x4d\xf0\xa8\x44\xd0\x3e\xb1\xde\xf6\x6b\x96\x03\x45\x13\x1f\xde\xfb\x0c\x49\x42\xa7\xa3\xb1\x7d\x62\x79\xc8\x17\x50\x03\x56\xe2\x07\x1e\x9f\x95\x65\x0e\x29\xfb\xb0\x35\x43\x53\x44\x4d\x39\x4a\x5c\x1f\xbe\x90\x00\x58\x24\x47\xf4\x82\xd0\x48\x6a\xb5\x1c\xd6\x80\x29\x42\xcf\x89\x90\x9c\x4c\xa2\x34\xd0\x9c\x83\x87\x22\xbf\x2a\x3f\xb3\x12\xf5\x9f\x94\xa7\xa6\xb9\xc3\xb5\xc7\x7a\xbd\xad\xe8\x25\xf6\xb9\x35\x9f\xf3\x75\xd2\xa3\x55\xcf\x9a\x80\xea\x4a\x71\xef\x61\x8a\xf4\x25\xf6\x30\x1c\xd6\x15\xc0\x7b\x17\xb3\xa1\x8b\xa9\x67\xe9\x2f\xe9\x63\x86\xc3\xe3\x27\x77\x32\x8d\xb2\x29\x16\xc9\x46\x79\x52\x4c\xdc\x0e\xe5\x46\x84\x4a\xe0\x73\xe4\x8f\xa8\x03\x98\x51\x57\x81\xbc\xae\xe1\x28\x8d\x82\x09\xf0\xcf\xde\x38\x25\xa6\xb6\x23\xdb\x30\x8e\xfe\x34\xf1\xe0\x31\xb9\x5a\xef\x3a\xda\xb7\x80\x1d\xe9\x35\x38\x92\x71\x34\x85\x9e\x88\x7f\x9e\x62\xcc\x22\x2a\xeb\xbb\x0d\xaf\x3b\xfd\x37\x9d\xc1\xeb\x36\x3b\x3b\x6a\x7d\x1c\x2b\xba\x97\x30\x55\x0e\x77\xe1\xac\x9d\xca\x00\x5b\xdb\x86\x8c\x21\xbf\x24\x74\x3b\x12\x51\x17\x71\xf7\xdb\x1f\x97\x4e\x1b\xdc\x3b\x8b\x2f\x5c\xf4\xd0\x1c\x11\x1f\x4d\x88\x4f\xe4\xc2\x81\x06\xec\x7b\xd3\xe9\x0f\x3b\xc7\xfd\x4e\xc8\x61\x4e\x20\x3f\x28\xd8\x8a\x8d\x48\xdc\xf7\x1e\x48\x7c\x3d\x47\xc5\x21\xc9\x23\x43\xa2\x61\x87\x3e\x92\x1e\xe3\xc1\x7b\x15\xfb\xce\x59\x80\x08\x3d\x53\xec\x35\x5b\x5a\xb6\xfc\x6b\xe8\x22\x09\xeb\xeb\x8f\x77\xb1\x2f\x89\x59\xb8\x30\xb3\x06\x27\xc7\x5e\x13\x46\x22\xfd\xb3\x44\x37\x0d\x1c\xc8\x7a\x59\x8c\x85\xd5\xdd\xc5\x6d\x24\x9e\x26\x0d\x07\x24\x4c\x45\xdf\x39\x38\xb4\x14\x35\x23\xea\xc2\xf7\x97\xaf\x5e\x5d\xb5\xd9\x2d\x4d\xbb\x41\x3b\xe2\xc2\x72\x37\x3b\x46\x2a\x70\x78\x08\x37\x50\x83\x92\x59\xc9\x13\xaa\xc1\x76\xdd\xda\xdc\xac\x48\x65\x86\x73\x0a\xf2\xa0\x20\xfe\x26\xc8\x8c\x17\x65\x14\xca\x95\x9b\x66\xf7\xc3\x6c\x6a\xe6\xd5\xab\xf0\x43\xf6\x9a\x33\x0b\xa2\x04\xb7\x66\x42\x71\x05\x77\x8a\x31\xf8\xc0\x91\x04\x37\xa1\x9f\xd0\xa9\x6e\xe0\xaa\x6a\xce\xc4\xbd\x18\x6e\x34\x7e\xcf\xf8\x0d\xe2\x6e\xbc\xbc\xc4\x23\x93\xb0\xbd\x8e\x32\x09\xb1\xc6\xd5\x62\x47\x39\x40\x7c\x51\x7a\xf8\xfc\xe2\xad\xdb\xcf\xc9\x5c\xae\xf5\x72\xab\xd4\xac\x54\xad\x95\xcc\x13\x93\x9f\xdb\x97\x5a\xb1\x6d\x84\x0f\xd6\x42\x0f\xb7\xb3\xba\x02\x3d\x0f\x52\x0b\x9a\x7c\x4f\xf9\x14\xb9\x11\xf9\x4d\xdd\x59\x61\x8b\x65\x8b\x79\x62\xa2\x49\x17\x08\xcf\x08\x6d\x16\xa0\xaa\xd2\xc4\x67\x1b\xa8\x0a\xa1\x7a\x45\x17\x2b\x5c\xf0\x46\xd1\xa6\x2c\x37\x57\x32\xbf\xcb\x91\x1f\x74\x84\x99\x85\x95\x79\x50\x15\x55\x6e\x6f\x2d\xe2\x59\xf0\xbf\xac\xfc\x19\x05\x68\x0a\x97\x09\x55\x9f\x50\x00\x96\x6d\x5b\xcb\x65\x2e\xfc\xf8\xc8\xdc\xd6\x33\x15\x54\x1a\xa3\xf3\xf1\x6b\xf1\xb0\x56\xe6\x75\xc4\x0c\xb8\x09\x6c\x9c\x7e\x2c\x03\xe6\xcc\x8d\xb0\x34\x81\x7e\xf6\xbc\x18\x2c\xaf\x4b\xb7\xb7\x16\x50\xb7\x48\x53\x5d\x39\xb7\x2e\xcb\x7b\xba\x84\x7b\x6a\x86\x55\x72\xa3\x64\x86\xb8\x7b\x83\x38\x8c\x39\xf3\x88\x5f\x71\xdb\x65\x1e\x38\xe4\x07\x14\x14\xe9\xcf\x0b\xf5\xba\xc0\xa5\xb2\xed\x12\xdb\xa9\xdd\xad\x98\x0e\x57\xdd\xae\xa9\xeb\xc6\x6c\xe0\x62\xef\x61\xd5\x1b\x06\x91\x66\x37\x7d\x98\xa8\xe5\x11\x72\x03\x42\xbf\x0a\xe0\xa9\xc9\x60\x9f\x45\x6e\x27\x12\x85\x5b\x07\x19\x48\x42\x04\xdf\xd0\xc6\x8d\xb8\x7c\x42\xa3\xef\xcd\xfb\xf4\xb6\x4b\x84\x4a\x0d\xc7\x48\x88\x1b\xc6\xdd\xd3\x48\xce\x80\x4a\x92\x39\xa8\xea\x3c\xcb\x16\x62\xd6\x20\x6b\xd3\x69\xc2\x47\x58\x54\xeb\x4b\xfa\xd4\x67\x27\x1a\xeb\x35\x2c\xce\x91\x44\x89\xee\x3b\xce\x87\x71\xba\xcd\xa9\x70\x24\x27\x74\x9a\x39\x0e\xc7\xf9\xf0\x11\x16\xdd\x6c\x81\xd9\xeb\x98\xcf\x8e\xa4\xa2\xd0\xee\xcd\x58\x00\xbd\x3b\x59\xf6\xba\x42\xcc\x7a\x28\x92\x33\xc6\xc9\x0f\x70\xbf\x5d\x2b\xf2\x6a\x71\x96\xe7\x36\x96\x51\x09\xab\xe1\x8a\x6f\x8d\xd7\xd3\xe2\x8e\x57\xad\xe6\x92\x38\x44\x78\xc0\x81\x26\x37\xec\xee\x15\x46\xd6\x90\x32\xe5\xae\x2b\xfd\x78\x55\x69\xb0\x45\x0c\xb9\x23\x5f\x77\x0d\x9a\x47\xae\x0c\x70\x7e\x97\x37\xe5\x81\x93\x94\x4a\x3b\x58\x15\x77\x7c\x01\x95\x5c\x30\xf8\xba\x3c\xca\x94\xa9\x3a\x8b\xb4\x96\x4b\x15\x39\x8a\xf1\x45\xcb\x48\x47\x95\x32\x78\x2d\x94\xe5\x52\x87\x1a\x73\x48\x4c\x9f\x92\xba\xc1\x66\xe2\x9c\x88\xeb\x6a\xb7\x81\x75\xba\xa9\x8b\xce\x4b\x40\xee\x7f\x38\x29\xf4\x06\xd7\xd7\x73\x40\x12\x3e\x67\xf7\x92\xdf\x73\x16\xe8\x63\x37\xbd\x03\xf5\x80\x29\x73\x0f\xbe\x4b\xa0\x42\xd7\xba\xbf\x4a\x7b\xa7\x84\x15\x2b\xd1\xb5\x3c\xf6\x3c\x6d\x7a\xab\x0a\x64\x2c\x0c\x6d\xa2\xfa\x4c\x2f\x92\xec\x6b\x38\xe5\xc8\x85\x0b\x42\x19\xbf\x93\x6c\x59\x6f\x9a\x33\x09\x58\x82\xeb\x80\x94\x84\x4e\xcb\x4b\x67\x3b\xbe\x74\x9f\x50\xfc\x0e\x09\x78\x33\xfc\x9d\x62\xe6\x82\xf5\xd2\x91\x88\xcb\x28\xb4\xfe\x4e\xe8\xf9\xfb\x55\xe3\xbc\x6c\xcd\xff\xdd\x09\xef\x54\xff\xa1\xeb\xef\x65\x5a\x1b\x1f\x68\xe5\xc8\x26\xd4\xa9\x75\x9c\x45\x42\xb2\xc0\x89\x8f\x5f\xb2\xee\x03\xa2\xae\x0f\x7c\xd5\x12\xba\xfd\x9f\x78\xd6\x71\xaf\x3f\xa1\xdb\x4f\x3a\x36\xf3\x81\x23\xc5\xe4\x9d\x9a\x73\x68\xb1\xef\xa7\x1c\x8f\x37\xe5\x68\x4f\x05\x9e\xcb\x8c\x43\xab\xd8\xfd\xf0\x56\x5d\xd0\x79\x80\x89\x89\xd1\x18\x1e\x6d\x5e\xd2\x8e\x29\xfe\xea\xd3\x92\x55\x95\x79\xb7\xc1\x5f\x30\x34\x3b\xf6\xda\x56\xbb\x72\x65\xd2\xaa\xaf\xb1\xeb\xa7\x46\xfb\x11\x53\xfe\xd9\xd9\x11\x53\x23\x37\x55\xa0\x66\xeb\x36\xcb\x2e\x0c\x98\xb2\x58\xf2\x98\xb5\xf2\x23\x8f\x97\x76\x25\x43\xa8\x6b\x43\x97\xa9\x61\x6b\xa3\x25\xb3\xb0\x1f\xaa\xf2\x2e\x0d\xbf\xfb\xb1\xd2\x0a\xaa\xa7\x1f\x2b\x55\xb8\x80\xfd\x50\xa9\x7d\x6b\xde\x30\x6c\xec\xea\x48\xa9\x51\x72\x9d\x61\xda\x0f\x94\xf6\x03\xa5\x1c\x09\x5b\x0c\x94\xca\x8e\xb3\x1f\x34\xed\x07\x4d\xc6\x35\xfb\x41\xd3\x3a\x79\xcf\x2b\x7f\x6e\x34\x66\x7a\xba\x56\x53\xc9\xe6\xcf\x77\xc4\xa4\xa9\xf9\xd9\x07\x4c\xfa\xb7\x44\x1f\x6c\x16\xc9\x30\x92\xf1\x29\x5e\x2c\x5f\xfc\x3f\x00\x00\xff\xff\x44\x2a\xaa\x98\x30\x56\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x7f\x4f\xe3\x46\x10\xfd\x7f\x3f\xc5\x34\x54\x4d\x7b\xaa\xbd\x70\x3d\xa1\x96\xe3\x4e\x82\x10\x10\xe2\x47\x10\xa4\x27\x9d\xaa\x0a\xad\x77\xc7\x78\x15\x7b\xd7\xcc\x8e\x23\xd2\x5c\xbe\x7b\x65\x3b\x84\x24\xa4\xc0\xf5\xbf\x64\xf6\xcd\xbc\xb7\x33\xde\x37\x5b\x3f\xc8\xc4\x3a\x99\xa8\x90\x41\x84\x0f\x42\x6c\xc1\x70\x70\x34\xd8\x03\x89\xac\xa5\x71\xa1\x50\xe1\x3e\x36\xd2\x93\xbd\xb3\x2e\xaa\xca\xc0\x84\xaa\x88\x8c\x0b\xb1\xf6\x2e\x05\x1b\x40\x57\x44\xe8\x38\x9f\x40\xa6\xc8\x68\x6f\xd0\x7c\x04\xcb\x62\x0b\x4a\xf2\x89\x4a\xf2\x09\x84\xcc\x57\xb9\x71\x5d\x86\x04\x85\xb8\xe9\x5f\x7f\x39\xed\xf5\x6f\x87\x5f\xaf\xfa\x9f\xda\xca\xc2\xa6\xf0\x17\x44\x29\x74\x1a\xe2\x30\x09\x75\x75\x7b\x27\x15\xfb\xc2\xea\xc8\x97\xe8\x42\x66\x53\x8e\x9c\x37\xd8\x81\xbf\x3f\x02\x67\xe8\x04\x00\xc0\x4a\xb9\x75\xbc\x48\xad\x10\x61\x12\x18\x0b\xcd\x39\x04\xf6\x25\x18\xaf\x47\x48\x71\x40\x1a\x5b\x8d\xa2\x2a\x7c\xe5\x18\x64\xe1\x58\x12\x06\x5f\x91\x46\xf8\xf6\x0d\x98\x2a\x14\xc5\x28\x0d\xf1\x43\x1a\x6a\x6d\xd2\xe0\x58\x06\x93\xec\x08\xd4\x99\x87\xee\xe2\x3f\x80\x1c\x2b\x92\xb9\x4d\x64\x5b\x1b\xa0\x4e\x81\x3b\x2a\xef\x2b\xcf\x0a\x60\x1b\xb6\xbb\xf0\xf9\x73\x73\xb9\x34\xb0\x4a\xc4\x9c\x74\x35\x4f\x10\x06\xf6\x84\xda\x3b\x88\xae\x9f\x9d\x2e\xdf\x43\x11\xaf\x5f\x44\x4c\xa7\x36\x05\xbc\x87\xb8\xff\xc0\xa4\xe2\x6b\x9f\x23\x74\xac\x4b\x49\x75\x66\xb3\x56\x74\xe7\x70\x30\x18\xde\x0c\xaf\x0f\xae\x6e\x7b\x83\xcb\xe3\xd3\x93\xdb\xcb\x83\x8b\xfe\xa7\xba\xab\x51\xdb\xf2\xa8\x4d\x78\x54\xfb\x34\x8a\x1f\xa7\xcb\x9d\x9e\x35\x93\x10\xd3\x29\xe6\x01\xbf\xa3\xba\xf6\x45\x59\x31\x7e\x47\x7d\x67\x66\x33\x21\x02\x1a\x88\x2c\x44\x08\x9d\xb0\x75\xd4\x3f\xfc\xf3\xe4\xf6\x7c\x70\x72\xde\xff\xd2\x3f\xff\xf4\x7e\x3d\xf0\x61\xab\x03\x6f\xa9\x2e\xa8\x80\x88\xd2\x16\x8b\xac\x8d\x7c\xd7\xfe\x6e\xbf\x4a\x59\xa8\xc0\x48\xf2\x9d\x10\x89\x0a\xb8\xfb\x01\x22\x03\xfb\xfb\xfb\x30\x9d\xc2\x61\x13\xe8\xbb\xfa\x7b\x87\x9f\xbf\xaa\x22\xbf\x50\x14\x32\x95\x43\xdc\x6b\x18\xe3\x4b\x6f\xf0\xd0\x7b\x0e\x4c\xaa\x3c\xab\x12\x6c\x95\xfc\x02\xb3\x19\x7c\x5e\x66\xa9\xa5\xc8\xe4\x11\x19\x8f\x16\xd0\xd7\x58\x7b\x48\x7c\x10\x0e\x27\x8c\x61\x33\x6b\x0d\xf8\x0f\xbe\x66\x26\x0b\xd2\x12\x29\xd6\xc4\xaf\x11\x5e\x91\x1d\x2b\xc6\x33\x9c\xbc\x48\x7b\x86\x93\x37\xb3\x8e\x70\x22\x74\x56\x78\x03\xdb\xbb\xdb\xdb\xf0\xb6\x8c\xe7\xb0\x8d\xed\xfb\x3f\xfd\xeb\xa9\x17\x9a\xa6\x55\xd3\x25\x5d\x3e\x17\xd0\x1e\xb5\xf1\x72\x64\xa5\x56\x11\x53\x15\x58\xb6\x86\x22\x95\xd3\x99\xa7\x20\x9f\x9c\x6c\x5e\xac\x2a\x8d\x62\x8c\x1e\xf1\x62\x6e\x2e\x4e\x15\x58\x3f\x6c\x24\xd8\xd9\xfd\x3d\xde\xfd\x2d\xde\x79\xff\x47\xbc\xb3\xdb\xdd\x20\xab\x76\xad\x7c\xdc\x18\xb2\x28\x46\xc6\x12\x44\xab\x0a\x75\xee\x2b\x53\x92\x1f\x5b\x83\xf4\x64\xf2\x9c\xd9\x50\x3b\xb8\xa9\xca\xdc\x6a\xc5\x68\xc0\xba\xda\x58\x21\xc3\xbc\x00\x9d\x29\xe2\x00\xa9\xa7\x26\xd6\x3e\x06\x28\xbd\x09\xbf\x82\x72\x06\x38\x53\xdc\x0d\xe0\x3c\x83\x35\xa8\x72\xa1\x15\xaf\xaa\x5b\xe1\x95\xea\x9f\x8a\xb0\x5d\x1b\xfb\xfb\xdd\xfe\xe0\xb8\x2b\x18\x9d\x72\x7c\x6a\xf6\xea\xe1\xc4\x17\xca\xd9\x14\x03\xc7\xc3\x36\x7c\x04\xb3\x99\x08\x55\x12\x34\xd9\x92\xad\x77\xcf\x80\x37\xcb\x87\x0d\x5c\x29\xd3\xcb\x2d\x6e\x28\x3a\x0f\xaf\xa2\x6e\x50\x13\xf2\x46\x64\x7b\x34\x47\x0f\x5f\x17\xfa\xb8\x3b\x4e\xc8\x57\xe5\x1a\xee\x7a\xf9\xac\x06\xe7\x5e\xab\x5a\xf4\x1a\xee\x7c\x1e\x6e\x2e\x8e\xba\x22\xcb\x93\x26\xe7\x52\x15\xb8\x07\x2e\x2c\x0c\x54\x94\x64\x0b\x45\x93\x83\xb1\xb2\xb9\x4a\x6c\x6e\x79\x72\x83\xdc\xe2\x54\x58\xc0\xfa\x83\xe3\x7a\xe0\xce\x33\xee\xc1\x26\x13\x04\x4d\xf5\xf6\xcf\xbd\x2f\x03\x54\x8e\x6d\xfe\x38\x69\x1b\xa0\x2a\x97\x96\x0e\x3a\x95\xe4\xb8\xb1\xc8\x62\x07\xad\xaf\xa8\x97\xc0\xf0\x93\xf8\x37\x00\x00\xff\xff\x4e\xeb\xd9\x40\x80\x08\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
