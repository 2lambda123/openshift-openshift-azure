// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master/etc/etcd/ca.crt
// data/master/etc/etcd/etcd.conf
// data/master/etc/etcd/peer.crt
// data/master/etc/etcd/peer.key
// data/master/etc/etcd/server.crt
// data/master/etc/etcd/server.key
// data/master/etc/origin/cloudprovider/azure.conf
// data/master/etc/origin/master/admin.kubeconfig
// data/master/etc/origin/master/aggregator-front-proxy.crt
// data/master/etc/origin/master/aggregator-front-proxy.key
// data/master/etc/origin/master/ca-bundle.crt
// data/master/etc/origin/master/ca.crt
// data/master/etc/origin/master/ca.key
// data/master/etc/origin/master/front-proxy-ca.crt
// data/master/etc/origin/master/master-config.yaml
// data/master/etc/origin/master/master.etcd-ca.crt
// data/master/etc/origin/master/master.etcd-client.crt
// data/master/etc/origin/master/master.etcd-client.key
// data/master/etc/origin/master/master.kubelet-client.crt
// data/master/etc/origin/master/master.kubelet-client.key
// data/master/etc/origin/master/master.proxy-client.crt
// data/master/etc/origin/master/master.proxy-client.key
// data/master/etc/origin/master/master.server.crt
// data/master/etc/origin/master/master.server.key
// data/master/etc/origin/master/named/console.crt
// data/master/etc/origin/master/named/console.key
// data/master/etc/origin/master/openshift-master.kubeconfig
// data/master/etc/origin/master/scheduler.json
// data/master/etc/origin/master/service-signer.crt
// data/master/etc/origin/master/service-signer.key
// data/master/etc/origin/master/serviceaccounts.private.key
// data/master/etc/origin/master/serviceaccounts.public.key
// data/master/etc/origin/master/session-secrets.yaml
// data/master/etc/origin/node/ca.crt
// data/master/etc/origin/node/client-ca.crt
// data/master/etc/origin/node/node-config.yaml
// data/master/etc/origin/node/node.kubeconfig
// data/master/etc/origin/node/pods/apiserver.yaml
// data/master/etc/origin/node/pods/controllers.yaml
// data/master/etc/origin/node/pods/etcd.yaml
// data/master/etc/origin/node/pods/ovs.yaml
// data/master/etc/origin/node/pods/sdn.yaml
// data/master/etc/origin/node/pods/sync.yaml
// data/master/etc/origin/node/resolv.conf
// data/master/etc/origin/node/sdn.kubeconfig
// data/master/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master/etc/sysconfig/atomic-openshift-node
// data/master/root/.kube/config
// data/master/var/lib/origin/.docker/config.json
// data/master-startup.sh
// data/node-startup.sh
// data/worker/etc/origin/cloudprovider/azure.conf
// data/worker/etc/origin/node/bootstrap.kubeconfig
// data/worker/etc/origin/node/ca.crt
// data/worker/etc/origin/node/node-bootstrapper.crt
// data/worker/etc/origin/node/node-bootstrapper.key
// data/worker/etc/origin/node/node-config.yaml
// data/worker/etc/origin/node/pods/ovs.yaml
// data/worker/etc/origin/node/pods/sdn.yaml
// data/worker/etc/origin/node/resolv.conf
// data/worker/etc/origin/node/sdn.kubeconfig
// data/worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/worker/etc/sysconfig/atomic-openshift-node
// data/worker/var/lib/origin/.docker/config.json
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterEtcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdCaCrt,
		"master/etc/etcd/ca.crt",
	)
}

func masterEtcEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xd1\x4e\xfa\x30\x14\xc6\xef\xff\x4f\xc1\x03\xfc\xdd\xc6\x44\x70\x24\xbd\x28\xdb\x31\x34\x94\xa2\xdd\x19\x09\x57\xcd\xc4\x26\x1a\x45\x49\x57\x89\x86\xf0\xee\x86\x16\x61\xc2\x88\x6e\xd9\x4d\xbf\x5f\xbf\xb3\xef\x9c\x03\x98\x66\x8a\x66\x53\x90\xc8\x72\x50\x29\x67\x20\x50\x15\x92\xe7\xe4\xd1\xda\x65\xd5\x0f\xc3\xf5\xba\x15\xc0\x87\x35\x65\x30\x7c\xab\xec\x6b\xb9\xd0\xad\xcd\xa6\x1f\x5f\xf6\x92\x7f\xee\x76\x0a\x12\xd5\x0d\xe3\x40\x42\x6d\xe7\xdb\xef\x21\xac\xb4\x59\x69\x13\xcc\x8d\xdd\x31\xde\xd7\xa1\xb4\xc0\x21\xb1\xe6\x5d\x7b\x29\xa3\x48\x55\xc6\x24\x09\x57\xa5\x09\x5f\x9e\xee\x9d\x83\xd7\x80\x43\x8a\x6c\x22\x14\xb2\x31\x4c\x0a\x24\xf1\x55\x14\x79\x69\x08\x54\xe2\x00\x28\x2a\x26\x10\xe4\x94\x72\xb2\xd7\x98\x60\xc8\x28\xaf\xe5\xba\x05\x90\x7f\x4b\x75\x7d\xe4\x91\xf2\x22\x47\x90\x64\x51\x56\x56\x9b\x8b\xc8\x3d\x7b\x97\x1f\xa7\xee\xf6\xff\xfa\x51\xbb\x11\x6c\x9f\x82\x71\x23\x18\xd7\xfe\x67\x04\xb3\x33\x4d\x7e\xd6\x9f\x1e\xe1\x2c\x47\x10\x8d\x33\x8c\x02\xf7\xd6\xa6\xb6\x83\x4f\x1b\x73\x40\xbf\x4b\x0b\x3a\x06\xd2\xd8\x2f\xaf\x3b\x8f\xa6\x2d\x58\xea\xfa\x0e\x78\xec\xfc\x22\x38\xbd\x21\xa6\x73\xd9\x87\x74\x14\xca\xed\x50\x32\x95\xd2\x63\x78\x5e\x1e\x0a\xde\x15\x13\xa4\x6a\x40\xd3\x11\x88\x4c\x0d\x66\x08\x39\xe9\xc4\x49\x27\xe9\xf6\xe2\xa4\xeb\x99\x5f\x9d\xbe\x02\x00\x00\xff\xff\x3d\x31\x31\xc4\x21\x03\x00\x00")

func masterEtcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdEtcdConf,
		"master/etc/etcd/etcd.conf",
	)
}

func masterEtcEtcdEtcdConf() (*asset, error) {
	bytes, err := masterEtcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\x81\x45\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func masterEtcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerCrt,
		"master/etc/etcd/peer.crt",
	)
}

func masterEtcEtcdPeerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x48\x4d\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func masterEtcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerKey,
		"master/etc/etcd/peer.key",
	)
}

func masterEtcEtcdPeerKey() (*asset, error) {
	bytes, err := masterEtcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\x81\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func masterEtcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerCrt,
		"master/etc/etcd/server.crt",
	)
}

func masterEtcEtcdServerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x4e\x2d\x2a\x4b\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func masterEtcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerKey,
		"master/etc/etcd/server.key",
	)
}

func masterEtcEtcdServerKey() (*asset, error) {
	bytes, err := masterEtcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\x64\x82\x2e\x51\xaf\x82\xd0\x09\x8a\xfd\x4a\x40\x12\xf8\xd6\x5c\x6a\x77\xf7\x8d\x21\x69\x05\x35\xd0\xd2\x56\x9f\x0e\xe6\xdb\xdf\xb6\xd3\x43\x1b\x98\xdd\x4e\x49\xd9\xad\x57\x35\xb0\x80\xa1\x07\xe4\x93\xd2\xa9\x76\xc9\x9c\xcb\x1f\x00\x00\xff\xff\x93\xa5\x60\x70\x42\x00\x00\x00")

func masterEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginCloudproviderAzureConf,
		"master/etc/origin/cloudprovider/azure.conf",
	)
}

func masterEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := masterEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminKubeconfig,
		"master/etc/origin/master/admin.kubeconfig",
	)
}

func masterEtcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xa7\x17\xa5\xa6\x27\x96\xe4\x17\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x82\x55\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyCrt,
		"master/etc/origin/master/aggregator-front-proxy.crt",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x00\xd0\xfb\x9f\x22\x13\x64\x07\xbf\xd0\x8b\x17\xa1\x13\x48\x89\x21\x17\x03\x31\x94\x06\xeb\xee\x7d\x6b\x41\x35\xb9\x9b\x53\xa1\x48\xf3\x1f\x4e\x13\x30\xeb\xe8\xc2\x98\xc9\x5c\xba\x5c\xcd\x69\x62\x62\x36\xe2\xe6\x6a\x87\xe9\xf0\x6a\xfa\x04\x16\x0a\x78\xe1\x74\x93\xc1\xb0\xf7\xef\x0b\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyKey,
		"master/etc/origin/master/aggregator-front-proxy.key",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaBundleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\xe4\xa8\x97\xee\x60\xe3\x06\x9d\xa0\xd8\x8f\x06\x24\x42\x1a\x0b\x52\xbb\xbb\xaf\x77\x62\x98\xf3\x99\x45\xd7\x1a\x5f\x47\xa5\x39\x6c\x30\x69\x28\x81\x73\x7c\xb4\x5c\xa0\xc0\xb7\x7a\x16\x85\x25\x58\x93\x1d\x0b\x7d\x94\xdc\x44\x0f\x1a\x63\xfa\x03\x00\x00\xff\xff\x01\x5e\x1d\x24\x46\x00\x00\x00")

func masterEtcOriginMasterCaBundleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaBundleCrt,
		"master/etc/origin/master/ca-bundle.crt",
	)
}

func masterEtcOriginMasterCaBundleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaBundleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca-bundle.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaCrt,
		"master/etc/origin/master/ca.crt",
	)
}

func masterEtcOriginMasterCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4e\xd4\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func masterEtcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaKey,
		"master/etc/origin/master/ca.key",
	)
}

func masterEtcOriginMasterCaKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x3a\x27\x82\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func masterEtcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterFrontProxyCaCrt,
		"master/etc/origin/master/front-proxy-ca.crt",
	)
}

func masterEtcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x73\xdb\xb8\x11\xff\xae\xbf\x02\xe3\x2f\x69\x3b\x25\x29\xbf\xf2\xe0\x4c\x3f\xa8\xf6\xb9\xa7\x39\xc7\x51\xa5\xa4\xd3\x99\x4e\xa7\x03\x01\x2b\x0a\x11\x08\x30\x78\xe8\xac\x73\xfd\xbf\x77\xf0\x20\x09\xd2\x72\x2e\x93\x26\xed\x39\x1f\x22\x62\x7f\xbb\xd8\x17\x76\x17\xc0\xb4\x66\x5a\x33\x29\xae\xa4\xd8\xb0\xaa\x9c\x20\xd4\x70\x5b\xb1\xe4\x1b\xa1\x3f\x5b\xc6\xe9\x35\x6c\xb0\xe5\x46\x87\x25\x84\x88\x07\x58\x85\x0d\x93\xa2\x5d\x44\x08\x37\xec\x6f\xa0\x9c\xc4\x12\xed\x4f\xbb\x65\x10\xfb\x12\xfd\xe3\x9f\xdd\xf7\x8e\x09\x5a\x0e\x05\x87\x1d\x3b\x84\x02\x2d\xad\x22\xa0\x7b\xd9\x08\x71\x56\x33\xa3\x4b\xf4\xf0\x98\x2c\x2a\xf8\x64\x41\x27\xcb\x5e\xec\xbb\x3d\x28\xc5\x28\x7c\xa5\xc2\x89\x82\x9d\xa4\x44\x43\xd9\x80\xd0\x5b\xb6\x31\x39\x93\xc5\xbc\xc6\x15\x2c\x24\x67\xe4\xf0\x95\xde\xb9\x07\x62\x1d\x72\x69\x79\x6a\x70\x86\x6a\x6c\xc8\xd6\xcb\x9f\x09\x21\x8d\x17\x37\xf0\x48\x86\x76\x70\x28\x11\x73\x10\x9d\x0f\xd4\xa2\x20\x0e\x59\x27\x3a\xe1\x41\x68\x8f\xb9\x85\x12\xbd\x30\xca\xc2\x8b\x84\x22\x70\x0d\x65\xaf\x4e\x46\x41\x30\xa0\x09\x40\x8a\xe5\xb1\xb8\x64\x5d\xb8\x4a\xd4\x48\xaa\x9f\x21\xad\x9d\x3b\xf5\x20\x74\x1f\x81\x98\x12\x39\x3d\x92\x65\xbd\x63\xcd\x3b\xbf\x13\xf7\x7a\xdc\x60\xc6\xad\x82\x11\x2e\x84\x28\x71\x7e\x8c\x0f\xb6\x94\x99\x3e\x7f\x41\xe0\x35\x07\x1a\x99\x71\x55\x29\xa8\xb0\x91\x2a\xc9\x78\x25\xef\x0f\x57\x9c\x81\x30\x73\xb1\x91\xc1\x30\x02\xca\xdc\x30\x0e\x25\xea\x59\xb2\x8d\x92\xc2\x64\x1e\x9f\x13\x65\x3c\x70\x07\x87\xcf\xe2\x76\x70\x98\xe0\x86\xdd\xc2\x1e\xb8\x2e\x27\x99\x0b\xfc\x28\x0f\xb0\x35\xdb\x5e\x9d\x98\xcf\x3f\x02\xa6\xa0\xa2\x32\x5e\xb9\xab\x59\x89\x12\xc9\x19\xc1\x9d\x12\x11\x20\xeb\x5a\x8a\x3b\x5c\xb7\xd1\xc9\x9e\x51\x6a\x12\xb2\xce\x28\x1c\x76\x59\x28\xd8\xb0\xfb\x9e\xeb\xef\xd9\x12\x6a\x69\x20\xfb\xc1\x61\x32\xbf\x5a\x29\x69\x9b\x00\x7f\x8a\xfb\x8b\x23\xfa\x45\xab\x41\xb9\x34\x7a\x0e\xf9\x41\x83\x9a\x10\x29\x8c\x92\x9c\x43\x12\x05\xe0\x40\xfa\xd3\xc2\x25\xd9\xdd\xf9\x6c\xec\x72\x3a\xab\xb1\x36\xa0\xb2\x9e\xd9\xa5\x92\x06\xb5\x67\x04\x56\xee\x3f\x51\x5d\x81\x32\x41\x80\x66\x95\x68\xdd\x97\x46\x33\xe2\xb3\x40\xef\x1c\x98\xc4\x71\x84\x70\xf1\x4b\xb6\x2c\xd1\xc9\x1f\x4e\x26\x44\x2a\x3d\xe3\x5c\xfe\x0c\xf4\x9d\x62\x15\x73\x87\x92\x0a\xdd\x5b\xb3\x66\x82\xce\x28\x55\xa0\x75\x89\xa6\xb9\xff\x57\xbe\x9e\x5e\x9e\x47\xda\x1d\x98\x9f\xa5\xda\x95\xc8\x90\xe6\x62\x02\x86\xd0\x61\x02\x12\x5c\xa2\x60\x6f\xee\x88\x7d\xac\x7b\x4b\x06\x64\xcf\x1c\x21\x9d\x25\x47\x10\xce\x1a\x84\xac\xe2\x3e\x32\x19\xda\x1a\xd3\xe8\xb2\x28\x1e\x1e\x50\xee\x83\x9d\xff\x28\xb5\x71\x01\x44\x8f\x8f\xe5\xd9\xf9\xab\x37\x5e\xb9\x95\x91\x0a\x57\xd0\xdb\xb7\xb3\x6b\x50\x02\x0c\xe8\x48\x0a\x29\x54\x26\x84\x9c\xc9\x63\xc0\x61\x01\x74\xd1\x5d\xb9\xe8\x8e\xc4\xa4\x95\xec\x08\x2c\x15\xe2\x6b\x5f\xaf\xd9\x46\xaa\x1a\x9b\x12\x39\x8b\xc2\x6a\x3e\x0f\xd5\xf1\xc6\x53\xd0\xe3\x63\x60\x49\x8b\x86\x63\x64\xc2\xb8\xd4\xe5\x4b\xa8\x98\x36\xea\xd0\x3a\xa2\x44\x54\x92\x1d\xa8\x4c\x45\x42\x4e\x43\xcb\xca\xf5\x9e\x94\x97\xd3\xe9\x74\x12\x4a\xd1\x5b\xef\xee\x58\x85\x9c\xdd\x1c\xcc\xd3\xa8\x3e\x1f\xc9\xc8\xf2\xf9\x60\x8e\x40\x21\x9e\x8d\x54\xa6\x44\xa7\xd3\xb3\xcb\xe9\xa4\x77\x78\xaa\x8f\xdb\x1d\x37\xcc\x1d\x13\x50\x33\x55\xd9\x1a\x44\xdb\xcc\x09\x97\x96\x66\x24\xe9\xf8\x19\x2a\xc0\x90\x42\xfa\xd4\x2e\x3c\xbd\x51\x72\xcf\x28\xa8\x02\xff\x62\x15\xe4\x0e\x9d\x30\xb7\xd4\xae\xec\x38\x50\x38\x87\x21\x60\xd9\x1a\x93\x1d\x08\xda\x02\x5c\x52\x9d\x0f\x00\x35\x50\x86\x33\x73\x68\xa0\x13\xd2\x34\x9c\x11\xdf\xf3\x8a\xbd\xa0\x79\x92\x5a\x8d\x92\x46\xae\xad\x53\xa1\x3f\x9b\xff\x4b\xb3\x08\xb7\xbe\x18\xb9\x22\xc1\x44\x95\xb9\x60\x66\x1b\x17\xa8\x23\x3b\x85\xd0\x15\x83\x7a\x3d\x64\xdf\xc1\xe1\x0b\xb8\x43\xb0\xc3\xf7\x7c\x51\xa2\xd3\xb3\x57\xbe\xb2\x9c\xfe\x7a\x13\x8b\xd9\x13\x1b\x47\x9a\x60\x4f\x53\x6c\x00\x0a\x7b\x6a\xb2\x05\x6a\xbb\x7a\x1d\xe0\x47\x94\xec\x70\xf9\x47\xed\x67\x8e\x58\x4c\xf5\x9d\xa4\xb0\x90\xca\x2c\xb1\xa8\xdc\xe4\xf1\x22\xa1\xad\xec\x5a\x80\xcb\xdf\x57\x67\xf9\xb9\xaf\x94\xc5\xe9\xcb\x49\x90\x18\x2c\xf2\x11\x85\xfb\x70\x3e\x7f\xea\xd2\xe0\x2a\x76\x3d\x21\x42\xeb\x18\xcd\x7c\x98\x10\x68\x1c\xd9\x80\x30\xef\x0f\x0d\xe8\xf2\x4b\x72\xea\x8f\x29\x26\x9a\x81\xd0\xda\x2a\x6d\x4a\x74\x31\x9d\x4e\xe2\x80\xd7\x4a\xfd\x22\xa1\x9e\xe9\x53\xa3\x4b\x74\xe6\x25\x3c\x35\xc6\xfd\x8a\x67\x35\xb8\xa7\x2b\x81\xb7\x52\x36\xee\xf8\xfc\x1f\xcc\x7d\xf9\x5f\x9b\x7b\xee\x25\x3c\xb1\x25\xb5\x76\xdc\xe1\xbd\xc0\x70\x6e\x63\x16\x2c\xec\x9a\x33\xf2\x61\x79\xeb\xcb\x7a\xa3\x98\x30\xe8\xa4\x6d\x5d\x27\xbe\xce\x1b\xcc\x04\xa8\x55\x48\xa9\x7c\xa1\x64\x03\xca\x30\xd0\x79\xe0\xed\xba\xda\xbf\xd1\x27\x2b\x8d\xeb\x6e\x13\x11\x7a\x70\x5f\x20\xe3\xa9\x8c\xbd\x39\x76\x48\xc2\xa8\x72\xb5\x35\x3f\x3d\x7b\x1d\x72\xf3\xc2\x5b\xb7\x95\xda\x84\xcc\xbd\x05\x51\x99\x6d\x89\xde\x24\x71\x9d\x2f\xa2\x94\xab\xf9\xf5\x32\x4a\x8a\x63\x40\xe1\x1c\x12\xf7\x5e\xf8\xcb\x56\x18\x74\x14\xd0\x2d\x36\x45\xef\x0d\xb9\xd7\x59\xc4\x35\xbe\x57\xf5\x67\x26\x11\x3e\x3e\x37\x72\x38\x4d\x62\xad\xc1\x7c\x43\xff\x9d\x14\x44\x0a\x2d\x39\x14\x27\xa9\x2f\xdd\x7c\x88\x85\x49\xaf\x8d\x35\x98\xad\xa4\x25\xc2\xd6\xb8\x16\xce\x28\x08\xc3\xcc\x61\x11\x6b\x6a\x74\x0a\x97\x15\x13\xc9\x64\x5f\xe3\xa6\x61\xa2\x7a\x1b\x99\x09\xc7\xac\x9e\xf4\x77\x93\x87\x07\xf4\x3b\x26\x28\xdc\x7f\x5e\xe9\x99\x35\xdb\x85\x92\xae\xa4\xe6\xf3\xf1\xc6\x68\xfa\xfb\xfc\x6e\x94\x0b\x6e\x87\x61\xb5\x7f\xe6\xb6\xe6\x15\x4a\x2e\x3f\x50\x63\xc6\xd3\x2b\x9b\x5f\xe8\xbe\x19\x4d\x69\xda\xae\x27\x83\xbb\x56\x42\x73\xdf\xdd\x67\xa3\x60\x03\x4a\x01\xfd\x10\xc7\xe9\x14\x69\x05\xfb\x64\xe1\x5f\x09\x43\xa8\xd5\xf3\xeb\x6f\xe7\x9f\xf6\x23\x8f\x2d\xe5\x7a\xec\xac\x76\xd3\x15\x10\x05\xe6\x3b\x6c\x1c\x04\x3f\xdd\x36\xcc\x5a\xef\x1a\x10\xf3\xeb\xb1\x84\x08\x69\xc7\xdb\x18\x46\x6b\xb6\x52\xb1\x5f\xe0\x58\xf2\xfb\xf4\xcb\x6b\x46\x94\xd4\x72\x63\xa4\xe0\x4c\xb8\x31\xa0\x2e\x4e\xbe\xb1\x3d\xef\x41\x60\xef\xc8\x93\xc2\x1f\xd1\xb3\xa2\x53\xec\xe4\xa9\x95\x08\x19\xb9\x03\xf1\x5b\x53\xd9\x2b\x35\x52\x37\x36\xea\x59\x32\xda\x7e\xcf\xaa\xdd\x4a\xff\x3a\xb9\x37\x7f\xbd\xbe\x1b\x4a\xd3\x30\x7a\x00\xeb\x96\xde\xe2\xfb\x59\x05\x2b\xd7\x8a\xa8\xeb\x64\x6d\x33\x8c\xe4\x50\xb5\xb5\x16\xe9\x62\xc8\x5a\xfd\xfc\x80\x14\x60\x99\x0e\xb8\xfc\x80\x6b\x57\x2c\xbc\x5f\x53\x15\x5c\x33\xd7\xfa\xbd\x5b\x1e\xa9\xf1\xfa\x65\x3b\x83\x74\xf9\x73\x0c\x76\x39\x9d\x4e\x1a\x25\x3f\x02\x49\x8a\x72\xbc\xb8\xb8\x61\x6c\xe5\xef\xdb\x52\x95\x48\x48\x0a\x99\x92\x1c\xf2\xc1\xdd\xad\x20\xb2\x6e\xac\x81\x3f\xc5\xd2\xac\x81\x58\xc5\xcc\xc1\x5d\x7b\x09\x76\x9c\xa1\x5e\x13\xdd\xad\xc4\xe1\x4e\x4f\xcb\xe2\xac\x25\xde\xe2\x35\x70\xbd\x00\xb5\x08\xca\x94\xe8\x32\xbc\x13\x30\x3a\xe6\x3b\x9d\xb6\x7f\xd9\xe9\x9b\xf6\xaf\xf0\xab\x13\x25\xad\x71\xf7\xfb\xce\x14\x6d\xd7\x54\xd6\x98\x89\x2f\x2e\x3d\x4b\x69\x8d\x57\xc3\x65\x7e\x48\x74\x9f\x64\xab\x56\x52\x9a\x17\xb1\xcf\xce\x08\x91\x36\x6d\x6b\x35\x16\xb8\x02\xda\xbd\xb1\x64\xad\x4f\xfd\x6f\xff\xc0\xe5\xcb\x90\x5b\x6f\xb8\x3c\xf8\x8f\xf4\x84\x64\x6b\x2b\x28\x87\x78\x50\x1a\xc5\xf6\xd8\xc0\x4f\xa3\xb7\x07\x1c\xb6\x75\xf3\x94\xa7\xb7\xd7\x3c\xaf\x6f\x04\xc7\xed\x9f\x70\x78\x8c\x67\xd0\xe1\x4d\xa4\xbd\x0e\x1c\x7d\x92\xb8\xb8\x38\xfe\x22\x71\xe4\xee\xa0\xfd\xdd\xb1\xbd\xbc\x76\x2f\x52\xdd\xa1\x1f\x5f\x23\x22\xbe\xbd\xb4\xdc\x2f\xe3\x3b\xed\x5c\xdc\x70\x56\x6d\x4d\xc8\xd1\xee\xbd\xeb\x3d\xab\x41\x5a\x33\x3e\x6e\xee\xf8\xd3\x2b\x17\xc2\x8d\x9b\x39\xe3\xb0\x9b\x25\xea\x1d\x39\x65\x9e\xa9\x1d\x54\xfa\x37\x9e\x4e\xc3\x5f\x65\x09\x4a\xc7\x2e\xdd\xf5\x92\xac\x7d\x54\xf8\x8a\xb2\xb5\x97\xdc\xd6\xc9\x33\x05\x3d\x08\x5c\x33\xe2\x6b\xad\xab\x08\x4c\x54\x3f\x0c\x5e\x2a\xff\x13\x00\x00\xff\xff\xee\xba\x28\x8e\x9b\x17\x00\x00")

func masterEtcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterConfigYaml,
		"master/etc/origin/master/master-config.yaml",
	)
}

func masterEtcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdCaCrt,
		"master/etc/origin/master/master.etcd-ca.crt",
	)
}

func masterEtcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\x80\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientCrt,
		"master/etc/origin/master/master.etcd-client.crt",
	)
}

func masterEtcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x71\xce\xc9\x4c\xcd\x2b\xd1\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientKey,
		"master/etc/origin/master/master.etcd-client.key",
	)
}

func masterEtcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\x80\x15\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientCrt,
		"master/etc/origin/master/master.kubelet-client.crt",
	)
}

func masterEtcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x21\x10\x06\xe0\xf7\x4e\x31\x27\x98\x3b\x94\x8f\x12\x04\x9d\xc0\xe2\x57\x06\xc4\x60\xe6\x6f\x41\x5c\xef\xbe\xdf\x5a\xf2\x72\x3b\x0a\x91\x31\xef\xf1\x98\x44\x88\xa6\xdf\xa8\xd6\x34\xc1\x69\xd5\xbe\x85\x08\x7d\x96\x20\x3c\xff\x3f\xe8\x60\xea\x86\x41\xcd\x98\x72\xca\x9b\x6e\xa3\xc9\xde\xb7\x2b\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientKey,
		"master/etc/origin/master/master.kubelet-client.key",
	)
}

func masterEtcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\x80\xa5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientCrt,
		"master/etc/origin/master/master.proxy-client.crt",
	)
}

func masterEtcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x03\x21\x0c\x06\xe0\xf7\x4e\x91\x09\xb2\x43\xeb\xa3\x14\x84\x4e\x20\xe5\x57\x02\x87\x42\x12\x8e\x0b\x9e\xbb\xdf\xb7\x16\x15\x95\xb3\x3a\x32\xe2\x6d\x9f\x70\x18\x71\x9a\xa3\x49\xe7\x04\x75\x69\xf2\xaf\x0e\xe3\x6f\x35\x87\x16\x9d\x57\xa4\x43\x30\x9c\x33\x82\x6e\xfa\xb9\xca\xe8\xb4\xf7\xeb\x09\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientKey,
		"master/etc/origin/master/master.proxy-client.key",
	)
}

func masterEtcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\x81\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func masterEtcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerCrt,
		"master/etc/origin/master/master.server.crt",
	)
}

func masterEtcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x06\xe0\xfb\x9b\x22\x13\x64\x87\x57\x8f\x52\x28\x38\x81\x94\x5f\xc9\xc5\x42\x12\x84\x60\xdd\xbd\xdf\x5a\x74\xa9\xcc\xea\xc8\x88\xbf\x1d\xe1\x30\xe2\xf4\x8c\x26\x9d\x13\xd4\xa5\xc9\x5d\x1d\xc6\x67\x35\x87\x16\xe8\x84\x72\x46\xd0\x4b\xc5\x55\x46\xa7\xbd\x7f\x5f\x00\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func masterEtcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerKey,
		"master/etc/origin/master/master.server.key",
	)
}

func masterEtcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\xce\x48\xcc\xcc\x73\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x49\x64\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x38\xe7\xe7\x15\xe7\xe7\xa4\x82\x65\x8b\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xfc\x0f\x86\x36\x4c\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleCrt,
		"master/etc/origin/master/named/console.crt",
	)
}

func masterEtcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc4\x20\x0c\x06\xe0\xf7\x9b\x22\x13\x64\x87\x3b\x1f\x7d\xb8\x82\x13\x48\xf9\xb5\x81\x12\x8b\x09\x05\xb1\xee\xde\x6f\x4e\xda\xba\xdc\xd9\x11\x31\xbe\xf6\x1b\x0e\x23\x0e\x4d\x8b\x54\x0e\xe8\x2e\x45\xf6\xec\x30\xfe\x5f\xd0\x74\x48\xf1\xd0\xd4\xda\x09\x8e\x18\xf4\x50\xf2\x2e\x5a\x69\xad\xcf\x1b\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleKey,
		"master/etc/origin/master/named/console.key",
	)
}

func masterEtcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func masterEtcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterOpenshiftMasterKubeconfig,
		"master/etc/origin/master/openshift-master.kubeconfig",
	)
}

func masterEtcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\x1a\x31\x10\x85\xef\xf9\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\xb2\x20\xca\xa1\x55\x0e\xae\xfd\x80\x11\xc6\x43\xc7\x5e\x5a\x12\xe5\xbf\x57\x66\xc9\x16\xaa\x36\xec\x86\x9c\xd6\x3b\x9e\x6f\x76\x3c\x7e\x6f\x9f\x2f\x94\x52\x4a\xdb\x35\x3d\x40\x12\x71\xd4\x7d\xa5\x37\x57\xfa\xb2\x8e\x2f\x29\xfa\x12\x31\x1c\xc8\x6d\x5f\xa3\x6b\x81\x27\x67\x33\x92\xee\xab\x6f\xbb\x98\x52\xcf\xfb\xa7\x52\x3a\xda\x15\x0a\x35\xe6\x07\x0e\xd5\x0a\x5f\x39\x62\xc4\x71\x16\xc8\x65\xbd\x4f\x7b\xb9\xfc\x3f\x77\x67\x7f\xdd\x0c\xa7\x35\x3b\xe2\x2a\xb6\x85\x6e\x47\x37\xe6\xba\x3b\x36\x78\xaa\x04\xd7\x94\x96\x9d\xd1\xec\x16\x9f\x63\x86\x18\xf6\x83\xd9\x8c\x22\xe5\x6d\x1b\x70\xcc\xe5\x6b\x5d\x26\x72\x8b\x08\xb1\xc1\xfc\x19\x7c\x0b\xc8\xb0\xbf\xe7\x00\x29\xf9\x63\xf6\xb8\xb7\x14\x73\x2b\x72\xb4\x80\x5b\x16\xe4\x0e\x2b\x96\xad\x11\xa4\x54\x09\x3a\xa1\xe5\x88\x9d\xc1\xfa\x06\x86\x14\x3d\xc5\xf9\x5b\x94\x95\x79\xb5\x42\xcc\xba\x7f\x10\x55\x4a\x27\xc8\x86\x1c\x9a\xdb\x38\xde\x56\x4a\x07\xfb\x1d\xe1\x50\xb7\xcd\x8e\x60\x5e\xf4\x7f\x14\x7e\x3c\x78\x7b\x69\xd6\x4d\x43\x07\xed\x4f\x8e\xe8\x3a\xf7\xb1\xf1\x0b\xb1\x50\xa6\x53\x7e\x99\x22\xc0\x65\x96\xe9\x5a\x60\xbd\xa9\xa9\x57\xd7\xed\x32\x7f\x82\xe6\x8b\x72\xe8\xab\x16\x13\xfd\x5b\x9a\x67\x17\xfc\x02\x9b\xf2\x04\x3f\x2a\xa4\x8c\xf3\xfb\x1b\xda\x60\xa3\x83\x9f\x20\x71\x25\x0e\x83\x10\xd8\xd9\x5c\xc6\xf8\xde\x92\x45\x78\x46\x30\x83\x0c\x36\x4c\xde\xb0\x4f\x6f\xb7\xd9\xeb\xf5\x7a\x2d\xeb\x7e\xd8\x18\x77\x3e\xdc\x3b\x93\x38\xbe\xbb\xde\x29\x0f\xc4\x4c\x27\x7c\x50\xba\x79\xe2\x08\xdd\x5a\xe6\xe5\x57\xfe\xcf\x46\x3f\x1d\x2b\xff\xa2\xac\x7e\x07\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func masterEtcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSchedulerJson,
		"master/etc/origin/master/scheduler.json",
	)
}

func masterEtcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := masterEtcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func masterEtcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerCrt,
		"master/etc/origin/master/service-signer.crt",
	)
}

func masterEtcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x03\x21\x0c\x05\xd0\x7d\x4f\x91\x13\xe4\x0e\xad\xcb\xd9\x14\x3c\x81\x0c\xdf\xf0\x37\x29\xc4\x20\x88\xf5\xee\xf3\xf6\x96\x6f\x70\xb6\xc4\x85\xf5\x1e\x9f\x95\x18\xa2\xe5\xe7\x9d\xa6\x05\x91\xec\xbc\x5b\x62\x68\x45\x4c\xde\xa8\x34\xa7\x5b\x69\x7a\x61\xc9\x5f\x6a\x06\xdd\xe4\x9c\xd7\x13\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func masterEtcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerKey,
		"master/etc/origin/master/service-signer.key",
	)
}

func masterEtcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPrivateKey,
		"master/etc/origin/master/serviceaccounts.private.key",
	)
}

func masterEtcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\xd4\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPublicKey,
		"master/etc/origin/master/serviceaccounts.public.key",
	)
}

func masterEtcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\xa5\x25\x19\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x0a\x35\x0a\x85\xa5\xf9\x25\xa9\x0a\xb5\xb5\x5c\x0a\x0a\xa9\x79\xc9\x45\x95\x05\xf8\x0d\x71\xcd\x4b\xc6\x63\x06\x20\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func masterEtcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSessionSecretsYaml,
		"master/etc/origin/master/session-secrets.yaml",
	)
}

func masterEtcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeCaCrt,
		"master/etc/origin/node/ca.crt",
	)
}

func masterEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeClientCaCrt,
		"master/etc/origin/node/client-ca.crt",
	)
}

func masterEtcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xdd\x6e\x1b\x37\x13\xbd\xdf\xa7\x20\x72\x9d\xfd\x91\x63\xe3\xfb\x40\x20\x17\xae\xdd\xb4\x46\x0b\xd7\x95\xdc\xde\x53\xe4\x48\x62\xcd\xe5\xd0\xc3\xe1\xd6\x72\x9a\x77\x2f\x66\x77\x6d\x49\x69\x5c\xf4\x4a\xe2\x9e\x33\x3f\x3c\xc3\x39\x26\xf9\xdf\x81\xb2\xc7\xa8\xd5\xb0\xa8\x4c\xe1\xdd\x15\xc6\x8d\xdf\xea\x4a\x29\x39\x41\x64\x6f\x0d\x7b\x8c\x57\xc6\xee\x60\xe5\x9f\x41\xab\x45\xd7\x75\xdf\xc6\xef\xef\x7f\xd6\xea\xa2\x9f\x41\x24\xff\xfc\x2f\xb1\xa7\xf0\x4b\xa8\x8b\xf9\x3b\x1f\xdd\xa5\x73\x04\x39\x6b\xb5\x38\xfb\x5f\xd3\x35\x5d\xb3\xd0\x17\x1f\x04\xbc\xc6\xde\xf8\xa8\x95\x0d\x25\x33\x50\x13\xd0\x9a\x20\xc0\xcd\x9d\x56\xdd\x48\xed\xe4\xb8\x04\x5b\x28\xfb\x01\x96\x90\x31\x0c\x72\x2d\xad\x5a\x60\xdb\x22\xf9\xad\x8f\x6d\x44\x07\x2d\x8d\x60\x63\x31\x6e\x2a\x87\xf6\x01\xe8\x70\xff\xe9\xbc\xda\xf9\x7e\x89\xc8\xd7\x9e\xc0\x32\xd2\x5e\xab\x76\x30\xd4\x06\xbf\x6e\x27\x46\xde\xf9\xfe\x84\xbe\x92\x7f\x3c\xf3\xa8\xc4\x23\x5e\x93\xd1\x3e\x54\x4a\xc1\x13\xd8\x1f\x4d\x74\x01\xe8\xd6\xf4\xa0\x55\x34\xec\x07\xa8\x20\x9a\x75\x80\xdf\xa2\x77\xc1\xc7\xad\x56\x4c\x05\x2a\xdf\x9b\x2d\x1c\xfa\xda\x20\xf5\x86\xb5\xfa\xfc\x59\x35\xd3\xd7\xe6\x46\x18\xb9\xf9\x34\x22\xea\x2f\xf5\x58\x90\x41\x7d\xf9\x52\x29\x15\x0c\x43\x66\xad\x36\x26\x64\xa8\x7c\x62\x29\x90\x57\xfb\x68\xef\x80\x3c\x3a\xad\x3e\x74\xb9\x7a\xf0\xd1\x69\x75\x8b\x6e\xae\x53\x3d\x94\x35\x04\xe0\x4b\xda\x96\x1e\x22\x67\x29\xbc\x46\xe4\xcc\x64\x52\x2d\xa8\x7d\x6d\xa8\xfe\xa7\xae\xaf\xd4\xe6\x40\xad\x94\xb2\x40\x5c\x3b\x4f\x6f\x44\x09\xec\x37\xf2\xa0\x20\x0b\x3b\x60\x71\xf5\x5b\x75\x46\x34\x11\x0e\xde\x01\xb5\xe6\xb9\x10\x4c\x73\x7c\x09\x7c\xc1\xa6\xd0\x91\x20\xca\x8f\x0a\x4b\x56\x26\x0c\x01\xa8\x36\xcc\xc6\xee\x6a\x07\xf2\x33\x91\xdf\x89\xee\xef\x44\x6b\x30\x5c\x08\xea\xad\xb4\x34\x61\x4b\x64\xc3\xf0\xd3\xa4\xcf\x55\xf0\x10\xf9\xea\xd0\xf7\x47\x89\x7c\x7f\xc2\x59\x01\x0d\x40\x5f\x73\x2a\xa5\xe4\xce\x75\x30\x6b\x08\x73\xea\xf1\x03\x61\x80\x51\x35\x8a\xc0\x90\x1b\x8f\xad\x4c\xfa\xfb\x27\x26\xd3\x2c\x31\xc8\x5c\x5f\x32\xd4\x0a\x13\xc4\xbc\xf3\x1b\xae\x7d\xdc\x90\xf9\x68\x92\xcf\x63\xbd\x4a\xa9\x84\xae\xee\x4d\xf4\x1b\xc8\x5c\x27\xc3\xbb\x37\x64\x4f\xe8\x44\x6e\x1a\x9b\xae\x8f\x87\xf0\x95\x1a\x54\x22\xfb\x1e\x6a\x82\xc7\x22\x39\xe5\x80\x85\x27\xd6\xa2\x93\x2d\xc8\xfb\xcc\xd0\xd7\x04\x63\x17\x6e\x82\xa4\xff\x6b\x20\x3f\x80\x6b\x56\x23\x61\x39\xe3\xe3\x0b\x66\xe3\x23\x90\xc8\xe4\x2d\x9c\xdc\xf4\xe8\x25\xf7\x46\xd6\x7d\xd6\x1b\x63\x04\x2b\xd6\xf1\xcb\x00\x44\xde\x4d\x9d\x1a\x6b\x21\x09\xc8\x10\xf9\x7e\x9f\x20\x6b\x65\x52\x0a\xb3\x43\xb5\x43\x74\xc7\xc2\x26\x42\xc6\x75\xd9\xbc\x3f\xe6\xfc\x91\x31\xca\x53\x2f\x24\x4b\x73\x2e\x5e\x65\x0f\x09\xff\x53\xbe\x4a\xa9\xc7\x94\xb5\x3a\xeb\xe6\xa6\xe5\x1d\xcc\xeb\x3b\x8e\xf8\x78\x27\x22\xf0\x9f\x48\x0f\x87\xed\xee\xb9\x68\xb5\x38\xbf\x90\xca\x33\x78\x17\xca\xd6\xc7\xc9\x27\x08\xdc\xce\x70\x7b\x18\x3b\x0e\xb9\x9e\x79\x09\x83\xb7\xfb\x2a\x11\x3e\xed\x4f\x16\x77\xf6\xca\xda\x7a\x47\x2f\xc3\x6a\x16\x67\xff\x17\xaf\x6c\x17\xe7\x95\xcc\xc2\xc7\xed\x4d\xdc\xe0\xb8\xe7\xc7\xfe\x3b\x5b\xaa\x5e\x74\x67\x63\x4f\x02\xde\x4e\xf5\xb4\x62\x9b\xce\xc7\xfc\xe3\x54\x2e\xb5\xb2\xa6\xb1\xc4\xd5\x80\xa1\xf4\x47\x96\x35\x9a\xf4\xaf\x05\xd9\xc8\x49\xa9\x04\xf4\x69\xf5\x03\x61\x49\x5a\xc5\x12\xc2\x1c\xf0\x2d\x8f\x9d\x1f\xea\xeb\x85\x27\xc3\x6f\xa6\x80\x5c\xfd\x1d\x00\x00\xff\xff\x45\x94\x88\xbf\xc2\x06\x00\x00")

func masterEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeConfigYaml,
		"master/etc/origin/node/node-config.yaml",
	)
}

func masterEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeKubeconfig,
		"master/etc/origin/node/node.kubeconfig",
	)
}

func masterEtcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x0c\x72\xc9\x49\xf6\x06\x9b\xbd\x10\xc8\x21\xc8\x02\xbb\x01\xd2\x54\x40\x82\xde\xc7\xd2\xc4\x1a\x98\xe2\xb0\xe4\x48\xa9\x9a\xe6\xbf\x17\x94\x28\x37\x89\xed\xb4\x05\x7a\xb2\xe7\xeb\xbd\xc7\xc7\x11\xd1\xf3\x27\x0a\x91\xc5\x19\xe8\xcf\x16\x5b\x76\xb5\x81\x52\xea\x45\x4b\x8a\x35\x2a\x9a\x05\x00\x3a\x27\x8a\xca\xe2\x62\x0a\x01\x62\xd5\x50\xdd\x59\x0a\x4b\xb4\xbe\xc1\xe5\xb6\x5b\x53\x70\xa4\x14\x97\x2c\xab\x2a\xb0\x72\x85\xb6\xf0\x52\x1b\x38\x3d\x5d\x00\x58\x5c\x93\xcd\xc3\xe2\xc9\xc5\x86\x1f\x74\xec\x95\xd6\x8b\x23\xa7\x06\xd0\xf3\xa1\xba\xd3\x20\xb6\xf0\x16\x1d\x19\x38\xd5\xd0\x51\x02\x74\xd8\x92\x81\x16\xa3\x52\x28\xa6\xc9\x94\x8a\x1e\x2b\x32\x90\xf4\x14\x71\x88\x4a\xed\x22\x7a\xaa\x12\x71\x42\x42\x76\x14\x46\x19\x05\x60\xd8\x64\x41\x05\x44\xc5\xa0\xf9\xff\x84\x99\x83\x59\x53\x01\x45\x51\x89\x7b\xe0\xcd\xc5\x8a\xb4\x5a\x49\xe0\x0d\xbb\xd5\xd4\x9b\x7f\x72\xc3\x72\xc0\xd6\xe6\xa1\xa7\x27\xf0\x81\x9d\xc2\x49\x51\x58\xd9\x58\xea\xc9\x5e\x9c\xc0\xf2\x6a\xea\xbc\x9a\x0f\x7f\x23\x9b\x9b\x54\x5b\x5e\x96\xd7\x77\x14\x7a\x0a\xf0\x0d\x3e\x77\xa2\x04\xcf\xcf\x23\x56\x25\x6d\x8b\xae\x9e\x05\xef\x3c\x1a\x63\x6e\x71\x43\x26\xb1\xcd\xc8\xd7\x29\x13\x53\x94\xdc\x2b\x93\x79\x6f\x11\xc7\xa1\xb2\xb3\xb6\x14\xcb\xd5\x60\xe0\xd2\x3e\xe2\x10\xc7\x9a\xe5\x9e\x1c\xc5\x58\x06\x59\xd3\xc4\x09\xd0\xa8\xfa\xff\x48\xe7\x10\xc0\xa3\x36\x06\x1a\x42\xab\xcd\xd7\x1f\x59\x09\x6a\xe0\xfc\xfc\xef\x5d\x26\x6d\x4b\xba\xad\xff\xef\xef\xcb\xbb\x9c\x65\xc7\xca\x68\xff\x25\x8b\xc3\x1d\x55\xe2\xea\x68\xe0\xfc\x9f\x5c\x55\x6e\x49\x3a\xdd\x15\xce\xfe\x1a\x0b\xd3\xa5\xcf\x77\x12\x08\x6b\xfe\x4d\x95\xab\x34\x34\xfc\x09\xad\x59\xd2\x51\xad\x91\xaa\x2e\xb0\x0e\xe9\x0a\xe8\xcb\x4e\x8f\x0f\xdc\xb3\xa5\x0d\xd5\x06\xd2\x2e\x8f\xe9\x5e\x6c\xd7\xd2\x07\xe9\x9c\xee\x56\xb2\x4d\x51\x39\x6a\xdf\xdf\xb8\x0c\xf6\xea\x23\x98\xb6\x2f\x57\xd2\x31\x3f\x3a\x3b\xbc\x20\x39\x0a\x59\x59\xe9\x6a\x1f\xa4\xe7\xfa\x08\x72\x6a\x28\xde\x74\xfc\x94\xa1\xc7\xb0\xb2\xbc\x9e\x59\x0e\x01\xa7\xf7\xe5\x88\x36\xbf\xe5\x43\x13\x53\xba\x91\xa8\xb7\xa4\x8f\x12\xb6\x3b\x7a\x1f\x58\x46\xbf\x2d\xc6\x78\x3b\xce\x4c\x0f\x40\xe1\xa4\xa6\x62\x7e\x93\x16\xb3\xdb\xf9\x15\x48\x50\x23\xed\xe2\xe5\xb6\x1c\x71\xfc\xb0\xdf\xbf\x02\xb2\xef\xf1\xfb\x0e\x1f\xc5\x7c\xed\xea\x3e\x52\xb6\xf4\x5d\x4d\xb3\xb7\x7b\xce\x7e\x0f\x00\x00\xff\xff\xd2\xc0\xee\x81\x0d\x06\x00\x00")

func masterEtcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsApiserverYaml,
		"master/etc/origin/node/pods/apiserver.yaml",
	)
}

func masterEtcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x88\xdc\x1d\x6f\x40\x0f\x83\x81\x1e\xba\x66\x58\x87\x35\x9d\x81\x76\xc5\x6e\x05\x23\xb3\x0e\x11\x59\xf2\x44\xda\x6d\xd6\xf5\xdf\x07\xd9\x4e\xba\xa4\x4e\xb1\x25\x07\x4b\x22\xf9\x48\xbe\x47\x09\x6b\xbe\xa5\x20\xec\x5d\x06\xed\xfb\xc9\x9a\x5d\x91\x41\xee\x8b\x49\x45\x8a\x05\x2a\x66\x13\x00\x87\x15\x65\x60\xbc\xd3\xe0\xad\xa5\x20\xc3\x99\xd4\x68\x28\x83\x75\xb3\xa4\x44\x36\xa2\x54\x4d\x00\x2c\x2e\xc9\x4a\x0c\x03\xf0\x35\x39\x59\xf1\xbd\xce\xd8\xa7\xc6\x57\xb5\x77\xe4\xf4\x10\xea\x95\x5f\x67\x4c\x6a\x8b\x8e\x32\x98\x6a\x68\x68\x3a\x91\x9a\x4c\x04\x8d\x56\x64\x47\xa1\x4b\x91\x00\x86\x72\x48\x96\x80\x28\x06\x1d\xd6\x15\x8a\x52\x18\x36\x87\xf9\x12\x48\x12\xe3\xdd\x3d\x97\xa7\x29\xa9\x49\x7d\xe0\x92\x5d\xda\xc7\x0c\x9f\xc1\x61\xb6\xc1\xca\xee\x82\x2c\x8b\x92\x3b\x5d\xa9\xd6\x92\xa5\xe9\xbb\x59\xf7\xcf\x3e\x9c\x9c\x9c\x0c\x3e\x4f\x4f\x50\x07\x76\x0a\xd3\x24\xb1\xbe\xb4\xd4\x92\x3d\x9d\xc2\xec\xbc\x47\x3b\xdf\x92\x70\xe9\xcb\xcb\x68\x8b\x86\xa1\xb6\x05\x3a\x2c\x29\xc0\x6f\xf8\xd9\x78\x25\x78\x7e\xee\x30\x8d\xaf\x2a\x74\xc5\xb6\xc9\x1d\x57\xdd\x9e\x5c\xbb\x35\xf4\x2a\x7d\xfd\xfe\xf1\xd3\xdd\xe2\xec\xc7\x5d\x3e\xbf\xbb\xfd\x76\x79\xdd\x19\x01\x5a\xb4\x0d\x65\xb1\xba\xd9\x9c\x02\xb7\x54\xcc\x16\xf8\x38\x47\xc5\x39\xcb\x5a\x72\x0a\xb7\x8b\xae\xc8\x9e\xdc\x6b\x0a\x2d\x1b\x3a\x2c\x85\x2b\x2c\x07\x94\xa1\x9f\x2f\xf1\x44\xb6\x4d\xe4\x51\xb2\xd1\xa0\xbc\xb1\x36\xf7\x96\xcd\x26\x83\x33\xfb\x80\x9b\x5e\x08\xcb\x2d\x39\x12\xc9\x83\x5f\x52\x36\xd4\x1a\xd9\xfd\x4c\xba\xdd\x02\xd4\xa8\xab\x0c\x56\x84\x56\x57\xbf\x5e\x4e\x7d\xd0\x0c\x76\xd4\xc7\x9f\x98\x15\x45\x12\x2e\x6e\x6e\xf2\xbe\xf3\xb1\xd1\x05\x10\x32\x4d\x60\xdd\xc4\xb2\xe9\x71\x97\xa9\x0e\xdc\xb2\xa5\x92\x8a\x0c\xe2\xd4\x75\xc7\xad\xb7\x4d\x45\x0b\xdf\x38\xdd\x0d\x5a\x15\x77\x79\x57\xd5\xc8\xfc\x0c\x68\x7d\xea\xbd\x61\x7a\x3b\xdc\x58\xdf\x14\x75\xf0\x2d\x17\xc7\x50\xa2\x47\xb2\x75\x39\x82\xf6\x72\x43\xd2\x40\x25\x8b\x06\x26\x99\x15\xfb\x80\xc2\xa5\x43\x6d\x02\x25\x5c\x45\x22\x47\xb0\x1a\x09\xa9\xe5\x25\x3d\x92\x49\xe3\x15\x0f\x8e\x94\xa4\x5b\x5a\xd2\xa4\xb6\x4d\xc9\x4e\x06\xd4\x3e\x30\xf8\x1a\x4b\xd4\xee\x35\xb9\xf0\xa2\x37\x7e\x37\x51\x7b\xd9\x5f\x63\xac\xbc\xe8\x15\xe9\x83\x0f\xeb\x1d\xf7\x75\x60\xdf\xa9\x64\x51\xe4\xaa\x2f\xbb\x7b\x65\x12\xe7\x0b\x4a\x4c\x60\x65\x83\xf1\x72\xf6\x1a\x0d\x2f\x42\x84\xea\x5a\x98\xfc\x3d\x3d\xc7\x74\x1a\x57\xe9\x5f\x50\xf6\xe4\x1a\xc1\x3a\xd4\xea\x4d\xcc\x23\xa2\x4d\xde\x54\xec\x28\xe2\x7f\x48\x37\x2e\xc8\x9f\x00\x00\x00\xff\xff\xf2\x0e\x80\xb7\x17\x06\x00\x00")

func masterEtcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsControllersYaml,
		"master/etc/origin/node/pods/controllers.yaml",
	)
}

func masterEtcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x6f\xe2\x3a\x10\x7d\xe7\x57\x58\xbc\xf4\xc9\x41\xb4\xf7\xf6\xde\xfa\xad\x82\x4a\x5b\x69\xcb\x22\x6d\xb5\xaf\xab\xc1\x9e\x12\x0b\x67\x9c\xb5\x27\x69\x51\xcb\x7f\x5f\xd9\x49\x20\xfd\xe0\x01\xb0\xcf\xcc\x1c\xcf\x39\x1e\x03\xb5\xfd\x85\x21\x5a\x4f\x4a\xb4\xf3\xc9\xce\x92\x51\x62\xed\xcd\xa4\x42\x06\x03\x0c\x6a\x22\x04\x10\x79\x06\xb6\x9e\x62\xda\x0a\x11\x75\x89\xa6\x71\x18\x0a\x70\x75\x09\xc5\xae\xd9\x60\x20\x64\x8c\x85\xf5\x33\x1d\x2c\x5b\x0d\x4e\xd6\xde\x28\x71\x71\x31\x11\xc2\xc1\x06\x5d\x5f\xec\x6b\xa4\x58\xda\x27\xce\xb9\xbe\xaa\x3d\x21\xb1\x12\xc8\xda\x7c\x95\x40\x1c\xbc\x93\xb5\x03\x42\x25\x2e\x38\x34\x98\x18\x09\x2a\x54\xa2\x82\xc8\x18\x64\x5f\x9a\xb0\x58\x83\x46\x25\x52\x47\x32\xee\x23\x63\x35\x89\x35\xea\x74\x74\xa2\x02\x4b\x18\x72\x23\x52\x40\xd8\xf6\x2d\x49\xf1\x96\x7f\x85\x88\xc8\x42\x42\xbf\x29\xc4\x0c\x59\xa7\x8f\xc9\x5f\x85\xf6\xf4\xd4\xc7\xf0\x05\xf5\xa9\x65\xed\xab\x0a\xc8\x0c\x6c\xb3\x8d\xa5\x59\x2c\xfb\x9d\xd4\x79\x81\xd4\x0e\xf1\xae\xf9\xbb\xc7\xc5\x72\xf1\xf8\xfd\xf7\xed\xfa\xbe\x27\x6d\xc1\x35\xa8\xc4\xf4\x6a\x9a\x01\x5b\xc1\x16\x95\x78\x7d\x15\xc5\xc2\xd3\x93\xdd\x16\xf7\x09\x89\xc5\x43\x96\x7d\xc7\xda\x88\x37\xf1\xa7\xf1\x8c\xe2\x70\x38\x95\xac\x1b\xe7\xd6\xde\x59\xbd\x57\xe2\xd6\x3d\xc3\x3e\xe6\x98\xb3\x2d\x12\xc6\xb8\x0e\x7e\x83\x6a\xa4\x63\x58\x7f\xd0\xd1\xf5\x9a\x34\x6a\x76\x23\x44\x4a\x0d\x1a\x03\x8f\xa0\x93\x4f\x1a\x0a\xfd\x2e\x24\xe5\xd9\xdc\x1a\x31\x7c\xca\xde\xe1\xfe\x7c\xf2\xfb\xa0\x94\x48\xa6\xf6\x96\x38\x8e\xd0\x92\xb9\x8e\x6a\x36\x4b\xb6\xdd\xbd\x70\x80\xe2\x9b\x8f\x9c\x2c\x17\x87\x83\xba\xbc\xfa\xef\x66\xac\xae\x27\x18\xd7\x23\x38\x2e\x7b\xc0\x92\x65\x0b\x6e\x89\x0e\xf6\x3f\x51\x7b\x32\x51\x89\x7f\xfe\xcd\xd1\xee\x16\x8f\x33\x10\x51\x37\xc1\xf2\x7e\xe1\x89\xf1\x85\x07\x0f\xeb\x60\x5b\xeb\x70\x8b\x46\x89\x34\xbc\x19\x6e\xbd\x6b\x2a\x7c\xf0\x0d\xf1\x71\x04\xab\xb4\x5b\x03\x97\xea\xa4\xba\xe7\x38\x9d\x24\x75\x1e\x84\x1e\x0f\x08\xe6\x07\xb9\xfd\x88\xf9\x3d\x4f\x0b\x61\xe6\xec\xe6\x0c\x57\x7a\xdf\x19\x7d\xf6\x61\x67\x69\xbb\xb4\xe1\x73\x4d\xe9\x23\xaf\x90\x53\xca\xf1\x18\x43\x71\x98\xaf\xe9\xca\x13\x4e\x3b\xac\x1b\x52\x75\x34\x27\x62\x68\xfb\xd7\xd6\xb5\x36\xbf\xfe\xbf\xb8\xbe\x2a\xe6\x97\x37\xc5\xfc\xba\x37\x0d\x82\x2e\x71\x94\x73\xba\xb6\xa5\xaf\xc0\xd2\xaa\xbb\xb8\x49\x76\xd2\x67\x83\x1d\xc4\xb8\xca\x32\xba\x17\x2e\xc9\x1b\x94\xc3\xdf\xce\x64\xb0\xb7\x7f\xe6\x49\x40\xb6\x63\xb8\x90\x2f\x2c\xfe\xca\xe0\xb3\x95\x9f\x4c\xfd\x68\xe9\xdf\x00\x00\x00\xff\xff\x45\x17\x38\x32\x55\x05\x00\x00")

func masterEtcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsEtcdYaml,
		"master/etc/origin/node/pods/etcd.yaml",
	)
}

func masterEtcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x73\x13\x37\x10\x7e\xf7\x5f\xb1\x4d\x19\x02\xd3\xde\x9d\x9d\x92\xc9\x70\x99\xd0\x61\x68\xa7\xc3\x03\x3f\x86\xb4\xbc\x30\x0c\xc8\xba\xb5\x6f\x1b\x9d\x24\xb4\x2b\x1b\x37\xe4\x7f\xef\x48\xbe\x73\x6c\xe2\x50\x0a\x4f\xb6\x56\xbb\x9f\x76\xbf\xfd\x56\x3a\xe5\xe9\x35\x06\x26\x67\x6b\x58\x4c\x46\x17\x64\x9b\x1a\x5e\xba\x66\xd4\xa1\xa8\x46\x89\xaa\x47\x00\xca\x5a\x27\x4a\xc8\x59\x4e\x4b\x00\xd6\x2d\x36\xd1\x60\x28\x95\xf1\xad\x2a\x2f\xe2\x14\x83\x45\x41\x2e\xc9\x55\x3a\x90\x90\x56\xa6\xf0\xae\xa9\xe1\xf0\x70\x04\x60\xd4\x14\x4d\x1f\xac\xbc\xaf\xc1\x2d\x38\x2f\xb4\xeb\xbc\xb3\x68\xa5\x06\x8b\xb2\x74\xe1\x22\x9b\x9d\x47\xcb\x2d\xcd\x24\xe3\xed\xf7\x91\x95\xc7\x1a\xc8\xce\x82\x1a\x01\x58\xd5\xe1\x00\x9b\xfe\xb3\x57\x3a\x19\x06\xa0\x82\x1b\x3b\x62\x8f\x3a\x25\xa1\x9d\x15\x45\x16\x43\x4e\xa9\x48\x59\x74\xca\x36\xeb\xfc\x0a\xa8\xa6\x64\xab\xa9\xe2\xb6\x5f\x17\xba\xff\xf3\x29\xff\x02\xfc\xf8\xc3\xae\x0b\x00\xa3\x40\x81\xd1\x81\x27\x8f\x33\x45\x66\x34\xb8\x02\xcd\x40\x59\x27\x2d\x06\xf0\xc1\x69\x64\x06\x62\x30\xc4\x82\x96\xec\x1c\x9c\x05\x69\x11\xb4\xa5\x82\x31\x2c\x30\x00\x3b\x7d\x81\xf2\x33\x2c\x15\x09\x44\x2b\x64\x80\x04\xf0\x23\x09\xf7\xa8\x12\x94\x87\xc3\x0b\x32\x06\xee\xdc\xfb\xdb\x4d\x19\x0a\x7f\xff\x34\xbb\xc0\xf8\x10\xfe\xfc\xfd\xd5\xb3\xde\x33\xa0\x04\x42\x3e\x1b\xf7\xeb\x65\x4b\x06\x41\x42\xc4\x53\x68\x5c\x6f\x84\x94\x64\x15\x39\x54\xdc\xaa\x80\x55\x62\x6d\xc1\x4b\x12\xdd\x56\xac\x03\x79\xe1\xca\x2d\xb8\xd0\x62\x80\x45\x49\x64\xb8\xfb\xa8\x6a\x70\x51\xd9\x68\xcc\x69\xca\xdf\x6e\xa0\x00\x50\xb7\x0e\x0e\x96\x2a\xa4\xfa\x6a\x78\x7c\xb3\x7a\x1d\x43\x40\x2b\x66\x05\x9d\xb2\x6a\x9e\x68\x78\xf1\xfa\x7c\x5d\x71\x5a\x4c\x8e\x19\xca\xb2\x3c\x80\xa3\x47\x77\x27\x5b\xc8\x6c\x10\x3d\x4c\x8e\xe1\x6e\x76\xdd\xda\xb9\x77\x6f\x28\x15\x7e\x3a\x83\x09\xdc\xbf\xbf\xd9\x44\xc3\xb8\xe5\x39\x0d\xa8\x2e\x36\xeb\x19\x6d\x73\xf0\xe6\x0d\x1c\xdc\xb9\xec\x81\xae\x0e\xa0\x98\x0b\x3c\x18\xc3\xdb\xb7\xb7\xd4\x88\x21\xb8\xf0\xbf\x2a\x4c\x2d\x22\x3b\xbf\x51\x59\x6e\xdd\xe4\x66\x5a\x8d\xb3\x78\xad\x25\xa3\xa2\xd5\x6d\x42\xea\x4d\xb3\x68\x75\x1a\x4c\xf8\x10\x49\xe0\x72\x0b\xf0\xab\xdb\xe9\xfc\xe7\x69\x0c\x5a\xb9\xda\x56\x5b\x3e\xe0\xfc\xe9\x1f\x5b\xda\xfa\x7a\xc5\x04\x81\xa2\xb0\xae\x48\xa6\xde\xad\x81\xa2\xe0\x15\x0b\x76\x05\x35\x67\x41\xd9\xc6\x75\xd7\x85\xbe\x42\x96\x40\x5a\xf2\x68\xd8\xd8\x4d\x31\x80\x9b\x81\x97\x36\xa0\x6a\x18\x76\x80\x74\x40\x25\xc8\x20\x0e\x02\x36\x51\x63\x8a\xda\x40\xa9\xce\x45\x2b\x29\xfa\xd5\xf9\x79\x1a\xa4\xc8\xc8\x69\xea\x5a\xc7\xc2\xb0\x24\x69\x53\x8f\x56\xa0\x5d\x40\xde\x84\xb5\x22\x9e\xeb\xaa\x9a\xc6\xf9\x3f\x64\x8c\x2a\x03\x36\xad\x92\x52\xbb\xae\xe2\xd6\x2d\xdf\x4d\xe3\xbc\xd4\x73\xfa\x95\x9a\xb3\xc9\xf1\xc9\xe4\x97\x93\x87\xdf\x1a\x7b\x74\xf2\xf0\x64\xb4\xad\xc1\xf7\x36\x29\xe9\x7d\x96\xdf\xe4\x68\x9f\xfc\xd6\xf5\x27\x76\x33\xaf\xf9\xa6\x48\x77\xd0\x0b\x8f\xf6\xdd\xe2\x3c\x13\x03\x25\x64\x59\xbe\xd3\xce\xce\x68\x5e\xdb\x22\xe0\x42\x19\x6a\x94\xb8\x50\xf4\x4c\x9e\x3d\xf8\x6e\xd4\x56\xd9\xc6\xe0\x35\xe2\x64\xd0\xcf\x46\xc4\xdf\x24\x94\x66\x3a\xdc\x87\x7b\x84\xb2\xc6\xdd\xbd\xcc\xfa\xdb\xe1\xf8\x74\x3d\x34\x99\xce\x4e\xcd\xb1\x86\xcb\x4b\x28\x9f\xe4\x74\xcb\xa7\xc9\xc2\xe5\x73\xd7\x20\x7c\x82\x0f\xd1\x09\xc2\xd5\x5a\xe8\xfd\x13\x72\x9d\x60\xb6\x06\x64\x17\x83\xc6\xfe\xf5\x02\x30\xd4\x91\x6c\x56\x00\xda\xc7\x1a\x8e\xc6\xe3\x6e\x63\xe9\xb0\x73\x61\x55\xc3\x83\xf1\xf8\x19\x6d\xee\xe1\x0f\x11\xf9\x46\xdc\x64\x4f\xd8\x64\x13\xc6\xa8\x63\x20\x59\x3d\x71\x56\xf0\xa3\x0c\xb1\x3e\xd0\x82\x0c\xce\xb1\xa9\x73\xf1\xc3\x11\xd1\x3e\xe6\xbf\x18\x43\xdd\x4f\xf0\xc2\x99\xd8\xe1\xb3\x24\x7f\x1e\xde\xb6\x3c\x0c\x2f\x95\xb4\x35\x54\x86\xa6\x55\xe7\xd2\x43\x3e\xc8\x7e\x4d\x41\x1a\x8c\x62\x77\x23\x75\xf6\x85\x35\xab\xad\x03\x77\xb1\x42\xb4\xd5\xe7\xd4\xed\xe0\x85\x68\x8b\xe1\xd5\xdf\x0d\x5d\xa8\xf0\x3d\xe1\xbc\xda\x93\xfd\xb5\xf1\x3f\x33\x47\xd1\x5f\x3e\x7a\x2d\xf4\x62\xd7\x27\xed\x3c\x5f\x7f\x8d\x6c\x90\x93\xed\xe5\xd3\xdf\x36\x6b\x1f\xc8\xe5\xf6\x19\xc5\xfc\x3c\x03\xf6\x42\xb6\xae\xc1\x62\xf8\x4e\x1a\x0d\x9d\xea\xbf\x46\x32\x4c\xca\x6d\x68\xf7\xfe\x6e\xed\xed\xd5\xad\xd1\xfb\x08\xde\x4b\xef\xad\x08\x03\xa5\x37\x58\xbe\x35\x22\x33\x1b\x68\x4e\x5f\x3c\x7a\x0f\xbd\xff\x06\x00\x00\xff\xff\x44\x82\x43\x11\x96\x0a\x00\x00")

func masterEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsOvsYaml,
		"master/etc/origin/node/pods/ovs.yaml",
	)
}

func masterEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcd\x8a\xa6\xdd\x46\x29\x2e\xd6\x61\x50\x91\x02\x5d\x92\x75\x01\x1a\x27\x68\xd3\x62\x40\x50\x14\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x7a\x69\xfe\xfb\x40\xea\xc5\x76\x14\x39\x49\xf7\x69\x5f\x5a\x93\x77\xf7\xdc\xeb\x73\x54\x78\x21\x3f\xa2\x75\xd2\xe8\x04\xaa\xf1\x68\x21\x75\x9a\xc0\x99\x49\x47\x39\x12\x4f\x39\xf1\x64\x04\xc0\xb5\x36\xc4\x49\x1a\xed\xfc\x11\xc0\x89\x0c\xd3\x52\xa1\x8d\xb8\x2a\x32\x1e\x2d\xca\x29\x5a\x8d\x84\x2e\x92\x26\x16\x56\x92\x14\x5c\xb1\xc2\xa4\x09\xec\xec\x8c\x00\x14\x9f\xa2\x6a\x8c\x79\x51\x24\xe0\x52\x1d\x0e\xc2\xe4\x85\xd1\xa8\x29\x01\x8d\x74\x69\xec\x22\x5c\x9b\x02\xb5\xcb\xe4\x8c\x02\xde\xed\x3a\xb4\x2c\x30\x01\xa9\x67\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xbf\x5d\xc1\x05\x26\x2b\x20\xe6\x45\xae\x40\xe1\x83\x10\x46\x13\x97\x1a\x6d\x08\x89\xf9\x28\x72\xae\xd3\x3a\x3e\x06\xf1\x54\xea\x78\xca\x5d\xd6\x9c\x99\x68\x7e\x7c\x0b\xff\x03\xfc\xf0\x68\x53\x05\xc0\x21\x01\xc3\xd2\x40\x21\x0b\x9c\x71\xa9\x46\xad\x2a\xc8\x19\x70\x6d\x28\x43\x0b\x85\x35\x02\x9d\x03\xe9\x40\x49\x47\xa8\xa5\x9e\x83\xd1\x40\x19\x82\xd0\x92\x39\xb4\x15\x5a\x70\x46\x2c\x90\x7e\x86\x4b\x2e\x09\x4a\x4d\x52\x81\x24\xc0\xaf\x92\x5c\x83\x4a\x96\x17\xb0\xbb\x90\x4a\xc1\xe3\xa7\x7f\x9b\xa9\x03\x56\x3c\x7b\x19\x54\x60\x6f\x17\xce\x8f\xde\x9d\x34\x9a\x16\xc9\x4a\x74\xfb\x7b\xcd\xf9\x32\x93\x0a\x81\x6c\x89\x2f\x21\x35\xcd\x25\xf8\x20\x51\x64\x06\x76\x09\x1d\xed\xc2\x37\x1f\x03\x27\x60\xf0\x61\x72\xfc\x17\x3b\x38\x9d\x4c\x8e\x0e\xce\x93\xb8\xe2\x36\xb6\xa5\x8e\x37\xca\x1a\xaf\x42\x8f\x7c\xe8\xf0\x2a\x4e\xb1\x8a\x75\xa9\xd4\x4b\x9f\x9a\xee\xbc\x40\xed\x64\xe7\x92\x5b\x9f\x7a\x02\xaf\xfb\x85\x11\xa5\xb5\xa8\x49\x2d\xfb\x25\x3a\x98\x1c\x6f\xd4\xc6\x8b\xc6\x2f\x1c\x44\x51\xb4\x03\xcf\x5f\x3d\x19\xaf\x39\x72\x0a\xb1\x80\xf1\x0b\x78\x12\x54\xd7\x24\x4f\x9f\xb6\x45\x81\x9f\xf6\x61\x0c\xcf\x9e\x75\x42\x54\x0e\xd7\x34\xa7\x16\xf9\xa2\x3b\xcf\xe4\x7a\xb5\x2e\x2e\x60\xe7\xf1\x55\x03\x74\xbd\x03\x6c\x4e\xf0\xcb\x1e\x7c\xfa\x34\x90\x32\x5a\x6b\xec\x7f\x49\xd8\xf7\x56\xea\x79\x2f\xd1\xd0\xf3\x71\x3f\xca\xd4\x68\x5c\x9f\x41\x8f\xa7\x4d\x8a\x7e\xf8\x67\x72\x0e\xa9\x41\xa7\x77\xc3\x58\x39\x82\x65\x7f\xde\xbc\xc2\x83\x87\xe8\xe2\x02\x1e\x01\x9b\x41\x8c\x24\x62\x63\xe5\x5c\xea\xd8\x7b\x0d\xff\xb0\xda\x75\xb4\xe4\xb9\x1a\xae\x54\x37\x1c\x07\x61\xef\xc0\x4c\xea\xb4\x8e\xd2\x57\xe6\x26\xce\xff\x76\x12\x26\x66\x5b\x52\xdf\xd5\xed\xae\xdd\xe7\x7c\x81\x60\xfc\x2a\x69\x16\x26\xcc\x4a\x2d\xc2\x02\x6f\x47\xcb\xbb\x6c\xbb\x9b\x03\x7b\xd7\xb4\x4c\x68\x19\x6b\xa4\x28\x8d\x7f\xdb\x63\x2b\x96\x37\x30\x91\x8f\xb1\xb1\x12\x45\x6d\x65\x0a\x0a\x56\x7e\x21\xfe\x08\x71\x66\x1c\x6d\xdc\xb5\x51\xd5\x95\x6a\x47\xc3\x2d\x5d\x9d\x6f\x33\x24\x2c\x8c\x66\xaf\x66\x61\xad\x1a\xe0\x4a\xe1\xd7\xc2\xd8\x55\xf3\x9c\x29\xad\xc0\x2d\x58\xa3\xae\x40\xa3\xb6\x72\x28\x56\xcf\x01\x38\xe2\x96\xba\xf2\xb0\xa6\xfa\xfb\x77\xcf\x2d\x63\xfe\xb5\x1b\x52\x77\xa9\x8e\x56\x72\x60\x4c\x99\xb9\xc2\x0a\xd5\xfe\xe3\xab\xc3\xa3\xdf\x3f\xbc\xf9\xfc\xf6\xf4\xcd\xdb\xa3\x8f\x47\x6f\x13\xf6\xfc\x3a\x84\x86\xba\x6a\x1f\x9e\xfa\x11\x3b\x3d\x3b\x9a\xbc\xff\xf3\xf8\x8f\xf3\xcf\x87\x93\xf7\x9f\x0f\x4f\x4f\x5e\x1f\x4f\x9a\x24\x2a\xae\x4a\x4c\x40\xa8\xd2\x11\xda\x48\x19\xc1\x55\x10\xc9\x9c\xcf\x31\x81\xab\x2b\x88\x0e\xea\x60\x8f\xfd\x8d\x8b\x26\xbe\xae\xdf\xe0\x4b\x69\x08\xe1\xba\xf6\xb8\xfe\x56\x02\xf8\xba\xba\x36\x82\xee\x65\x3c\x33\x96\x12\x18\xef\x3d\x7f\xf1\x6b\xe3\xdb\x77\xb6\x7f\x5b\x63\x65\xc8\x15\x65\xff\x8c\xea\x65\x51\x37\xa7\xc1\xf4\x17\x5f\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x2e\x72\xcc\x8d\x5d\xfa\xbb\xbd\x93\x7a\xa4\x1d\x8a\xd2\x4a\x5a\x1e\x18\x4d\xf8\x95\x5a\xdb\xc2\xca\x4a\x2a\x9c\x63\x9a\x84\xfd\xd3\xba\x28\xf5\x6b\xf7\xc1\xa1\x4d\xa0\xde\x51\x95\x51\x65\x8e\x27\xa6\xd4\xab\xdc\x72\x7f\x3a\xe3\x94\x25\xfd\xf5\xb4\x99\x8d\x71\xd4\xf4\xbc\x4b\x81\xa7\xa7\x5a\x2d\xd7\x9c\xf6\xf1\xb6\xcd\xe1\x1a\x70\xa7\xb6\x2e\xbf\xd3\x41\xf3\xf2\xf6\xe1\x2a\x6e\x59\x2b\xb8\xd5\x24\x4e\xa7\xa5\xbb\x25\xc1\xc6\x90\x79\xf1\x03\xa3\x08\xef\x7f\xe5\x2e\x25\x89\x6c\x0b\xb2\xa9\x1e\x0c\xbc\xfa\x92\xdc\x82\xbb\x52\xfa\x9e\xb8\x57\x9f\x83\xc3\x81\xf7\xd4\x36\xe1\x6e\x2e\xb9\x3e\x92\x29\x88\xf9\xcf\xa2\x56\xd8\x9f\x96\x6e\xd3\xf6\x8d\x91\x44\x30\xd6\x48\xe9\x40\x32\x4a\x4e\x5b\x04\xbf\xc0\xdc\x7d\x32\x53\x72\xda\xc2\x06\x9b\x5e\x9a\x5e\x73\x52\x0b\xbb\x4a\x06\xd6\x1f\x1f\x76\xe7\xc2\x4a\x13\x78\xa9\xb8\x73\x93\x7a\x91\x2c\x1d\x61\xce\xea\x4d\xd9\x7c\xfb\x8f\x5a\x0a\x36\x5f\xd8\x01\xc6\x87\xdf\xf2\xf8\x56\x1a\x8e\x86\x38\xb8\x15\x60\x98\x77\xdb\x58\x37\x08\xe9\x4b\x9b\x1b\xff\xe7\x8d\xbb\x09\xb2\xba\x1e\xb4\x5e\xe7\xe9\xad\x2c\xbd\xcb\x32\xee\xf8\x38\xcc\xd5\x3b\x31\xd6\xf8\x39\x04\x55\x93\xf3\x4e\xa4\x1b\x5c\xbb\x8b\x8d\xf7\x8a\x6c\x73\x4e\xef\xc1\xbf\x41\xd4\x9b\x1c\x1c\x64\xe0\xd6\x01\xda\xa4\xe2\x30\x11\xb7\x26\x77\x0f\x46\x3e\x8c\x8f\xff\x06\x00\x00\xff\xff\x1a\xb6\xf4\xf5\x9b\x0f\x00\x00")

func masterEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsSdnYaml,
		"master/etc/origin/node/pods/sdn.yaml",
	)
}

func masterEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsSyncYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x4e\xc3\x30\x10\x85\xf7\x39\xc5\x5c\x20\x4d\xd9\x55\xde\xa1\xae\x58\x00\x91\x90\xd8\x56\xc6\x1e\x52\x2b\xb6\x27\x78\xc6\x29\x56\xe9\xdd\x51\x7e\x68\xd5\x0d\xcb\xf7\xfc\x49\xdf\xf3\xe8\xc1\xbd\x63\x62\x47\x51\xc1\xf8\x50\xf5\x2e\x5a\x05\x2d\xd9\x2a\xa0\x68\xab\x45\xab\x0a\x20\xea\x80\x0a\xb8\x44\xb3\x06\x1e\xb4\x41\x05\x7d\xfe\xc0\x9a\x0b\x0b\x86\x8a\x07\x34\x13\x6b\x28\x8a\x76\x11\x13\x4f\xa9\x06\x17\x74\x87\x0a\xce\x67\xd8\xec\x29\x7e\xba\x6e\xf3\x34\x35\xbc\x79\x2b\xd1\xc0\x0f\x7c\x65\x12\x84\xcb\xa5\x02\x80\x05\x6e\xb3\xf7\x2d\x79\x67\x8a\x82\x47\x7f\xd2\x85\xe7\xb7\xbb\x11\x00\x8c\x26\x27\x27\x65\x4f\x51\xf0\x5b\xd4\x5c\x02\x0c\xc9\x8d\xce\x63\x87\x56\x81\xa4\x8c\x73\x3d\x50\x12\x5e\x88\xfa\x36\xb0\xa5\x24\x0a\x76\xdb\xdd\x76\x7e\x19\xc9\xe7\x80\xcf\x94\xe3\x8d\x0d\x53\x6a\xb5\x1c\x15\x34\x87\xe9\x1a\xcd\x81\xb2\xac\xaa\x65\x50\xd0\x2c\x98\x6a\xe3\x29\xdb\x7a\x48\x34\x3a\x8b\x69\x25\x12\x6a\xfb\x1a\x7d\xb9\x4e\x39\x12\xcb\x0b\xca\x89\x52\x7f\xed\x16\xef\x7a\xad\x09\x98\x7d\x7f\xdf\x59\xdc\x28\xa6\xa1\xe4\x3a\x17\x9b\x59\x74\xe7\xf9\x6f\xc7\x6f\x00\x00\x00\xff\xff\x3d\x8f\x46\xfa\xdf\x01\x00\x00")

func masterEtcOriginNodePodsSyncYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsSyncYaml,
		"master/etc/origin/node/pods/sync.yaml",
	)
}

func masterEtcOriginNodePodsSyncYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsSyncYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/sync.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func masterEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeResolvConf,
		"master/etc/origin/node/resolv.conf",
	)
}

func masterEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := masterEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func masterEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeSdnKubeconfig,
		"master/etc/origin/node/sdn.kubeconfig",
	)
}

func masterEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xc1\x0e\x82\x20\x18\x00\xe0\x3b\x4f\xe1\x13\xc0\x5c\x67\x0e\x49\x7f\x8c\x45\xd0\x32\xbd\xba\xd4\x3f\xc6\x2a\x7e\x67\xe4\xc5\xf9\xee\x6d\xbd\xc0\xe7\x2f\x37\xe3\x5d\x2d\xd9\x01\xaa\x46\x77\xd6\x6b\x0b\x2d\x58\xb9\xae\x05\x57\x94\x1e\x31\x70\x45\xef\x89\x12\xa6\x6c\x29\x58\x5c\xf0\xc5\x1d\x8d\x58\x6c\x1b\x33\xe7\xbd\x86\xae\x85\x6b\x6d\xbc\x93\xcb\x8e\x97\x25\x3b\x35\x15\x28\xef\x8e\x46\x4b\x81\x79\x10\x34\xc7\x10\x93\x48\x34\xa2\xe8\x89\xf2\x27\xcf\xf7\x89\x3f\xbf\x3d\x0e\x7f\x9e\xfd\x02\x00\x00\xff\xff\xa8\xcd\x04\x00\x82\x00\x00\x00")

func masterEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcSysconfigAtomicOpenshiftNode,
		"master/etc/sysconfig/atomic-openshift-node",
	)
}

func masterEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := masterEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRootKubeConfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterRootKubeConfigBytes() ([]byte, error) {
	return bindataRead(
		_masterRootKubeConfig,
		"master/root/.kube/config",
	)
}

func masterRootKubeConfig() (*asset, error) {
	bytes, err := masterRootKubeConfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/root/.kube/config", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterVarLibOriginDockerConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcc\x4d\x4c\x4f\x2d\x86\x50\x01\xa5\x39\x39\xc1\xa9\xc9\x45\xa9\x25\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x02\xd2\xee\x96\x2e\x00\x00\x00")

func masterVarLibOriginDockerConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterVarLibOriginDockerConfigJson,
		"master/var/lib/origin/.docker/config.json",
	)
}

func masterVarLibOriginDockerConfigJson() (*asset, error) {
	bytes, err := masterVarLibOriginDockerConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/var/lib/origin/.docker/config.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5d\x6f\x13\xb1\x12\x7d\xc6\xbf\x62\xd8\x04\x4a\xab\x3a\xdb\x16\x1e\x50\x20\x48\xa5\x04\x09\xa9\x97\x22\x40\xea\x03\xa0\xca\x59\xcf\xee\x9a\xec\xda\xbe\xf6\x6c\x42\x29\xf9\xef\x57\xf6\x26\x69\xbe\xc8\xad\x04\x0f\x61\x6b\x1f\xcf\x8c\xe7\x1c\xcf\x4c\xe7\x71\x3a\x52\x3a\x1d\x09\x5f\x02\xc7\x5f\x8c\xa9\x1c\x1e\x43\xe1\xd0\x42\x3a\x11\x2e\xad\xd4\x28\x95\x26\x1b\xa3\x83\x14\x29\x4b\x73\x4f\x62\xf4\x0a\xa8\x44\xcd\x00\xfc\xad\x27\xac\x33\xaa\xc0\x93\xb1\xd0\x02\x7b\x1e\xdd\x44\x65\xc8\x00\xea\x71\xee\x7b\xbf\x72\x0f\x3c\x87\x54\xe2\x24\x95\xca\x8f\x53\xf1\xbb\x71\x98\x3a\xf4\xa6\x71\x19\x72\x2b\x1c\x9d\x32\x00\xcc\x4a\x03\x07\xfb\x61\xb0\x15\x15\x04\xf3\x50\x38\xfb\xdf\xc6\x90\x00\x38\x81\x93\x03\x78\xf3\xe6\x3e\xd8\x10\x86\x69\x34\x6d\x9e\x64\x00\x0e\x3d\x19\x87\x99\xd1\xc0\x3f\xef\xd8\xcf\x04\x41\x6b\xa9\x5d\x4a\xa5\xc0\xda\xe8\xde\x4f\x6f\x34\xbc\x7e\x7d\x30\xbc\x7a\x7f\xc0\xee\x18\x40\x52\x99\x82\x4b\xa7\x26\xe8\x92\x3e\x24\x3f\x4d\xe3\xb4\xa8\x64\xc2\x66\x6c\x78\xf5\x7e\x23\x51\xc2\xd1\x66\xa6\x72\xc5\xd8\xfc\x3e\xb6\xa9\x2a\xb8\xbb\x83\xde\x85\xd1\xb9\x2a\x7a\x1f\x6a\x51\xa0\xef\x7d\x34\x12\x61\x36\x83\xa7\x6f\x62\x82\x74\x40\x3d\xdd\xc9\x16\x52\x26\x77\x71\xb5\xe4\x62\x33\xc3\x3e\xf3\xea\x34\xad\x1a\x7d\x02\x7f\xfe\x00\xb9\x06\xff\x4a\xc6\x0a\x74\xc3\x61\x4b\x83\xc4\x5c\x34\x15\xf9\x07\xd1\x10\xce\xfd\x9d\x84\xb8\x1b\xf2\x92\x1b\x07\xd2\x13\x28\x0d\x94\xd9\xe3\x97\x2f\x5e\xbc\x78\x05\xd2\xb0\x47\xd6\x19\x32\x83\xee\x9d\xf4\xf4\xe4\xc9\xf1\xd1\x8c\x3d\xb2\xc6\x51\xbb\xd0\xe9\x1c\x1d\xcf\xd8\x23\x65\x49\x8c\x2a\xf4\xc0\xcf\xe1\xea\xcb\xcd\xfb\x0f\x9f\x87\xd7\xe7\x97\x97\x37\xe7\x97\x97\x57\xd7\xc0\x2d\x74\xa3\x11\xe0\x75\xe0\x85\x10\x38\x6f\xff\xff\x38\xbc\x0e\x8b\x8b\x6d\x2e\x83\x69\xe8\xc6\x5f\xfe\x13\xce\x2f\x2e\x86\x9f\xbe\x32\x69\x34\x32\xb6\x70\xc2\xbd\x98\xe0\x5c\x2f\xfe\xd6\x67\x91\xbf\x74\xb1\xcb\x58\x07\xa6\x25\xea\x56\x00\x4a\x17\xa0\x03\xa5\x53\x21\x0a\xd4\x04\x42\x4b\xd0\x48\x53\xe3\xc6\xd0\x90\xaa\x14\x29\xf4\x50\x18\xf4\xa0\x34\x19\x70\x22\x43\xc8\x8c\x96\x8a\x94\xd1\x3d\xd6\x01\x95\x2f\x0f\xbb\x46\x7b\x18\x61\x6e\x1c\x82\xd4\x1e\x94\x87\xb1\x36\x53\x0d\x64\x02\xfb\x73\x4f\x08\xa8\x25\x34\x16\xa6\x8a\x4a\xc0\xda\xd2\x2d\x78\x72\x4a\x17\x6c\x5a\xaa\x0a\xe1\xdb\x37\xe8\x3e\x2b\x8d\x27\x2d\x6a\x04\x2e\x0f\x61\x30\x80\x24\x81\x1f\x3f\x42\xc2\xc1\x57\x88\x16\x4e\xc3\x77\xb8\x76\x7b\xe6\x31\xec\xd7\xed\x97\x70\xdb\xc6\xc2\x6c\x16\x49\x83\x85\x95\x36\x77\xf3\xb3\xae\xd1\xc0\xb9\x75\x6a\xa2\x2a\x2c\x50\x02\xe7\xae\x06\xce\x17\x09\x09\x31\x01\x9f\x40\xda\x4f\xc3\x67\xff\xf7\x5e\x47\x10\x41\xdd\x4f\xd7\xef\xd2\x5a\x78\x42\xc7\x7d\xbb\xc7\x58\x63\xa5\x20\xe4\x99\xe0\xe4\x1a\x4f\x8c\xf9\xe0\x4c\x01\x77\x08\x89\xef\x3c\x83\xa3\xf0\x22\xd1\xf5\xe1\xb0\x77\xd4\xf9\x7e\x5a\x12\x59\xdf\x4f\xd3\xfb\xb4\x1c\x76\x92\xf6\x71\x19\xa7\x0a\xa5\xe7\x1e\x52\x63\x51\xfb\x52\xe5\xc4\xdb\x85\xde\xb8\x19\x61\xab\x80\x7f\xf7\x11\xe8\x8b\x3f\xab\x56\xd9\xdd\x1d\x0f\x1a\xd0\x08\xdd\xde\xf0\x17\x39\xd1\x7b\x2b\xb2\x71\x63\xdf\x56\x66\xf4\x31\x10\x98\x24\x30\x9b\xb1\xca\x14\x05\x3a\xe0\x04\xeb\xc9\xe8\xf9\x12\x92\xa5\x16\xc3\xfb\x9b\xa0\xbb\x05\xa3\x57\x34\x70\x98\x04\xd5\x7a\x0a\x84\x41\x81\x14\xc5\x34\x8a\x5e\x58\x20\xe8\x73\xbe\xfe\x5e\xd3\x23\x46\x58\xdb\x10\xc7\x3b\xe5\x06\xeb\x7b\xf3\x73\xf5\x58\x2a\x07\xdd\x15\x1c\xdb\x1f\xa3\x34\x53\x5d\x19\x21\x43\x98\xad\x8d\xe4\x81\xda\x1b\x52\x26\xdb\x9c\x3c\x44\x7e\xdb\x8a\xfb\xce\x20\xaa\x6e\x8b\xee\xfe\xf6\xd2\x2e\x70\x56\x99\x46\x5a\x67\x26\x4a\xa2\x4b\xfb\xe9\x8d\x14\x24\xd2\x1b\xd3\x2c\x4d\xaf\xa6\xa1\x9f\x9a\x26\x48\x3b\x6c\xfd\x9f\xbb\xb4\xc7\x47\x95\x19\x05\x96\x06\x01\xbd\x53\x01\x0b\xa4\x44\x4f\x4a\x8b\x50\x39\x06\xc1\xcb\x9c\x8b\x9e\x1c\xc1\x22\xbb\xfb\x39\x68\xf1\x4b\x30\xca\x7b\x61\x9c\x2d\x0a\xf8\x7e\x0b\x2d\x28\x70\xe8\xb5\xb0\xbe\x34\xf4\x50\x16\xff\x13\x8d\x85\xfb\xff\x3b\x8b\x41\x88\xfd\xe5\xd7\x72\x6b\x55\xa7\xfd\xf5\xbf\x5a\x3e\x38\xc2\xf0\xeb\xc5\xbb\x8b\xaf\x97\x37\xe7\x9f\x3e\x0c\x92\xe7\xc9\x5f\x68\x5a\x0b\x36\x62\x82\x95\xd8\xf7\xe7\xd7\x5e\xa4\x6b\x8d\xfb\x15\x42\xa2\x3b\x1e\x94\xc2\xc3\x43\x59\x7f\x43\x1a\xa7\x73\x40\x2c\xd1\x2b\x2f\x75\xbe\xac\xb4\x22\x25\x2a\x9e\x55\x4d\x54\x65\x32\xa7\xe2\x24\xfe\x1b\x2c\x6a\xcd\xda\x6a\xff\xec\xf9\xcb\x93\xe3\xd5\xa5\xd3\x9d\xc0\xd3\x6d\xe0\xd9\x4e\xe0\x59\x04\x26\xbb\x43\xe2\x64\xc6\xa8\x63\x5a\x78\x6e\x1c\x8f\x83\xc5\x06\x54\xc8\x09\x3a\x52\x1e\xb9\x45\x74\xbc\x71\x95\x87\x1d\x65\x32\xba\x61\xac\x9e\x6c\x67\x29\x3d\xda\x58\x8b\xf5\xca\x6d\xd6\xab\x90\xcf\xb5\x52\xb4\x36\x8c\x6c\xd8\x7d\x88\xc0\x31\x36\xc7\x24\x16\xe7\xd0\x6d\x67\x33\xc6\xa8\xd1\x28\xb9\x90\x35\x58\x67\xf2\x20\xf9\xfb\x6e\x91\x19\x4d\xce\x54\xdc\x56\x22\xf4\xd4\x0e\x68\x43\xd8\x07\x41\xa6\x56\x19\xbf\xc7\xc5\x0e\x9e\xb9\x30\xa5\x57\xc6\x58\x0f\x8d\x26\x55\xcd\xe3\x08\xfd\xbe\xb1\xec\x7e\xc6\x44\x1d\x46\x8e\xdd\x56\x96\x33\xe7\xe6\x48\xba\x17\x1d\x66\xcd\x0e\x48\xe5\xc5\xa8\x8a\xfd\xc2\xdf\xfa\xca\x14\xe0\x95\xce\xe2\x68\x51\x0b\x2d\x0a\x04\x0c\x4d\x84\xca\x00\xa1\xd2\x99\xa6\x28\x61\x31\x0c\xaf\x38\x6c\xed\xe0\xc2\xca\xce\x90\x8c\xdd\xda\xfe\x5f\x00\x00\x00\xff\xff\x32\xed\x5f\xa0\xac\x0c\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x6e\xdc\x36\x10\xbd\xf3\x2b\x9e\xd7\x41\xdc\x1e\xb8\x4a\xae\x4e\xe2\x4b\xeb\x00\xbd\x34\x45\x7a\xe8\x21\xc8\x81\x2b\x8e\x24\x66\xa9\x19\x65\x38\xda\xb5\xb3\xd8\x7f\x2f\xb8\xb2\x1b\xd7\x0e\x9c\x1b\x01\xbe\xf7\xe6\xcd\xe3\x93\xce\xcf\x9a\x4d\xe2\x66\x13\xca\x00\x4f\x37\xce\xa5\x0e\x67\xe8\x95\x26\x34\xbb\xa0\x4d\x4e\x9b\x26\x4a\xbb\x25\x45\x43\xd6\x36\x5d\xb1\xb0\x79\x03\x1b\x88\x1d\x50\x6e\x8b\xd1\xd8\x5a\x46\x31\x99\xb0\x00\xd7\x85\x74\x97\x5a\x72\xc0\xb8\xed\xca\xfa\xa6\x2b\xf0\x1d\x9a\x48\xbb\x26\xa6\xb2\x6d\xc2\xb7\x59\xa9\x51\x2a\x32\x6b\x4b\x7e\x0a\x6a\xaf\x1d\x40\xed\x20\xb8\x78\x1e\x86\x27\xae\x50\xe5\xd1\xeb\xf4\x75\x16\x0b\xc0\x2b\xbc\xba\xc0\xd5\xd5\x77\xb3\xd5\x86\xcc\x6c\x8f\x99\x0e\x50\x2a\x26\x4a\xad\x30\xfc\xc7\x27\xf7\x87\x83\x47\xea\x40\x5f\xb1\xbe\xbe\x31\x0d\xeb\x8f\x92\x09\xab\xc4\x9d\x86\x15\x8e\x47\x07\xb4\xc1\xb0\x8c\x5a\x38\x4d\x0c\x34\x0a\xaf\xbf\x14\x61\xbc\x7d\x7b\x71\xfd\xe1\xfd\x85\x3b\x38\x60\x95\xa5\xf7\x51\xd3\x8e\x74\x75\x89\xd5\x17\x99\x95\x43\x8e\x2b\x77\x74\xd7\x1f\xde\x9f\x46\x11\xc7\x45\xf4\x61\xa8\x41\xed\x71\xaa\x5d\x72\xee\x6e\xf7\x69\xce\x19\x87\x03\xd6\xbf\x09\x77\xa9\x5f\xff\x31\x86\x9e\xca\xfa\x4f\x89\x84\xe3\x11\x2f\xaf\x4e\x61\x72\x45\xbd\x74\xee\x1c\xfb\x81\x78\x11\x4d\xdc\x83\x2b\x6c\x1f\x42\x4f\x6c\x08\x1c\xc1\x64\x7b\xd1\x2d\x66\x4b\x39\x59\xa2\x82\x5e\xa8\x20\xb1\x09\x34\xb4\x84\x56\x38\x26\x4b\xc2\x6b\x77\x5e\xa3\xb9\x27\xeb\xcc\x05\x1b\xea\x44\x09\x91\x0b\x52\xc1\x96\x65\xcf\x30\xa9\x4d\xb9\x9b\x44\xa7\x15\xe7\x09\xfb\x64\x03\x68\x9c\xec\x16\xc5\x34\x71\xef\xf6\x43\xca\x84\x4f\x9f\xf0\xe2\x97\x41\x8a\x71\x18\x09\x3e\xfe\x8a\x77\xef\xb0\x5a\xe1\xf3\xe7\x37\x88\x82\x92\x89\x26\xbc\xae\x67\x26\x77\xc7\x39\xc3\xf3\x59\xfc\x5d\xb7\x9d\x27\x1c\x8f\x95\x57\xd3\x5d\x54\xdc\x49\xe4\x8e\xab\x33\xc3\xfb\x49\xd3\x2e\x65\xea\x29\xc2\x7b\x1d\xe1\xfd\x7d\x20\xd5\x13\xfc\x0e\xcd\x65\x53\x8f\x97\xdf\x9e\x1d\x84\x13\xe8\xc5\x5f\xff\xfc\xde\x54\x36\xa9\x2f\xcb\x9d\x73\xf3\x14\x83\x91\x6f\x83\x37\x9d\x8b\xb9\x9f\x77\xcc\x66\xa6\xe8\x43\x1c\x31\xa9\x74\x75\x63\x99\x88\xcb\x90\x3a\xf3\xad\xb0\xa9\x64\x3f\xe5\xc0\xb4\x74\x28\x17\xfa\x19\xab\x3e\xc6\xc3\xc2\xb9\x73\xb0\x18\x5d\x22\x98\x8c\xa9\xf5\xff\x47\xa2\xd5\xfa\x6b\xc8\x22\x53\xc1\xcc\x96\x32\xc6\x50\x8c\xb4\x3e\xf2\x3c\xb9\xef\x65\x25\x0e\x9b\x4c\x3f\x56\xf9\xaf\xbc\x8f\xbb\xfd\x2c\x7a\x29\x6d\x4c\x25\x6c\x72\x2d\xac\x96\xdb\x92\xa5\x47\x49\xdc\x9e\xfa\x34\x06\x0e\x3d\x81\x76\xa4\xb7\x36\x54\x88\x0d\x2a\x73\x3f\xe0\xfe\x03\x7b\x30\x70\xd1\xa1\x7b\x95\x1f\x5a\x92\xe9\xc9\xf5\xbf\x01\x00\x00\xff\xff\x2e\xe8\x09\x3e\x21\x05\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\x49\x2d\xca\x2c\x4b\x4d\xd1\x0b\xcf\x2f\xca\x4e\x2d\x72\xce\xc9\x2f\x4d\x09\x28\xca\x2f\xcb\x4c\x49\x2d\x72\xce\xcf\x4b\x53\xd0\x73\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x0a\x4e\x2d\x2a\xcb\x4c\x4e\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x73\xa7\x88\x79\x42\x00\x00\x00")

func workerEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginCloudproviderAzureConf,
		"worker/etc/origin/cloudprovider/azure.conf",
	)
}

func workerEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := workerEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeBootstrapKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xf0\x2e\x4d\x4a\x4d\x06\x8b\x2b\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xc9\x1b\x98\x7a\x3b\x00\x00\x00")

func workerEtcOriginNodeBootstrapKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeBootstrapKubeconfig,
		"worker/etc/origin/node/bootstrap.kubeconfig",
	)
}

func workerEtcOriginNodeBootstrapKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeBootstrapKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/bootstrap.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeCaCrt,
		"worker/etc/origin/node/ca.crt",
	)
}

func workerEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\xe5\xa7\xa4\x3a\xe5\xe7\x97\x14\x97\x14\x25\x16\x80\xa5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xb5\x29\x12\x85\x43\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperCrt,
		"worker/etc/origin/node/node-bootstrapper.crt",
	)
}

func workerEtcOriginNodeNodeBootstrapperCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xd0\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xe3\x74\x32\xfb\x48\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperKeyBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperKey,
		"worker/etc/origin/node/node-bootstrapper.key",
	)
}

func workerEtcOriginNodeNodeBootstrapperKey() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x5d\x73\x2b\x35\x0c\x7d\xdf\x5f\xa1\xc9\xf3\xdd\x8f\xf4\xb6\x03\xe3\x19\x1e\x4a\xcb\x85\x0e\x4c\x29\x49\xe1\xdd\xb1\x95\xc4\xc4\x6b\x6d\x65\x79\x69\x5a\xee\x7f\x67\xbc\xbb\x6d\x92\xcb\x6d\x07\x9e\x12\xe7\x1c\xc9\xd2\x91\x7c\xa2\x3b\xf7\x07\x72\x74\x14\x14\xf4\xf3\x42\x27\xd9\x5e\x51\x58\xbb\x8d\x2a\x00\xf2\x09\x83\x38\xa3\xc5\x51\xb8\xd2\x66\x8b\x4b\xf7\x84\x0a\xe6\x4d\xd3\x7c\x1d\xbf\xbf\xff\x45\xc1\x45\x3b\x81\xc4\xee\xe9\x9d\xd8\x53\xf8\x25\xd4\x86\xf8\xbd\x0b\xf6\xd2\x5a\xc6\x18\x15\xcc\xcf\xbe\xa9\x9a\xaa\xa9\xe6\xea\xe2\x63\x06\xaf\xa9\xd5\x2e\x28\x30\x3e\x45\x41\xae\x3c\x19\xed\x33\x70\x73\xa7\xa0\x19\xa8\x4d\x3e\x2e\xd0\x24\x8e\xae\xc7\x05\x46\xf2\x7d\x6e\x4b\x41\x8d\x62\x6a\x62\xb7\x71\xa1\x0e\x64\xb1\xe6\x01\xac\x0c\x85\x75\x61\xc9\xec\x90\x0f\xfd\x8f\xe7\xe5\xd6\xb5\x0b\x22\xb9\x76\x8c\x46\x88\xf7\x0a\xea\x5e\x73\xed\xdd\xaa\x1e\x19\x71\xeb\xda\x13\xfa\x32\x7f\x93\x89\xc7\x29\x1c\xf1\xaa\x48\x66\x57\x00\xe0\x23\x9a\x9f\x74\xb0\x1e\xf9\x56\xb7\xa8\x20\x68\x71\x3d\x16\x18\xf4\xca\xe3\xef\xc1\x59\xef\xc2\x46\x81\x70\xc2\xc2\xb5\x7a\x83\x87\xba\xd6\xc4\xad\x16\x05\xcf\xcf\x50\x8d\xbf\x56\x37\x99\x11\xab\x4f\x03\x02\x7f\xc3\x43\x22\x41\xf8\xfc\xb9\x00\xf0\x5a\x30\x8a\x82\xb5\xf6\x11\x0b\xd7\x49\xbe\x20\x2e\xf7\xc1\xdc\x21\x3b\xb2\x0a\x3e\x36\xb1\xd8\xb9\x60\x15\xdc\x92\x9d\xee\x29\x76\x69\x85\x1e\xe5\x92\x37\xa9\xc5\x20\x31\x5f\xbc\x22\x92\x28\xac\xbb\x32\xa3\xe6\xb5\xa0\xf2\xdf\xba\xbe\x52\xab\x03\xb5\x00\x30\xc8\x52\x5a\xc7\x6f\x44\x65\xd8\xad\xf3\x42\x61\xcc\x6c\x4f\xc9\x96\x6f\xdd\x33\xa0\x1d\x53\xef\x2c\x72\xad\x9f\x12\xe3\x38\xc7\x97\xc0\x17\x6c\x0c\x1d\x08\x59\xf9\x41\xe1\x9c\x55\x98\xbc\x47\x2e\xb5\x88\x36\xdb\xd2\x62\xfe\x18\xc9\xb3\xac\xfb\x2c\x6b\x8d\x5a\x12\x63\xb9\xc9\x25\x8d\xd8\x82\x44\x0b\xfe\x3c\xea\x73\xe5\x1d\x06\xb9\x3a\xd4\xfd\x5d\x8e\xfc\x70\xc2\x59\x22\xf7\xc8\x5f\x72\x0a\x80\xdc\x73\xe9\xf5\x0a\xfd\x94\xfa\xf9\x19\x3a\x76\x41\x60\x36\x40\x4c\x1e\x07\xfd\x38\xa0\x60\xac\x1c\xd5\x33\xa8\x7e\x78\x14\xd6\xd5\x82\x3c\xc2\x6c\xc8\x34\x3b\x1d\x78\x47\xb6\x6c\x75\x70\x6b\x8c\x52\x76\x5a\xb6\x6f\x88\xdd\x91\xcd\x22\xf3\x50\x6a\x79\x2c\xfd\x17\x1a\x70\x0a\xe2\x5a\x2c\x19\x1f\x52\xce\x99\x0f\x94\x64\x64\xcd\x9b\xbc\xfb\xb9\xc8\x92\x31\xe6\x4e\xed\x6b\x2f\xd5\x35\xb2\xeb\xd1\x56\x59\x88\xc5\x84\x0e\x3b\x2b\xda\x05\xe4\x2c\x8c\x33\x78\xd2\xd2\x49\x2b\x71\x1f\x05\xdb\x77\x12\x2f\x07\xc2\xff\x4f\xdd\xea\xec\x1d\xd3\xf0\x28\x04\x34\xd9\x87\x7e\xed\x91\xd9\xd9\x51\x00\x6d\x0c\x76\x19\x14\x0c\x72\xbf\xef\x30\x2a\xd0\x5d\xe7\x27\xbb\xab\xfb\x60\x8f\x67\xd3\x31\x09\xad\xd2\xfa\xc3\x31\xe7\xcf\x48\x21\xbf\x9b\xc4\xf9\x05\x9e\x67\xe3\x33\x87\x84\xff\x29\x5f\x01\xf0\xd0\x45\x05\x67\xcd\x54\x74\xd6\x72\xf2\x82\x61\x81\x8e\x1f\x58\x40\xf9\x8b\x78\x77\xb0\x8a\x56\x92\x82\xf9\xf9\x45\xbe\x79\x02\xef\x7c\xda\xb8\x30\x9a\x0e\xa3\xdd\x6a\xa9\xa9\xc3\x10\xb7\x6e\x2d\x25\xf5\xb1\x9c\x78\x1d\x79\x67\xf6\x45\xc7\xf4\xb8\x3f\x71\x81\xc9\x78\x4b\xe3\x2c\xbf\xec\x40\x35\x3f\xfb\x36\x1b\x6f\x3d\x3f\x2f\xf2\x2c\x5c\xd8\xdc\x84\x35\x0d\xa6\x71\x6c\xe6\x93\x3f\xab\x79\x73\x36\xd4\x94\xc1\xdb\xf1\x3e\x05\x62\xba\xf3\x21\xff\x30\x95\x4b\x05\x46\x57\x86\xa5\xe8\xc9\xa7\xf6\xc8\xff\x06\xc7\xff\x2d\x91\xe8\x7c\x02\xe8\x90\x3f\x2d\x7f\x64\x4a\x9d\x82\x90\xbc\x9f\x02\xbe\x66\xd8\xd3\xfe\xbf\x36\x3c\xfe\x7b\x54\x63\x40\x2c\xfe\x09\x00\x00\xff\xff\x81\x5a\xf1\xae\x0f\x07\x00\x00")

func workerEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeConfigYaml,
		"worker/etc/origin/node/node-config.yaml",
	)
}

func workerEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x73\x13\x37\x10\x7e\xf7\x5f\xb1\x4d\x19\x02\xd3\xde\x9d\x9d\x92\xc9\x70\x99\xd0\x61\x68\xa7\xc3\x03\x3f\x86\xb4\xbc\x30\x0c\xc8\xba\xb5\x6f\x1b\x9d\x24\xb4\x2b\x1b\x37\xe4\x7f\xef\x48\xbe\x73\x6c\xe2\x50\x0a\x4f\xb6\x56\xbb\x9f\x76\xbf\xfd\x56\x3a\xe5\xe9\x35\x06\x26\x67\x6b\x58\x4c\x46\x17\x64\x9b\x1a\x5e\xba\x66\xd4\xa1\xa8\x46\x89\xaa\x47\x00\xca\x5a\x27\x4a\xc8\x59\x4e\x4b\x00\xd6\x2d\x36\xd1\x60\x28\x95\xf1\xad\x2a\x2f\xe2\x14\x83\x45\x41\x2e\xc9\x55\x3a\x90\x90\x56\xa6\xf0\xae\xa9\xe1\xf0\x70\x04\x60\xd4\x14\x4d\x1f\xac\xbc\xaf\xc1\x2d\x38\x2f\xb4\xeb\xbc\xb3\x68\xa5\x06\x8b\xb2\x74\xe1\x22\x9b\x9d\x47\xcb\x2d\xcd\x24\xe3\xed\xf7\x91\x95\xc7\x1a\xc8\xce\x82\x1a\x01\x58\xd5\xe1\x00\x9b\xfe\xb3\x57\x3a\x19\x06\xa0\x82\x1b\x3b\x62\x8f\x3a\x25\xa1\x9d\x15\x45\x16\x43\x4e\xa9\x48\x59\x74\xca\x36\xeb\xfc\x0a\xa8\xa6\x64\xab\xa9\xe2\xb6\x5f\x17\xba\xff\xf3\x29\xff\x02\xfc\xf8\xc3\xae\x0b\x00\xa3\x40\x81\xd1\x81\x27\x8f\x33\x45\x66\x34\xb8\x02\xcd\x40\x59\x27\x2d\x06\xf0\xc1\x69\x64\x06\x62\x30\xc4\x82\x96\xec\x1c\x9c\x05\x69\x11\xb4\xa5\x82\x31\x2c\x30\x00\x3b\x7d\x81\xf2\x33\x2c\x15\x09\x44\x2b\x64\x80\x04\xf0\x23\x09\xf7\xa8\x12\x94\x87\xc3\x0b\x32\x06\xee\xdc\xfb\xdb\x4d\x19\x0a\x7f\xff\x34\xbb\xc0\xf8\x10\xfe\xfc\xfd\xd5\xb3\xde\x33\xa0\x04\x42\x3e\x1b\xf7\xeb\x65\x4b\x06\x41\x42\xc4\x53\x68\x5c\x6f\x84\x94\x64\x15\x39\x54\xdc\xaa\x80\x55\x62\x6d\xc1\x4b\x12\xdd\x56\xac\x03\x79\xe1\xca\x2d\xb8\xd0\x62\x80\x45\x49\x64\xb8\xfb\xa8\x6a\x70\x51\xd9\x68\xcc\x69\xca\xdf\x6e\xa0\x00\x50\xb7\x0e\x0e\x96\x2a\xa4\xfa\x6a\x78\x7c\xb3\x7a\x1d\x43\x40\x2b\x66\x05\x9d\xb2\x6a\x9e\x68\x78\xf1\xfa\x7c\x5d\x71\x5a\x4c\x8e\x19\xca\xb2\x3c\x80\xa3\x47\x77\x27\x5b\xc8\x6c\x10\x3d\x4c\x8e\xe1\x6e\x76\xdd\xda\xb9\x77\x6f\x28\x15\x7e\x3a\x83\x09\xdc\xbf\xbf\xd9\x44\xc3\xb8\xe5\x39\x0d\xa8\x2e\x36\xeb\x19\x6d\x73\xf0\xe6\x0d\x1c\xdc\xb9\xec\x81\xae\x0e\xa0\x98\x0b\x3c\x18\xc3\xdb\xb7\xb7\xd4\x88\x21\xb8\xf0\xbf\x2a\x4c\x2d\x22\x3b\xbf\x51\x59\x6e\xdd\xe4\x66\x5a\x8d\xb3\x78\xad\x25\xa3\xa2\xd5\x6d\x42\xea\x4d\xb3\x68\x75\x1a\x4c\xf8\x10\x49\xe0\x72\x0b\xf0\xab\xdb\xe9\xfc\xe7\x69\x0c\x5a\xb9\xda\x56\x5b\x3e\xe0\xfc\xe9\x1f\x5b\xda\xfa\x7a\xc5\x04\x81\xa2\xb0\xae\x48\xa6\xde\xad\x81\xa2\xe0\x15\x0b\x76\x05\x35\x67\x41\xd9\xc6\x75\xd7\x85\xbe\x42\x96\x40\x5a\xf2\x68\xd8\xd8\x4d\x31\x80\x9b\x81\x97\x36\xa0\x6a\x18\x76\x80\x74\x40\x25\xc8\x20\x0e\x02\x36\x51\x63\x8a\xda\x40\xa9\xce\x45\x2b\x29\xfa\xd5\xf9\x79\x1a\xa4\xc8\xc8\x69\xea\x5a\xc7\xc2\xb0\x24\x69\x53\x8f\x56\xa0\x5d\x40\xde\x84\xb5\x22\x9e\xeb\xaa\x9a\xc6\xf9\x3f\x64\x8c\x2a\x03\x36\xad\x92\x52\xbb\xae\xe2\xd6\x2d\xdf\x4d\xe3\xbc\xd4\x73\xfa\x95\x9a\xb3\xc9\xf1\xc9\xe4\x97\x93\x87\xdf\x1a\x7b\x74\xf2\xf0\x64\xb4\xad\xc1\xf7\x36\x29\xe9\x7d\x96\xdf\xe4\x68\x9f\xfc\xd6\xf5\x27\x76\x33\xaf\xf9\xa6\x48\x77\xd0\x0b\x8f\xf6\xdd\xe2\x3c\x13\x03\x25\x64\x59\xbe\xd3\xce\xce\x68\x5e\xdb\x22\xe0\x42\x19\x6a\x94\xb8\x50\xf4\x4c\x9e\x3d\xf8\x6e\xd4\x56\xd9\xc6\xe0\x35\xe2\x64\xd0\xcf\x46\xc4\xdf\x24\x94\x66\x3a\xdc\x87\x7b\x84\xb2\xc6\xdd\xbd\xcc\xfa\xdb\xe1\xf8\x74\x3d\x34\x99\xce\x4e\xcd\xb1\x86\xcb\x4b\x28\x9f\xe4\x74\xcb\xa7\xc9\xc2\xe5\x73\xd7\x20\x7c\x82\x0f\xd1\x09\xc2\xd5\x5a\xe8\xfd\x13\x72\x9d\x60\xb6\x06\x64\x17\x83\xc6\xfe\xf5\x02\x30\xd4\x91\x6c\x56\x00\xda\xc7\x1a\x8e\xc6\xe3\x6e\x63\xe9\xb0\x73\x61\x55\xc3\x83\xf1\xf8\x19\x6d\xee\xe1\x0f\x11\xf9\x46\xdc\x64\x4f\xd8\x64\x13\xc6\xa8\x63\x20\x59\x3d\x71\x56\xf0\xa3\x0c\xb1\x3e\xd0\x82\x0c\xce\xb1\xa9\x73\xf1\xc3\x11\xd1\x3e\xe6\xbf\x18\x43\xdd\x4f\xf0\xc2\x99\xd8\xe1\xb3\x24\x7f\x1e\xde\xb6\x3c\x0c\x2f\x95\xb4\x35\x54\x86\xa6\x55\xe7\xd2\x43\x3e\xc8\x7e\x4d\x41\x1a\x8c\x62\x77\x23\x75\xf6\x85\x35\xab\xad\x03\x77\xb1\x42\xb4\xd5\xe7\xd4\xed\xe0\x85\x68\x8b\xe1\xd5\xdf\x0d\x5d\xa8\xf0\x3d\xe1\xbc\xda\x93\xfd\xb5\xf1\x3f\x33\x47\xd1\x5f\x3e\x7a\x2d\xf4\x62\xd7\x27\xed\x3c\x5f\x7f\x8d\x6c\x90\x93\xed\xe5\xd3\xdf\x36\x6b\x1f\xc8\xe5\xf6\x19\xc5\xfc\x3c\x03\xf6\x42\xb6\xae\xc1\x62\xf8\x4e\x1a\x0d\x9d\xea\xbf\x46\x32\x4c\xca\x6d\x68\xf7\xfe\x6e\xed\xed\xd5\xad\xd1\xfb\x08\xde\x4b\xef\xad\x08\x03\xa5\x37\x58\xbe\x35\x22\x33\x1b\x68\x4e\x5f\x3c\x7a\x0f\xbd\xff\x06\x00\x00\xff\xff\x44\x82\x43\x11\x96\x0a\x00\x00")

func workerEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsOvsYaml,
		"worker/etc/origin/node/pods/ovs.yaml",
	)
}

func workerEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcd\x8a\xa6\xdd\x46\x29\x2e\xd6\x61\x50\x91\x02\x5d\x92\x75\x01\x1a\x27\x68\xd3\x62\x40\x50\x14\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x7a\x69\xfe\xfb\x40\xea\xc5\x76\x14\x39\x49\xf7\x69\x5f\x5a\x93\x77\xf7\xdc\xeb\x73\x54\x78\x21\x3f\xa2\x75\xd2\xe8\x04\xaa\xf1\x68\x21\x75\x9a\xc0\x99\x49\x47\x39\x12\x4f\x39\xf1\x64\x04\xc0\xb5\x36\xc4\x49\x1a\xed\xfc\x11\xc0\x89\x0c\xd3\x52\xa1\x8d\xb8\x2a\x32\x1e\x2d\xca\x29\x5a\x8d\x84\x2e\x92\x26\x16\x56\x92\x14\x5c\xb1\xc2\xa4\x09\xec\xec\x8c\x00\x14\x9f\xa2\x6a\x8c\x79\x51\x24\xe0\x52\x1d\x0e\xc2\xe4\x85\xd1\xa8\x29\x01\x8d\x74\x69\xec\x22\x5c\x9b\x02\xb5\xcb\xe4\x8c\x02\xde\xed\x3a\xb4\x2c\x30\x01\xa9\x67\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xbf\x5d\xc1\x05\x26\x2b\x20\xe6\x45\xae\x40\xe1\x83\x10\x46\x13\x97\x1a\x6d\x08\x89\xf9\x28\x72\xae\xd3\x3a\x3e\x06\xf1\x54\xea\x78\xca\x5d\xd6\x9c\x99\x68\x7e\x7c\x0b\xff\x03\xfc\xf0\x68\x53\x05\xc0\x21\x01\xc3\xd2\x40\x21\x0b\x9c\x71\xa9\x46\xad\x2a\xc8\x19\x70\x6d\x28\x43\x0b\x85\x35\x02\x9d\x03\xe9\x40\x49\x47\xa8\xa5\x9e\x83\xd1\x40\x19\x82\xd0\x92\x39\xb4\x15\x5a\x70\x46\x2c\x90\x7e\x86\x4b\x2e\x09\x4a\x4d\x52\x81\x24\xc0\xaf\x92\x5c\x83\x4a\x96\x17\xb0\xbb\x90\x4a\xc1\xe3\xa7\x7f\x9b\xa9\x03\x56\x3c\x7b\x19\x54\x60\x6f\x17\xce\x8f\xde\x9d\x34\x9a\x16\xc9\x4a\x74\xfb\x7b\xcd\xf9\x32\x93\x0a\x81\x6c\x89\x2f\x21\x35\xcd\x25\xf8\x20\x51\x64\x06\x76\x09\x1d\xed\xc2\x37\x1f\x03\x27\x60\xf0\x61\x72\xfc\x17\x3b\x38\x9d\x4c\x8e\x0e\xce\x93\xb8\xe2\x36\xb6\xa5\x8e\x37\xca\x1a\xaf\x42\x8f\x7c\xe8\xf0\x2a\x4e\xb1\x8a\x75\xa9\xd4\x4b\x9f\x9a\xee\xbc\x40\xed\x64\xe7\x92\x5b\x9f\x7a\x02\xaf\xfb\x85\x11\xa5\xb5\xa8\x49\x2d\xfb\x25\x3a\x98\x1c\x6f\xd4\xc6\x8b\xc6\x2f\x1c\x44\x51\xb4\x03\xcf\x5f\x3d\x19\xaf\x39\x72\x0a\xb1\x80\xf1\x0b\x78\x12\x54\xd7\x24\x4f\x9f\xb6\x45\x81\x9f\xf6\x61\x0c\xcf\x9e\x75\x42\x54\x0e\xd7\x34\xa7\x16\xf9\xa2\x3b\xcf\xe4\x7a\xb5\x2e\x2e\x60\xe7\xf1\x55\x03\x74\xbd\x03\x6c\x4e\xf0\xcb\x1e\x7c\xfa\x34\x90\x32\x5a\x6b\xec\x7f\x49\xd8\xf7\x56\xea\x79\x2f\xd1\xd0\xf3\x71\x3f\xca\xd4\x68\x5c\x9f\x41\x8f\xa7\x4d\x8a\x7e\xf8\x67\x72\x0e\xa9\x41\xa7\x77\xc3\x58\x39\x82\x65\x7f\xde\xbc\xc2\x83\x87\xe8\xe2\x02\x1e\x01\x9b\x41\x8c\x24\x62\x63\xe5\x5c\xea\xd8\x7b\x0d\xff\xb0\xda\x75\xb4\xe4\xb9\x1a\xae\x54\x37\x1c\x07\x61\xef\xc0\x4c\xea\xb4\x8e\xd2\x57\xe6\x26\xce\xff\x76\x12\x26\x66\x5b\x52\xdf\xd5\xed\xae\xdd\xe7\x7c\x81\x60\xfc\x2a\x69\x16\x26\xcc\x4a\x2d\xc2\x02\x6f\x47\xcb\xbb\x6c\xbb\x9b\x03\x7b\xd7\xb4\x4c\x68\x19\x6b\xa4\x28\x8d\x7f\xdb\x63\x2b\x96\x37\x30\x91\x8f\xb1\xb1\x12\x45\x6d\x65\x0a\x0a\x56\x7e\x21\xfe\x08\x71\x66\x1c\x6d\xdc\xb5\x51\xd5\x95\x6a\x47\xc3\x2d\x5d\x9d\x6f\x33\x24\x2c\x8c\x66\xaf\x66\x61\xad\x1a\xe0\x4a\xe1\xd7\xc2\xd8\x55\xf3\x9c\x29\xad\xc0\x2d\x58\xa3\xae\x40\xa3\xb6\x72\x28\x56\xcf\x01\x38\xe2\x96\xba\xf2\xb0\xa6\xfa\xfb\x77\xcf\x2d\x63\xfe\xb5\x1b\x52\x77\xa9\x8e\x56\x72\x60\x4c\x99\xb9\xc2\x0a\xd5\xfe\xe3\xab\xc3\xa3\xdf\x3f\xbc\xf9\xfc\xf6\xf4\xcd\xdb\xa3\x8f\x47\x6f\x13\xf6\xfc\x3a\x84\x86\xba\x6a\x1f\x9e\xfa\x11\x3b\x3d\x3b\x9a\xbc\xff\xf3\xf8\x8f\xf3\xcf\x87\x93\xf7\x9f\x0f\x4f\x4f\x5e\x1f\x4f\x9a\x24\x2a\xae\x4a\x4c\x40\xa8\xd2\x11\xda\x48\x19\xc1\x55\x10\xc9\x9c\xcf\x31\x81\xab\x2b\x88\x0e\xea\x60\x8f\xfd\x8d\x8b\x26\xbe\xae\xdf\xe0\x4b\x69\x08\xe1\xba\xf6\xb8\xfe\x56\x02\xf8\xba\xba\x36\x82\xee\x65\x3c\x33\x96\x12\x18\xef\x3d\x7f\xf1\x6b\xe3\xdb\x77\xb6\x7f\x5b\x63\x65\xc8\x15\x65\xff\x8c\xea\x65\x51\x37\xa7\xc1\xf4\x17\x5f\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x2e\x72\xcc\x8d\x5d\xfa\xbb\xbd\x93\x7a\xa4\x1d\x8a\xd2\x4a\x5a\x1e\x18\x4d\xf8\x95\x5a\xdb\xc2\xca\x4a\x2a\x9c\x63\x9a\x84\xfd\xd3\xba\x28\xf5\x6b\xf7\xc1\xa1\x4d\xa0\xde\x51\x95\x51\x65\x8e\x27\xa6\xd4\xab\xdc\x72\x7f\x3a\xe3\x94\x25\xfd\xf5\xb4\x99\x8d\x71\xd4\xf4\xbc\x4b\x81\xa7\xa7\x5a\x2d\xd7\x9c\xf6\xf1\xb6\xcd\xe1\x1a\x70\xa7\xb6\x2e\xbf\xd3\x41\xf3\xf2\xf6\xe1\x2a\x6e\x59\x2b\xb8\xd5\x24\x4e\xa7\xa5\xbb\x25\xc1\xc6\x90\x79\xf1\x03\xa3\x08\xef\x7f\xe5\x2e\x25\x89\x6c\x0b\xb2\xa9\x1e\x0c\xbc\xfa\x92\xdc\x82\xbb\x52\xfa\x9e\xb8\x57\x9f\x83\xc3\x81\xf7\xd4\x36\xe1\x6e\x2e\xb9\x3e\x92\x29\x88\xf9\xcf\xa2\x56\xd8\x9f\x96\x6e\xd3\xf6\x8d\x91\x44\x30\xd6\x48\xe9\x40\x32\x4a\x4e\x5b\x04\xbf\xc0\xdc\x7d\x32\x53\x72\xda\xc2\x06\x9b\x5e\x9a\x5e\x73\x52\x0b\xbb\x4a\x06\xd6\x1f\x1f\x76\xe7\xc2\x4a\x13\x78\xa9\xb8\x73\x93\x7a\x91\x2c\x1d\x61\xce\xea\x4d\xd9\x7c\xfb\x8f\x5a\x0a\x36\x5f\xd8\x01\xc6\x87\xdf\xf2\xf8\x56\x1a\x8e\x86\x38\xb8\x15\x60\x98\x77\xdb\x58\x37\x08\xe9\x4b\x9b\x1b\xff\xe7\x8d\xbb\x09\xb2\xba\x1e\xb4\x5e\xe7\xe9\xad\x2c\xbd\xcb\x32\xee\xf8\x38\xcc\xd5\x3b\x31\xd6\xf8\x39\x04\x55\x93\xf3\x4e\xa4\x1b\x5c\xbb\x8b\x8d\xf7\x8a\x6c\x73\x4e\xef\xc1\xbf\x41\xd4\x9b\x1c\x1c\x64\xe0\xd6\x01\xda\xa4\xe2\x30\x11\xb7\x26\x77\x0f\x46\x3e\x8c\x8f\xff\x06\x00\x00\xff\xff\x1a\xb6\xf4\xf5\x9b\x0f\x00\x00")

func workerEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsSdnYaml,
		"worker/etc/origin/node/pods/sdn.yaml",
	)
}

func workerEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func workerEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeResolvConf,
		"worker/etc/origin/node/resolv.conf",
	)
}

func workerEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := workerEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func workerEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeSdnKubeconfig,
		"worker/etc/origin/node/sdn.kubeconfig",
	)
}

func workerEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xc1\x0e\x82\x20\x18\x00\xe0\x3b\x4f\xe1\x13\xc0\x5c\x67\x0e\x49\x7f\x8c\x45\xd0\x32\xbd\xba\xd4\x3f\xc6\x2a\x7e\x67\xe4\xc5\xf9\xee\x6d\xbd\xc0\xe7\x2f\x37\xe3\x5d\x2d\xd9\x01\xaa\x46\x77\xd6\x6b\x0b\x2d\x58\xb9\xae\x05\x57\x94\x1e\x31\x70\x45\xef\x89\x12\xa6\x6c\x29\x58\x5c\xf0\xc5\x1d\x8d\x58\x6c\x1b\x33\xe7\xbd\x86\xae\x85\x6b\x6d\xbc\x93\xcb\x8e\x97\x25\x3b\x35\x15\x28\xef\x8e\x46\x4b\x81\x79\x10\x34\xc7\x10\x93\x48\x34\xa2\xe8\x89\xf2\x27\xcf\xf7\x89\x3f\xbf\x3d\x0e\x7f\x9e\xfd\x02\x00\x00\xff\xff\xa8\xcd\x04\x00\x82\x00\x00\x00")

func workerEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcSysconfigAtomicOpenshiftNode,
		"worker/etc/sysconfig/atomic-openshift-node",
	)
}

func workerEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := workerEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerVarLibOriginDockerConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcc\x4d\x4c\x4f\x2d\x86\x50\x01\xa5\x39\x39\xc1\xa9\xc9\x45\xa9\x25\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x02\xd2\xee\x96\x2e\x00\x00\x00")

func workerVarLibOriginDockerConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_workerVarLibOriginDockerConfigJson,
		"worker/var/lib/origin/.docker/config.json",
	)
}

func workerVarLibOriginDockerConfigJson() (*asset, error) {
	bytes, err := workerVarLibOriginDockerConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/var/lib/origin/.docker/config.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master/etc/etcd/ca.crt":                                  masterEtcEtcdCaCrt,
	"master/etc/etcd/etcd.conf":                               masterEtcEtcdEtcdConf,
	"master/etc/etcd/peer.crt":                                masterEtcEtcdPeerCrt,
	"master/etc/etcd/peer.key":                                masterEtcEtcdPeerKey,
	"master/etc/etcd/server.crt":                              masterEtcEtcdServerCrt,
	"master/etc/etcd/server.key":                              masterEtcEtcdServerKey,
	"master/etc/origin/cloudprovider/azure.conf":              masterEtcOriginCloudproviderAzureConf,
	"master/etc/origin/master/admin.kubeconfig":               masterEtcOriginMasterAdminKubeconfig,
	"master/etc/origin/master/aggregator-front-proxy.crt":     masterEtcOriginMasterAggregatorFrontProxyCrt,
	"master/etc/origin/master/aggregator-front-proxy.key":     masterEtcOriginMasterAggregatorFrontProxyKey,
	"master/etc/origin/master/ca-bundle.crt":                  masterEtcOriginMasterCaBundleCrt,
	"master/etc/origin/master/ca.crt":                         masterEtcOriginMasterCaCrt,
	"master/etc/origin/master/ca.key":                         masterEtcOriginMasterCaKey,
	"master/etc/origin/master/front-proxy-ca.crt":             masterEtcOriginMasterFrontProxyCaCrt,
	"master/etc/origin/master/master-config.yaml":             masterEtcOriginMasterMasterConfigYaml,
	"master/etc/origin/master/master.etcd-ca.crt":             masterEtcOriginMasterMasterEtcdCaCrt,
	"master/etc/origin/master/master.etcd-client.crt":         masterEtcOriginMasterMasterEtcdClientCrt,
	"master/etc/origin/master/master.etcd-client.key":         masterEtcOriginMasterMasterEtcdClientKey,
	"master/etc/origin/master/master.kubelet-client.crt":      masterEtcOriginMasterMasterKubeletClientCrt,
	"master/etc/origin/master/master.kubelet-client.key":      masterEtcOriginMasterMasterKubeletClientKey,
	"master/etc/origin/master/master.proxy-client.crt":        masterEtcOriginMasterMasterProxyClientCrt,
	"master/etc/origin/master/master.proxy-client.key":        masterEtcOriginMasterMasterProxyClientKey,
	"master/etc/origin/master/master.server.crt":              masterEtcOriginMasterMasterServerCrt,
	"master/etc/origin/master/master.server.key":              masterEtcOriginMasterMasterServerKey,
	"master/etc/origin/master/named/console.crt":              masterEtcOriginMasterNamedConsoleCrt,
	"master/etc/origin/master/named/console.key":              masterEtcOriginMasterNamedConsoleKey,
	"master/etc/origin/master/openshift-master.kubeconfig":    masterEtcOriginMasterOpenshiftMasterKubeconfig,
	"master/etc/origin/master/scheduler.json":                 masterEtcOriginMasterSchedulerJson,
	"master/etc/origin/master/service-signer.crt":             masterEtcOriginMasterServiceSignerCrt,
	"master/etc/origin/master/service-signer.key":             masterEtcOriginMasterServiceSignerKey,
	"master/etc/origin/master/serviceaccounts.private.key":    masterEtcOriginMasterServiceaccountsPrivateKey,
	"master/etc/origin/master/serviceaccounts.public.key":     masterEtcOriginMasterServiceaccountsPublicKey,
	"master/etc/origin/master/session-secrets.yaml":           masterEtcOriginMasterSessionSecretsYaml,
	"master/etc/origin/node/ca.crt":                           masterEtcOriginNodeCaCrt,
	"master/etc/origin/node/client-ca.crt":                    masterEtcOriginNodeClientCaCrt,
	"master/etc/origin/node/node-config.yaml":                 masterEtcOriginNodeNodeConfigYaml,
	"master/etc/origin/node/node.kubeconfig":                  masterEtcOriginNodeNodeKubeconfig,
	"master/etc/origin/node/pods/apiserver.yaml":              masterEtcOriginNodePodsApiserverYaml,
	"master/etc/origin/node/pods/controllers.yaml":            masterEtcOriginNodePodsControllersYaml,
	"master/etc/origin/node/pods/etcd.yaml":                   masterEtcOriginNodePodsEtcdYaml,
	"master/etc/origin/node/pods/ovs.yaml":                    masterEtcOriginNodePodsOvsYaml,
	"master/etc/origin/node/pods/sdn.yaml":                    masterEtcOriginNodePodsSdnYaml,
	"master/etc/origin/node/pods/sync.yaml":                   masterEtcOriginNodePodsSyncYaml,
	"master/etc/origin/node/resolv.conf":                      masterEtcOriginNodeResolvConf,
	"master/etc/origin/node/sdn.kubeconfig":                   masterEtcOriginNodeSdnKubeconfig,
	"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt": masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master/etc/sysconfig/atomic-openshift-node":              masterEtcSysconfigAtomicOpenshiftNode,
	"master/root/.kube/config":                                masterRootKubeConfig,
	"master/var/lib/origin/.docker/config.json":               masterVarLibOriginDockerConfigJson,
	"master-startup.sh":                                       masterStartupSh,
	"node-startup.sh":                                         nodeStartupSh,
	"worker/etc/origin/cloudprovider/azure.conf":              workerEtcOriginCloudproviderAzureConf,
	"worker/etc/origin/node/bootstrap.kubeconfig":             workerEtcOriginNodeBootstrapKubeconfig,
	"worker/etc/origin/node/ca.crt":                           workerEtcOriginNodeCaCrt,
	"worker/etc/origin/node/node-bootstrapper.crt":            workerEtcOriginNodeNodeBootstrapperCrt,
	"worker/etc/origin/node/node-bootstrapper.key":            workerEtcOriginNodeNodeBootstrapperKey,
	"worker/etc/origin/node/node-config.yaml":                 workerEtcOriginNodeNodeConfigYaml,
	"worker/etc/origin/node/pods/ovs.yaml":                    workerEtcOriginNodePodsOvsYaml,
	"worker/etc/origin/node/pods/sdn.yaml":                    workerEtcOriginNodePodsSdnYaml,
	"worker/etc/origin/node/resolv.conf":                      workerEtcOriginNodeResolvConf,
	"worker/etc/origin/node/sdn.kubeconfig":                   workerEtcOriginNodeSdnKubeconfig,
	"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt": workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"worker/etc/sysconfig/atomic-openshift-node":              workerEtcSysconfigAtomicOpenshiftNode,
	"worker/var/lib/origin/.docker/config.json":               workerVarLibOriginDockerConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"etcd": {nil, map[string]*bintree{
				"ca.crt":     {masterEtcEtcdCaCrt, map[string]*bintree{}},
				"etcd.conf":  {masterEtcEtcdEtcdConf, map[string]*bintree{}},
				"peer.crt":   {masterEtcEtcdPeerCrt, map[string]*bintree{}},
				"peer.key":   {masterEtcEtcdPeerKey, map[string]*bintree{}},
				"server.crt": {masterEtcEtcdServerCrt, map[string]*bintree{}},
				"server.key": {masterEtcEtcdServerKey, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {masterEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"master": {nil, map[string]*bintree{
					"admin.kubeconfig":           {masterEtcOriginMasterAdminKubeconfig, map[string]*bintree{}},
					"aggregator-front-proxy.crt": {masterEtcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
					"aggregator-front-proxy.key": {masterEtcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
					"ca-bundle.crt":              {masterEtcOriginMasterCaBundleCrt, map[string]*bintree{}},
					"ca.crt":                     {masterEtcOriginMasterCaCrt, map[string]*bintree{}},
					"ca.key":                     {masterEtcOriginMasterCaKey, map[string]*bintree{}},
					"front-proxy-ca.crt":         {masterEtcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
					"master-config.yaml":         {masterEtcOriginMasterMasterConfigYaml, map[string]*bintree{}},
					"master.etcd-ca.crt":         {masterEtcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
					"master.etcd-client.crt":     {masterEtcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
					"master.etcd-client.key":     {masterEtcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
					"master.kubelet-client.crt":  {masterEtcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
					"master.kubelet-client.key":  {masterEtcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
					"master.proxy-client.crt":    {masterEtcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
					"master.proxy-client.key":    {masterEtcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
					"master.server.crt":          {masterEtcOriginMasterMasterServerCrt, map[string]*bintree{}},
					"master.server.key":          {masterEtcOriginMasterMasterServerKey, map[string]*bintree{}},
					"named": {nil, map[string]*bintree{
						"console.crt": {masterEtcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
						"console.key": {masterEtcOriginMasterNamedConsoleKey, map[string]*bintree{}},
					}},
					"openshift-master.kubeconfig": {masterEtcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
					"scheduler.json":              {masterEtcOriginMasterSchedulerJson, map[string]*bintree{}},
					"service-signer.crt":          {masterEtcOriginMasterServiceSignerCrt, map[string]*bintree{}},
					"service-signer.key":          {masterEtcOriginMasterServiceSignerKey, map[string]*bintree{}},
					"serviceaccounts.private.key": {masterEtcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
					"serviceaccounts.public.key":  {masterEtcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
					"session-secrets.yaml":        {masterEtcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"ca.crt":           {masterEtcOriginNodeCaCrt, map[string]*bintree{}},
					"client-ca.crt":    {masterEtcOriginNodeClientCaCrt, map[string]*bintree{}},
					"node-config.yaml": {masterEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"node.kubeconfig":  {masterEtcOriginNodeNodeKubeconfig, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"apiserver.yaml":   {masterEtcOriginNodePodsApiserverYaml, map[string]*bintree{}},
						"controllers.yaml": {masterEtcOriginNodePodsControllersYaml, map[string]*bintree{}},
						"etcd.yaml":        {masterEtcOriginNodePodsEtcdYaml, map[string]*bintree{}},
						"ovs.yaml":         {masterEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml":         {masterEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
						"sync.yaml":        {masterEtcOriginNodePodsSyncYaml, map[string]*bintree{}},
					}},
					"resolv.conf":    {masterEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig": {masterEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {masterEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"root": {nil, map[string]*bintree{
			".kube": {nil, map[string]*bintree{
				"config": {masterRootKubeConfig, map[string]*bintree{}},
			}},
		}},
		"var": {nil, map[string]*bintree{
			"lib": {nil, map[string]*bintree{
				"origin": {nil, map[string]*bintree{
					".docker": {nil, map[string]*bintree{
						"config.json": {masterVarLibOriginDockerConfigJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
	"worker": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {workerEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"bootstrap.kubeconfig":  {workerEtcOriginNodeBootstrapKubeconfig, map[string]*bintree{}},
					"ca.crt":                {workerEtcOriginNodeCaCrt, map[string]*bintree{}},
					"node-bootstrapper.crt": {workerEtcOriginNodeNodeBootstrapperCrt, map[string]*bintree{}},
					"node-bootstrapper.key": {workerEtcOriginNodeNodeBootstrapperKey, map[string]*bintree{}},
					"node-config.yaml":      {workerEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"ovs.yaml": {workerEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml": {workerEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":    {workerEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig": {workerEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {workerEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"var": {nil, map[string]*bintree{
			"lib": {nil, map[string]*bintree{
				"origin": {nil, map[string]*bintree{
					".docker": {nil, map[string]*bintree{
						"config.json": {workerVarLibOriginDockerConfigJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
