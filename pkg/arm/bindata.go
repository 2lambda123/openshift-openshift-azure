// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/etc/etcd/ca.crt
// data/etc/etcd/etcd.conf
// data/etc/etcd/peer.crt
// data/etc/etcd/peer.key
// data/etc/etcd/server.crt
// data/etc/etcd/server.key
// data/etc/origin/master/admin.kubeconfig
// data/etc/origin/master/aggregator-front-proxy.crt
// data/etc/origin/master/aggregator-front-proxy.key
// data/etc/origin/master/ca.crt
// data/etc/origin/master/ca.key
// data/etc/origin/master/front-proxy-ca.crt
// data/etc/origin/master/master-config.yaml
// data/etc/origin/master/master.etcd-ca.crt
// data/etc/origin/master/master.etcd-client.crt
// data/etc/origin/master/master.etcd-client.key
// data/etc/origin/master/master.kubelet-client.crt
// data/etc/origin/master/master.kubelet-client.key
// data/etc/origin/master/master.proxy-client.crt
// data/etc/origin/master/master.proxy-client.key
// data/etc/origin/master/master.server.crt
// data/etc/origin/master/master.server.key
// data/etc/origin/master/named/console.crt
// data/etc/origin/master/named/console.key
// data/etc/origin/master/openshift-master.kubeconfig
// data/etc/origin/master/scheduler.json
// data/etc/origin/master/service-signer.crt
// data/etc/origin/master/service-signer.key
// data/etc/origin/master/serviceaccounts.private.key
// data/etc/origin/master/serviceaccounts.public.key
// data/etc/origin/master/session-secrets.yaml
// data/etc/origin/node/ca.crt
// data/etc/origin/node/client-ca.crt
// data/etc/origin/node/node.kubeconfig
// data/etc/origin/node/pods/apiserver.yaml
// data/etc/origin/node/pods/controllers.yaml
// data/etc/origin/node/pods/etcd.yaml
// data/etc/origin/node/pods/sync.yaml
// data/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _etcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func etcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdCaCrt,
		"etc/etcd/ca.crt",
	)
}

func etcEtcdCaCrt() (*asset, error) {
	bytes, err := etcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xd1\x4e\xfa\x30\x14\xc6\xef\xff\x4f\xc1\x03\xfc\xdd\xc6\x44\x70\x24\xbd\x28\xdb\x31\x34\x94\xa2\xdd\x19\x09\x57\xcd\xc4\x26\x1a\x45\x49\x57\x89\x86\xf0\xee\x86\x16\x61\xc2\x88\x6e\xd9\x4d\xbf\x5f\xbf\xb3\xef\x9c\x03\x98\x66\x8a\x66\x53\x90\xc8\x72\x50\x29\x67\x20\x50\x15\x92\xe7\xe4\xd1\xda\x65\xd5\x0f\xc3\xf5\xba\x15\xc0\x87\x35\x65\x30\x7c\xab\xec\x6b\xb9\xd0\xad\xcd\xa6\x1f\x5f\xf6\x92\x7f\xee\x76\x0a\x12\xd5\x0d\xe3\x40\x42\x6d\xe7\xdb\xef\x21\xac\xb4\x59\x69\x13\xcc\x8d\xdd\x31\xde\xd7\xa1\xb4\xc0\x21\xb1\xe6\x5d\x7b\x29\xa3\x48\x55\xc6\x24\x09\x57\xa5\x09\x5f\x9e\xee\x9d\x83\xd7\x80\x43\x8a\x6c\x22\x14\xb2\x31\x4c\x0a\x24\xf1\x55\x14\x79\x69\x08\x54\xe2\x00\x28\x2a\x26\x10\xe4\x94\x72\xb2\xd7\x98\x60\xc8\x28\xaf\xe5\xba\x05\x90\x7f\x4b\x75\x7d\xe4\x91\xf2\x22\x47\x90\x64\x51\x56\x56\x9b\x8b\xc8\x3d\x7b\x97\x1f\xa7\xee\xf6\xff\xfa\x51\xbb\x11\x6c\x9f\x82\x71\x23\x18\xd7\xfe\x67\x04\xb3\x33\x4d\x7e\xd6\x9f\x1e\xe1\x2c\x47\x10\x8d\x33\x8c\x02\xf7\xd6\xa6\xb6\x83\x4f\x1b\x73\x40\xbf\x4b\x0b\x3a\x06\xd2\xd8\x2f\xaf\x3b\x8f\xa6\x2d\x58\xea\xfa\x0e\x78\xec\xfc\x22\x38\xbd\x21\xa6\x73\xd9\x87\x74\x14\xca\xed\x50\x32\x95\xd2\x63\x78\x5e\x1e\x0a\xde\x15\x13\xa4\x6a\x40\xd3\x11\x88\x4c\x0d\x66\x08\x39\xe9\xc4\x49\x27\xe9\xf6\xe2\xa4\xeb\x99\x5f\x9d\xbe\x02\x00\x00\xff\xff\x3d\x31\x31\xc4\x21\x03\x00\x00")

func etcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdEtcdConf,
		"etc/etcd/etcd.conf",
	)
}

func etcEtcdEtcdConf() (*asset, error) {
	bytes, err := etcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\x81\x45\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func etcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdPeerCrt,
		"etc/etcd/peer.crt",
	)
}

func etcEtcdPeerCrt() (*asset, error) {
	bytes, err := etcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x48\x4d\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func etcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdPeerKey,
		"etc/etcd/peer.key",
	)
}

func etcEtcdPeerKey() (*asset, error) {
	bytes, err := etcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\x81\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func etcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdServerCrt,
		"etc/etcd/server.crt",
	)
}

func etcEtcdServerCrt() (*asset, error) {
	bytes, err := etcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x4e\x2d\x2a\x4b\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func etcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcEtcdServerKey,
		"etc/etcd/server.key",
	)
}

func etcEtcdServerKey() (*asset, error) {
	bytes, err := etcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func etcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAdminKubeconfig,
		"etc/origin/master/admin.kubeconfig",
	)
}

func etcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := etcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xa7\x17\xa5\xa6\x27\x96\xe4\x17\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x82\x55\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func etcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAggregatorFrontProxyCrt,
		"etc/origin/master/aggregator-front-proxy.crt",
	)
}

func etcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := etcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x00\xd0\xfb\x9f\x22\x13\x64\x07\xbf\xd0\x8b\x17\xa1\x13\x48\x89\x21\x17\x03\x31\x94\x06\xeb\xee\x7d\x6b\x41\x35\xb9\x9b\x53\xa1\x48\xf3\x1f\x4e\x13\x30\xeb\xe8\xc2\x98\xc9\x5c\xba\x5c\xcd\x69\x62\x62\x36\xe2\xe6\x6a\x87\xe9\xf0\x6a\xfa\x04\x16\x0a\x78\xe1\x74\x93\xc1\xb0\xf7\xef\x0b\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func etcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterAggregatorFrontProxyKey,
		"etc/origin/master/aggregator-front-proxy.key",
	)
}

func etcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := etcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaCrt,
		"etc/origin/master/ca.crt",
	)
}

func etcOriginMasterCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4e\xd4\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func etcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterCaKey,
		"etc/origin/master/ca.key",
	)
}

func etcOriginMasterCaKey() (*asset, error) {
	bytes, err := etcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x3a\x27\x82\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func etcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterFrontProxyCaCrt,
		"etc/origin/master/front-proxy-ca.crt",
	)
}

func etcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x6f\x1b\xb9\x11\xff\xae\xbf\x82\xf0\x97\xdc\x15\xdd\x5d\xf9\x95\xc7\x02\xfd\xa0\xda\xe7\x9e\x70\x8e\xa3\x4a\x49\x51\xa0\x28\x0a\x8a\x1c\xad\x18\x71\xc9\x35\x1f\x3a\xeb\x5c\xff\xef\x05\x1f\xbb\x4b\xad\xe4\x9c\x71\x4d\xda\x73\x3e\x44\xcb\xf9\xcd\x70\x5e\x9c\x19\x12\xd3\x9a\x69\xcd\xa4\xb8\x92\x62\xc5\xaa\x72\x84\x50\xc3\x6d\xc5\x92\x6f\x84\xfe\x6c\x19\xa7\xd7\xb0\xc2\x96\x1b\x1d\x96\x10\x22\x1e\x60\x15\x36\x4c\x8a\x76\x11\x21\xdc\xb0\xbf\x81\x72\x12\x4b\xb4\x3d\xed\x96\x41\x6c\x4b\xf4\x8f\x7f\x76\xdf\x1b\x26\x68\xb9\x2f\x38\xec\xd8\x21\x14\x68\x69\x15\x01\xdd\xcb\x46\x88\xb3\x9a\x19\x5d\xa2\xc7\xa7\x64\x51\xc1\xbd\x05\x9d\x2c\x7b\xb1\x1f\xb6\xa0\x14\xa3\xf0\x1b\x15\x4e\x14\xec\x24\x25\x1a\xca\x06\x84\x5e\xb3\x95\xc9\x99\x2c\xa6\x35\xae\x60\x26\x39\x23\xbb\xdf\xe8\x9d\x07\x20\xd6\x21\xe7\x96\xa7\x06\x67\xa8\xc6\x86\xac\xbd\xfc\x89\x10\xd2\x78\x71\x7b\x1e\xc9\xd0\x06\x76\x25\x62\x0e\xa2\xf3\x3d\xb5\x28\x88\x5d\xd6\x89\x4e\x78\x10\xda\x62\x6e\xa1\x44\xaf\x8c\xb2\xf0\x2a\xa1\x08\x5c\x43\xd9\xab\x93\x51\x10\x0c\x68\x02\x90\x62\x7e\x2c\x2e\x59\x17\xae\x12\x35\x92\xea\x67\x48\x4b\xe7\x4e\xbd\x17\xba\xcf\x40\x4c\x89\x9c\x1e\xc9\xb2\xde\xb0\xe6\x83\xdf\x89\x7b\x3d\x6e\x30\xe3\x56\xc1\x00\x17\x42\x94\x38\x3f\xc6\x07\x5b\xca\x4c\x9f\xbf\x20\xf0\x92\x03\x8d\xcc\xb8\xaa\x14\x54\xd8\x48\x95\x64\xbc\x92\x0f\xbb\x2b\xce\x40\x98\xa9\x58\xc9\x60\x18\x01\x65\x6e\x18\x87\x12\xf5\x2c\xd9\x4a\x49\x61\x32\x8f\xcf\x89\x32\x1e\xb8\x81\xdd\x17\x71\x1b\xd8\x8d\x70\xc3\x6e\x61\x0b\x5c\x97\xa3\xcc\x05\x7e\x90\x07\xd8\x9a\x75\xaf\x4e\xcc\xe7\x1f\x01\x53\x50\x51\x19\xaf\xdc\xd5\xa4\x44\x89\xe4\x8c\xe0\x4e\x89\x08\x90\x75\x2d\xc5\x1d\xae\xdb\xe8\x64\xcf\x28\x35\x0a\x59\x67\x14\x0e\xbb\xcc\x14\xac\xd8\x43\xcf\xf5\xf7\x6c\x0e\xb5\x34\x90\xfd\xe0\x30\x99\x5f\xad\x94\xb4\x4d\x80\x1f\xe2\xfe\xe2\x88\x7e\xd1\x6a\x50\x2e\x8d\x9e\x43\x7e\xd2\xa0\x46\x44\x0a\xa3\x24\xe7\x90\x44\x01\x38\x90\xfe\xb4\x70\x49\x36\x77\x3e\x1b\xbb\x9c\xce\x6a\xac\x0d\xa8\xac\x67\x76\xa9\xa4\x41\x6d\x19\x81\x85\xfb\x4f\x54\x57\xa0\x4c\x10\xa0\x59\x25\x5a\xf7\xa5\xd1\x8c\xf8\x2c\xd0\x3b\x07\x26\x71\x1c\x20\x5c\xfc\x92\x2d\x4b\x74\xf2\x87\x93\x11\x91\x4a\x4f\x38\x97\x3f\x03\xfd\xa0\x58\xc5\xdc\xa1\xa4\x42\xf7\xd6\x2c\x99\xa0\x13\x4a\x15\x68\x5d\xa2\x71\xee\xff\x95\x6f\xc7\x97\xe7\x91\x76\x07\xe6\x67\xa9\x36\x25\x32\xa4\xb9\x18\x81\x21\x74\x3f\x01\x09\x2e\x51\xb0\x37\x77\xc4\x3e\xd6\xbd\x25\x7b\x64\xcf\x1c\x21\x9d\x25\x47\x10\xce\x1a\x84\xac\xe2\x3e\x32\x19\x5a\x1b\xd3\xe8\xb2\x28\x1e\x1f\x51\xee\x83\x9d\xff\x28\xb5\x71\x01\x44\x4f\x4f\xe5\xd9\xf9\x9b\x77\x5e\xb9\x85\x91\x0a\x57\xd0\xdb\xb7\xb1\x4b\x50\x02\x0c\xe8\x48\x0a\x29\x54\x26\x84\x9c\xc9\x63\xc0\xfd\x02\xe8\xa2\xbb\x70\xd1\x1d\x88\x49\x2b\xd9\x11\x58\x2a\xc4\xd7\xbe\x5e\xb3\x95\x54\x35\x36\x25\x72\x16\x85\xd5\x7c\x1a\xaa\xe3\x8d\xa7\xa0\xa7\xa7\xc0\x92\x16\x0d\xc7\xc8\x84\x71\xa9\xcb\xe7\x50\x31\x6d\xd4\xae\x75\x44\x89\xa8\x24\x1b\x50\x99\x8a\x84\x9c\x86\x96\x95\xeb\x2d\x29\x2f\xc7\xe3\xf1\x28\x94\xa2\xf7\xde\xdd\xb1\x0a\x39\xbb\x39\x98\xc3\xa8\x3e\x1f\xc9\xc8\xf2\xe5\x60\x0e\x40\x21\x9e\x8d\x54\xa6\x44\xa7\xe3\xb3\xcb\xf1\xa8\x77\x78\xaa\x8f\xdb\x1d\x37\xcc\x1d\x13\x50\x13\x55\xd9\x1a\x44\xdb\xcc\x09\x97\x96\x66\x24\xe9\xf8\x19\x2a\xc0\x90\x42\xfa\xd4\x2e\x3c\xbd\x51\x72\xcb\x28\xa8\x02\xff\x62\x15\xe4\x0e\x9d\x30\xb7\xd4\xae\xec\x38\x50\x38\x87\x21\x60\xd9\x12\x93\x0d\x08\xda\x02\x5c\x52\x9d\xef\x01\x6a\xa0\x0c\x67\x66\xd7\x40\x27\xa4\x69\x38\x23\xbe\xe7\x15\x5b\x41\xf3\x24\xb5\x1a\x25\x8d\x5c\x5a\xa7\x42\x7f\x36\xff\x97\x66\x11\x6e\x7d\x31\x72\x45\x82\x89\x2a\x73\xc1\xcc\x56\x2e\x50\x47\x76\x0a\xa1\x2b\xf6\xea\xf5\x3e\xfb\x06\x76\x2f\xe0\x0e\xc1\x0e\xdf\xd3\x59\x89\x4e\xcf\xde\xf8\xca\x72\xfa\xeb\x4d\x2c\x66\x4f\x6c\x1c\x69\x82\x1d\xa6\xd8\x1e\x28\xec\xa9\xc9\x1a\xa8\xed\xea\x75\x80\x1f\x51\xb2\xc3\xe5\x9f\xb5\x9f\x39\x62\x31\xd5\x77\x92\xc2\x4c\x2a\x33\xc7\xa2\x72\x93\xc7\xab\x84\xb6\xb0\x4b\x01\x2e\x7f\xdf\x9c\xe5\xe7\xbe\x52\x16\xa7\xaf\x47\x41\x62\xb0\xc8\x47\x14\x1e\xc2\xf9\xfc\xa9\x4b\x83\xab\xd8\xf5\x84\x08\xad\x63\x30\xf3\x61\x42\xa0\x71\x64\x03\xc2\x7c\xdc\x35\xa0\xcb\x97\xe4\xd4\x1f\x53\x4c\x34\x03\xa1\xa5\x55\xda\x94\xe8\x62\x3c\x1e\xc5\x01\xaf\x95\xfa\x22\xa1\x9e\xe9\xbe\xd1\x25\x3a\xf3\x12\x0e\x8d\x71\xbf\xe2\x59\x0d\xee\xe9\x4a\xe0\xad\x94\x8d\x3b\x3e\xff\x07\x73\x5f\xff\xd7\xe6\x9e\x7b\x09\x07\xb6\xa4\xd6\x0e\x3b\xbc\x17\x18\xce\x6d\xcc\x82\x99\x5d\x72\x46\x3e\xcd\x6f\x7d\x59\x6f\x14\x13\x06\x9d\xb4\xad\xeb\x04\x7d\x97\x5f\x83\x62\x5b\xa0\x79\x00\x76\x2d\xcc\x35\x00\x83\x99\x00\xb5\x08\xb9\xf6\x3d\xfa\x37\xba\xb7\xd2\xb8\xee\x36\x12\xa1\x07\xf7\x05\x32\x9e\xca\xd8\x9b\x63\x87\x24\x8c\x2a\x57\x5b\xf3\xd3\xb3\xb7\x21\x37\x2f\xbc\x75\x6b\xa9\x4d\xc8\xdc\x5b\x10\x95\x59\x97\xe8\x5d\x12\xd7\xe9\x2c\x4a\xb9\x9a\x5e\xcf\xa3\xa4\x38\x06\x14\xce\x21\x71\xef\x99\xbf\x6c\x85\x41\x47\x01\x5d\x63\x53\xf4\xde\x90\x5b\x9d\x45\x5c\xe3\x7b\x55\x7f\x66\x12\xe1\xc3\x73\x23\xf7\xa7\x49\xac\x35\x98\xaf\xe8\xbf\x93\x82\x48\xa1\x25\x87\xe2\x24\xf5\xa5\x9b\x0f\xb1\x30\xe9\xb5\xb1\x06\xb3\x96\xb4\x44\xd8\x1a\xd7\xc2\x19\x05\x61\x98\xd9\xcd\x62\x4d\x8d\x4e\xe1\xb2\x62\x22\x99\xec\x6b\xdc\x34\x4c\x54\xef\x23\x33\xe1\x98\xd5\xa3\xfe\x6e\xf2\xf8\x88\xbe\x63\x82\xc2\xc3\xa1\x6e\xf9\x4c\xc9\x06\x94\x61\xa0\xf3\x89\x35\xeb\x99\x92\xae\xa4\xe6\xd3\xe1\xc6\x68\xfc\x7d\xee\x5c\xbe\xaf\xbf\x2f\xa1\x49\xb5\x7f\xe6\xb6\xe6\x15\x4a\x2e\x3f\x50\x63\xc6\xd3\x2b\x9b\x5f\xe8\xbe\x19\x4d\x69\xda\x2e\x47\x7b\x77\xad\x84\xe6\xbe\xbb\xcf\x46\xc1\x0a\x94\x02\xfa\x29\x8e\xd3\x29\xd2\x0a\x76\x6f\xe1\x5f\x09\x43\xa8\xd5\xd3\xeb\xaf\xe7\x9f\xf6\x23\x8f\x2d\xe5\x7a\xe8\xac\x76\xd3\x05\x10\x05\xe6\x1b\x6c\x1c\x04\x1f\x6e\x1b\x66\xad\x0f\x0d\x88\xe9\xf5\x50\x42\x84\xb4\xe3\x6d\x0c\xa3\x35\x6b\xa9\xd8\x2f\x70\x2c\xf9\x7d\xfa\xe5\x35\x23\x4a\x6a\xb9\x32\x52\x70\x26\xdc\x18\x50\xbb\x63\xf1\x55\xed\xf9\x08\x02\x7b\x47\x9e\x14\xfe\x88\x9e\x15\x9d\x62\x27\x87\x56\x22\x64\xe4\x06\xc4\xef\x4d\x65\xaf\xd4\x40\xdd\xd8\xa8\x27\xc9\x68\xfb\x2d\xab\x76\x2b\xfd\x59\xb9\x5f\x34\xfe\xe6\xaf\xd7\x77\xfb\xd2\x34\x0c\x1e\xc0\xba\xa5\xf7\xf8\x61\x52\xc1\xc2\xb5\x22\xea\x3a\x59\xdb\x0c\x23\x39\x54\x6d\xad\x45\xba\x18\xb2\x56\x3f\x3f\x20\x05\x58\xa6\x03\x2e\xdf\xe1\xda\x15\x0b\xef\xd7\x54\x05\xd7\xcc\xb5\xfe\xe8\x96\x07\x6a\xbc\x7d\xdd\xce\x20\x5d\xfe\x1c\x83\x5d\x8e\xc7\xa3\x46\xc9\xcf\x40\x92\xa2\x1c\x2f\x2e\x6e\x18\x5b\xf8\xfb\xb6\x54\x25\x12\x92\x42\xa6\x24\x87\x7c\xef\xee\x56\x10\x59\x37\xd6\xc0\x9f\x62\x69\xd6\x40\xac\x62\x66\xe7\xae\xbd\x04\x3b\xce\x50\xaf\x89\xee\x56\xe2\x70\xa7\xc7\x65\x71\xd6\x12\x6f\xf1\x12\xb8\x9e\x81\x9a\x05\x65\x4a\x74\x19\xde\x09\x18\x1d\xf2\x9d\x8e\xdb\xbf\xec\xf4\x5d\xfb\x57\xf8\xd5\x91\x92\xd6\xb8\xfb\x7d\x67\x8a\xb6\x4b\x2a\x6b\xcc\xc4\x8b\x4b\xcf\x5c\x5a\xe3\xd5\x70\x99\x1f\x12\xdd\xe7\xdd\xa2\x95\x94\xe6\x45\xec\xb3\x13\x42\xa4\x4d\xdb\x5a\x8d\x05\xae\x80\x76\x6f\x2c\x59\xeb\x53\xff\xdb\x3f\x70\xf9\x32\xe4\xd6\x1b\x2e\x77\xfe\xe3\xc8\x09\x69\x14\xdb\x62\x03\x3f\x0d\x1e\x1d\x70\xd8\xcf\x0d\x52\x9e\xde\xde\xef\xbc\xa2\x11\x1c\xf7\x3d\xe0\xf0\x18\xcf\xa0\xc3\x63\x48\x7b\x0f\x38\xfa\x16\x71\x71\x71\xfc\x29\xe2\xc8\xa5\x41\xfb\x4b\x63\x7b\x6b\xed\x9e\xa2\x3a\x5b\x86\xf7\x87\x88\x6f\x6f\x2b\x0f\xf3\xf8\x40\x3b\x15\x37\x9c\x55\x6b\x13\x92\xb3\x7b\xe8\xfa\xc8\x6a\x90\xd6\x0c\xcf\x99\x2b\x05\xf4\xca\xc5\x6e\xe5\x86\xcd\x38\xe5\x66\x89\x7a\x47\x8e\x97\x67\x6a\x27\x94\xfe\x71\xa7\xd3\xf0\x57\x59\x82\xd2\xb1\x3d\x77\x4d\x24\xf3\xaf\x09\x2f\x2d\x57\x69\x1e\x6d\x25\xb7\x75\xf2\x3a\x41\x77\x02\xd7\x8c\xf8\x12\xeb\x0a\x01\x13\xd5\x0f\x7b\x0f\x94\xff\x09\x00\x00\xff\xff\x0c\x50\x75\x29\x92\x17\x00\x00")

func etcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterConfigYaml,
		"etc/origin/master/master-config.yaml",
	)
}

func etcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := etcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func etcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdCaCrt,
		"etc/origin/master/master.etcd-ca.crt",
	)
}

func etcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\x80\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func etcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdClientCrt,
		"etc/origin/master/master.etcd-client.crt",
	)
}

func etcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x71\xce\xc9\x4c\xcd\x2b\xd1\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func etcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterEtcdClientKey,
		"etc/origin/master/master.etcd-client.key",
	)
}

func etcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\x80\x15\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func etcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterKubeletClientCrt,
		"etc/origin/master/master.kubelet-client.crt",
	)
}

func etcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x21\x10\x06\xe0\xf7\x4e\x31\x27\x98\x3b\x94\x8f\x12\x04\x9d\xc0\xe2\x57\x06\xc4\x60\xe6\x6f\x41\x5c\xef\xbe\xdf\x5a\xf2\x72\x3b\x0a\x91\x31\xef\xf1\x98\x44\x88\xa6\xdf\xa8\xd6\x34\xc1\x69\xd5\xbe\x85\x08\x7d\x96\x20\x3c\xff\x3f\xe8\x60\xea\x86\x41\xcd\x98\x72\xca\x9b\x6e\xa3\xc9\xde\xb7\x2b\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func etcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterKubeletClientKey,
		"etc/origin/master/master.kubelet-client.key",
	)
}

func etcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\x80\xa5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func etcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterProxyClientCrt,
		"etc/origin/master/master.proxy-client.crt",
	)
}

func etcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x03\x21\x0c\x06\xe0\xf7\x4e\x91\x09\xb2\x43\xeb\xa3\x14\x84\x4e\x20\xe5\x57\x02\x87\x42\x12\x8e\x0b\x9e\xbb\xdf\xb7\x16\x15\x95\xb3\x3a\x32\xe2\x6d\x9f\x70\x18\x71\x9a\xa3\x49\xe7\x04\x75\x69\xf2\xaf\x0e\xe3\x6f\x35\x87\x16\x9d\x57\xa4\x43\x30\x9c\x33\x82\x6e\xfa\xb9\xca\xe8\xb4\xf7\xeb\x09\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func etcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterProxyClientKey,
		"etc/origin/master/master.proxy-client.key",
	)
}

func etcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\x81\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func etcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterServerCrt,
		"etc/origin/master/master.server.crt",
	)
}

func etcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := etcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x06\xe0\xfb\x9b\x22\x13\x64\x87\x57\x8f\x52\x28\x38\x81\x94\x5f\xc9\xc5\x42\x12\x84\x60\xdd\xbd\xdf\x5a\x74\xa9\xcc\xea\xc8\x88\xbf\x1d\xe1\x30\xe2\xf4\x8c\x26\x9d\x13\xd4\xa5\xc9\x5d\x1d\xc6\x67\x35\x87\x16\xe8\x84\x72\x46\xd0\x4b\xc5\x55\x46\xa7\xbd\x7f\x5f\x00\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func etcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterMasterServerKey,
		"etc/origin/master/master.server.key",
	)
}

func etcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := etcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x38\xe7\xe7\x15\xe7\xe7\xa4\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x9f\x5c\xc1\x1c\x46\x00\x00\x00")

func etcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterNamedConsoleCrt,
		"etc/origin/master/named/console.crt",
	)
}

func etcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := etcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc4\x20\x0c\x06\xe0\xf7\x9b\x22\x13\x64\x87\x3b\x1f\x7d\xb8\x82\x13\x48\xf9\xb5\x81\x12\x8b\x09\x05\xb1\xee\xde\x6f\x4e\xda\xba\xdc\xd9\x11\x31\xbe\xf6\x1b\x0e\x23\x0e\x4d\x8b\x54\x0e\xe8\x2e\x45\xf6\xec\x30\xfe\x5f\xd0\x74\x48\xf1\xd0\xd4\xda\x09\x8e\x18\xf4\x50\xf2\x2e\x5a\x69\xad\xcf\x1b\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func etcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterNamedConsoleKey,
		"etc/origin/master/named/console.key",
	)
}

func etcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := etcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func etcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterOpenshiftMasterKubeconfig,
		"etc/origin/master/openshift-master.kubeconfig",
	)
}

func etcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := etcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\x1a\x31\x10\x85\xef\xf9\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\xb2\x20\xca\xa1\x55\x0e\xae\xfd\x80\x11\xc6\x43\xc7\x5e\x5a\x12\xe5\xbf\x57\x66\xc9\x16\xaa\x36\xec\x86\x9c\xd6\x3b\x9e\x6f\x76\x3c\x7e\x6f\x9f\x2f\x94\x52\x4a\xdb\x35\x3d\x40\x12\x71\xd4\x7d\xa5\x37\x57\xfa\xb2\x8e\x2f\x29\xfa\x12\x31\x1c\xc8\x6d\x5f\xa3\x6b\x81\x27\x67\x33\x92\xee\xab\x6f\xbb\x98\x52\xcf\xfb\xa7\x52\x3a\xda\x15\x0a\x35\xe6\x07\x0e\xd5\x0a\x5f\x39\x62\xc4\x71\x16\xc8\x65\xbd\x4f\x7b\xb9\xfc\x3f\x77\x67\x7f\xdd\x0c\xa7\x35\x3b\xe2\x2a\xb6\x85\x6e\x47\x37\xe6\xba\x3b\x36\x78\xaa\x04\xd7\x94\x96\x9d\xd1\xec\x16\x9f\x63\x86\x18\xf6\x83\xd9\x8c\x22\xe5\x6d\x1b\x70\xcc\xe5\x6b\x5d\x26\x72\x8b\x08\xb1\xc1\xfc\x19\x7c\x0b\xc8\xb0\xbf\xe7\x00\x29\xf9\x63\xf6\xb8\xb7\x14\x73\x2b\x72\xb4\x80\x5b\x16\xe4\x0e\x2b\x96\xad\x11\xa4\x54\x09\x3a\xa1\xe5\x88\x9d\xc1\xfa\x06\x86\x14\x3d\xc5\xf9\x5b\x94\x95\x79\xb5\x42\xcc\xba\x7f\x10\x55\x4a\x27\xc8\x86\x1c\x9a\xdb\x38\xde\x56\x4a\x07\xfb\x1d\xe1\x50\xb7\xcd\x8e\x60\x5e\xf4\x7f\x14\x7e\x3c\x78\x7b\x69\xd6\x4d\x43\x07\xed\x4f\x8e\xe8\x3a\xf7\xb1\xf1\x0b\xb1\x50\xa6\x53\x7e\x99\x22\xc0\x65\x96\xe9\x5a\x60\xbd\xa9\xa9\x57\xd7\xed\x32\x7f\x82\xe6\x8b\x72\xe8\xab\x16\x13\xfd\x5b\x9a\x67\x17\xfc\x02\x9b\xf2\x04\x3f\x2a\xa4\x8c\xf3\xfb\x1b\xda\x60\xa3\x83\x9f\x20\x71\x25\x0e\x83\x10\xd8\xd9\x5c\xc6\xf8\xde\x92\x45\x78\x46\x30\x83\x0c\x36\x4c\xde\xb0\x4f\x6f\xb7\xd9\xeb\xf5\x7a\x2d\xeb\x7e\xd8\x18\x77\x3e\xdc\x3b\x93\x38\xbe\xbb\xde\x29\x0f\xc4\x4c\x27\x7c\x50\xba\x79\xe2\x08\xdd\x5a\xe6\xe5\x57\xfe\xcf\x46\x3f\x1d\x2b\xff\xa2\xac\x7e\x07\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func etcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterSchedulerJson,
		"etc/origin/master/scheduler.json",
	)
}

func etcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := etcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func etcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceSignerCrt,
		"etc/origin/master/service-signer.crt",
	)
}

func etcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := etcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x03\x21\x0c\x05\xd0\x7d\x4f\x91\x13\xe4\x0e\xad\xcb\xd9\x14\x3c\x81\x0c\xdf\xf0\x37\x29\xc4\x20\x88\xf5\xee\xf3\xf6\x96\x6f\x70\xb6\xc4\x85\xf5\x1e\x9f\x95\x18\xa2\xe5\xe7\x9d\xa6\x05\x91\xec\xbc\x5b\x62\x68\x45\x4c\xde\xa8\x34\xa7\x5b\x69\x7a\x61\xc9\x5f\x6a\x06\xdd\xe4\x9c\xd7\x13\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func etcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceSignerKey,
		"etc/origin/master/service-signer.key",
	)
}

func etcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func etcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceaccountsPrivateKey,
		"etc/origin/master/serviceaccounts.private.key",
	)
}

func etcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\xd4\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func etcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterServiceaccountsPublicKey,
		"etc/origin/master/serviceaccounts.public.key",
	)
}

func etcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := etcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\xa5\x25\x19\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x0a\x35\x0a\x85\xa5\xf9\x25\xa9\x0a\xb5\xb5\x5c\x0a\x0a\xa9\x79\xc9\x45\x95\x05\xf8\x0d\x71\xcd\x4b\xc6\x63\x06\x20\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func etcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginMasterSessionSecretsYaml,
		"etc/origin/master/session-secrets.yaml",
	)
}

func etcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := etcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeCaCrt,
		"etc/origin/node/ca.crt",
	)
}

func etcOriginNodeCaCrt() (*asset, error) {
	bytes, err := etcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeClientCaCrt,
		"etc/origin/node/client-ca.crt",
	)
}

func etcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := etcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func etcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodeNodeKubeconfig,
		"etc/origin/node/node.kubeconfig",
	)
}

func etcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := etcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x0c\x72\xc9\x49\xf6\x06\x9b\xbd\x10\xc8\x21\xc8\x02\xbb\x01\xd2\x54\x40\x82\xde\xc7\xd2\xc4\x1a\x98\xe2\xb0\xe4\x48\xa9\x9a\xe6\xbf\x17\x94\x28\x37\x89\xed\xb4\x05\x7a\xb2\xe7\xeb\xbd\xc7\xc7\x11\xd1\xf3\x27\x0a\x91\xc5\x19\xe8\xcf\x16\x5b\x76\xb5\x81\x52\xea\x45\x4b\x8a\x35\x2a\x9a\x05\x00\x3a\x27\x8a\xca\xe2\x62\x0a\x01\x62\xd5\x50\xdd\x59\x0a\x4b\xb4\xbe\xc1\xe5\xb6\x5b\x53\x70\xa4\x14\x97\x2c\xab\x2a\xb0\x72\x85\xb6\xf0\x52\x1b\x38\x3d\x5d\x00\x58\x5c\x93\xcd\xc3\xe2\xc9\xc5\x86\x1f\x74\xec\x95\xd6\x8b\x23\xa7\x06\xd0\xf3\xa1\xba\xd3\x20\xb6\xf0\x16\x1d\x19\x38\xd5\xd0\x51\x02\x74\xd8\x92\x81\x16\xa3\x52\x28\xa6\xc9\x94\x8a\x1e\x2b\x32\x90\xf4\x14\x71\x88\x4a\xed\x22\x7a\xaa\x12\x71\x42\x42\x76\x14\x46\x19\x05\x60\xd8\x64\x41\x05\x44\xc5\xa0\xf9\xff\x84\x99\x83\x59\x53\x01\x45\x51\x89\x7b\xe0\xcd\xc5\x8a\xb4\x5a\x49\xe0\x0d\xbb\xd5\xd4\x9b\x7f\x72\xc3\x72\xc0\xd6\xe6\xa1\xa7\x27\xf0\x81\x9d\xc2\x49\x51\x58\xd9\x58\xea\xc9\x5e\x9c\xc0\xf2\x6a\xea\xbc\x9a\x0f\x7f\x23\x9b\x9b\x54\x5b\x5e\x96\xd7\x77\x14\x7a\x0a\xf0\x0d\x3e\x77\xa2\x04\xcf\xcf\x23\x56\x25\x6d\x8b\xae\x9e\x05\xef\x3c\x1a\x63\x6e\x71\x43\x26\xb1\xcd\xc8\xd7\x29\x13\x53\x94\xdc\x2b\x93\x79\x6f\x11\xc7\xa1\xb2\xb3\xb6\x14\xcb\xd5\x60\xe0\xd2\x3e\xe2\x10\xc7\x9a\xe5\x9e\x1c\xc5\x58\x06\x59\xd3\xc4\x09\xd0\xa8\xfa\xff\x48\xe7\x10\xc0\xa3\x36\x06\x1a\x42\xab\xcd\xd7\x1f\x59\x09\x6a\xe0\xfc\xfc\xef\x5d\x26\x6d\x4b\xba\xad\xff\xef\xef\xcb\xbb\x9c\x65\xc7\xca\x68\xff\x25\x8b\xc3\x1d\x55\xe2\xea\x68\xe0\xfc\x9f\x5c\x55\x6e\x49\x3a\xdd\x15\xce\xfe\x1a\x0b\xd3\xa5\xcf\x77\x12\x08\x6b\xfe\x4d\x95\xab\x34\x34\xfc\x09\xad\x59\xd2\x51\xad\x91\xaa\x2e\xb0\x0e\xe9\x0a\xe8\xcb\x4e\x8f\x0f\xdc\xb3\xa5\x0d\xd5\x06\xd2\x2e\x8f\xe9\x5e\x6c\xd7\xd2\x07\xe9\x9c\xee\x56\xb2\x4d\x51\x39\x6a\xdf\xdf\xb8\x0c\xf6\xea\x23\x98\xb6\x2f\x57\xd2\x31\x3f\x3a\x3b\xbc\x20\x39\x0a\x59\x59\xe9\x6a\x1f\xa4\xe7\xfa\x08\x72\x6a\x28\xde\x74\xfc\x94\xa1\xc7\xb0\xb2\xbc\x9e\x59\x0e\x01\xa7\xf7\xe5\x88\x36\xbf\xe5\x43\x13\x53\xba\x91\xa8\xb7\xa4\x8f\x12\xb6\x3b\x7a\x1f\x58\x46\xbf\x2d\xc6\x78\x3b\xce\x4c\x0f\x40\xe1\xa4\xa6\x62\x7e\x93\x16\xb3\xdb\xf9\x15\x48\x50\x23\xed\xe2\xe5\xb6\x1c\x71\xfc\xb0\xdf\xbf\x02\xb2\xef\xf1\xfb\x0e\x1f\xc5\x7c\xed\xea\x3e\x52\xb6\xf4\x5d\x4d\xb3\xb7\x7b\xce\x7e\x0f\x00\x00\xff\xff\xd2\xc0\xee\x81\x0d\x06\x00\x00")

func etcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsApiserverYaml,
		"etc/origin/node/pods/apiserver.yaml",
	)
}

func etcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x88\xdc\x1d\x6f\x40\x0f\x83\x81\x1e\xba\x66\x58\x87\x35\x9d\x81\x76\xc5\x6e\x05\x23\xb3\x0e\x11\x59\xf2\x44\xda\x6d\xd6\xf5\xdf\x07\xd9\x4e\xba\xa4\x4e\xb1\x25\x07\x4b\x22\xf9\x48\xbe\x47\x09\x6b\xbe\xa5\x20\xec\x5d\x06\xed\xfb\xc9\x9a\x5d\x91\x41\xee\x8b\x49\x45\x8a\x05\x2a\x66\x13\x00\x87\x15\x65\x60\xbc\xd3\xe0\xad\xa5\x20\xc3\x99\xd4\x68\x28\x83\x75\xb3\xa4\x44\x36\xa2\x54\x4d\x00\x2c\x2e\xc9\x4a\x0c\x03\xf0\x35\x39\x59\xf1\xbd\xce\xd8\xa7\xc6\x57\xb5\x77\xe4\xf4\x10\xea\x95\x5f\x67\x4c\x6a\x8b\x8e\x32\x98\x6a\x68\x68\x3a\x91\x9a\x4c\x04\x8d\x56\x64\x47\xa1\x4b\x91\x00\x86\x72\x48\x96\x80\x28\x06\x1d\xd6\x15\x8a\x52\x18\x36\x87\xf9\x12\x48\x12\xe3\xdd\x3d\x97\xa7\x29\xa9\x49\x7d\xe0\x92\x5d\xda\xc7\x0c\x9f\xc1\x61\xb6\xc1\xca\xee\x82\x2c\x8b\x92\x3b\x5d\xa9\xd6\x92\xa5\xe9\xbb\x59\xf7\xcf\x3e\x9c\x9c\x9c\x0c\x3e\x4f\x4f\x50\x07\x76\x0a\xd3\x24\xb1\xbe\xb4\xd4\x92\x3d\x9d\xc2\xec\xbc\x47\x3b\xdf\x92\x70\xe9\xcb\xcb\x68\x8b\x86\xa1\xb6\x05\x3a\x2c\x29\xc0\x6f\xf8\xd9\x78\x25\x78\x7e\xee\x30\x8d\xaf\x2a\x74\xc5\xb6\xc9\x1d\x57\xdd\x9e\x5c\xbb\x35\xf4\x2a\x7d\xfd\xfe\xf1\xd3\xdd\xe2\xec\xc7\x5d\x3e\xbf\xbb\xfd\x76\x79\xdd\x19\x01\x5a\xb4\x0d\x65\xb1\xba\xd9\x9c\x02\xb7\x54\xcc\x16\xf8\x38\x47\xc5\x39\xcb\x5a\x72\x0a\xb7\x8b\xae\xc8\x9e\xdc\x6b\x0a\x2d\x1b\x3a\x2c\x85\x2b\x2c\x07\x94\xa1\x9f\x2f\xf1\x44\xb6\x4d\xe4\x51\xb2\xd1\xa0\xbc\xb1\x36\xf7\x96\xcd\x26\x83\x33\xfb\x80\x9b\x5e\x08\xcb\x2d\x39\x12\xc9\x83\x5f\x52\x36\xd4\x1a\xd9\xfd\x4c\xba\xdd\x02\xd4\xa8\xab\x0c\x56\x84\x56\x57\xbf\x5e\x4e\x7d\xd0\x0c\x76\xd4\xc7\x9f\x98\x15\x45\x12\x2e\x6e\x6e\xf2\xbe\xf3\xb1\xd1\x05\x10\x32\x4d\x60\xdd\xc4\xb2\xe9\x71\x97\xa9\x0e\xdc\xb2\xa5\x92\x8a\x0c\xe2\xd4\x75\xc7\xad\xb7\x4d\x45\x0b\xdf\x38\xdd\x0d\x5a\x15\x77\x79\x57\xd5\xc8\xfc\x0c\x68\x7d\xea\xbd\x61\x7a\x3b\xdc\x58\xdf\x14\x75\xf0\x2d\x17\xc7\x50\xa2\x47\xb2\x75\x39\x82\xf6\x72\x43\xd2\x40\x25\x8b\x06\x26\x99\x15\xfb\x80\xc2\xa5\x43\x6d\x02\x25\x5c\x45\x22\x47\xb0\x1a\x09\xa9\xe5\x25\x3d\x92\x49\xe3\x15\x0f\x8e\x94\xa4\x5b\x5a\xd2\xa4\xb6\x4d\xc9\x4e\x06\xd4\x3e\x30\xf8\x1a\x4b\xd4\xee\x35\xb9\xf0\xa2\x37\x7e\x37\x51\x7b\xd9\x5f\x63\xac\xbc\xe8\x15\xe9\x83\x0f\xeb\x1d\xf7\x75\x60\xdf\xa9\x64\x51\xe4\xaa\x2f\xbb\x7b\x65\x12\xe7\x0b\x4a\x4c\x60\x65\x83\xf1\x72\xf6\x1a\x0d\x2f\x42\x84\xea\x5a\x98\xfc\x3d\x3d\xc7\x74\x1a\x57\xe9\x5f\x50\xf6\xe4\x1a\xc1\x3a\xd4\xea\x4d\xcc\x23\xa2\x4d\xde\x54\xec\x28\xe2\x7f\x48\x37\x2e\xc8\x9f\x00\x00\x00\xff\xff\xf2\x0e\x80\xb7\x17\x06\x00\x00")

func etcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsControllersYaml,
		"etc/origin/node/pods/controllers.yaml",
	)
}

func etcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4d\x6f\x22\x39\x10\xbd\xf3\x2b\x2c\x2e\x39\xb9\x11\xc9\x6e\x76\xe3\x5b\x04\x91\x36\xd2\x86\x41\x4a\x34\xd7\x51\x61\x57\x68\x0b\x77\xb9\xc7\xae\xee\x04\x25\xfc\xf7\x91\xdd\xdd\xd0\xf9\xe0\x00\xd8\xaf\xaa\x9e\xeb\x3d\x97\x81\xda\xfe\xc4\x10\xad\x27\x25\xda\xf9\x64\x67\xc9\x28\xb1\xf6\x66\x52\x21\x83\x01\x06\x35\x11\x02\x88\x3c\x03\x5b\x4f\x31\x6d\x85\x88\xba\x44\xd3\x38\x0c\x05\xb8\xba\x84\x62\xd7\x6c\x30\x10\x32\xc6\xc2\xfa\x99\x0e\x96\xad\x06\x27\x6b\x6f\x94\xb8\xb8\x98\x08\xe1\x60\x83\xae\x2f\xf6\x35\x52\x2c\xed\x33\xe7\x5c\x5f\xd5\x9e\x90\x58\x09\x64\x6d\xbe\x4b\x20\x0e\xde\xc9\xda\x01\xa1\x12\x17\x1c\x1a\x4c\x8c\x04\x15\x2a\x51\x41\x64\x0c\xb2\x2f\x4d\x58\xac\x41\xa3\x12\xa9\x23\x19\xf7\x91\xb1\x9a\xc4\x1a\x75\x3a\x3a\x51\x81\x25\x0c\xb9\x11\x29\x20\x6c\xfb\x96\xa4\x78\xcf\xbf\x42\x44\x64\x21\xa1\xdf\x14\x62\x86\xac\xd3\xc7\xe4\xaf\x42\x7b\x7a\xee\x63\xf8\x8a\xfa\xd4\xb2\xf6\x55\x05\x64\x06\xb6\xd9\xc6\xd2\x2c\x96\xfd\x4e\xea\xbc\x40\x6a\x87\x78\xd7\xfc\xdd\xd3\x62\xb9\x78\xfa\xff\xd7\xed\xfa\xbe\x27\x6d\xc1\x35\xa8\xc4\xf4\x6a\x9a\x01\x5b\xc1\x16\x95\x78\x7b\x13\xc5\xc2\xd3\xb3\xdd\x16\xf7\x09\x89\xc5\x43\x96\x7d\xc7\xda\x88\x77\xf1\xbb\xf1\x8c\xe2\x70\x38\x95\xac\x1b\xe7\xd6\xde\x59\xbd\x57\xe2\xd6\xbd\xc0\x3e\xe6\x98\xb3\x2d\x12\xc6\xb8\x0e\x7e\x83\x6a\xa4\x63\x58\x7f\xd2\xd1\xf5\x9a\x34\x6a\x76\x23\x44\x4a\x0d\x1a\x03\x8f\xa0\x93\x4f\x1a\x0a\xfd\x21\x24\xe5\xd9\xdc\x1a\x31\x7c\xc9\xde\xe1\xfe\x7c\xf2\xc7\xa0\x94\x48\xa6\xf6\x96\x38\x8e\xd0\x92\xb9\x8e\x6a\x36\x4b\xb6\xdd\xbd\x72\x80\xe2\x3f\x1f\x39\x59\x2e\x0e\x07\x75\x79\xf5\xcf\xcd\x58\x5d\x4f\x30\xae\x47\x70\x5c\xf6\x80\x25\xcb\x16\xdc\x12\x1d\xec\x1f\x51\x7b\x32\x51\x89\xbf\xfe\xce\xd1\xee\x16\x8f\x33\x10\x51\x37\xc1\xf2\x7e\xe1\x89\xf1\x95\x07\x0f\xeb\x60\x5b\xeb\x70\x8b\x46\x89\x34\xbc\x19\x6e\xbd\x6b\x2a\x7c\xf0\x0d\xf1\x71\x04\xab\xb4\x5b\x03\x97\xea\xa4\xba\xe7\x38\x9d\x24\x75\x1e\x84\x1e\x0f\x08\xe6\x07\xb9\xfd\x88\xf9\x23\x4f\x0b\x61\xe6\xec\xe6\x0c\x57\x7a\xdf\x19\x7d\xf1\x61\x67\x69\xbb\xb4\xe1\x6b\x4d\xe9\x23\xaf\x90\x53\xca\xf1\x18\x43\x71\x98\xaf\xe9\xca\x13\x4e\x3b\xac\x1b\x52\x75\x34\x27\x62\x68\xfb\xd7\xd6\xb5\x36\xbf\xfe\xb7\xb8\xbe\x2a\xe6\x97\x37\xc5\xfc\xba\x37\x0d\x82\x2e\x71\x94\x73\xba\xb6\xe5\xea\x71\x74\x73\x93\x6c\xa5\xcf\x0e\x3b\x88\x71\x95\x75\x74\x4f\x5c\x92\x37\x28\x87\xff\x9d\xc9\xe0\x6f\xff\xce\x93\x82\xec\xc7\x70\x23\xdf\x78\xfc\x9d\xc3\x67\x2b\xbf\xb8\xfa\xd9\xd3\x3f\x01\x00\x00\xff\xff\xd0\x60\x41\x6b\x56\x05\x00\x00")

func etcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsEtcdYaml,
		"etc/origin/node/pods/etcd.yaml",
	)
}

func etcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcOriginNodePodsSyncYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\xce\xdb\x30\x0c\x84\x77\x3f\x05\xb7\x4c\xb6\xd1\x55\x5b\x91\xa9\x43\x5b\x03\x05\xba\x06\x8a\xcc\x38\x44\x24\x52\x95\x28\xa7\x46\x9a\x77\x2f\x64\xbb\x01\x02\x14\xff\xc8\xe3\x81\xdf\x1d\x6d\xa4\x9f\x98\x32\x09\x1b\x98\x3f\x35\x37\xe2\xd1\xc0\x20\x63\x13\x50\xed\x68\xd5\x9a\x06\x80\x6d\x40\x03\x79\x61\xb7\x0f\x39\x5a\x87\x06\x6e\xe5\x8c\x6d\x5e\xb2\x62\x68\x00\xbc\x3d\xa3\xcf\xd5\x0f\x20\x11\x39\x5f\xe9\xa2\x1d\x49\xef\x24\x44\x61\x64\x35\xe0\x84\x35\x89\xf7\x98\xf2\xff\x7c\xeb\xb2\x8d\xde\x32\x1a\x38\x68\x2a\x78\x68\x72\x44\x57\x8f\xd6\xad\x25\xc6\xb4\x22\x5a\xa0\x60\x27\x34\xf0\x78\x40\x77\x14\xbe\xd0\xd4\x7d\xa9\x4a\xee\x7e\x2c\xec\xe0\x0f\xfc\x2a\xa2\x08\xcf\xe7\xca\x59\xcd\x43\xf1\x7e\x10\x4f\x6e\x31\xf0\xd9\xdf\xed\xb2\x65\x78\x6b\x07\x90\xd1\x95\x44\xba\x1c\x85\x15\x7f\xeb\xd6\x07\x20\x26\x9a\xc9\xe3\x84\xa3\x81\x1a\x6c\x95\x67\xf1\x25\xe0\x57\x29\xac\x7b\xf1\x16\x42\x9d\x06\xab\x57\x03\xfd\xa9\x7e\xb0\x3f\x49\xd1\xfd\xca\xc6\x0a\x36\x2b\xa6\xd6\x79\x29\x63\x1b\x93\xcc\x34\x62\xda\x1d\x09\xed\xf8\x9d\xfd\xf2\xa2\x5c\x25\xeb\x37\xd4\xbb\xa4\xdb\x4b\xdb\xb8\xfb\x23\xaa\x61\xe5\xfd\x4b\xba\xb1\x51\x5d\x2f\x89\x26\xe2\x7e\x05\xbd\x71\x3e\xca\xf1\x37\x00\x00\xff\xff\x33\x9e\x4e\x27\x13\x02\x00\x00")

func etcOriginNodePodsSyncYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcOriginNodePodsSyncYaml,
		"etc/origin/node/pods/sync.yaml",
	)
}

func etcOriginNodePodsSyncYaml() (*asset, error) {
	bytes, err := etcOriginNodePodsSyncYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/origin/node/pods/sync.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func etcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_etcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func etcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := etcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x6d\x73\xdb\x38\xee\x7f\xbd\xfc\x14\xa8\x9c\xfd\xa7\xcd\x94\x52\xd2\xe6\xdf\xeb\xb9\x4d\x6f\xf2\xe0\x76\x33\x97\x6d\x32\x49\x6e\x3b\x37\xdd\x4e\x86\x16\x21\x8b\xb5\x44\x6a\x49\xc8\xa9\x9b\xfa\xbb\xdf\x90\x92\xfc\x14\x37\xed\xcc\xe6\x85\xad\x90\x20\x00\x02\xf8\xfd\x00\xb9\xf7\x28\x19\x2a\x9d\x0c\x85\xcb\x81\xe3\x17\xc6\x7a\x70\x7d\x7e\x72\xde\x87\x04\x29\x4d\xa4\x76\xa5\x70\x7f\xc5\x32\x31\x56\x8d\x94\xe6\x75\xe5\xc8\xa2\x28\xb9\xd4\x2e\x4e\x8d\xce\x40\x39\x48\x6b\x6b\x51\x53\x31\x85\x5c\x58\x99\x1a\x89\xf2\x15\x28\x62\x3d\xa8\xac\x19\x8a\x61\x31\x05\x97\x9b\xba\x90\x7a\x9b\x60\x88\x8c\x5d\x0d\x2e\xff\x38\x3d\x1e\xdc\x5c\xff\xf7\x62\x70\xd0\x68\x66\x2a\x83\x8f\xc0\x33\x88\x82\x61\x37\x75\x5e\xbb\x1a\x25\x82\x4c\xa9\x52\x6e\x2a\xd4\x2e\x57\x19\x71\x6d\x24\x46\xf0\xe9\x15\x50\x8e\x9a\x01\x00\xac\xa8\x5b\x97\x67\x99\xf2\x97\xb2\x58\x9a\x09\x82\xc5\x91\x72\x64\xa7\x90\xa2\x25\x95\xa9\x54\x10\x82\x33\x19\x15\x4a\x8f\x21\xb3\xa6\x04\x69\xd2\x31\x5a\x56\xeb\xb0\xd4\x84\x21\x2c\x25\xfe\x8c\x8b\x65\xd2\x29\x89\x45\x9a\xa2\x73\xb1\x45\x99\x0b\x8a\x53\x53\x26\xcd\x23\x4f\x45\x9c\x5a\x62\xfe\x52\x8f\x60\x64\xb1\x82\x64\x22\x6c\x52\xa8\x61\xab\xab\xd1\x9b\x39\x12\xc3\xf9\x45\xdc\xd4\x11\x96\x29\x15\xe0\xc8\x54\xad\x1f\xb1\x43\x3b\x51\x29\x32\x80\x72\x9c\xb9\xf8\x4b\xe6\x7c\x94\x12\x89\x93\x44\x2a\x37\x4e\xc4\xd7\xda\x62\x62\xd1\x99\xda\xa6\xc8\x2b\x61\x69\x8f\x01\x60\x9a\x1b\xd8\x7e\x58\x0c\xee\x79\x05\x5e\x3d\x8c\x6c\xf5\x57\x6d\x48\x00\xec\xc2\xee\x36\xbc\x79\xb3\x70\xd6\xbb\x61\x6a\x4d\xeb\x27\x19\x80\x45\x47\xc6\x62\x6a\x34\xf0\xcb\x0d\xfb\xa9\x20\x78\xb3\x1c\x4e\x29\xb0\x34\x3a\xfe\xec\x8c\x86\xd7\xaf\xb7\x07\xe7\x6f\xb7\xd9\x1d\x03\x88\x0a\x33\xe2\xd2\xaa\x09\xda\xa8\x0f\xd1\x67\x53\x5b\x2d\x0a\x19\xb1\x19\x1b\x9c\xbf\x5d\x0b\x94\xb0\xb4\x1e\xa9\x26\xe1\x99\x2a\xb0\x2d\x3b\x18\x22\x24\xd6\x18\x4a\xe2\x2e\x93\xa1\xb6\x82\xe9\xa7\x30\xac\x09\x44\x4a\xb5\x28\x8a\x29\x68\x44\x09\x8a\x40\x69\xd6\x5b\x5c\xa2\xa9\x51\xa0\x5c\xe8\xb1\x03\x32\x90\x13\x55\xae\x9f\x24\x23\x45\x79\x3d\x0c\xa9\x1f\xd7\x43\xb4\x1a\x09\xdd\xf2\xa3\x72\xae\x46\x97\xec\xff\xff\xfe\xcb\x7f\xb0\x93\x8b\xc3\xeb\xdf\x0e\xd6\xb4\x76\x4e\xb1\x72\x2c\x95\x05\x5e\xc1\x56\x90\x63\x43\xe1\xf0\xc5\x3e\x70\x09\xaf\x5f\xbf\x86\xbb\x3b\x88\x8f\x1b\xb7\x4f\x4b\x31\x42\xd7\x7c\x5d\xd4\x45\x71\x85\xa9\x45\x82\x6f\x70\x14\x4e\x0c\xb4\x87\x20\xcc\x66\xf0\x66\xeb\x2e\xa8\x9a\x2d\x5f\x98\xa5\x79\x69\x24\xec\xbe\xd8\xdd\x85\x8d\xfb\x73\x0a\x48\x8d\x76\x4a\xa2\x85\x4c\xa4\xe4\x2f\x4f\xf7\xea\xce\xa5\x4e\xed\x25\x45\xad\x77\xbf\x47\x04\x9e\x05\x84\x25\x45\xca\xe8\x07\x8e\xbf\x5a\xb2\x56\x53\x6d\x11\x1c\x59\x41\x38\x9a\x42\x66\xac\x2f\x2e\xf5\x15\x1d\xa8\x8c\xf5\x42\x8e\x50\x6e\x02\x17\x52\x2a\x37\x41\x6b\x0e\x9d\x07\xfc\xff\xf6\x0d\xc8\xd6\xf8\x5d\xec\x2c\x89\xae\x19\x6c\x50\x23\x31\x13\x75\x41\xee\xa7\x50\xe3\xcf\x7d\x1f\x33\x61\xd7\x97\x71\xf0\x24\x3a\x3a\x3f\xbf\xbe\xba\xbe\x3c\xbc\xb8\x39\x3e\x7f\xff\xf6\xf4\xdd\xcd\xfb\xc3\xdf\x07\x07\x9e\x07\x79\x93\x37\x5e\x0a\x47\x68\xa3\xce\xe8\x82\x3d\xb7\xee\x96\xc9\x71\x16\xc8\x93\x31\x87\x12\xb8\x02\x8e\x10\xb9\xde\xc9\xe0\xe8\x3f\xef\x6e\xce\xce\xdf\x9d\x0d\xfe\x18\x9c\x1d\xc4\x3b\xeb\x2b\x4b\x95\x77\x6c\xca\xca\x68\xd4\x74\x66\x46\x67\x38\xc1\x22\x7e\xdf\x94\x5a\x2f\x82\x9f\xb2\xec\x73\x29\x9d\x87\x17\x50\x5a\x3d\x7d\xb9\xbf\xbf\xff\x0a\xa4\x61\xbf\x54\xd6\x90\x39\xd8\xba\x93\x8e\x7e\xfd\xf5\xe9\xce\x8c\xfd\x52\x19\x4b\xcd\x42\xaf\xb7\xf3\x74\xc6\x7e\x51\x15\x89\x61\x81\x0e\xf8\x21\x9c\x5f\xdd\xbc\x3d\xbd\x1c\x7c\x38\x3c\x3b\xbb\x39\x3c\x3b\x3b\xff\x10\x70\x13\x94\x00\x2f\x3d\x2f\x10\x02\xe7\xcd\xf7\xfb\xc1\x07\xbf\xd8\x6d\x73\xe9\x55\xc3\x56\xf8\xe4\x9f\xe1\xf0\xf8\x78\x70\x71\xcd\xa4\xd1\xc8\x58\x67\x84\x3b\x31\x41\x58\x0f\x67\xb7\xcb\x98\x2d\x81\xdb\xac\xb9\xb4\x4f\x57\xb2\xd3\x3c\xb7\x98\x6e\x12\x92\xec\xb0\x05\xaa\x97\xb7\xd3\xc2\xd4\xb2\xb2\x66\xe2\x0b\x9e\x2d\x98\x71\xd3\x76\x53\x7e\x4d\xb3\x9d\xd3\xe4\x1d\xc4\x27\xe8\x29\x52\xc6\xbf\x07\x53\xc7\xfe\xc8\x45\x7b\xc4\x67\x2b\xe4\x8c\x84\xd2\x68\xaf\x1a\x62\x84\x6f\x70\x45\x56\xe9\x11\xcc\x1a\x26\x65\x3d\xb8\xcd\x51\x37\x2c\xea\xd7\x7d\x8e\xe0\x56\x88\x11\x6a\x02\xa1\x25\x68\xa4\x5b\x63\xc7\x50\x93\x2a\x14\x29\x74\x30\x32\x1e\x85\x9a\x0c\x58\x91\xa2\x07\xad\x0c\xd0\x8e\x59\x0f\x54\x36\x3f\x6c\x6b\xed\x60\x88\x99\xb1\x08\x52\x3b\x4f\x0e\x63\x6d\x6e\xb5\xe7\x4e\xca\xb1\xb5\x84\x80\x5a\x42\x5d\xc1\xad\xa2\x1c\xb0\xac\x68\xea\x61\xaf\xf4\x88\xdd\xe6\x9e\xbf\x3f\x7e\x84\xad\xc7\xb9\x71\xa4\x45\x89\xc0\xe5\x13\x38\x38\x80\x28\x82\x4f\x9f\x7c\xd5\x80\x2b\x10\x2b\xd8\xf3\xcf\x3e\x77\x85\x19\x8d\xd0\x02\x27\x68\xc2\xcf\xc3\xc5\xea\x2a\x76\x39\x44\xb6\xd6\xda\xdf\xb1\x5d\xf3\x9e\x37\xd1\x89\x5a\x5b\x8f\xda\x3e\x02\x55\x5d\x14\x1b\xe8\xf6\xaa\x3d\x38\x9b\x85\x8a\x05\x78\xd0\xdc\xad\x50\x21\xa4\xbe\xe0\x95\x57\xd0\xa8\x25\x03\x3e\xa0\x91\xef\x62\x8d\xf3\xbb\x4d\xe1\xb5\xb6\x6d\xad\x81\xf3\xca\xaa\x89\x2a\x70\xe4\x61\xca\x7d\xa5\xf1\x2e\x11\x3e\x16\xc0\x27\xa1\x98\xfa\xe1\xe3\xeb\x83\xae\x3e\x1c\x93\x4c\x69\xe5\x72\x94\xf0\xdd\xe0\x80\x4d\xfb\x5b\xff\x8a\x18\xab\x2b\x29\x08\x79\x2a\x38\xd9\xda\x51\xc3\x4c\xdb\x3e\x2d\xbe\xed\xa2\x85\xbd\x17\x2f\xe3\x17\xcf\xe3\xbd\x67\xff\x8c\xf7\x5e\x6c\xaf\xd6\xb3\xcf\x76\x98\x3d\x8a\x49\xa8\xe3\x05\x03\xd9\x40\x41\x8f\x61\xa7\xd1\xd2\x87\x27\xf1\x4e\xef\xcf\xbd\xae\xbd\x2e\x92\xff\xa4\x63\x98\x55\x80\x2d\xc6\xc2\x66\x21\xf6\xad\xb7\x01\xeb\xdf\xb7\x11\xdc\xf6\x1f\xcb\x5a\x7b\xf0\xdb\xe1\xf1\xbf\x7d\x73\xac\xa6\xb0\xb6\xe9\xd3\x3b\x34\x86\x7c\xeb\xaa\x96\xd7\x9d\x69\xda\xe7\xdc\xdd\x76\x72\x09\x30\xa8\xbd\xa3\x61\xba\x40\x70\x53\x9d\xb2\x1e\x34\xa3\x91\x43\x82\x5b\x55\x14\xa0\x0d\x41\x26\x54\x11\x30\xe9\x57\xbd\x68\x73\xe1\x46\x45\x21\x86\x58\x38\x48\x8d\xb5\x98\x52\x31\x8d\x59\x5a\xfd\xf0\x2a\xf7\x05\x36\xf9\xce\xd8\xdd\x1d\xf7\xd0\xde\x8a\x07\x5f\xc8\x8a\xf8\xd4\x5d\x62\x6a\x26\x68\xa7\x3f\xac\xaf\x39\xb1\xd8\xee\x84\xd1\x4b\x80\x7e\x12\xb1\x1e\x38\xf2\x28\x80\x51\x7b\xab\xa1\x48\xc7\x75\x15\xe8\xf5\x32\x5b\xed\x88\xc9\x0e\x23\x2c\xab\x23\x91\x8e\x4f\x94\x3d\x58\xdd\x6b\xcf\x35\x6c\xbb\xb5\x24\xf7\x93\xe8\x1e\x50\x2a\x8f\x82\x8e\x16\xe0\x73\x7c\xb6\xec\xb2\x02\xd0\xfb\x98\xfc\x93\x41\x87\xcb\xd5\x12\xed\xdf\x5f\xda\x24\xbc\x4a\xf9\xfd\xe4\x46\x0a\x12\xc9\x8d\xa9\xe7\xaa\x97\x2f\xd5\x4f\x4c\x4d\xfd\xaf\x61\xeb\x07\x77\x69\x8e\x0f\x0b\x33\xf4\x21\x0f\xcd\xbc\xc9\x63\x23\x71\x54\x98\xe1\x7b\x4f\xae\x9d\xa4\x44\x47\x4a\x0b\xcf\xe9\x07\xde\x4a\x1b\xd9\x58\x0e\x21\x92\xe6\x56\x17\x46\xc8\xe8\xe1\xb4\x37\x27\xa0\x93\x46\xe9\x71\x11\xc1\xd6\xe3\xc2\xad\xdc\xe2\x09\xeb\xf2\xff\xac\x9b\x84\x7e\xc0\xe1\x41\x28\x10\x95\x16\x95\xcb\x0d\xfd\x2c\x79\x37\x4d\xd2\x07\xe6\xef\xa7\xd7\xd7\x5b\x7f\xfe\x34\xdf\x5a\x2e\xc7\xfe\xea\x7f\x4d\xa2\x38\xc2\xe0\xfa\xf8\xe4\xf8\xfa\xec\xe6\xf0\xe2\xf4\x20\x7a\x1e\x7d\x27\x7f\x2b\xce\x06\x19\xaf\x25\xbc\xef\xb4\xd7\xee\xc2\xb5\x12\xce\xa5\x4c\x05\x73\xdc\x97\x10\xf7\x78\x58\x85\x8a\xc6\xdb\x56\x20\x74\xd5\x25\x3c\xb6\xcb\x4a\x2b\x52\xa2\xe0\x69\x51\x87\x72\x8d\xda\x54\xec\x86\xbf\x83\x8e\x38\x57\x56\xfb\xcf\x9e\xbf\xdc\x7d\xba\xbc\xb4\xb7\x51\x70\xef\xbe\xe0\xb3\x8d\x82\xcf\x82\x60\xb4\xd9\x25\x4e\x66\x8c\x3a\x84\x85\x67\xc6\xf2\x30\x22\xad\x89\x0a\x39\xf1\xef\xf8\x0e\x79\x85\x68\x79\x6d\x0b\x07\x1b\x38\x3f\x98\x61\xac\x9c\xdc\x8f\x92\x9f\xe9\x56\xd6\xe6\x53\xdf\xba\x64\xb7\xb1\x42\x3c\x2b\xc3\xfd\x9a\xfa\x9f\xa9\x73\x0c\x95\x19\x05\xfe\xf5\x73\xd2\x6c\xc6\x58\xaf\x63\x7f\xaf\xb7\x2c\x51\x7b\x74\x2d\x9a\xa0\xef\xdb\xd6\x14\xbc\x2a\x84\x46\xa8\xac\x09\x6f\xc1\x46\x43\xa6\xac\xa3\xd0\x9b\x18\xd5\x1a\x25\x17\xb2\x5c\xec\x6f\x3e\xef\xd1\xa9\x0d\x61\x1f\x36\xcd\xf2\x90\x5a\xe1\x72\x28\x8c\xa9\x1c\xd4\x9a\x54\xd1\x75\x24\xe5\xa0\xae\xd8\xe2\x25\x1d\xb5\x9f\x99\x37\x2a\x99\xbf\xb3\xaf\xbf\xd2\x3f\x24\x0c\xff\xe7\x3d\x93\xca\x89\x61\x11\x9a\x8b\x9b\xba\xc2\x8c\xc0\x29\x9d\x86\xa1\xb2\x14\xda\x0f\x5c\xe8\x3b\x0e\xe5\x5e\x84\x72\x6b\xea\x51\x0e\xdd\x6f\x09\x4b\xf6\x1a\x3d\xd8\x69\xd9\xe8\x91\xa9\xee\x6d\x2f\xcd\xf5\xcd\x2f\x0b\xbe\x63\xae\x77\xdd\x76\x48\x11\xb2\x54\x7a\xa5\xf1\x2e\x8e\x24\x5d\x97\xfd\x5f\x00\x00\x00\xff\xff\xd4\xfb\x1e\xc0\x89\x13\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x6d\x6f\x1b\x37\x12\xfe\xce\x5f\x31\x91\x82\xf3\x5d\x70\xbb\x6b\xdf\xa5\x6e\xea\xd8\x06\xfc\xa2\xa4\x41\x9c\xc8\xb0\xdd\x14\x41\x51\x18\x5c\x72\x56\xcb\x88\x4b\x6e\x86\xb3\x4a\x54\x45\xff\xbd\xe0\xae\xde\x62\xab\x71\x8a\x7e\xd2\x8a\x1c\x3e\xf3\xcc\xc3\x79\x61\xff\x51\x96\x1b\x97\xe5\x32\x94\x90\xe0\x67\x21\xfa\x70\x33\x3c\x1f\x1e\x40\x86\xac\x32\xed\x42\x25\xc3\xc7\x54\x67\x9e\xcc\xc8\xb8\xa4\xa9\x03\x13\xca\x2a\xd1\x2e\xa4\xca\xbb\x02\x4c\x00\xd5\x10\xa1\x63\x3b\x85\x52\x92\x56\x5e\xa3\x7e\x0e\x86\x45\x1f\x6a\xf2\xb9\xcc\xed\x14\x42\xe9\x1b\xab\xdd\x0e\x43\x8e\x42\x5c\x0f\xae\xde\xbd\x3a\x1b\xdc\xde\xbc\xbf\x1c\x1c\x75\xc8\xc2\x14\xf0\x1b\x24\x05\xf4\x5a\xc7\x61\x1a\x22\xba\x19\x65\x92\x7d\x65\x54\xe2\x6b\x74\xa1\x34\x05\x27\xce\x6b\xec\xc1\xef\xcf\x81\x4b\x74\x02\x00\xe0\x2b\xb8\xbb\xf6\xa2\x30\x31\x28\xc2\xca\x4f\x10\x08\x47\x26\x30\x4d\x41\x21\xb1\x29\x8c\x92\x8c\x10\x7c\xc1\xd6\xb8\x31\x14\xe4\x2b\xd0\x5e\x8d\x91\x44\xe3\xda\xa5\x4e\x86\x76\x29\x8b\x67\x42\xaa\xb3\x25\x48\x2a\x95\xc2\x10\x52\x42\x5d\x4a\x4e\x95\xaf\xb2\xee\x33\x51\x32\x55\xc4\x22\x06\xf5\x08\x46\x84\x35\x64\x13\x49\x99\x35\xf9\x02\xab\xc3\x2d\x02\xcb\x7c\x15\x48\x98\x06\xc6\x4a\xb1\x85\xc0\xbe\x5e\xf0\x48\x03\xd2\xc4\x28\x14\x00\xd5\xb8\x08\xe9\xe7\x22\x44\x95\x32\x8d\x93\x4c\x9b\x30\xce\xe4\x1f\x0d\x61\x46\x18\x7c\x43\x0a\x93\x5a\x12\xef\x09\x00\x54\xa5\x87\x9d\x6f\x9b\xc1\x3d\x56\x10\xe1\x61\x44\xf5\xc7\xc6\xb3\x04\xd8\x85\xdd\x1d\x38\x3e\x5e\x93\x8d\x34\x7c\xe3\xf8\xee\x49\x01\x40\x18\xd8\x13\x2a\xef\x20\xb9\xba\xb7\x3f\x9b\x25\x60\x0a\xc0\x8f\x90\x0e\x3e\x33\xc9\xf4\xca\x5b\x84\x9e\x71\x05\xc9\x1e\xcc\xe7\x02\x40\x49\x86\xe3\x4d\xbd\xb5\xc4\xca\xbb\xf4\x43\xf0\x0e\x0e\x0f\x77\x06\xc3\x17\x3b\x62\x26\x00\x7a\xd6\x8f\x12\x4d\x66\x82\xd4\x3b\x80\xde\x07\xdf\x90\x93\x56\xf7\xc4\x5c\x0c\x86\x2f\x5a\x57\xe8\x74\x07\xba\x29\xaa\x24\xbe\xab\x6a\x97\x1c\x85\xb1\xb8\x48\x51\xc8\x11\x32\xf2\x9e\xb3\x74\x79\xeb\x6d\x1e\xb6\x2c\xfe\x0b\x79\xc3\x20\x15\x37\xd2\xda\x29\x38\x44\x0d\x86\xc1\x38\xd1\x5f\x07\xdc\xe5\x33\x70\x29\xdd\x38\x00\x7b\x28\x99\xeb\x70\x90\x65\x23\xc3\x65\x93\xb7\x69\x32\x6e\x72\x24\x87\x8c\x61\xf3\xd3\x84\xd0\x60\xc8\x9e\xfe\xf0\xf4\xd9\x8f\xe2\xfc\xf2\xe4\xe6\xe7\xa3\x3b\xa8\x4b\x52\xa2\x1a\x6b\x43\x90\xd4\xf0\xb8\xb5\x13\xb9\x0c\xb8\xff\x14\x12\x0d\x87\x87\x87\x30\x9b\x41\x7a\xd6\xd1\x7e\x55\xc9\x11\x86\xee\xe7\xb2\xb1\xf6\x1a\x15\x21\xc3\x17\x38\x6d\x4f\x0c\x5c\x2c\x57\x98\xcf\xe1\xf8\xf1\xac\x85\x9a\x6f\x06\x2c\x54\x59\x79\x0d\xbb\xfb\xbb\xbb\xb0\x75\x5f\x74\x79\x76\x3a\x1c\xde\x5c\xdf\x5c\x9d\x5c\xde\x9e\x0d\xdf\xbe\x78\xf5\xf2\xf6\xed\xc9\x9b\xc1\x51\xac\xd4\xa4\xb3\x4e\x22\xa5\x8d\x8b\x9f\xcf\x57\x79\xb5\x2e\xf5\xc7\xb3\xcd\x4a\x9e\xb7\x95\x2e\x44\x40\x0d\x89\x81\x04\xa1\x17\xfa\xe7\x83\xd3\x5f\x5e\xde\x5e\x0c\x5f\x5e\x0c\xde\x0d\x2e\x8e\xd2\x27\x77\x57\x36\x42\x3f\xf3\x55\xed\x1d\x3a\xbe\xf0\xa3\x0b\x9c\xa0\x4d\xdf\x76\xb1\xf6\x7b\xf0\x5d\x9e\xa9\x82\x84\x8a\xce\x16\x59\xe9\xec\x49\xf7\xbd\xb8\x8b\x4a\x06\x46\xca\x9e\x88\xfb\xea\x7f\x25\xee\xbf\xdf\xcb\xca\xbe\x91\x14\x4a\x69\x57\xe4\x22\x95\x53\xef\x39\x30\xc9\xfa\x75\x93\x63\xc7\xe4\x3f\xed\x55\x6c\x7a\x89\x54\xb2\x7c\x69\x99\x8e\x57\xa6\x0f\x79\x3d\x43\xe2\x93\x70\x3a\x65\x0c\x6b\x49\xd6\x5d\x2f\x7c\x4d\xa1\xdd\xfa\x0b\xef\xed\x3d\xae\x28\xd4\x48\x6d\x73\x7b\xc0\xfd\x25\x99\x89\x64\x7c\x8d\xd3\xbf\x41\xe2\x35\x4e\xbf\x9b\xc3\x18\xa7\x9b\xe9\xf9\x7d\x27\xee\x9b\x6d\x95\xf6\x1f\x6b\x7b\x26\xbf\x25\xe8\x62\x3c\xa8\xfa\x3e\x9d\x6e\xab\x5b\xaf\xc7\x26\x53\x32\x61\x6a\x02\x67\x5d\xe3\xce\xa4\x53\xa5\xa7\x90\xad\xe7\xe1\x02\xac\xa9\xb5\x64\x4c\x96\xf6\xcb\xca\x74\xb2\xc2\xd8\xec\x90\x60\x6f\xff\x59\xba\xff\xff\x74\xef\x7f\x3f\xa5\x7b\xfb\x3b\x5b\x68\xc5\xe9\x60\x27\xed\x58\x5f\x37\x98\x4d\x2b\x65\x7d\xa3\x6b\xf2\x13\xa3\x91\x84\x58\x37\xec\x6d\xfb\xdd\xc8\xe9\x1e\x09\xab\xee\x3d\x83\xf4\x1c\x63\xe7\xd6\xe9\xaf\x9e\xc6\x48\x67\xf1\xc8\xe5\xe2\x48\x54\xb2\xd5\x93\xa5\x71\x48\xd7\x5d\x93\x86\x2f\x70\xcd\x64\xdc\x28\x76\xf4\xd8\xe0\x45\x1f\x9c\x67\x3c\x80\x6d\x65\x0b\x8a\xe2\x5b\xc6\x7a\x5f\x07\x68\x1c\x1b\x0b\x5d\xa1\xc6\x97\x4a\x53\x8b\xf5\x40\x40\x27\x73\x8b\x5b\x41\x56\xf3\xe1\xee\xf8\xf8\x96\x31\xfc\x2b\x32\xd3\x26\xc8\xdc\x46\xb6\x14\xa6\xc1\xfa\x11\x04\xe3\x14\xc2\x27\x84\x4a\x3a\x39\x42\xc0\x09\xd2\x94\xcb\x68\xc2\x25\xf9\x66\x54\xc2\x72\x84\x6d\xf8\xeb\x70\x70\x89\xb2\x95\x91\xaf\xef\x6d\x8b\xbe\xf5\x52\xc7\x27\x05\x70\xe3\x50\xc7\x27\x58\x3b\xde\x3e\x95\x46\x95\x51\x83\x38\xa2\xab\x0a\x9d\xc6\xce\xac\xf4\x81\xe1\x83\x37\x2e\xb4\x7f\x95\x6d\xa2\x5a\x0f\x0f\xec\x16\x3e\x91\xba\x5a\xb9\xd8\xc8\x49\xef\x98\xbc\x4d\x6a\x2b\x1d\x76\x03\xd9\x06\x7c\xe8\x54\xdb\x75\x37\xa6\xf7\x9f\x01\x00\x00\xff\xff\xe8\xcd\x18\xa3\x9c\x0a\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"etc/etcd/ca.crt":                                  etcEtcdCaCrt,
	"etc/etcd/etcd.conf":                               etcEtcdEtcdConf,
	"etc/etcd/peer.crt":                                etcEtcdPeerCrt,
	"etc/etcd/peer.key":                                etcEtcdPeerKey,
	"etc/etcd/server.crt":                              etcEtcdServerCrt,
	"etc/etcd/server.key":                              etcEtcdServerKey,
	"etc/origin/master/admin.kubeconfig":               etcOriginMasterAdminKubeconfig,
	"etc/origin/master/aggregator-front-proxy.crt":     etcOriginMasterAggregatorFrontProxyCrt,
	"etc/origin/master/aggregator-front-proxy.key":     etcOriginMasterAggregatorFrontProxyKey,
	"etc/origin/master/ca.crt":                         etcOriginMasterCaCrt,
	"etc/origin/master/ca.key":                         etcOriginMasterCaKey,
	"etc/origin/master/front-proxy-ca.crt":             etcOriginMasterFrontProxyCaCrt,
	"etc/origin/master/master-config.yaml":             etcOriginMasterMasterConfigYaml,
	"etc/origin/master/master.etcd-ca.crt":             etcOriginMasterMasterEtcdCaCrt,
	"etc/origin/master/master.etcd-client.crt":         etcOriginMasterMasterEtcdClientCrt,
	"etc/origin/master/master.etcd-client.key":         etcOriginMasterMasterEtcdClientKey,
	"etc/origin/master/master.kubelet-client.crt":      etcOriginMasterMasterKubeletClientCrt,
	"etc/origin/master/master.kubelet-client.key":      etcOriginMasterMasterKubeletClientKey,
	"etc/origin/master/master.proxy-client.crt":        etcOriginMasterMasterProxyClientCrt,
	"etc/origin/master/master.proxy-client.key":        etcOriginMasterMasterProxyClientKey,
	"etc/origin/master/master.server.crt":              etcOriginMasterMasterServerCrt,
	"etc/origin/master/master.server.key":              etcOriginMasterMasterServerKey,
	"etc/origin/master/named/console.crt":              etcOriginMasterNamedConsoleCrt,
	"etc/origin/master/named/console.key":              etcOriginMasterNamedConsoleKey,
	"etc/origin/master/openshift-master.kubeconfig":    etcOriginMasterOpenshiftMasterKubeconfig,
	"etc/origin/master/scheduler.json":                 etcOriginMasterSchedulerJson,
	"etc/origin/master/service-signer.crt":             etcOriginMasterServiceSignerCrt,
	"etc/origin/master/service-signer.key":             etcOriginMasterServiceSignerKey,
	"etc/origin/master/serviceaccounts.private.key":    etcOriginMasterServiceaccountsPrivateKey,
	"etc/origin/master/serviceaccounts.public.key":     etcOriginMasterServiceaccountsPublicKey,
	"etc/origin/master/session-secrets.yaml":           etcOriginMasterSessionSecretsYaml,
	"etc/origin/node/ca.crt":                           etcOriginNodeCaCrt,
	"etc/origin/node/client-ca.crt":                    etcOriginNodeClientCaCrt,
	"etc/origin/node/node.kubeconfig":                  etcOriginNodeNodeKubeconfig,
	"etc/origin/node/pods/apiserver.yaml":              etcOriginNodePodsApiserverYaml,
	"etc/origin/node/pods/controllers.yaml":            etcOriginNodePodsControllersYaml,
	"etc/origin/node/pods/etcd.yaml":                   etcOriginNodePodsEtcdYaml,
	"etc/origin/node/pods/sync.yaml":                   etcOriginNodePodsSyncYaml,
	"etc/pki/ca-trust/source/anchors/openshift-ca.crt": etcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master-startup.sh":                                masterStartupSh,
	"node-startup.sh":                                  nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"etc": {nil, map[string]*bintree{
		"etcd": {nil, map[string]*bintree{
			"ca.crt":     {etcEtcdCaCrt, map[string]*bintree{}},
			"etcd.conf":  {etcEtcdEtcdConf, map[string]*bintree{}},
			"peer.crt":   {etcEtcdPeerCrt, map[string]*bintree{}},
			"peer.key":   {etcEtcdPeerKey, map[string]*bintree{}},
			"server.crt": {etcEtcdServerCrt, map[string]*bintree{}},
			"server.key": {etcEtcdServerKey, map[string]*bintree{}},
		}},
		"origin": {nil, map[string]*bintree{
			"master": {nil, map[string]*bintree{
				"admin.kubeconfig":           {etcOriginMasterAdminKubeconfig, map[string]*bintree{}},
				"aggregator-front-proxy.crt": {etcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
				"aggregator-front-proxy.key": {etcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
				"ca.crt":                     {etcOriginMasterCaCrt, map[string]*bintree{}},
				"ca.key":                     {etcOriginMasterCaKey, map[string]*bintree{}},
				"front-proxy-ca.crt":         {etcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
				"master-config.yaml":         {etcOriginMasterMasterConfigYaml, map[string]*bintree{}},
				"master.etcd-ca.crt":         {etcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
				"master.etcd-client.crt":     {etcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
				"master.etcd-client.key":     {etcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
				"master.kubelet-client.crt":  {etcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
				"master.kubelet-client.key":  {etcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
				"master.proxy-client.crt":    {etcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
				"master.proxy-client.key":    {etcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
				"master.server.crt":          {etcOriginMasterMasterServerCrt, map[string]*bintree{}},
				"master.server.key":          {etcOriginMasterMasterServerKey, map[string]*bintree{}},
				"named": {nil, map[string]*bintree{
					"console.crt": {etcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
					"console.key": {etcOriginMasterNamedConsoleKey, map[string]*bintree{}},
				}},
				"openshift-master.kubeconfig": {etcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
				"scheduler.json":              {etcOriginMasterSchedulerJson, map[string]*bintree{}},
				"service-signer.crt":          {etcOriginMasterServiceSignerCrt, map[string]*bintree{}},
				"service-signer.key":          {etcOriginMasterServiceSignerKey, map[string]*bintree{}},
				"serviceaccounts.private.key": {etcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
				"serviceaccounts.public.key":  {etcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
				"session-secrets.yaml":        {etcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
			}},
			"node": {nil, map[string]*bintree{
				"ca.crt":          {etcOriginNodeCaCrt, map[string]*bintree{}},
				"client-ca.crt":   {etcOriginNodeClientCaCrt, map[string]*bintree{}},
				"node.kubeconfig": {etcOriginNodeNodeKubeconfig, map[string]*bintree{}},
				"pods": {nil, map[string]*bintree{
					"apiserver.yaml":   {etcOriginNodePodsApiserverYaml, map[string]*bintree{}},
					"controllers.yaml": {etcOriginNodePodsControllersYaml, map[string]*bintree{}},
					"etcd.yaml":        {etcOriginNodePodsEtcdYaml, map[string]*bintree{}},
					"sync.yaml":        {etcOriginNodePodsSyncYaml, map[string]*bintree{}},
				}},
			}},
		}},
		"pki": {nil, map[string]*bintree{
			"ca-trust": {nil, map[string]*bintree{
				"source": {nil, map[string]*bintree{
					"anchors": {nil, map[string]*bintree{
						"openshift-ca.crt": {etcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
