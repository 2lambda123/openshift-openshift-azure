// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x51\x6f\x13\x39\x10\x7e\xc6\xbf\x62\xd8\x14\x4a\x7b\x75\xb6\x2d\x3c\xa0\x40\x90\x4a\x09\x52\xa5\x1e\x45\x2d\x27\x1e\x00\x55\xce\x7a\x76\xd7\x64\xd7\xde\xb3\xc7\x49\x4b\xc9\x7f\x3f\xd9\x9b\xa4\x49\x9a\xf6\x2a\xc1\x43\xd8\xda\x9f\x67\xc6\xdf\xf7\xd9\x9e\xce\xd3\x74\xa8\x74\x3a\x14\xae\x04\x8e\x57\x8c\xa9\x1c\x9e\x42\x61\xb1\x81\x74\x2c\x6c\x5a\xa9\x61\x2a\x4d\x36\x42\x0b\x29\x52\x96\xe6\x8e\xc4\xf0\x0d\x50\x89\x9a\x01\xb8\x6b\x47\x58\x67\x54\x81\x23\xd3\x40\x0b\xec\x3a\xb4\x63\x95\x21\x03\xa8\x47\xb9\xeb\x5e\xe5\x0e\x78\x0e\xa9\xc4\x71\x2a\x95\x1b\xa5\xe2\x97\xb7\x98\x5a\x74\xc6\xdb\x0c\x79\x23\x2c\x1d\x30\x00\xcc\x4a\x03\xdb\x0f\xc3\xe0\x4e\x55\x10\xc2\x43\x61\x9b\x7f\xbd\x21\x01\xb0\x0f\xfb\xdb\xf0\xee\xdd\x6d\xb1\xa1\x0c\xe3\x35\xad\xaf\x64\x00\x16\x1d\x19\x8b\x99\xd1\xc0\xcf\x37\xcc\x67\x82\xa0\x8d\xd4\x0e\xa5\x52\x60\x6d\x74\xf7\xa7\x33\x1a\xde\xbe\xdd\x1e\x9c\x7d\xdc\x66\x37\x0c\x20\xa9\x4c\xc1\xa5\x55\x63\xb4\x49\x0f\x92\x9f\xc6\x5b\x2d\x2a\x99\xb0\x29\x1b\x9c\x7d\x5c\x23\x4a\x58\x5a\x67\x2a\x57\x8c\xcd\xf6\xd3\xf8\xaa\x82\x9b\x1b\xe8\x1e\x1b\x9d\xab\xa2\x7b\x52\x8b\x02\x5d\xf7\x93\x91\x08\xd3\x29\x3c\x7f\x17\x09\xd2\x01\xf5\x7c\xa3\x5a\x48\x99\xdc\xa4\xd5\x42\x8b\x75\x86\x5d\xe6\xd4\x41\x5a\x79\xbd\x0f\xbf\x7f\x03\x59\x8f\xf7\x8a\xb1\x04\x5d\x4b\xd8\xca\x20\x31\x17\xbe\x22\xf7\x28\x19\xc2\xba\xfb\x45\x88\xb3\x81\x97\xdc\x58\x90\x8e\x40\x69\xa0\xac\xd9\x7b\xfd\xea\xd5\xab\x37\x20\x0d\x7b\xd2\x58\x43\xa6\xbf\x75\x23\x1d\x3d\x7b\xb6\xb7\x3b\x65\x4f\x1a\x63\xa9\x1d\xe8\x74\x76\xf7\xa6\xec\x89\x6a\x48\x0c\x2b\x74\xc0\x8f\xe0\xec\xe2\xf2\xe3\xc9\xf9\xe0\xeb\xd1\xe9\xe9\xe5\xd1\xe9\xe9\xd9\x57\xe0\x0d\x6c\xc5\x20\xc0\xeb\xa0\x0b\x21\x70\xde\xfe\xff\x69\xf0\x35\x0c\xce\xa7\xb9\x0c\xa1\x61\x2b\xfe\xf2\x9f\x70\x74\x7c\x3c\xf8\xfc\x85\x49\xa3\x91\xb1\x79\x12\xee\xc4\x18\x67\x7e\x71\xd7\x2e\x8b\xfa\xa5\xf3\x59\xc6\x3a\x30\x29\x51\xb7\x06\x50\xba\x00\x1d\x24\x9d\x08\x51\xa0\x26\x10\x5a\x82\x46\x9a\x18\x3b\x02\x4f\xaa\x52\xa4\xd0\x41\x61\xd0\x81\xd2\x64\xc0\x8a\x0c\x21\x33\x5a\x2a\x52\x46\x77\x59\x07\x54\xbe\x58\x6c\xbd\x76\x30\xc4\xdc\x58\x04\xa9\x1d\x28\x07\x23\x6d\x26\x1a\xc8\x04\xf5\x67\x99\x10\x50\x4b\xf0\x0d\x4c\x14\x95\x80\x75\x43\xd7\xe0\xc8\x2a\x5d\xb0\x49\xa9\x2a\x84\x6f\xdf\x60\xeb\x45\x69\x1c\x69\x51\x23\x70\xb9\x03\xfd\x3e\x24\x09\xfc\xf8\x11\x08\x07\x57\x21\x36\x70\x10\xbe\xc3\xb6\xdb\x35\x4f\xe1\x61\xdf\x5e\x84\xdd\xfa\x06\xa6\xd3\x28\x1a\xcc\xa3\xb4\xdc\x39\x24\xf8\xeb\x8a\xe1\x55\x24\xf6\xe2\xe8\xe2\x9f\xf3\x93\xfe\xf6\x52\x94\xbf\x85\x23\xb4\xb3\x20\xed\x3c\x4c\xa7\xdb\x71\x21\xbf\x9a\x9f\x19\xeb\x35\x70\xde\x58\x35\x56\x15\x16\x28\x81\x73\x5b\x03\xe7\x73\x42\xc3\x9e\x80\x8f\x21\xed\xa5\xe1\xb3\xf7\x0b\x38\xce\xb2\x3d\x58\x32\xf3\x3a\x24\x6a\x91\x8c\xf9\x46\x0a\x42\x9e\x09\x4e\xd6\x3b\x62\xcc\x85\x54\x0a\xb8\x45\x48\x5c\xe7\x05\xec\x86\xf3\x8c\xb6\x07\x3b\xdd\xdd\xce\xf7\x83\x92\xa8\x71\xbd\x34\xbd\x25\x75\xa7\x93\xb4\x47\xd3\x58\x55\x28\x9d\xd6\x71\x7b\xa9\x69\x50\xbb\x52\xe5\xc4\xdb\x81\xee\xc8\x0f\xb1\xf5\xcf\x9f\xe7\x08\xe2\xc7\x9f\xe5\xa8\xec\xe6\x86\x07\x07\x69\x84\xad\xee\xe0\x8a\xac\xe8\xbe\x17\xd9\xc8\x37\xef\x2b\x33\xfc\x14\xe4\x4f\x92\x40\x40\x65\x8a\x02\x2d\x70\x82\xb6\x32\xee\x5a\x72\xba\xae\x84\x64\xe1\xe4\x70\x7a\xc7\x68\xaf\xc1\xe8\x25\x07\xed\x24\xc1\xf3\x8e\x82\xdc\x50\x20\x45\x2b\x0e\x63\x16\x16\xe4\x39\xcf\x57\x4f\x7b\xba\xcb\x08\xeb\x26\xd4\xf1\x41\xd9\xfe\xea\xdc\x6c\x5d\x3d\x92\xca\xc2\xd6\x12\x8e\x3d\x5c\xa3\x34\x13\x5d\x19\x21\x43\x99\x6d\x8c\xe4\x91\xce\x1d\x50\x26\x5b\x4e\xee\x31\xef\x8a\xf9\xee\xfa\xed\x3b\x83\xe8\xb9\x3b\x72\xf7\xee\x0e\x6d\x02\x67\x95\xf1\xb2\xb1\x66\xac\x24\xda\xb4\x97\x5e\x4a\x41\x22\xbd\x34\x7e\x11\x7a\x99\x86\x5e\x6a\x7c\x30\x76\x98\xfa\x9f\xbd\xb4\xcb\x87\x95\x19\x06\x95\xfa\x01\xbd\xd1\x01\x73\xa4\x44\x47\x4a\x8b\x70\xef\xf4\x43\x96\x99\x16\x5d\x39\x84\x39\xbb\x0f\x6b\xd0\xe2\x17\x60\x94\xb7\xc6\x38\x9c\x5f\xff\x0f\x47\x68\x41\x41\x43\xa7\x45\xe3\x4a\x43\x8f\x55\xb1\xbd\x40\xc2\xfe\xff\x5c\xc5\x60\xc4\xde\xe2\x6b\x31\xb5\xec\xd3\xde\xea\x5f\xad\x1e\x1c\x61\xf0\xe5\xf8\xc3\xf1\x97\xd3\xcb\xa3\xcf\x27\xfd\xe4\x65\x72\x8f\x4c\x2b\xc5\x46\x4c\x88\x12\xbb\x86\xd9\xb6\xe7\x74\xad\x68\xbf\x24\x48\x4c\xc7\x83\x53\x78\x38\x28\xab\x67\x48\xe3\x64\x06\x88\x17\xfc\xd2\x49\x9d\x0d\x2b\xad\x48\x89\x8a\x67\x95\x8f\xae\x4c\x66\x52\xec\xc7\x7f\xfd\xf9\x5d\xb3\x32\xda\x3b\x7c\xf9\x7a\x7f\x6f\x79\xe8\x60\x23\xf0\xe0\x2e\xf0\x70\x23\xf0\x30\x02\x93\xcd\x25\x71\x32\x23\xd4\x91\x16\x9e\x1b\xcb\x63\x5b\xb2\x06\x15\x72\x8c\x96\x94\x43\xde\x20\x5a\xee\x6d\xe5\x60\xc3\x35\x19\xd3\x30\x56\x8f\xef\xb2\x94\xee\xae\x8d\xc5\xfb\xca\xae\xdf\x57\x81\xcf\x95\xab\x68\xa5\x95\x59\x8b\xfb\x18\x83\x63\x7c\x5a\x93\x78\x39\x87\xb7\x7a\x3a\x65\x8c\xbc\x46\xc9\x85\xac\xa1\xb1\x26\x0f\x96\xbf\x7d\x2d\x32\xa3\xc9\x9a\x8a\x37\x95\x08\x2f\x72\x07\xb4\x21\xec\x81\x20\x53\xab\x8c\xdf\xe2\xe2\xfb\x9f\xd9\xd0\xe3\x57\xc6\x34\x0e\xbc\x26\x55\xcd\xea\x08\xdd\x82\x6f\xd8\x6d\x87\x8a\x3a\x34\x2c\x9b\xa3\x2c\x3a\xd6\xf5\x86\xf6\x41\x74\xe8\x54\x3b\x20\x95\x13\xc3\x2a\xbe\x17\xee\xda\x55\xa6\x00\xa7\x74\x16\x1b\x93\x5a\x68\x51\x20\x60\x78\x44\xa8\x0c\x10\x2a\xad\xf1\x45\x09\xf3\x56\x7a\x29\x61\x1b\x07\xe7\x51\x36\x96\x64\x9a\x3b\xd3\xff\x05\x00\x00\xff\xff\x08\xdc\xa7\x13\xea\x0c\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x6f\xdb\x36\x14\x7d\xe7\xaf\x38\x71\x86\x7a\xc3\x40\xab\x7d\x4d\x9b\x00\xc3\x90\x02\x7d\x59\x81\x04\xc3\x1e\x8a\x3e\xd0\xd2\x95\xc4\x9a\xba\x57\x25\x2f\x6d\xa7\x86\xfe\xfb\x40\xcb\x5e\xb3\xa4\x48\xdf\x04\xf0\x7c\xdc\x7b\x78\xa8\xcb\x8b\x6a\xed\xb9\x5a\xbb\xd4\xc3\xd2\xde\x18\xdf\xe2\x02\x5d\xa4\x11\xd5\xd6\xc5\x2a\xf8\x75\xd5\x48\xbd\xa1\x88\x8a\xb4\xae\xda\xa4\x6e\xfd\x16\xda\x13\x1b\x20\x3d\x24\xa5\xa1\xd6\x80\xa4\x32\x62\x06\xae\x12\xc5\xad\xaf\xc9\x00\xc3\xa6\x4d\xab\x7d\x9b\x60\x5b\x54\x0d\x6d\xab\xc6\xa7\x4d\xe5\xbe\xe5\x48\x55\xa4\x24\x39\xd6\x64\x47\x17\xf5\x8d\x01\xa8\xee\x05\xcb\x97\x61\x78\x36\x15\x8a\x3c\xba\x38\x7e\xcd\xa2\x0e\x78\x8d\xd7\x4b\xdc\xdc\x7c\x1f\xb6\x8c\x21\x99\xf5\x29\xd3\x00\x91\x92\x4a\xa4\x5a\x18\xf6\xee\xd9\xf9\xe1\x60\xe1\x5b\xd0\x57\xac\x6e\xf7\x1a\xdd\xea\x4e\x02\x61\xe1\xb9\x8d\x6e\x81\x69\x32\x40\xed\x14\xb3\xd5\xcc\xa9\x1a\x47\x83\xf0\xea\x4b\x12\xc6\xbb\x77\xcb\xdb\x8f\xef\x97\xe6\x60\x80\x45\x90\xce\x36\xd1\x6f\x29\x2e\xae\xb0\xf8\x22\x39\xb2\x0b\xcd\xc2\x4c\xe6\xf6\xe3\xfb\xa3\x15\x71\x33\x8b\x3e\x0e\xd5\x45\x7d\x9a\x6a\xeb\x8d\x39\xed\x3e\xe6\x10\x70\x38\x60\xf5\xa7\x70\xeb\xbb\xd5\x87\xc1\x75\x94\x56\x7f\x49\x43\x98\x26\xbc\xba\x39\x86\xc9\x05\xf5\xca\x98\x4b\xec\x7a\xe2\x59\xd4\x73\x07\x2e\xb0\x9d\x73\x1d\xb1\xc2\x71\x03\x26\xdd\x49\xdc\x20\xab\x0f\x5e\x3d\x25\x74\x42\x09\x9e\x55\x10\x5d\x4d\xa8\x85\x1b\xaf\x5e\x78\x65\x2e\x4b\x34\x67\x72\xcc\x9c\xb0\xa6\x56\x22\xa1\xe1\x04\x9f\xb0\x61\xd9\x31\x54\x4a\x53\x4e\x4e\x74\x5c\x31\x8f\xd8\x79\xed\x41\xc3\xa8\x0f\x48\x1a\x3d\x77\x66\xd7\xfb\x40\xf8\xf4\x09\xbf\xfc\xda\x4b\x52\x76\x03\xc1\x36\xbf\xe1\xfa\x1a\x8b\x05\x3e\x7f\x7e\x8b\x46\x90\x02\xd1\x88\x37\xe5\x9b\xc9\x9c\x38\x17\x78\x39\x8b\xfb\xb2\x6d\x1e\x31\x4d\x85\x57\xd2\x9d\x55\xcc\x51\x24\x91\xe2\xf7\xbd\xa1\xfd\x28\x51\x71\xff\xc7\xfd\xdf\x77\x1f\xae\x97\x8f\x54\xfe\x91\xb8\xa1\x78\x12\x99\xcf\x31\x4d\xcb\x23\xd1\xee\xcf\xf7\x10\x33\xc3\xda\x31\xfa\xad\x0f\xd4\x51\x03\x6b\xe3\x00\x6b\xcf\x81\x96\x9d\x60\xb7\xa8\xae\xaa\xf2\x79\xf5\x0d\x96\x4e\x6e\x2f\x8e\x6c\x32\x17\xa3\x19\x69\x4c\x1e\x1b\xa7\x64\x6b\x67\x35\xe6\xa4\xe6\xe7\x0d\xd5\xcc\xd4\x58\xd7\x0c\x18\xa3\xb4\x25\x2f\x19\x89\x53\xef\x5b\xb5\xb5\xb0\x46\x09\x76\x0c\x8e\x69\x6e\x60\x48\xf4\x33\x56\xb9\xca\xc7\x75\x35\x97\x60\x51\xba\x82\x53\x19\x7c\x6d\xff\x8f\x44\x1d\xcb\x8f\x25\x88\x8c\x09\x99\xd5\x07\x0c\x2e\x29\xc5\x52\x91\x3c\x9a\xef\x55\x27\x76\xeb\x40\x3f\x56\xf9\xaf\xfa\x4f\x5f\xc6\x8b\xe8\xb9\xf2\x8d\x4f\x6e\x1d\x4a\xdd\x63\x7a\x48\x41\x3a\x24\xcf\xf5\xb1\x8d\x83\x63\xd7\x11\x68\x4b\xf1\x41\xfb\x02\xd1\x3e\x4a\xee\x7a\x9c\x9f\xe7\x23\xc3\x59\x87\xce\x2a\x3f\x1c\x49\xc6\x67\xc7\xff\x06\x00\x00\xff\xff\xfd\xb2\x2c\xbb\x5f\x05\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
