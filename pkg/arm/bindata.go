// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/azuredeploy.json
// data/startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuredeployJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x93\xd3\x38\x16\x7e\xe7\x57\xb8\xbc\x5b\xd5\x30\xd5\xb9\x35\x61\x97\xea\xb7\x86\x1e\x96\x14\xd3\x90\x6a\xc3\xec\xc3\x14\xc5\x28\xf2\x49\xa2\x6d\x5b\xf2\xea\x12\x08\x5d\xf9\xef\x53\x96\x65\x27\xf1\x55\x4e\xa7\x69\x18\xac\x79\x68\xc6\x3e\xe7\x48\x3a\x77\x7d\x72\x6e\x1f\x39\x8e\xe3\xb8\xff\x14\x78\x09\x21\x72\xcf\x1d\x77\x29\x65\x24\xce\x07\x83\xe4\x49\x3f\x44\x14\x2d\x20\x04\x2a\xfb\xe8\xab\xe2\xd0\xc7\x2c\x34\xef\xc4\xe0\x6c\x38\x7a\xd6\x1b\x8e\x7a\xc3\xd1\xc0\x87\x28\x60\xeb\x98\xee\x3d\x84\x51\x80\x24\xf4\xff\x27\x18\xfd\x87\x7b\x9a\xcc\x80\x19\x95\x40\xe5\xef\xc0\x05\x61\x34\x9e\x68\xd4\x1f\xc6\xff\xa5\x04\x11\xe2\x28\x04\x09\x5c\xb8\xe7\xce\xed\xc6\x3c\x5d\x21\x4e\xd0\x2c\x80\xbd\x87\x1c\x04\x53\x1c\xeb\x87\x7f\xe8\x47\xf1\xb8\xcd\xfe\xa5\x89\xe4\x3a\x82\x78\x9a\x2b\x82\x39\x13\x6c\x2e\xfb\x6f\x41\x7e\x66\xfc\x66\x40\x93\xbf\x1e\x60\xc5\x89\x5c\xff\x87\x33\x15\x09\xb3\x8c\x8c\x1d\x45\x64\x67\xad\x67\xc3\xd1\xbf\x7b\xa3\x61\x6f\x38\xca\xd3\x05\x0c\x23\x69\xa8\x6e\x6f\x9d\xfe\x15\xa2\x64\x0e\x42\xf6\x7f\x33\x2f\x9c\xcd\x26\xcf\x43\x51\xa8\x97\x46\xc5\xa2\x87\x59\x18\x29\x09\x79\x92\x88\xb3\x08\xb8\x24\xc9\xc6\xf7\xde\xe9\xf7\xc2\x2c\xfe\x5a\x05\x39\x35\xec\x8e\x22\x63\x61\x0d\x28\x08\xd8\xe7\x4f\x42\x2c\x73\x2b\x68\xb3\x9a\x7d\xc5\x61\x0c\x22\xa6\x73\x2f\x62\xd1\x35\x62\x35\xb9\x0f\x02\x73\x12\xa5\x2a\xd4\x3c\x8e\xe7\xbd\x76\x24\x47\xf3\x39\xc1\x16\xfc\x92\x50\xad\xe9\x0b\xdf\xe7\x20\xc4\x94\xc3\x9c\x7c\x89\x85\xfd\xd2\x82\x79\xca\xb8\xbc\x46\x74\xa1\x95\x72\x76\xd6\x3b\x3b\x6b\x64\x26\x1c\x70\xba\xee\x09\x9d\x31\x45\xfd\x26\x9e\x88\x13\x16\x9b\xcd\x3d\x77\x46\xc3\x51\x23\x31\x93\x0c\xb3\x20\x96\xff\x1e\x47\x4d\xb2\x93\x98\x68\xaf\x84\x84\x6f\x6f\xff\xbf\xb8\x95\x2c\x9b\xd2\x37\xc5\xa7\x1f\x1f\x95\xbf\xdf\x9c\xfe\xe0\x01\x4b\xe8\x9c\xa3\x2e\x5c\xbb\x70\x2d\x12\xff\x38\xe1\x5a\x3e\x87\xb5\xff\xc5\x3d\xc2\xf7\xe4\x80\xf1\x7a\x1e\xd4\x03\x9f\x0f\xef\xdd\xfd\xce\x3a\xf7\xdb\x75\xbf\x7c\xfe\xdf\x23\x7f\x08\xff\x13\x0f\xea\x80\xe3\xf1\xd3\x7b\xf7\xc0\xa7\x7f\x23\x0f\xbc\xd7\x7e\x65\x45\xb8\x54\x28\x30\xff\xfb\x20\x9d\xca\x8a\x82\x6c\xdb\xa4\xa0\xc4\x14\x5e\x84\x30\x54\xc6\x4d\x4a\x95\x18\xac\xa6\x99\xd1\xc4\xa3\x61\x72\xc8\x1b\x3c\x2f\xb7\xd0\xc7\xc2\xd3\x92\xdc\xe0\x0a\x35\xa3\x20\xef\xd4\x37\x25\x22\x8e\x96\x33\xf2\x4e\x9b\xed\xf3\x6c\xfc\x7d\xb9\x62\xa4\x66\x01\xc1\x93\xa9\x09\x33\x78\x10\x67\x24\x51\x8f\x33\x25\x81\xb7\xf5\xc8\x6c\xf5\x41\x3a\xfd\x15\xc8\x25\xf3\x63\xa1\x9e\x44\x92\xe0\x7d\x6d\xe7\x9c\xc7\x15\x37\xaa\x5c\x70\xba\xb2\x17\x48\x14\x64\xdc\x49\xdf\x01\x43\xfe\x0b\x14\x20\x8a\x81\x1f\xac\x6b\x1f\x22\xa0\xbe\x78\x47\x4b\x3d\xde\xfd\x23\xc5\x3f\x26\xfe\xe3\x13\x0b\x93\x9f\x9c\x3a\x27\x99\x09\x4e\x9e\x7c\xdc\xdf\xef\xc7\x23\x1a\x3a\x98\x1d\x68\xe8\x19\xc2\x37\x40\xfd\xb4\x18\x30\x16\xdc\x29\xda\x8d\xb8\xf2\x50\x2c\x09\xb8\x92\x9c\x33\xe7\x1a\xb0\xf2\x27\xd3\x97\x8c\xce\xc9\x42\x71\xbd\xf9\x3b\x2d\x2b\x95\x79\xac\x34\x14\x71\xb2\x42\x12\xca\xe3\xe3\x72\x4d\x51\xd8\xdc\x8d\xe4\xbc\xa5\x71\x52\xcd\x44\xf4\x0c\xc7\xf5\xc3\xfc\x28\xcf\x96\xd5\x6f\xec\xcc\x4a\x92\xbe\xe7\x2d\x92\x99\x93\xd5\x93\x65\x27\xf6\x32\xb2\x6d\xb4\x13\xba\xb8\xf3\xd9\x3e\x62\x5c\xf6\x6a\x4f\x12\xad\xbc\xa3\x18\x53\xad\x8c\x8b\x19\xc5\x48\x3e\xae\xb7\xf1\x5e\xba\x8b\xed\x9b\x65\x80\x93\x27\xa7\xce\xc9\xa0\x24\xae\xd3\x67\xcd\x0e\xd0\xe0\xb9\x46\x4e\xdc\x08\xba\xe7\xce\xf3\x61\x03\x39\x50\x34\x0b\xe0\x55\xc0\x90\x24\x74\x31\x99\xba\xe7\xce\x1c\x05\x02\x1a\xd8\x2a\xf2\xc0\xb7\x57\x65\x55\x42\xca\x5e\xdc\x59\xa1\xa9\x20\x5b\x8d\x12\x3f\x80\xf7\x24\x04\xa6\xe4\x84\x5e\x11\xaa\xa4\x76\xcb\x71\x03\x5b\xbc\xd1\x4b\x22\x24\x27\x33\x95\x16\x9a\x4b\x98\x23\x15\xd4\xf5\x67\x8e\x71\xff\x59\x75\x6b\x9a\x5b\xdc\xf1\x54\xaf\xa7\x15\x03\x13\x9f\x77\xd6\x73\xfe\x9c\xf4\xcd\x4e\xcf\x7a\x03\xf5\x27\xc5\x2e\xc3\x14\xf7\x67\xe2\x61\x3c\x6e\x3a\x00\x77\x29\xa6\x65\x8a\x69\x56\xe9\x4f\x99\x63\xc6\xe3\xa7\x0f\x9e\x64\xac\xba\x29\xa6\xa4\x55\x9f\x94\x6c\xee\x3b\xea\x8d\x08\x95\xc0\x57\x28\x98\x50\x0f\x30\xa3\x7e\xcc\xf2\xac\x41\xa3\x54\x85\x33\xe0\xef\xe6\xd3\x74\x33\x8d\x88\xac\x65\x1d\xfd\xdb\xd4\x83\x6f\xa9\xd5\xe6\xd4\x71\xfc\x08\xf8\x4e\xb0\x06\x4f\x32\x8e\x16\x30\x10\xc9\xdf\x0b\x8c\x99\xa2\xf2\x41\x90\x9d\x98\x3e\xa9\x15\xfd\x6b\x58\xc4\x09\x77\xed\xed\xad\xaa\x84\xb7\x11\x86\x4c\x38\xdf\x9b\x7d\x7b\x12\x51\x1f\x71\xff\xd3\x6f\xd7\xde\x31\xb4\xf7\x32\xf9\xe0\x22\x05\x69\xaf\x10\x5e\x12\x0a\x1e\x46\x01\x78\x60\xa7\xc5\xb3\x23\x69\xf1\x6e\x38\x4f\x0e\x65\x8e\x6b\xca\x8a\x82\x8c\x2b\x47\x49\x0a\x6e\x10\x56\x7a\xc5\x1e\x8b\xdc\xf9\x46\xa5\x11\x3a\xca\xc0\x56\x51\xf5\x59\x4b\x65\x90\x48\x02\x7c\xd7\xda\x65\x5b\xc0\x28\x42\x38\xb9\x8c\xd8\x57\xb1\x31\xe9\xcb\x72\x87\x73\xf2\x0e\x9b\xf1\xfd\x7e\xe5\x91\xaf\x60\xb8\x63\xc6\x7c\x80\xdf\xde\x3a\x64\xee\xc0\xff\x33\x27\x9f\x84\x68\x01\xd7\x46\x93\x6f\x51\x08\x8e\xeb\x3a\x9b\x4d\xce\xc1\x03\x54\xde\xbc\x95\x85\x8d\x96\xe8\xbd\xf9\x50\xb1\x6e\x0d\xa2\x88\x65\xa2\x9c\x3c\xdb\x34\x7d\x59\xc5\xcc\x99\xaf\xb0\x2c\x63\x7d\x37\x9f\x27\x6c\x25\x5b\x06\xea\x17\xf7\xd4\x10\xb4\x6c\x05\x3c\xe2\x6c\x45\x4c\xa4\x54\xf4\xbd\xae\x8a\x16\x1c\xf9\x30\x65\x01\xc1\xeb\xea\x4b\x86\x90\xf9\x49\xd8\x22\xaa\x50\x50\x4c\xdd\x65\xb7\x04\xfb\x01\x3d\xe5\x6c\x4e\x02\x70\xcf\x2b\x66\x60\x22\xa3\xa8\x2b\x95\xc8\x0f\x09\xfd\x20\x80\xa7\xa6\xc3\x01\x53\x7e\x4f\x89\x02\xc6\xb9\xc7\x66\xdc\x9f\xc7\x2e\x92\xde\x12\xa4\x0f\x7b\x75\x8c\x01\xa1\xea\x4b\xbb\x63\x80\xeb\x13\x11\x9f\x3b\xa6\x48\x88\xcf\x8c\xfb\x17\x4a\x2e\x81\x4a\x92\xe5\x23\xc9\x55\xd3\x11\x44\x88\xa5\x55\xcb\xbb\x45\x0c\xdf\xc0\xba\xfe\xee\x27\x3f\xac\x84\x67\x93\xdc\xc0\xfa\x12\x49\x64\x5c\xd7\xf3\x5e\x4f\xd3\x59\x2f\x84\x27\x39\xa1\x8b\xcc\x9f\x3d\xef\xf5\x1b\x58\xf7\x33\x82\xf2\x60\xa8\xdd\x11\x92\xf1\xf6\xdd\xc1\x92\x85\x30\xd8\x5a\x78\xd0\x17\x62\x39\x40\x4a\x2e\x19\x27\x5f\xc1\xff\x74\x13\x6f\xda\x56\x74\x35\x80\xb9\x3b\x8a\x37\x60\x76\x32\x5a\xf5\x82\xae\x69\x15\xac\x5c\x9e\x24\x39\x6e\x0e\x1c\xa8\xb9\x08\x3c\x28\x0f\x16\x04\xb3\x38\xe7\xd4\x26\x23\x1b\xac\xfa\xc0\x64\xb8\xaf\x0e\x5d\x86\xec\xd3\xf0\x1e\xf3\x6a\xdb\x0e\xe4\x05\x98\x4e\x41\xe7\xd5\x38\x91\x06\x02\x1a\xb5\x52\x82\xa5\xe7\xc5\xa6\x8a\xd6\x55\xd9\xd9\x6c\xe2\xba\x5c\x6c\x68\xb4\xdd\x74\xcd\xae\xe2\xd7\x86\xda\x6c\x74\x1d\x2f\xcf\xf3\xbb\xa3\xe6\x84\xe9\x32\x71\x49\xc4\x4d\x73\x6a\xc2\x3a\x19\x2f\xe2\x1d\x5e\x03\xf2\xff\xcb\x49\xa1\x27\x28\xf2\x70\x40\x12\xde\x65\x9f\x58\xbc\xe2\x2c\xd4\xdb\x38\xd2\xc1\xc8\x35\xbd\x8e\x55\x30\x18\xda\x49\x7c\xb2\x99\x23\x0c\x96\x97\x41\xc9\x68\x50\x4e\xb1\x5d\xea\x51\x8b\x0b\x1b\xfb\x03\x99\xa1\x27\x21\xe2\x6b\xab\x3a\xe0\x6c\x51\xac\xc9\xf4\x15\xe3\x9f\x11\xf7\x13\xf3\x59\xf2\x96\xb5\x91\xb6\x85\xc5\xf2\x5a\xe9\xa0\x4e\xb5\x6c\x34\x20\x28\xc9\x8a\xa2\x56\x06\x4f\x86\xe5\x6e\xb7\xb7\xe3\x58\xcf\x61\x59\xb4\xda\x3a\xc0\x0e\x5f\x3b\x47\xc8\x18\xcd\xb7\x13\x6d\x26\x73\xda\xc2\x63\x95\x87\x99\x53\xe7\x64\x60\xbe\xff\x30\x7f\xad\x8c\x9b\x0e\x0b\x23\x67\xeb\x35\x17\x96\x91\xc1\x92\xdb\x83\xb1\x7b\xd2\x32\x90\x45\xcd\xda\xb5\x23\x07\x5b\xd8\x70\x57\x40\xa6\xa3\x67\xad\x04\xd9\x75\x2f\xf6\x94\xcd\x54\x4d\x14\x87\x76\x4a\x75\xef\xca\x65\x56\x15\x0e\xf8\x22\x81\xc6\x05\xde\xaa\x74\x64\xd4\xc7\x2f\x13\x58\x09\xc9\xc2\x5e\xf2\x25\xe2\xb1\x0b\x06\x52\x92\x7d\x48\x8e\x69\x57\x84\x32\xbe\x85\x3f\x2c\x8b\x40\xc4\x99\x04\x2c\xc1\xf7\x40\x4a\x42\x17\xf6\x5e\xec\x9a\x1d\x25\xad\xd5\x0b\x24\xe0\x5f\xe3\x5f\x29\x66\x3e\x38\x8f\x3d\x89\xb8\x54\x91\xf3\xa7\x51\xc2\x9f\x4f\x0a\xc7\xd7\xb2\x61\x93\xe5\xf7\xfa\xca\x6d\x6e\xba\xd0\xbf\x77\xfa\x75\x6b\x46\x0b\x51\x62\x67\xcb\x36\x53\xa7\xf8\xd4\x4b\x6d\x51\xcf\xc6\xa0\x19\xdf\x6b\x44\xfd\x00\xf8\x2e\x3c\xd5\x1f\xd6\x6a\xa4\xed\x71\xc2\xa9\x0e\x91\xe2\x91\xbc\xc3\xe6\x1e\x02\x9b\xd3\x3f\x47\x39\x4c\x6e\xdd\x95\x94\x3d\xd2\x57\xfa\x7b\x98\xfb\xc1\xf9\x26\xf1\x54\x07\xa2\x7c\x9a\xb7\xc3\xf8\x3a\x8c\xaf\x48\x76\x4c\x8c\x4f\x47\x43\x87\xf0\x59\x4c\xd2\x21\x7c\x0d\x32\x3a\x84\xaf\x43\xf8\x3a\x84\x2f\x5d\xea\x8f\x8e\xf0\x25\x85\xa1\xc3\xf7\x8e\xd4\xed\x76\xe8\x5e\x81\xaf\x43\xf7\x6a\xd7\xdb\xa1\x7b\x3b\xa3\x05\xba\xd7\x42\xc5\xbb\x07\xca\x17\x65\xbf\xe8\xb1\xef\x25\x9d\xb6\xfd\x64\x5b\x97\xbc\xcf\xef\x8a\xf3\xc3\x5e\xdb\xf5\xbd\xa2\xbd\xbc\x0e\x4b\x2d\x97\x53\x28\xc8\x3f\x35\x92\xaa\x55\xd0\xe1\xa8\x3f\x08\x8e\xaa\xff\x65\x80\x38\x97\x29\x19\x29\x99\xa8\xe7\xd1\xe6\xd1\x5f\x01\x00\x00\xff\xff\x6d\x59\xee\xfb\xc7\x4b\x00\x00")

func azuredeployJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuredeployJson,
		"azuredeploy.json",
	)
}

func azuredeployJson() (*asset, error) {
	bytes, err := azuredeployJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuredeploy.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _startupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x6f\x4f\xe3\xc6\x13\x7e\xbf\x9f\x62\x7e\xe1\xa7\xa6\x3d\xd5\x36\x5c\x4f\xa8\xe5\x00\x09\x42\x40\x88\x3f\x41\x24\x3d\xe9\x54\x55\x68\xbd\x3b\xc6\xab\xd8\xbb\x66\x67\x1c\xe1\xe6\xf2\xdd\x2b\xdb\x09\x24\x21\x05\xae\x2f\x9a\x57\xc9\xcc\xb3\xf3\x3c\x3b\xbb\xfb\x4c\xb6\xfe\x17\xc5\xc6\x46\xb1\xa4\x14\x02\x7c\x14\x62\x0b\x46\x83\x93\xc1\x1e\x44\xc8\x2a\xd2\x96\x72\x49\x0f\xa1\x8e\x9c\x37\xf7\xc6\x06\x65\x41\xec\x51\xe6\x81\xb6\x14\x2a\x67\x13\x30\x04\xaa\xf4\x1e\x2d\x67\x15\xa4\xd2\x6b\xe5\x34\xea\xcf\x60\x58\x6c\x41\xe1\x5d\x2c\xe3\xac\x02\x4a\x5d\x99\x69\xdb\x65\x88\x51\x88\x61\xff\xf6\xcb\x79\xaf\x7f\x37\xfa\x7a\xd3\x3f\x68\x2b\x0b\x93\xc0\x1f\x10\x24\xd0\x69\x88\xa9\xa2\xba\xba\xb9\x8f\x24\xbb\xdc\xa8\xc0\x15\x68\x29\x35\x09\x07\xd6\x69\xec\xc0\x9f\x9f\x81\x53\xb4\x02\x00\x60\xa5\xdc\x3a\x5e\x24\x46\x08\xaa\x88\x31\x57\x9c\x01\xb1\x2b\x40\x3b\x35\x46\x1f\x12\xfa\x89\x51\x28\xca\xdc\x95\x96\x21\xca\x2d\x47\x1e\xc9\x95\x5e\x21\x7c\xfb\x06\xec\x4b\x14\xf9\x38\xa1\xf0\x31\xa1\x5a\x5b\xa4\x71\x12\x91\x8e\x77\x04\xaa\xd4\x41\xf7\xe9\x37\x40\x34\x91\x3e\xca\x4c\x1c\xb5\xb5\x01\xea\x25\x70\xef\x8b\x87\xd2\xb1\x04\xd8\x86\xed\x2e\x1c\x1e\x36\x9b\x4b\x88\x65\x2c\xe6\xa4\xab\xeb\x84\x47\x62\xe7\x51\x39\x0b\xc1\xed\x8b\xec\xf2\x3e\xa4\xe7\xf5\x8d\x88\xe9\xd4\x24\x80\x0f\x10\xf6\x1f\xd9\xcb\xf0\xd6\x65\x08\x1d\x63\x13\x2f\x3b\xb3\x59\x2b\xba\x73\x3c\x18\x8c\x86\xa3\xdb\xa3\x9b\xbb\xde\xe0\xfa\xf4\xfc\xec\xee\xfa\xe8\xaa\x7f\x50\x77\x35\x68\x5b\x1e\xb4\x0b\x16\x6a\x9f\x8f\xe2\xff\xd3\xe5\x4e\xcf\x9a\x93\x10\xd3\x29\x66\x84\xdf\x51\x5d\xb9\xbc\x28\x19\xbf\xa3\xbe\xd5\xb3\x99\x10\x84\x1a\x02\x03\x01\x42\x87\xb6\x4e\xfa\xc7\xbf\x9f\xdd\x5d\x0e\xce\x2e\xfb\x5f\xfa\x97\x07\x1f\xd7\x03\x9f\xb6\x3a\xf0\x9e\xea\xc2\xe7\x10\xf8\xa4\xc5\x22\x2b\x1d\x7d\x68\xbf\xb7\xb7\x32\xca\x25\x31\xfa\xe8\x83\x10\xb1\x24\xdc\xfd\x04\x81\x86\xfd\xfd\x7d\x98\x4e\xe1\xb8\x09\xf4\x6d\x7d\xdf\xe1\xc7\xaf\x32\xcf\xae\xa4\xa7\x54\x66\x10\xf6\x1a\xc6\xf0\xda\x69\x3c\x76\x8e\x89\xbd\x2c\x2e\xca\x18\x5b\x25\x3f\xc1\x6c\x06\x87\xcb\x2c\xb5\x94\x28\x5e\x20\xc3\xf1\x13\xf4\x2d\xd6\x1e\x7a\x3e\xa2\xe3\x8a\x91\x36\xb3\xd6\x80\x7f\xe0\x6b\xce\xe4\x89\xb4\x40\x1f\x2a\xcf\x6f\x11\xde\x78\x33\x91\x8c\x17\x58\xbd\x4a\x7b\x81\xd5\xbb\x59\xc7\x58\x09\x95\xe6\x4e\xc3\xf6\xee\xf6\x36\xbc\x6f\xc5\x4b\xd8\xc6\xf6\xfd\x9b\xfe\xf5\xe4\x2b\x4d\x53\xb2\xe9\x92\x2a\x5e\x0a\x68\x53\x6d\xbc\x18\x9b\x48\xc9\x80\x7d\x49\x1c\xb5\x86\x12\x49\xab\x52\xe7\x29\x7a\x76\xb2\x79\xb1\xb2\xd0\x92\x31\x58\xe0\xc5\xdc\x5c\xac\xcc\xb1\x7e\xd8\xe8\x61\x67\xf7\xd7\x70\xf7\x97\x70\xe7\xe3\x6f\xe1\xce\x6e\x77\x83\xac\xda\xb5\xb2\x49\x63\xc8\x22\x1f\x6b\xe3\x21\x58\x55\xa8\x32\x57\xea\xc2\xbb\x89\xd1\xe8\x9f\x4d\x9e\x53\x43\xb5\x83\xeb\xb2\xc8\x8c\x92\x8c\x1a\x8c\xad\x8d\x15\x52\xcc\x72\x50\xa9\xf4\x4c\x90\x38\xdf\xc4\xda\xc7\x00\x85\xd3\xf4\x33\x48\xab\x81\x53\xc9\x5d\x02\xeb\x18\x8c\x46\x99\x09\x25\x79\x55\xdd\x0a\x6f\x24\xff\x2a\x3d\xb6\x63\x63\x7f\xbf\xdb\x1f\x9c\x76\x05\xa3\x95\x96\xcf\xf5\x5e\x7d\x38\xe1\x95\xb4\x26\x41\xe2\x70\xd4\x86\x4f\x60\x36\x13\x54\xc6\xa4\xbc\x29\xd8\x38\xfb\x02\x38\x5c\x4e\x36\x70\x29\x75\x2f\x33\xb8\xa1\xe8\x3c\xbc\x8a\x1a\xa2\xf2\xc8\x1b\x91\x6d\x6a\x8e\x1e\xbd\x2d\x74\x31\x3b\xce\xbc\x2b\x8b\x35\xdc\xed\x72\xae\x06\x67\x4e\xc9\x5a\xf4\x1a\xee\x72\x1e\x6e\x36\x8e\xaa\xf4\x86\xab\x66\xcd\xb5\xcc\x71\x0f\x2c\x3d\x19\xa8\x28\xbc\xc9\xa5\xaf\x86\x4a\x66\x38\x44\x6e\x01\x44\x8b\x3c\xfc\x37\x1f\x31\xc9\x47\x55\x81\x7b\x30\xc9\x89\x44\x7f\x70\x5a\xdf\x2e\xeb\x18\xf7\x60\x93\xe3\x82\xf2\xf5\x5f\x8d\xcc\xb9\x82\xa0\xb4\x6c\xb2\xc5\xb5\x32\x04\x65\xb1\x34\xe1\xd0\xca\x38\xc3\x8d\x45\x9e\x06\xde\xfa\x3c\x7c\x0d\x0c\x3f\x88\xbf\x03\x00\x00\xff\xff\xa0\xf4\x47\x99\xed\x08\x00\x00")

func startupShBytes() ([]byte, error) {
	return bindataRead(
		_startupSh,
		"startup.sh",
	)
}

func startupSh() (*asset, error) {
	bytes, err := startupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuredeploy.json": azuredeployJson,
	"startup.sh":       startupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuredeploy.json": {azuredeployJson, map[string]*bintree{}},
	"startup.sh":       {startupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
