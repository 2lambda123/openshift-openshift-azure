// Code generated by go-bindata.
// sources:
// data/master-startup.sh
// data/node-startup.sh
// DO NOT EDIT!

package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\xeb\x72\xdb\x36\x16\xfe\xbd\x7c\x8a\x53\xda\xad\x1b\xd7\x14\xed\xb4\xdd\xed\xa8\x75\x66\x1c\xdb\xed\x78\x9b\xda\x5e\x3b\xd9\xfe\x48\x3b\x19\x88\x00\x25\x54\x24\xc1\x12\xa0\x64\xe5\xf2\xee\xfb\x1d\x90\xba\xcb\x97\x34\xee\x76\x9a\x44\x02\x0e\xce\xf5\x3b\x17\x40\x5b\x9f\xc5\x3d\x5d\xc4\x3d\x61\x07\x14\xa9\x9b\x20\xd8\xa2\x1f\x4d\x45\x4e\x59\xa7\x8b\x7e\x97\x32\xd3\x27\x51\x48\x92\x95\x29\x49\x64\x19\xb9\x4a\xa4\xa9\x4e\xc8\x0d\x84\xa3\xb1\xa9\x33\x49\x95\xa9\x9d\xa2\x91\x16\x58\x54\x94\x0b\xeb\x54\x45\xa7\x2f\x9e\x83\xd7\xd5\xe9\xf5\xc5\xab\xab\xe3\xd3\x9f\xae\x2e\x5e\x5d\x1e\x86\x13\x53\x57\x51\xa5\x2c\xfe\x49\x54\xd4\xc7\xc1\x32\x04\xd5\xc5\xf5\x9b\x1f\xff\x73\x72\x7e\x18\x9a\x52\x15\x76\xa0\x53\xd7\xd9\x5e\x3a\xd9\x31\x56\x48\x35\xea\x24\x99\xa9\x25\x4e\xe0\x8c\x2e\x9d\xe8\x65\xca\x52\x74\x46\x67\xe7\x97\xaf\x5e\x52\x64\x69\xfb\x4b\xa9\xfb\xf4\x95\x1d\x98\xca\x51\xb8\xdd\xf2\x0d\xe9\x3d\x39\xa1\x33\x8a\x0e\x9e\x50\xf4\x07\xbd\xb8\xf8\x89\xa2\x08\x96\x45\x65\xa5\x52\x7d\x43\xe1\xcf\xaf\x9e\x9f\x12\x93\xd2\xc9\xd5\xc5\x65\x37\xfc\x34\xfe\xcc\x23\x08\xde\xbd\x23\x9d\x52\xe7\xd8\x14\xa9\xee\x77\xae\x55\x52\x57\xda\x4d\x2e\x85\x4b\x06\x97\x22\x19\x8a\x3e\x78\x7f\xf8\x10\x40\x8d\x3e\xdc\x15\xb9\xd6\x71\x91\x75\xa2\x72\x75\xd9\x41\x40\x42\x5d\xe0\x5b\x96\x21\x12\x54\x29\x49\xec\xf2\x44\x16\x94\x78\x9e\x75\x25\x9c\x36\x05\xe1\xff\xed\x2f\x07\xc6\xba\x42\xe4\xea\x49\x18\x24\xa0\x7a\x16\x8f\x44\x15\x67\xba\x17\x4f\xea\x3c\x4e\x32\xad\x0a\x17\x25\xaa\x72\x9d\x52\xe5\xf4\xc3\x0f\x3b\xa7\x17\x3f\xee\xb0\x8a\xc7\x58\x3b\xb2\xcf\x27\x08\xf8\x4c\x57\x5e\xd3\x88\xb1\xc0\x62\xa7\xd5\xf5\x4a\x95\xc6\x6a\x67\xaa\x89\xdf\x86\xc5\xd7\xae\x62\xbd\x60\x02\x78\xdd\x2e\x74\xa8\x26\xab\x32\x2f\x2b\x3d\x02\xef\x9f\xd5\xe4\x23\x25\xe3\xc4\x9a\xe0\x07\x3b\xf0\xe8\xea\x82\x6c\x1b\x05\xaa\x4b\xc9\x32\xe8\x35\xd4\x69\xf8\xd9\x7f\x1b\x5d\xdc\x13\xae\x70\x8f\x42\xc8\xfd\x7d\xcd\xe5\x29\x52\x46\x38\xa7\xf2\xd2\x11\xb8\xbc\x3b\xe8\x74\xbe\xfd\xf0\x3d\x49\x13\x10\xc1\x17\xd4\xaa\x41\xd1\x84\xa2\x3f\xe9\xe3\x64\x7a\x91\xf4\xc5\x17\xd4\xab\x94\x18\x82\xe1\x9d\x06\xbf\x9e\xaa\xb1\xfd\xae\xfd\x04\x75\x37\x9a\xde\xea\xd4\x60\x28\x05\x7c\x15\x32\x8b\x18\xb3\xaf\x5f\x2f\x9c\xa6\x28\x73\xf4\x2d\xfd\xfe\xfb\xf7\x9c\xdd\x05\xd9\x4c\xa9\x92\x0e\xbe\x27\x95\x59\x45\xea\x46\x3b\xfe\x92\xea\x40\x9a\x42\xdd\x13\x8d\x4a\xe5\x66\xf4\x71\x60\x66\xef\x25\x99\x12\x05\x17\x9f\xa0\xca\x29\xaa\x52\xba\x13\xdc\x77\x80\x10\xe0\x53\x85\x04\x70\x90\xdf\x09\xbc\x89\xaa\x05\xe9\x48\xdd\x02\x2a\x97\x35\x02\x04\x2f\x55\xca\x05\xf9\x50\x6a\x18\x51\xce\x99\x99\x4a\xf7\x51\x27\x3b\xd2\x24\x43\x55\xad\xc0\x7d\x79\x33\x6e\x2c\xea\xfc\x61\x61\xcc\x02\xec\x3b\x27\x0a\xc0\x57\x12\xf1\xce\x51\x73\x95\x3c\xcb\x11\xe1\x4b\x88\xbd\xf6\x52\xa7\x40\x58\x83\x78\x56\x70\xed\xb9\x45\x1a\xc5\x95\x31\x2e\x66\x93\x5e\x5e\x9c\x5c\x74\x49\xaa\x4c\xc1\x30\x2e\xc5\xa9\xc9\x32\x33\x66\x4e\xbe\xd4\x36\x36\xb3\x97\x45\xca\x25\x1a\xa1\xd3\x96\x7a\x62\x88\x68\xe8\xc2\x19\x42\x59\xa6\xff\xfe\x42\x9a\xf5\xb2\x81\x3f\x23\xa4\xa4\x28\xa5\xd6\xec\x00\xe8\xf8\x0c\xcc\xd4\x82\x67\xa6\x6a\x28\x97\xc4\x29\xa2\xdd\x6b\x80\x02\x28\xd9\x09\x10\x90\x27\x0e\x6e\x75\xe8\x1e\x0d\x61\xe4\xa3\x09\x40\x38\x9d\x83\xe3\x7d\x54\x56\x55\x23\x9d\xa8\xdb\xe8\x16\xf6\xf3\x61\x6a\x3b\x37\xa9\x65\x75\x63\x34\x8b\x58\x6a\x3b\x8c\xc5\xdb\xba\x52\xf1\xac\xe5\x94\x00\xe3\x01\x88\x55\x32\x30\xb4\x73\x37\x19\xad\xd9\x48\xcc\x1e\xe6\x97\x7f\xd6\xc6\x09\xa2\x7d\xda\xdf\xa1\x67\xcf\xe6\xa6\xb3\x1a\xa6\x2e\xdc\xea\x49\xac\x83\x37\x6a\x98\x02\x36\x28\xba\xda\xb0\xdf\x20\x8a\x39\xb5\x28\x92\x02\xd9\x52\xac\xa0\x08\x84\x21\x37\x2e\xc9\x48\xaa\xc2\x2e\x85\x7f\x40\xe3\x42\x64\x32\xdc\xe3\x3d\x18\xc3\x5d\x2b\xca\x54\x5f\x24\x13\xb4\xda\xbe\xb6\xae\x9a\x80\xd0\x55\xb5\x0a\x1a\x3c\x2d\xfb\x12\xa6\xae\x3b\x73\x33\xc1\x4a\xec\x90\xf4\x41\xeb\x19\x9f\x3c\x8c\xf1\xb6\x96\x79\x68\xdb\xce\xb9\x91\xca\x57\xaf\x67\xde\xd5\x05\x53\x7d\xb1\x11\x45\x30\x5c\x6e\xc2\xd0\x2c\xaa\xab\xb1\xb2\x89\xd5\x07\x71\x56\x17\xfb\xf4\xfe\x7d\x63\xdd\x6d\x61\x5d\x20\x5d\x11\xd8\x04\x54\xaa\x54\xd4\x99\xb3\x0f\x0a\x28\x9f\xbb\x3d\x9c\x7e\x97\xfd\xc2\x1d\x41\x5a\xdf\x0d\x5c\x52\xee\x7d\xf7\xcd\x37\xdf\xf8\x7e\xf0\x8f\xb2\x32\xce\x1c\x6e\xbf\xc3\xe6\xe7\x9f\xef\xed\x7e\xc0\x0a\x86\x89\x66\x61\x6b\x6b\x77\x0f\x0b\xf3\xd1\xe3\xc8\x8f\x46\x67\x57\xa7\xbf\x1e\xbd\x78\xf1\x06\x7f\x2e\x7e\xe5\xaa\xb4\xed\x99\x50\x94\x73\x74\x90\xeb\x51\xd4\xfc\x7b\x7e\xfa\x2b\x2f\x4e\xb7\x23\xc9\xac\xf1\x95\xff\xc6\x5c\x72\x74\x7c\x7c\x7a\x89\x39\x66\xdc\xd6\xea\xa9\x9c\xc8\x8a\x91\x6a\xc1\x87\xc0\x37\xe5\x2b\x9e\xee\x72\x65\x19\xfb\xca\xcf\x48\xe0\x62\x52\x70\x54\xc7\x02\x11\x86\x63\x78\x38\x2c\x94\x1b\x9b\x6a\x48\xb5\xd3\x99\x76\x1a\x9a\xf7\x8d\xef\x30\xd0\xa2\x12\x89\xaf\xb2\x52\x73\xe5\xe9\xf0\x64\x95\xce\x0e\x57\x75\x81\x02\xa4\xe0\x2c\x45\x12\x1f\x51\x8e\x86\x85\x19\xc3\x67\xc6\x17\xb0\x46\x12\xda\x0c\x84\xa0\x7e\x8d\xb5\x1b\x10\x77\xa5\x09\x94\xe1\x0a\x19\x8c\x07\xe8\x5b\xbe\x61\xcd\x9a\x06\x45\xf2\x09\x1d\x1e\x52\x18\xfa\xa6\x25\xcd\xbc\x65\x3d\xa0\x45\x31\x90\xd9\xc6\x75\x2c\x5f\x37\x54\x80\xf3\xdd\xfd\xfe\xee\x8c\x98\x73\xf9\xb4\x96\xfe\x60\x29\x1f\xdb\xd9\xff\xb9\x7f\x5b\x6b\xe7\xa9\xfb\xfc\xe2\xe5\x69\x97\xce\x30\x30\xd4\x0e\xa9\xb5\x87\xec\x18\xa9\xe6\x2e\xa0\x0b\x78\x25\x6f\xbb\x78\xed\xac\x46\xe8\x4c\x8a\xd0\x8d\x74\x65\x8a\x9c\xc3\x8d\x2c\xd1\x0d\xa6\xb6\x02\x8b\x86\xf7\xd5\x4d\xa0\x6e\x3c\x3a\xaf\x8f\xae\x5f\x5d\x9d\x1d\xee\x2c\x98\xf2\x8b\xf7\x44\x6b\x49\xb3\x0f\x7b\x76\xfc\xc1\xe8\x66\x5a\x78\x80\x20\x00\xbd\x44\x39\x84\x99\x7d\x34\xb2\x28\xe2\x21\x21\x9a\x42\x92\x51\x41\xd1\x88\xe2\x6e\xcc\x1f\xbb\x6f\x71\xcb\x69\xa5\xdd\xed\xb7\x36\x02\x01\x10\xaa\xa6\xfa\x05\x41\x33\x3c\x45\x89\x88\x50\x71\xac\xe3\xdc\xc0\xb6\xcf\x0a\x1c\x03\xa6\xd5\x48\xf8\x68\xf2\x0a\x58\x24\x43\x12\x96\xac\xe1\x9e\x6b\x3d\xa4\x97\xc7\x1d\x00\x3e\x13\x5a\xb2\xc3\xa8\x37\x01\x37\x26\x69\x45\xcf\x67\x93\xbd\xe6\x64\x66\x50\xa0\xf1\x51\xfb\x44\x69\x53\xe4\x16\xe2\x1c\x29\x05\x76\x50\xc5\x52\x5a\x99\x7c\x89\x16\xf5\x21\x51\xd6\x72\x66\x8d\x35\x4f\x3d\x03\x5d\x32\xbf\x46\xff\xa0\x51\x03\x10\xc0\x3d\xc7\xdf\xef\x6a\x9e\xcb\x90\xc6\x82\xa4\x98\xe0\x63\x36\x61\x6b\x4a\xaf\x8c\x62\x28\xda\x20\xae\x2d\x2a\xa0\x49\x44\xe6\xef\x93\xe2\x2d\x26\x29\xd9\x1a\xcb\xd3\x0b\x2e\x98\x0a\x89\xc5\xd9\x49\x97\x07\x27\xf7\xd2\x5b\x93\xba\xb1\xa8\x1e\x4c\x9f\x64\x22\x17\xa3\x29\x35\x2c\x50\x05\x23\xcd\x97\xa7\xa6\x85\x2d\x47\xa5\x6d\x75\x36\x98\x77\xba\xba\x40\xf2\x0d\x29\x97\x56\x4e\x3b\x21\x35\x72\x96\xbf\xa2\x2b\xcf\x57\xd2\xac\x06\xb2\x67\xdf\x17\xd8\xb5\x0a\x3c\x16\xbb\xc6\x88\x4f\xe3\x06\xb7\x5c\xa2\x5c\x0d\xeb\x9e\x6a\x3c\xe7\x51\x54\x23\xd2\xde\xb3\x24\x4a\x1d\x31\x2d\x7a\xbb\xe5\x54\xd2\x98\xb6\x15\x85\x76\xeb\x4b\xda\x6d\xd6\xbb\xf4\xa4\xb3\xbb\xf5\xdb\xc1\xc0\xb9\xd2\x76\xe3\x78\x61\x56\xdf\x0a\x9b\xfe\xdd\x8e\xa7\x4d\x21\x8b\x85\xcc\x75\xd1\x99\x4b\x7c\x34\xc6\xb3\xa7\x82\xa8\x59\x78\x54\x19\xdc\x77\xfc\x5f\x8f\xcf\xd5\xca\x47\x70\x87\x1f\xf9\x3d\x9b\xf6\xb2\xc1\xcf\x0d\x11\x57\x78\x64\xd8\x76\xe7\x39\x10\x5e\x97\xcf\x33\xd3\x3b\xe7\x86\x18\x86\xf7\x3e\x34\xcc\x7a\x3b\x8f\x34\x90\x3f\x59\xbb\x88\x71\xa5\x73\xdc\x46\x51\x25\x9c\xcf\xfb\x9e\x97\xe2\xef\x64\x57\xe9\xf2\x08\x14\xef\x06\xdc\x63\x58\x8f\x13\x5d\x1d\x2e\xef\xb5\xe7\x9a\x3b\xd6\xf6\x02\xdd\x5f\x6e\xcd\xa7\x60\xdb\xd8\xfc\x89\xdd\x79\x89\xd1\xdf\xd9\xa0\x97\x05\x3d\x5e\x8f\xbe\x53\x4f\x89\xc9\x2a\x33\x42\xb2\x13\x9b\x20\x84\xcb\x6d\x74\xbd\x73\xfe\x06\x9d\xb8\x7b\xae\xe5\x5f\x77\x7d\x69\x13\xb1\x7f\xb0\x43\xbb\x19\x61\x1a\xa8\xd0\x83\xdf\xa0\x7d\x8a\xf8\x0d\xb7\xbb\x96\x7a\x11\x00\xdd\x18\x1b\x68\xd1\xbc\x75\x9f\xcf\x18\x4a\x8d\x11\x0d\xa7\xa8\xd7\xc2\xfd\x90\x4f\xae\x64\x00\xe8\x1b\x22\xe9\xdf\x35\x7d\xef\x3d\x64\x61\x2d\x18\x3b\xb2\xd7\x12\x88\xc4\xef\x4d\x5d\x75\xb7\x43\x5b\xf9\x53\x62\x0e\xe1\x34\x4d\x9e\x4e\x6f\x08\x7f\x15\xd3\xcd\xf8\xc3\x36\x7f\x22\xa6\x97\x18\xfd\x9d\x98\x5e\x16\xf4\x7f\xc2\x74\xe3\x65\xdf\xd7\x0b\x51\x62\x60\x71\x1f\x85\x69\x46\x51\x77\xf6\x69\xb6\xb5\x58\xaf\xba\xcb\xdf\x1a\x74\x62\x88\x3c\x7d\x79\x7c\x72\xfc\x12\xb7\xb2\xcb\xb3\xc3\xf0\xeb\xf0\x16\xd0\x2e\x3b\x85\x69\x98\x8b\x6f\xe8\xad\xbe\x53\xa0\x2c\x65\xc2\x1a\x2e\x39\x6f\x22\x2e\x98\xcb\xb5\xb4\x50\xe3\x96\xc0\x5f\x7d\x16\x2a\x76\xbb\xac\x0b\xdc\xbb\x44\x86\x9b\x7b\xed\x73\x34\x6c\x7d\xb8\xef\xff\x3b\x9c\xf6\x97\xa5\xd5\xee\xd3\xaf\xbf\xdb\xdf\x5b\x5c\x3a\xd8\x48\x78\xb0\x4e\xf8\x74\x23\xe1\x53\x4f\x18\x6e\x56\x29\x72\x66\x08\x14\xb0\x39\x11\x50\x1e\xf9\x3b\xfb\x0a\xa9\x90\x23\x7e\x19\xb6\x2a\x2a\x15\x4e\xd4\x55\x66\x69\x43\x6b\xf4\x62\x82\x20\x1f\xad\x7b\x29\xde\x5d\x59\x5b\x7b\x4b\x9c\xf9\x73\xa9\x25\x2d\xdd\xf3\x57\xf8\x3e\x04\x99\xca\x5f\x3a\x43\xdf\x9e\xf9\x16\xcb\x8f\x8f\xae\x2e\x94\x84\x4d\x39\x0f\xe2\x29\x5f\x60\xe7\xc3\x0c\x8f\xf1\x95\xc9\xa2\x32\x13\xfe\xce\xc5\x33\xba\xc8\xac\x41\x63\xc7\xa4\x30\xff\x7d\xc4\x0f\x6c\x9d\x91\xc9\xea\x1c\x37\x6d\x06\x46\xf3\xa0\x29\xa7\xd7\x69\x7e\xd9\x68\x9e\xa9\x12\xbe\x44\xf3\x4d\x7b\xfa\xac\x99\xd3\xfe\xbf\xbe\xdd\xdf\xf4\xbc\x79\x0b\x7f\xd6\xa3\x79\x59\xf2\x23\x02\x86\x52\xfe\x59\xc8\x6a\xbe\x13\x8c\xf9\x17\x9f\x02\x58\x27\xc5\x73\x03\x6e\x27\x20\x71\x83\xca\xd4\xfd\x01\x4d\x1f\xa7\x16\xe6\xd8\xf6\x85\x6a\xca\x65\xe3\xa4\x6b\xca\xb5\x6d\x68\x50\x18\xa7\xba\x28\x82\x26\xd7\x49\x34\xf7\x98\x7f\x23\x48\x2a\xfe\x01\x2b\x33\xa6\xb4\x98\xe3\x9d\xce\xa6\x3f\x43\xe1\xa2\x84\x59\x63\x6d\x2a\xdf\xc8\x65\x26\xec\x31\x7e\xba\xb1\xc9\x40\xc9\xda\x3b\x6c\x31\x2b\x2b\xd5\xc3\xec\xc6\x63\x77\x62\xf2\xd2\xbf\xd4\x6e\x7a\x9d\x0f\x03\x3b\xa8\x1d\x37\x16\x2e\x61\xcd\x99\xaf\x9e\xf2\xfb\x35\x4a\x24\x44\xaf\xde\x0b\xee\xb4\x67\xf6\x40\x36\x7d\xfe\xfe\x5f\x00\x00\x00\xff\xff\x97\x41\xe5\x9c\xf5\x1b\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xdf\x6f\xd3\x4a\x16\x7e\xf7\x5f\x71\x08\x88\x2e\xa2\xb6\xdb\x95\xd8\x95\x0a\x54\x62\x81\x95\xd8\xd5\xa5\x55\xcb\xbd\xf7\xa1\xe2\x61\xe2\x39\x4e\x86\xd8\x33\x66\x66\x9c\x34\x14\xfe\xf7\xfb\x1d\xdb\x69\xd3\xa6\x4d\xa9\xb8\x52\x1e\x62\xcf\x99\xf3\xf3\x3b\xdf\x39\x7e\xfc\x28\x1f\x1b\x9b\x8f\x55\x98\x52\xca\xe7\x49\x72\x71\x41\xa6\xa4\xec\xad\xb3\xa5\x99\x64\xa7\x5c\xb4\xde\xc4\xe5\xb1\x8a\xc5\xf4\x58\x15\x33\x35\xe1\x40\x3f\x7e\x24\x95\x9b\x4c\xd8\x53\x1a\xc9\x3a\xcd\x69\x88\xca\xc7\xb6\xc9\xa0\x65\x64\x2c\x9e\xaa\xca\xd8\x09\x79\xd6\x34\x55\x91\x0a\x6d\xa9\xe8\x34\xb6\x5e\x45\xe3\x2c\xe1\xf7\xe4\x1f\x53\x17\xa2\x55\x35\x3f\x1b\x25\x05\xa4\x0e\xf3\xb9\xf2\x79\x65\xc6\xf9\xb2\xad\xf3\xa2\x32\x6c\x63\x5a\xb0\x8f\x59\xc3\x35\xbd\x7a\xb5\xf3\xfe\xe8\xbf\x3b\xe2\xe0\x5b\xbc\x7b\x13\xfe\xb3\x8c\xf0\x65\xe5\xa9\xbc\x33\xa5\x81\x1e\x0e\xd9\xe0\xe9\x09\x37\x2e\x98\xe8\xfc\xb2\x3b\xa6\xef\x74\x1a\xbd\xf8\x85\x00\xa0\xeb\x6e\xa3\x33\x5e\xde\xb4\x79\xec\xcd\x1c\xba\xff\xcf\xcb\x07\x5a\xc6\x8d\x0d\xc3\x3f\x99\xbe\x37\x27\x47\x14\x86\x0a\x50\xdb\x68\xb1\x40\x67\x70\xa6\xd7\x16\xfe\xe7\x8c\xbd\xa7\x54\xa3\x5d\x1a\xc1\xea\xe7\x8d\x84\x97\xce\x93\x8a\x91\xeb\x26\x12\xb4\x5c\xec\x67\xd9\x8b\x1f\x2f\x49\xbb\x84\x08\x99\xa0\xc1\x0d\x4a\x97\x94\x7e\xa5\x87\xd9\xec\x4c\xd2\xd3\xa7\x34\xf6\xac\x66\x50\xb8\x25\xdc\xb3\x95\x13\x4f\x2e\x86\x7f\x70\xf6\xd6\xc0\x07\x8f\x7a\xfc\x94\xca\x54\xac\x47\xd0\x0d\xb4\x9e\x9d\xad\xdd\xa6\xb4\x8a\xf4\x82\x3e\x7f\x7e\x49\x71\xca\x96\x42\xc5\xdc\xd0\xfe\x4b\xe2\x2a\x30\xf1\xb9\x89\xf2\x50\x9a\x44\x3b\xcb\x5b\x2b\xe1\xb9\x76\xf3\x87\xc1\x58\x32\x57\x54\xac\x2c\xc1\xd3\xc4\xd7\x94\xfa\x92\xb6\xc2\x7a\x0b\xfc\x00\x3b\xb6\x1a\x90\x49\x1e\x53\x81\x4c\x46\x16\xeb\x51\x19\x0b\x87\x9b\x16\xc5\x41\x8e\x3c\xc7\xa4\x9e\x69\x83\x10\x9a\x2b\x65\xce\x9b\x09\xda\x3a\xd3\xae\x98\xb1\xbf\x01\xf4\xeb\x87\x79\x1f\x51\xf6\x25\x20\x98\x35\xc0\x67\xef\x18\x90\x67\x8d\x5a\xd7\xa0\x08\xd6\x1f\x6a\x54\xf7\x18\x66\x4f\x3b\xab\x2b\x10\x6c\x80\xbb\xb2\x94\x86\xbb\x5c\xa1\xdc\x3b\x17\x73\x09\xe9\xd3\xd1\xbb\xa3\x03\xd2\x5c\x31\x02\x43\xa9\xa8\x74\x55\xe5\x16\xa2\x69\xe2\x5d\xdb\xf4\x31\x4b\x96\x55\x19\x71\x13\x85\x33\x81\xc6\x6a\x86\x6a\x18\x1b\x1d\xb9\xd6\xd3\x1f\xbf\x91\x11\xbf\x42\xd2\xdd\x51\x5a\x53\x5a\xd2\x10\x76\x02\x6c\x3c\x82\x32\x5e\xcb\xcc\xca\x0d\x8e\x45\x5e\xa2\xda\xe3\x1e\x26\x00\x52\x58\x06\x20\xa8\x88\x48\x6b\x74\xcd\xa0\x23\xed\xaa\x09\x40\x44\x53\x43\xe3\x7d\x52\x81\xfd\xdc\x14\x7c\x97\xdc\xda\x79\x3d\x2b\x43\x76\x5e\x06\x71\x37\xd7\x3c\xcf\xb5\x09\xb3\x5c\x7d\x6b\x3d\xe7\x9e\x03\x62\x2b\x38\x6d\x00\xc6\x7d\x08\x73\x31\x75\xb4\xb3\x5d\x8c\x36\x62\x24\x51\x8f\xf0\x9b\xaf\xad\x8b\x8a\x68\x8f\xf6\x76\xe8\xf0\xf0\x2a\x74\x71\xc3\xb5\x36\xde\xbc\x89\xf7\xd0\x0d\xf6\x62\x60\x83\xd2\x93\x8d\xf3\x8b\x8b\x54\xfa\x8e\xbf\x52\x76\xe2\x2a\x16\xd2\x2a\xbd\x92\xae\xc7\xd5\x1e\x6c\x62\x64\x00\x98\x56\x68\x24\x7b\x03\x60\x10\x1c\xa1\xf7\x52\x2d\x20\xf3\xa3\x03\x1a\x7d\x41\x30\x56\x55\x7a\xb4\x2b\x67\x88\x53\x8d\x2b\x4e\x2b\x9e\xa8\x62\x99\x7a\x9e\x98\x10\xfd\x12\x82\xd1\xb7\x9c\xf4\x50\x13\x3f\xd0\x22\xbd\xdd\xf5\x8c\x23\x21\x9b\x29\xbf\x5d\xe0\x46\x85\x41\x0c\xc9\x90\xbf\xae\xc5\xa4\x13\x06\xb6\xeb\x1a\x20\x64\x1f\xc1\x13\x1d\xbf\x1d\x76\x05\xb1\x22\xf5\x54\x00\xbd\xe8\xe8\x46\x54\x0b\x86\x85\x4e\x68\xa1\x70\x05\x09\x56\x70\xd2\x72\x5c\x38\x3f\xa3\x36\x9a\xca\x44\x03\x46\x9b\xb8\x8e\xd6\x00\x65\xaf\x8a\xae\xb9\xb5\x11\xc0\x67\x50\x86\xf4\xae\x2e\xfb\xd6\x02\xf7\x0c\xc6\x66\xd2\xf8\x8b\x2e\x98\x59\xb7\xb0\x84\x8b\xd2\x37\xbd\x25\xee\x32\x81\xb6\x59\x98\x38\x25\xa1\xc2\x25\x9c\x91\xc6\x4c\x16\x53\x90\x65\xc7\x92\x97\x5c\x45\xa9\x7e\x46\xaf\x5f\xd3\x68\xd4\x31\xa5\x76\x57\x3c\x79\x2f\x2f\x4a\x5e\x24\xc2\xcd\xd4\x9c\xf6\x52\xc8\xce\xf6\x01\xb3\x3d\xc1\x57\x5a\x7e\x65\x86\xfc\xb4\x8d\x87\x8e\x92\x7f\xed\xdd\x35\x4b\x1e\xa3\x6e\x1f\x8f\x3e\xbd\x3f\xa0\x0f\x98\x50\x6d\x44\x93\xee\xa2\xc3\xe6\x42\x6f\x4a\xb2\x80\x9c\xd4\xc3\xe0\x68\x63\x30\x28\x9b\x43\x17\xd9\xb9\xf1\xce\xd6\x52\x6a\xf4\x99\x11\xd8\x07\xe8\x0a\xe0\xd8\xe7\xe7\x09\x9f\x37\x0e\x60\x3d\x7d\x73\xfa\xfb\xc9\x87\xd7\x3b\x6b\xa1\xfc\x09\x34\xb1\x1f\x22\xe9\xcf\x11\xcf\x4e\x77\x31\x3d\x5f\xa1\x18\xe8\xa1\x34\x6d\xd0\x66\x08\x73\x02\xee\x4c\x53\x99\x4b\xe9\x0a\x8e\x82\x08\x4a\xe7\x94\x1f\xe4\xf2\xf7\xe0\x1b\xf6\xc0\xc1\xda\xf6\xbc\x0d\x15\x48\x80\x4e\x5e\xf9\x97\x24\xfd\xb4\x4e\x0b\x95\xa2\x4f\x43\x94\xbe\xc0\x71\xd7\x11\xb8\x06\x3c\xf3\x5c\x75\xb5\x94\x37\x50\x51\xcc\x48\x05\x0a\x4e\x68\x3e\x74\x70\xbe\x3e\x61\x01\xf6\x4a\x19\x2d\x09\xa3\xf1\x12\xda\x44\x64\x30\x7d\x35\x0e\x77\xfb\x9b\x95\x43\xb7\xe3\xaf\xe9\x9a\x64\x68\x8f\x3b\x84\x6b\xb4\x13\xd4\xc1\x95\x40\xa5\x77\xf5\x35\xd9\xc6\xbb\x82\x43\x90\xae\x5a\x18\x19\xb4\x53\xd3\x88\xbe\xde\xff\xa4\x77\x03\x10\x08\x53\xd7\x56\xba\xcb\xb1\xb3\x68\x61\x45\x5a\x2d\xf1\xb7\x5a\x4a\x34\x4d\xe7\x0c\x0b\x14\x43\x92\xb7\x01\x1c\xea\x0a\x55\x75\x1b\xb7\xfa\x86\xe1\xad\x87\x60\x65\x60\x62\x05\x67\xb4\x95\x74\x26\x1d\xef\xbf\xbb\x57\x3e\xb8\x32\x2e\x94\xff\x69\xf9\xa2\x52\xb5\x9a\xaf\xa4\x11\x01\x5b\x41\x5a\x47\x4d\x3d\x1f\x5e\xaf\xca\xc0\x9b\x21\xb9\xa2\xcd\xd6\xd6\x2a\xcc\xa8\xd6\x41\xaf\x68\x95\x7a\x3b\xd7\x1f\xc1\xf6\x57\x6f\xca\xaa\x05\xb2\x2f\x9f\xd7\xd4\x0d\x0e\xfc\x5d\xea\xfa\x20\x7e\x4d\x5b\xb2\x6d\xb4\xc5\x16\x5b\x50\xaa\x74\x2d\xf0\x28\x85\x52\x5d\xc3\x16\xd0\x28\xb1\xcf\x01\x5c\xde\x55\x69\x53\x29\x30\x41\x37\x97\x84\x22\xee\xb9\x25\x4c\xb6\x3e\xc4\x64\x88\xc0\xcd\x2a\x38\x4c\x0b\xb4\xea\xa5\x64\xd6\x15\x36\x9b\xbb\xaa\xad\x31\x33\x64\xdd\xeb\x37\x42\xbd\x1a\x0c\x32\xeb\xfb\x39\x5f\xc8\x38\x90\x99\xb1\xda\x0b\x6b\xda\xfb\xf7\x8b\xbd\xdb\xf6\xc3\x3b\xf4\x8b\x1f\xfd\xfc\xed\xb6\x5f\xa4\x18\xd0\xa0\x60\x04\xe1\xf0\xaf\x56\x16\x5c\x40\x8c\xb9\xbd\x44\xaf\x41\x24\x4e\xb1\x7c\x4d\xa6\xb4\x1a\xe1\x6b\x55\x19\xe6\xf8\x4a\xcb\xad\x75\xc3\x7e\x74\xf3\x18\x1e\x58\x17\xf9\x00\x23\xc4\xd5\xa6\x48\xaf\xe7\x0c\xc1\xcb\x07\x6b\xe5\x5c\x13\x80\x4a\x0c\x54\x38\x15\xba\x25\x11\xcf\xcd\x26\xc6\x6e\xd5\x72\x69\xec\xd7\xbf\x79\x43\x31\x65\xdd\x76\xe9\x5a\xfb\x1e\xc0\x16\x35\xc6\xb6\x2b\xc4\x51\xb8\xba\xe9\x16\xdd\xdb\x3e\x6d\x46\x49\x98\xb6\x51\xcb\x48\x07\x39\xf7\x77\x9e\xff\x53\xd6\x7f\x60\x08\x86\x6f\x62\x7c\x6b\x34\xf4\xfd\x7b\xbf\x22\xad\xbe\x1e\xfe\x0a\x00\x00\xff\xff\x38\xb6\xac\x3c\xe3\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
