// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5f\x57\x1b\xb7\x12\x7f\xae\x3e\xc5\x74\x4d\x9b\x26\x45\x5e\x48\xdb\x7b\x7b\xdc\x92\x73\x08\x90\x1e\x6e\x29\x70\x21\xb9\x7d\x48\x73\x72\xe4\xd5\xac\xad\x58\x2b\x6d\x25\xad\x8d\xe3\xf8\xbb\xdf\x33\xda\x5d\x63\x63\x03\x49\x43\x9b\x07\x62\x4b\xa3\x99\xd1\xcc\x6f\xfe\xc9\x9d\x2f\xd3\xbe\x32\x69\x5f\xf8\x21\x70\xbc\x62\xac\x03\x2f\xac\x83\x80\x3e\x28\x33\xe8\x81\xb6\x03\x10\x46\x82\x74\xb6\x04\xa1\x35\x04\x27\xf2\x5c\x65\x10\x86\x22\xc0\xc4\x56\x5a\x82\xb3\x55\x40\x18\x2b\x01\x61\x88\x50\x08\x1f\xd0\xc1\xd1\xc9\x73\xd6\x81\x8b\xa3\xcb\xb3\x57\x17\x07\x47\xbf\x5c\x9c\xbd\x3a\xdf\x4b\xa6\xb6\x72\xdc\xa1\xb7\x95\xcb\x90\x0f\x9c\xad\xca\x84\x75\xe0\xec\xf2\xed\x8b\xff\x1e\x9e\xee\x25\xb6\x44\xe3\x87\x2a\x0f\xdd\xad\x95\x93\x5d\xeb\x85\xc4\x71\x37\xd3\xb6\x92\x09\xeb\xb0\x0e\xa8\x32\x88\xbe\x46\x0f\xfc\x18\x8e\x4f\xcf\x5f\xbd\x04\xee\x61\xeb\x1b\xa9\x06\xf0\xad\x1f\x5a\x17\x20\xd9\x6a\xf8\x26\xf0\x01\x82\x50\x1a\xf8\xee\x63\xe0\xef\xe0\xe4\xec\x17\xe0\x5c\xdb\x01\x2f\x1d\xe6\xea\x0a\x92\x5f\x5f\x3d\x3f\x02\x22\x85\xc3\x8b\xb3\xf3\x5e\xf2\x79\xfc\x89\x07\x63\xb3\x19\xa8\x1c\xba\x07\xd6\xe4\x6a\xd0\xbd\xc4\xac\x72\x2a\x4c\xcf\x45\xc8\x86\xe7\x22\x1b\x89\x01\x7a\x98\xcf\x99\xb6\x83\x01\x3a\xe0\xa1\x31\x1c\xf7\x41\xb8\x50\x95\x5d\x3f\x84\x44\x19\x1f\x84\xd6\xca\x0c\xc0\xa1\x04\x32\x79\x26\x0d\x64\x91\x67\xe5\x44\x50\xd6\x80\x35\xb0\xf5\xcd\xd0\xfa\x60\x44\x81\x8f\x13\x96\x89\x00\xcf\xd2\xb1\x70\xa9\x56\xfd\x74\x5a\x15\x69\xa6\x15\x9a\xc0\x33\x74\xa1\x5b\x62\x01\x3f\xff\xfc\xe8\xe8\xec\xc5\x23\x52\xf1\x00\x5d\xd8\xf7\xcf\xa7\x01\xfd\x42\x57\x5a\x53\xb9\xca\x44\x40\xdf\x6d\x74\xbd\xc0\xd2\x7a\x15\xac\x9b\xc6\x6d\xf8\x00\x97\xc1\x91\x5e\xf3\x39\x3b\x3a\x7b\x71\xbb\xd0\x11\x4e\x6f\xca\x3c\x77\x6a\x2c\x02\xfe\x8a\xd3\x4f\x94\xfc\x2b\x4e\xd7\x04\x7f\xb4\x01\xf7\x2f\xce\xc0\x37\x5e\x80\xaa\x94\x24\x03\x5e\xcf\x66\x0d\x3f\xff\x1f\xab\xcc\x3d\xee\x4a\xb6\x21\x81\xf9\xfc\xcd\x9a\xc9\x73\xeb\x40\x84\x80\x45\x19\x40\x19\x98\xed\x76\xbb\x3f\xcc\x7f\x02\x69\x19\xc0\xb4\x2a\xa0\x51\x03\xf8\x14\xf8\x9f\xf0\x69\x32\xa3\x48\xf8\xfa\x6b\xe8\x3b\x14\x23\x06\x70\xe7\x85\x5f\xb7\x6a\x6c\xcd\x9a\x4f\xf3\x37\x9b\xaf\xde\xe8\x54\x63\x28\x17\x4a\xa3\x4c\x18\x10\x66\x5f\xbf\x5e\x3a\x0d\x5c\x07\xf8\x01\xde\xbc\xf9\x89\xa2\xdb\x80\xd7\x88\x25\xec\xfe\x04\xa8\x3d\x02\x5e\xa9\x40\x5f\x72\xc5\xa4\x35\x78\x8f\x37\x1c\x16\x76\xfc\x69\x60\x26\xeb\x65\x1a\x85\xa1\xe4\xc3\x5c\x01\xdc\xe5\x70\x27\xb8\xef\x00\x21\x9b\xcd\xd0\xc8\xf9\x9c\xb2\x5c\xe6\x50\x04\x24\xe9\x41\x28\x83\x0e\xca\x4a\x6b\xb2\x92\xc3\xc0\x8a\x91\x54\x0e\x78\x79\xcd\xcc\x3a\x35\x50\x26\xed\x4a\x9b\x8d\xd0\xdd\x80\xfb\xea\x66\x5a\xdf\xa8\xfb\xce\x5b\xb3\x0c\xfb\xee\x21\x3a\x35\x46\xd9\x3d\xb0\x45\x5f\x19\x94\xc7\x85\x18\xe0\x79\xa5\xf5\x65\x94\xda\x02\x61\x0d\xe2\xda\x50\xee\xb9\x45\x1a\xa4\xce\xda\x90\xd2\x95\x5e\x9e\x1d\x9e\xf5\x40\xa2\xc6\x80\x31\x15\xe7\x56\x6b\x3b\x21\x4e\x31\xd5\xd6\x77\x26\x2b\x8b\x9c\x52\xb4\x0a\xa0\x3c\xf4\xc5\x08\x25\x28\x13\x2c\xd8\xca\xc1\xff\x7e\x03\x45\x7a\x79\x16\xcf\x08\x29\x81\xe7\xd0\x5c\x9b\xa9\x1c\xbe\x84\x81\xc3\x25\xcb\xb4\x6a\x60\xc8\xd2\xdc\x07\xd1\xaf\x81\xc2\x00\xfc\xd4\x07\x2c\xb2\xa0\xc1\x07\x5b\x36\x3c\x78\xf4\x66\x55\x76\x83\x2a\xd0\xdd\x4b\xe5\xd1\x8d\x55\x86\xb7\xd1\x2d\xed\x17\xa3\xdc\x77\xaf\x72\x4f\xea\xa6\x12\xc7\xa9\x54\x7e\x94\x8a\xf7\x95\xc3\x74\x51\x72\x4a\xe1\xc2\x2e\x03\xc0\x6c\x68\xe1\xd1\xdd\x64\xb0\x76\x47\x20\xf6\x30\x70\xe5\x9f\x95\x0d\x02\x60\x07\x76\x1e\xc1\xb3\x67\xd7\x57\x27\x35\x6c\x65\xc2\xcd\x93\x0c\xc0\xa1\x0f\xd6\x61\x66\x0d\xf0\x8b\x0d\xfb\x35\xa2\x88\x53\x83\x22\x29\xb0\xb0\xe6\x06\x8a\x18\x40\x42\x85\x4b\x12\x92\x5c\xd2\x83\xe4\x9d\xad\x9c\x11\x5a\x26\xdb\xb4\x27\x95\xa7\xaa\xc5\x35\x0e\x44\x36\xe5\x0e\x07\xca\x07\x37\x4d\x7a\x10\x5c\x85\xac\xc6\xd3\xaa\x2d\x85\x0b\xeb\xc6\xdc\x4c\x70\xc3\x77\xb9\x62\xac\xb1\x4c\x0c\x1e\xc2\x78\x93\xcb\x22\xb4\x7d\xf7\xd4\x4a\x8c\xd9\xeb\x59\x34\xb5\x21\xaa\xaf\x37\xa2\x08\x43\x26\x37\x61\x68\xe1\xd5\x9b\xbe\xf2\x99\x57\xbb\xa9\xae\xcc\x0e\x7c\xf8\x50\xdf\xee\x36\xb7\x2e\x91\xde\x10\x58\x3b\x54\x62\x2e\x2a\x1d\xfc\x47\x39\x94\xce\xdd\xee\xce\xb8\x4b\x76\xe9\x80\xc8\x32\x2c\xa9\x89\x82\x1f\xbf\xff\xfe\x3b\xa0\x12\x41\x31\x29\x64\xa1\xbc\xa7\x20\xa4\xd4\xe3\xac\xd6\x64\x49\xeb\x40\xfa\x58\x3b\x42\x56\x6e\xc7\x03\xcd\x87\xef\x63\x19\xf9\xa2\x74\x36\xd8\xbd\xad\x99\xf4\xe1\xab\xaf\xb6\x9f\xcc\xd9\x17\xa5\x75\xa1\x5e\xe8\x74\x9e\x6c\xcf\xd9\x17\xd7\x1d\xcb\x7e\xec\xa8\x8e\x2f\x8e\x7e\xdf\x3f\x39\x79\xbb\x7f\x72\x72\xf6\x3b\x25\xb3\xad\xc8\x04\x78\x41\x4e\x0d\x08\x9c\xd7\xff\x9f\x1e\xfd\x4e\x8b\xed\x36\x97\xc4\x1a\xb6\xe2\x5f\xfe\x0e\xf6\x0f\x0e\x8e\xce\x5f\x02\x9f\x34\x29\xbe\x95\xc3\xbd\x18\x63\x83\x59\x3f\xf5\x75\xd6\x4b\xdb\xdd\x7b\x4a\x01\x01\x86\x6c\xb3\x8e\x99\xcb\x9a\x0a\xe6\xf3\xbb\xeb\xea\xdd\xc8\xbb\xe6\xf2\x79\xa5\xf3\xa3\xa5\x7c\x6a\x05\xfd\xd7\xce\x6d\x25\x94\xba\xdb\xd3\xb3\x97\x47\x3d\x38\x36\x90\x57\xa1\x72\xb8\x0d\x85\x1d\x63\xdd\x73\x2b\x93\x5b\x57\x34\xd5\xb2\x0a\x5e\x49\x04\x9b\x03\x9a\xb1\x72\xd6\x14\x68\x02\x8c\x85\x53\xb5\x13\x3a\xcc\x63\x80\x6f\xaf\x18\x5e\x45\x77\x5e\xee\x5f\xbe\xba\x38\xde\x7b\xb4\x74\x95\xdf\xa2\x25\x9a\x9b\xd4\xfb\x30\x9f\x3f\x8a\x07\x79\x1c\x08\x5c\x65\x22\x74\x1b\x63\x01\xe7\xca\xa8\x00\xc1\x42\xdf\xda\xe0\x83\x13\x25\x1c\x9e\x5e\x82\xc7\x50\x95\x6d\x46\xa0\x43\x9c\x97\x4e\x8d\x95\xc6\x01\x4a\xe0\x9c\xaa\x37\x37\x18\x26\xd6\x8d\x80\x6a\x3c\xf0\x31\xa4\xbd\x94\x3e\xf6\xde\x03\xc7\x46\xbd\xbb\x0d\xbd\xaa\x45\xcb\x2f\xea\x89\x75\xb2\x6a\x45\x14\xc2\x08\x72\x77\xb0\x50\xaa\x6c\x04\x55\x09\x06\x27\xb5\x64\x8f\x81\x62\xd3\xc7\x90\x1b\x22\xc8\x61\xdd\x2a\xb0\x38\x0e\x5d\xa7\xbf\x96\xe7\x69\xcd\xf3\xb7\x9a\xe5\x92\x30\x69\x7c\x21\xfc\x9f\x24\x64\x80\x21\xf2\x22\x21\xcb\xfc\xeb\xac\x5e\xd3\x75\x29\x4c\x6e\x13\xd2\xd2\xb4\x79\x98\x75\x60\x12\x11\x43\xbb\x14\x2d\x86\xf2\xe9\x44\x88\x01\x79\x99\xc6\xb2\xf6\xaa\x55\x50\x5a\x05\x85\x1e\x06\x36\xf6\x76\xc1\x82\x13\x59\xec\x6f\xa4\x22\xac\x74\x69\xa6\xc9\x17\x87\x5d\x65\x3c\xf4\x31\xb7\x0e\x49\x2c\x35\x02\x23\x63\x27\x86\xee\x11\xef\x10\x25\x21\xa0\x91\x64\xb7\x89\x0a\x43\x20\x34\x4f\xc1\xc7\xde\x84\x4d\x86\x4a\x63\x04\xfa\xa2\x5d\x03\x2e\x1f\xc3\xde\x1e\x24\x49\x04\xbb\xb4\xd7\xcd\x62\x8d\xec\x7f\x08\x1a\xac\x32\x04\xde\xfa\x04\x63\x75\xc3\xcb\x33\xc1\x83\xab\x7c\x20\xab\x36\xde\xa1\x9b\x0d\xd0\xe0\x58\xc4\xcc\x40\x2b\x3e\x88\x6c\x04\xc2\x83\xb7\xd4\x27\xf9\x68\x8c\xd5\x16\x55\x79\xd0\x42\x49\x0a\x3e\xe8\x4f\x59\x67\x25\x36\x16\xfd\xe4\x76\x7d\x52\x5b\x4f\x08\x1c\xaa\x68\xe2\xc6\xb8\xb7\x10\x17\xd6\x21\xeb\x90\x2a\x1e\x72\x67\x8b\x15\xda\xd2\xd9\x0c\xbd\x27\x9f\x4c\x14\x75\xaa\x43\x55\xd6\xa0\x23\xfd\x59\xad\x86\x47\xf0\xc3\x7a\x26\xaf\xa8\x97\xce\x10\x04\x48\x31\x05\x6b\xf4\x94\x6e\x53\x62\x5d\x85\xa4\xcd\x3c\x4b\x2b\xef\x52\x6d\x33\xa1\x23\x1e\xc5\x7b\x8f\x99\x6c\x2e\x4b\x1d\x67\x5f\x78\xd4\xca\x90\x5f\xe1\x7c\xf7\xf0\x5e\x7a\x6f\xf3\x30\x11\xee\xa3\xe9\x33\x2d\x0a\x31\x6e\xa9\x59\x07\xd0\x50\xd6\x8a\xc0\xae\x03\x62\xd5\x2b\x4d\x58\x78\x76\x1d\x39\x95\x29\x84\x1f\x41\x21\xbd\x6c\xa3\x06\x6a\x39\xab\x5f\x0b\x6b\xae\x57\x72\x5d\xa1\x09\x8b\xef\x4b\xec\x1a\x05\x1e\x8a\x5d\x7d\x89\xcf\xe3\xc6\x3a\x70\xae\x0c\x8c\xaa\x3e\xd6\x96\x8b\x28\xaa\x3c\x42\xb4\x2c\x88\x52\x71\xa2\x45\xc7\x3c\x85\x92\x02\xee\x10\x12\xdf\xf9\x06\x9e\xd4\xeb\x3d\x78\xdc\x7d\xd2\xf9\x63\x77\x18\x42\xe9\x7b\x69\xba\x34\x5f\x75\x92\x3a\x39\x35\x23\x45\x5d\x14\x53\x6a\x51\x4c\xf7\x5a\xe2\x83\x31\x5e\x3c\xef\xf0\x7a\xe1\x41\x65\x50\xc6\x8a\x7f\x1e\x9e\xab\x97\x0f\x60\x8e\x38\xa6\x45\x36\xcd\x80\xc8\xd8\x6c\xc6\x29\x27\x1b\x84\xad\xee\x73\x91\x8d\xaa\xf2\xb9\xb6\xfd\x53\x4a\xa5\x49\x72\xef\xe3\xd0\xa2\x2a\x50\x1b\x3a\x46\x37\x5d\x1b\x9e\x29\xd3\x05\x4a\xc0\x8b\xd2\xd4\x8f\x52\xe2\x1c\x7d\x91\xaf\xb6\xad\xe9\x13\x46\xfd\x0a\xe9\x71\xa8\xdc\xde\xea\x5e\x73\xae\x9e\x8b\xb7\x96\xe8\xfe\x72\x9b\x77\x14\x32\x59\xdf\xf9\x33\x3b\xbd\x15\x46\x7f\x67\xb3\xb7\x2a\xe8\xe1\xfa\xbd\x3b\xf5\x94\x76\x62\xb4\x15\x92\x8c\x58\x3b\x21\x59\x2d\xa3\xeb\x95\xf3\x0f\x06\xb1\x7a\xae\xc5\x5f\x6f\x7d\x69\x13\x71\x7c\x64\x2d\x9d\x1d\x2b\x89\x2e\xed\xa5\x6f\xa5\x08\x22\x7d\x4b\xe5\xae\xa1\x5e\x06\x40\x2f\xb5\x15\x95\x68\xda\xba\xcf\x66\x04\xa5\xfa\x12\x35\x27\xde\x6f\xe0\xbe\x47\x27\x6f\x44\xc0\x7c\xde\x10\xc9\xf8\x16\x1d\x6b\xef\x1e\x09\x6b\xc0\xd8\x95\xfd\x86\x40\x64\x71\xaf\x35\xd5\xdd\x06\x6d\xe4\xb7\xc4\xe4\xc2\x36\x4c\x9e\xb6\x53\xdd\x5f\xc5\x74\xdd\x4a\xd3\x9d\x3f\x13\xd3\x2b\x8c\xfe\x4e\x4c\xaf\x0a\xfa\x87\x30\x5d\x5b\x39\xd6\x75\x23\x4a\x3f\xb4\xe1\x93\x30\x4d\x28\xea\x2d\x3e\x2d\xb6\x96\xf3\x55\x6f\xf5\x5b\x8d\x4e\x8e\x70\xf4\xf2\xe0\xf0\xe0\xe5\xc9\xdb\xfd\xf3\xe3\xbd\xe4\xbb\xe4\x16\xd0\xae\x1a\x85\x68\x88\x4b\x2c\xe8\x8d\xbe\x2d\x50\x56\x22\x61\x0d\x97\x14\x37\x9c\x12\xe6\x6a\x2e\xa5\xf1\xa0\x26\x88\x4d\xf3\x52\xc6\x6e\x96\x69\xae\x51\x42\xf3\x4c\x57\x31\x46\x93\xc6\x86\x3b\xf1\xdf\x5e\x5b\x5f\x56\x56\x7b\x4f\xbf\xfb\x71\x67\x7b\x79\x69\x77\x23\xe1\xee\x3a\xe1\xd3\x8d\x84\x4f\x23\x61\xb2\x59\x25\x1e\xec\x08\x4d\x34\x0b\xcf\xad\xe3\xf1\x9d\xe5\x06\xa9\x90\x63\x74\x41\x79\xe4\x25\xa2\xe3\x95\xd3\x1e\x36\x94\xc6\x28\x86\xb1\x62\xbc\x6e\xa5\xf4\xc9\x8d\xb5\xb5\xf7\xdf\x85\x3d\x57\x4a\xd2\xca\xdb\xcc\x0d\xbe\x1f\x83\x4c\x8c\xe3\x4a\x12\xcb\x33\xcd\x3f\xf3\x39\x63\xa1\x32\x28\xb9\x90\x05\x35\xe2\x39\x8d\x3e\xd7\xcd\x4c\xf3\x90\xc3\x4b\x2d\x4c\x3d\xb4\x21\x08\xed\x2d\x18\x44\x79\x4d\xd7\x8d\x0d\x5b\x77\x6c\x75\x55\xa0\x07\x02\x46\xfd\x08\x2d\xdb\x41\xec\x2a\xf7\x50\x3f\x2d\x66\x34\x7e\xd1\x8c\xd6\x3e\x45\x17\xb0\xf3\xef\x1f\x76\x36\x3d\x49\xdf\xc2\x9f\xf4\xa8\x5f\x03\x63\x8b\xe0\xa7\x5e\xdb\x01\x78\x45\x33\xc1\x04\x9b\xd9\x18\x90\xfa\x86\x30\x24\x92\x30\x74\xb6\x1a\x0c\xa1\x7d\x50\x5c\xea\x63\x9b\x57\xc5\x96\xcb\xc6\x4e\xd7\x96\x6b\xdb\xac\x03\xc6\x06\xec\x81\x08\xb6\x50\x19\xbf\xb6\x58\x9c\x2e\x33\x27\xfc\x10\xb4\xb5\xa5\x87\xca\x04\xa5\xdb\x9f\x0e\x95\x87\xaa\x5c\xef\xca\x37\x72\x59\x08\x7b\x88\x9f\xdb\x7c\x36\x44\x59\x45\x83\x2d\x47\xa5\xc3\xbe\xb5\xf1\xbd\x23\xb3\x45\x19\x5f\xd7\x37\xfd\xa2\x92\x30\x3f\xac\x02\x15\x16\x4a\x61\xf5\x99\x6f\x9f\xb2\xd9\x8c\x52\xe4\x7c\xbe\x36\x17\xdc\x79\x9f\xc5\xa3\x66\xfb\x93\xc5\xff\x03\x00\x00\xff\xff\xd7\x4e\x74\xd2\xa9\x1d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdf\x6f\x13\x49\x12\x7e\xef\xbf\xe2\x5b\x7b\x45\x6e\xb5\x8c\x0d\x27\x71\x27\x85\x05\x89\x03\x56\xe2\x56\x4b\x10\xd9\xbb\x7b\x40\x3c\xb4\xa7\x6b\x66\x7a\xdd\xd3\x3d\x74\x57\xdb\x31\xc1\xff\xfb\xa9\x66\xc6\x89\x83\x13\x03\xe2\x74\x6f\xf1\x74\x75\xfd\xfc\xea\xab\xea\x4c\x7f\x98\x2f\xac\x9f\x2f\x74\x6a\x50\xd0\x85\x52\x97\x97\xb0\x15\x66\xcf\x83\xaf\x6c\x3d\x3b\xa7\x32\x47\xcb\x9b\x37\x9a\xcb\xe6\x8d\x2e\x97\xba\xa6\x84\xed\x56\xb9\x50\xd7\x14\x51\x30\x7c\x30\x54\x24\xd6\x91\x73\x37\x4b\x0d\x26\xd6\x27\xd6\xce\x59\x5f\x23\x92\x41\xa3\x19\xa5\xf1\x28\x7b\x8d\x39\x6a\xb6\xc1\x23\x78\xfc\xf8\x97\x26\x24\xf6\xba\xa5\x9f\x26\xaa\xd4\x8c\xa7\xf3\x95\x8e\x73\x67\x17\xf3\x4d\x6e\xe7\xa5\xb3\xe4\xb9\x28\x29\xf2\xac\xa3\x16\xbf\xfc\x72\xf2\xf2\xec\xd7\x13\x71\xf0\x39\x45\x7e\x96\xfe\xb1\x61\x4a\x57\x9e\xca\x37\x5b\xd9\x52\x33\xa5\xd9\xe8\xe9\x5b\xea\x42\xb2\x1c\xe2\xa6\x3f\xc6\x27\x9c\x73\x14\xbf\xb6\x5b\xf5\xf2\xec\xd7\xbb\x8d\x2e\x69\xf3\xb9\xcd\x37\xd1\xae\x34\xd3\x6f\xb4\xf9\x46\xcb\xbf\xd1\xe6\xc0\xf0\x57\xa6\xef\xd9\xdb\x33\xa4\xb1\x02\xc8\x9d\x11\x0b\x78\x77\x79\x39\x6a\x4b\xff\x0c\xd6\x7f\xa1\x54\x93\xfb\x98\x60\xbb\x7d\x7f\x90\xf0\x2a\x44\x68\x66\x6a\x3b\x86\xf5\xb8\x7c\x38\x9b\x3d\xda\x3e\x86\x09\x0a\xd8\xe4\x16\xa3\x1b\x28\x36\x28\x3e\xe0\xdb\x6c\xf6\x26\x71\xef\x1e\x16\x91\xf4\x52\x01\x47\xc2\x7d\xb7\x73\xe2\xc7\xcb\xf1\xaf\xed\xfb\xdb\x03\x1f\x3d\x1a\xf0\x53\x69\xeb\xc8\x4c\x14\x04\xad\xef\xde\xed\xdd\x46\xe1\x18\x8f\xf0\xfe\xfd\x63\x70\x43\x1e\xc9\x11\x75\x78\xf8\x18\xe4\x12\x81\x2e\x2c\xcb\x8f\xca\x2a\x13\x3c\x1d\xad\x44\xa4\x36\xac\xbe\x0d\xc6\x92\xb9\xd2\x91\xf6\xd0\xce\xa9\xd8\xa2\x88\x15\x8e\xc2\xfa\x08\xfc\xd4\xe5\x25\x79\xb3\xdd\x2a\x35\x45\x19\x49\x33\x89\x75\xd6\xd6\x53\x44\x97\x9d\x93\x1c\x45\x62\xd5\x2e\x8d\x8d\x28\xba\x6b\x65\x21\xda\xda\xfa\xf9\xcc\x84\x72\x49\xf1\x33\xa0\xdf\x3c\x9c\x0f\x11\xcd\xfe\x4c\xc1\xef\x03\x7e\xf6\x82\xa2\x5d\x91\x99\x3d\x0f\xed\xc2\x7a\x32\xaf\x5a\x5d\xd3\x9b\xec\xdc\x79\x6f\x75\x07\x82\x03\x70\x3b\x8f\x22\xdd\xe5\x0a\xe6\x31\x04\x9e\x4b\x48\x7f\x9c\xbd\x38\x3b\x85\x21\x47\x4c\x52\x2a\x54\xc1\xb9\xb0\x16\x4d\x75\x0c\xb9\x1b\x62\x96\x2c\xeb\x8a\x29\xc2\x32\x6c\xc2\x42\x2f\xc9\xc0\x7a\x0e\x08\x39\xe2\xdf\xbf\xc3\x8a\x5f\x49\xf5\x77\xb4\x31\x28\x2a\x8c\x61\x2b\x5b\xe1\x07\xd4\x91\xf6\x32\xb3\x73\x83\xb8\x9c\x57\x89\xf5\x62\x80\x89\x02\xd2\x26\x31\xb5\x25\x3b\x24\x0e\xdd\xa8\xa3\xe8\xab\x99\xbb\x19\xdb\x96\xe2\x17\xa5\x12\xc5\x95\x2d\xe9\x2e\xb9\xbd\xf3\x76\x59\xa5\xd9\x45\x95\xc4\xdd\xb9\xa1\xd5\xdc\xd8\xb4\x9c\xeb\x8f\x39\xd2\x3c\x52\x0a\x39\x96\x54\x74\x3a\xf2\x43\x05\x50\xd9\x04\x9c\x1c\x17\xc3\x41\x8c\x10\xf5\xa8\x63\xf7\x21\x07\xd6\xc0\x03\x3c\x38\xc1\xd3\xa7\xd7\xa1\x8b\x1b\x21\x7b\xfe\xfc\xa6\x02\x22\x25\x0e\x91\xca\xe0\x51\xbc\x3d\x38\xbf\xbc\x2c\xa4\xef\xe8\x03\x66\x6f\x83\x23\x21\xad\x2a\x6a\xe9\x7a\x05\x0c\x60\x13\x23\x23\xc0\x8c\xa6\x36\xf8\xcf\x00\xa6\x80\x89\x0b\x75\x61\x04\x64\x71\x72\x8a\xc9\x9f\x21\x47\xaf\x9d\x99\xdc\x97\x33\x63\x93\x5e\x38\x2a\x1c\xd5\xba\xdc\x14\x91\x6a\x9b\x38\x6e\x26\xa7\xe0\x98\x49\x0d\x50\x13\x3f\xc8\x9b\xc1\xee\x7e\xc6\x75\xe4\xc3\x94\xdf\x2e\xf0\x59\x85\x2b\xab\xd4\x98\xbf\xbe\xc5\xa4\x13\x46\xb6\xeb\x1b\x20\xcd\x5e\x07\x43\x3d\xbf\x3d\xed\x0b\xe2\x45\xea\xde\x51\x22\x11\x45\x02\xeb\x43\x5d\xe7\x83\x14\xb6\xdb\xe3\x8c\x7c\xdc\xa3\x6b\x2d\xdf\x43\xba\x5f\x6d\xe3\x5b\xb9\xf7\x6f\x0f\xee\x22\xdf\xa9\x9a\xe2\xf5\xd9\x1f\x2f\x4f\xf1\xca\xa3\xca\x9c\x23\xdd\x47\x1b\x56\xc2\x07\x5a\xb2\x50\x85\xd8\x8e\x4c\x9b\x39\x59\x43\x08\x15\xc8\xaf\x6c\x0c\xbe\x25\xcf\x58\xe9\x68\x05\x27\x49\x4d\x55\x22\xc6\xcf\x17\x8a\x2e\xba\x10\x19\xe7\xcf\xce\xff\xf5\xf6\xd5\x93\x93\xbd\x50\xfe\x13\xe2\x92\xe2\x18\xc9\x70\x8e\xed\xf6\xa4\xbf\x58\x5c\x08\x27\xc5\xec\x7b\x2a\x1a\x93\x85\xa2\xb0\xde\x32\x38\x60\x11\x02\x27\x8e\xba\xc3\x8b\xd7\xe7\x48\xc4\xb9\xdb\xe1\x44\x2e\x15\x45\x17\xed\xca\x3a\xaa\xc9\xa0\x28\x84\xf9\x0b\x4f\xbc\x0e\x71\x09\x99\x0f\x28\x56\x98\x9f\xce\xe5\xcf\xd3\x8f\x28\x68\x74\xef\x78\xa2\x6f\x7a\xb1\xd3\xd7\xfb\x49\x03\x84\x77\x26\x5a\xed\xb5\x14\x9b\x03\x3a\x5b\x2e\x91\x3b\x78\x5a\x0f\x96\x13\x31\xcb\xe4\x16\x50\x49\x6c\xa6\x19\xc6\x8c\xea\x37\xbf\xeb\xa6\xd8\xe9\x7c\x3d\xe8\xfc\x7d\x50\xb9\x67\xcc\xf8\xd4\xea\xf4\x41\x8c\xd4\xc4\xbd\x2e\x31\xb2\xaf\x7f\x68\xfb\x41\x6e\x26\x83\xe5\x2e\x23\x3b\x99\x5d\x77\xaa\x29\xd6\x3d\x62\xe4\x54\x7a\x45\x30\x8b\xb5\xd6\xb5\x54\x59\x7b\x73\x15\x6a\x66\xeb\x2c\x5b\x4a\xa8\x43\xbf\x15\x70\x40\xd4\x65\x3f\x1b\x8d\x15\xac\xcc\xd4\x54\x90\xb9\xbb\x1c\xb3\x4f\x58\x50\x15\x22\x89\x59\x19\x22\x4b\x1f\xd6\x5e\xe2\xe8\x63\xe8\x2d\x51\x4f\x24\xb9\xc3\xda\x72\x03\x41\xf3\x06\xa9\x9f\x6b\x6a\xdd\x58\x47\x3d\xd0\xaf\x46\x3d\x0a\xf3\x13\x9e\x3c\xc1\x64\xd2\x83\xdd\x84\xeb\x35\x63\x40\xf6\xff\x09\x1a\x2a\x7b\x01\xef\x70\x43\xa9\x61\x55\x2a\x4a\x5d\x70\xcc\x89\x25\xab\x63\x75\x24\xb2\x9a\x3c\xad\x74\xcf\x0b\xf2\x25\xb1\x2e\x97\xd0\x09\x29\xc8\x8c\x4d\x7d\x32\x6e\xae\x37\x36\xc1\x69\x6b\xa4\xf9\xb0\xd8\xa8\xe9\x8d\xde\xb8\xda\x45\xee\x0f\x37\x5d\x48\x82\xc0\xc6\xf6\x29\x1e\x93\x7b\x87\x70\x1b\x22\xa9\xa9\xb8\x92\x50\xc5\xd0\xde\x90\xed\x62\x28\x29\x25\xa9\xc9\xda\xca\x96\xd3\xd8\x6e\x00\x9d\xf8\xaf\x06\x37\x12\x21\x35\x21\x3b\xd3\xe7\x38\xf8\x92\xa0\x61\xf4\x06\xc1\xbb\x8d\x44\xd3\xf5\xce\x90\xd0\x5a\x52\xf3\x9c\xe2\xdc\x85\x52\xbb\x1e\x8f\xfa\x63\xa2\xd2\x8c\xc1\xca\xb6\xb2\xd0\x89\x9c\xf5\x52\x57\xbc\x79\xf8\xe2\x8b\xf2\x29\x54\xbc\xd6\xf1\xab\xe5\x4b\xa7\x5b\xbd\xda\x49\xab\x29\xc8\x0b\x6b\xf5\xc0\x1e\x1a\xe2\x66\x55\xc6\xb6\x48\xea\xba\x73\xb2\x6f\x75\x5a\xa2\x35\xc9\xec\xba\x06\x83\x9d\x9b\x3f\xdb\xe0\xaf\xbf\x54\x2e\x93\xe7\xab\xdf\x7b\xea\x46\x07\xfe\x57\xea\x86\x20\xbe\x4f\x9b\x3a\xb6\x57\x70\xf6\x64\x0a\x6d\x5a\x81\x47\x25\x0d\x19\x3a\xf2\xa9\xb1\x15\x17\x02\xae\x18\x5c\xd1\x39\xed\x69\x58\x0a\x64\xdc\x7c\xe1\x96\xf4\xfd\xfe\x06\x21\x14\x44\xd0\x2e\x05\x78\x22\x73\x2d\x39\xeb\x0b\x3b\x5b\x05\x97\x5b\x4a\x90\x5d\x7b\x58\xc7\xcd\x8e\x56\x64\xd1\x1a\x96\xac\x52\xc8\x44\x18\x67\xb7\x94\xb7\x78\xf0\xf7\x47\x0f\x6e\x5b\xce\xef\xd0\x2f\x7e\x0c\xcb\x4f\xff\xf4\x48\x9b\xe4\x42\x8d\x64\x05\xe1\x6b\x1a\x99\x1e\xb4\xa2\xb8\xe1\x46\x44\xb8\x89\x21\xd7\x0d\x76\xfb\xd3\x5e\x55\xc6\x25\x6a\xa7\xe5\xd6\xba\x85\xee\xe0\x58\x4d\xe1\x03\xd3\x29\x34\x87\xd6\x96\xc5\xcd\x9c\xa1\x8c\x3a\x35\x70\x21\x74\x09\xd9\xb3\x75\x68\x75\xea\x37\xf4\x84\xdc\x1d\x62\xec\x56\x2d\x57\xc6\xbe\xff\x1f\x0e\xa9\x6c\xc8\xe4\x3e\x5d\x7b\x8f\x31\x44\x92\x99\x2d\xc4\x51\x86\xb6\xeb\x5f\x19\xb7\xbd\x2b\x27\x2a\x35\x99\x8d\x0c\x84\xa2\x18\xef\xfc\xfc\x57\x79\x7b\xb9\x44\xdb\xed\x01\xc6\x8f\x46\x83\x4f\x9f\x86\xfd\x74\xf7\x74\xfb\x6f\x00\x00\x00\xff\xff\x83\xb3\x5f\xea\x60\x11\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
