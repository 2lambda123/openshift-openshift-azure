{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {},
    "variables": {},
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2016-03-30",
            "location": "{{ .ContainerService.Location | js }}",
            "name": "vnet",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "{{ .ContainerService.Properties.NetworkProfile.VnetCIDR | js }}"
                    ]
                },
                "subnets": [
                    {
                        "name": "default",
                        "properties": {
                            "addressPrefix": "{{ (index .ContainerService.Properties.AgentPoolProfiles 0).SubnetCIDR | js }}"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2017-10-01",
            "location": "{{ .ContainerService.Location | js }}",
            "name": "ip-apiserver",
            "properties": {
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 15,
                "dnsSettings": {
                    "domainNameLabel": "{{ .Derived.MasterLBCNamePrefix .ContainerService | js }}"
                }
            },
            "sku": {
                "name": "Standard"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2017-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'ip-apiserver')]"
            ],
            "location": "{{ .ContainerService.Location | js }}",
            "name": "lb-apiserver",
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "backend"
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "frontend",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'ip-apiserver')]"
                            }
                        }
                    }
                ],
                "inboundNatPools": [],
                "inboundNatRules": [],
                "loadBalancingRules": [
                    {
                        "name": "port-443",
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'lb-apiserver'), '/backendAddressPools/backend')]"
                            },
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'lb-apiserver'), '/frontendIPConfigurations/frontend')]"
                            },
                            "frontendPort": 443,
                            "idleTimeoutInMinutes": 15,
                            "loadDistribution": "Default",
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'lb-apiserver'), '/probes/port-443')]"
                            },
                            "protocol": "Tcp"
                        }
                    }
                ],
                "outboundNatRules": [],
                "probes": [
                    {
                        "name": "port-443",
                        "properties": {
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "port": 443,
                            "protocol": "Tcp"
                        }
                    }
                ]
            },
            "sku": {
                "name": "Standard"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2015-06-15",
            "location": "{{ .ContainerService.Location | js }}",
            "name": "{{ .Config.RegistryStorageAccount | js }}",
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2015-06-15",
            "location": "{{ .ContainerService.Location | js }}",
            "name": "{{ .Config.ConfigStorageAccount | js }}",
            "properties": {
                "accountType": "Standard_LRS"
            },
            "tags": {
                "type": "config"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2016-03-30",
            "location": "{{ $.ContainerService.Location | js }}",
            "name": "nsg-master",
            "properties": {
                "securityRules": [
                    {
                        "name": "allow_ssh",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow SSH traffic",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22-22",
                            "direction": "Inbound",
                            "priority": 101,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allow_https",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow HTTPS traffic",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443-443",
                            "direction": "Inbound",
                            "priority": 102,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        }
{{- if not IsUpgrade }},
{{- /* we don't specify nsg-worker on upgrade because we don't want to */}}
{{- /* overwrite the securityRules that the cloud controller put there */}}
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2016-03-30",
            "location": "{{ $.ContainerService.Location | js }}",
            "name": "nsg-worker",
            "properties": {
                "securityRules": []
            }
        }
{{- end }}
{{- range $app := .ContainerService.Properties.AgentPoolProfiles }},
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "apiVersion": "2017-12-01",
            "location": "{{ $.ContainerService.Location | js }}",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'vnet')]"
{{- if eq $app.Role "master" }},
                "[resourceId('Microsoft.Network/loadBalancers', 'lb-apiserver')]"
{{- end }}
{{- if not IsUpgrade }},
{{- if eq $app.Role "master" }}
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-master')]"
{{- else }}
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-worker')]"
{{- end }}
{{- end }}
            ],
            "name": "ss-{{ $app.Name | js }}",
            "sku": {
                "tier": "Standard",
                "capacity": {{ $app.Count | js }},
                "name": "{{ $app.VMSize | js }}"
            },
{{- if eq $.Extra.TestConfig.ImageResourceName "" }}
            "plan": {
                "name": "{{ $.Config.ImageSKU | js }}",
                "publisher": "{{ $.Config.ImagePublisher | js }}",
                "product": "{{ $.Config.ImageOffer | js }}"
            },
{{- end }}
            "properties": {
                "overprovision": false,
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "osProfile": {
                        "adminUsername": "cloud-user",
                        "computerNamePrefix": "{{ $app.Name | js }}-",
                        "linuxConfiguration": {
                            "disablePasswordAuthentication": true,
                            "ssh": {
                                "publicKeys": [
                                    {
                                        "keyData": "{{ SSHPublicKeyAsString $.Config.SSHKey.PublicKey | js }}",
                                        "path": "/home/cloud-user/.ssh/authorized_keys"
                                    }
                                ]
                            }
                        }
                    },
                    "storageProfile": {
                        "imageReference": {
{{- if eq $.Extra.TestConfig.ImageResourceName "" }}
                            "offer": "{{ $.Config.ImageOffer | js }}",
                            "publisher": "{{ $.Config.ImagePublisher | js }}",
                            "sku": "{{ $.Config.ImageSKU | js }}",
                            "version": "{{ $.Config.ImageVersion | js }}"
{{- else }}
                            "id": "[resourceId('{{ $.Extra.TestConfig.ImageResourceGroup | js }}', 'Microsoft.Compute/images', '{{ $.Extra.TestConfig.ImageResourceName | js }}')]"
{{- end }}
                        },
                        "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "managedDisk": {
                                "storageAccountType": "Premium_LRS"
                            }
                        }
{{- if eq $app.Role "master" }},
                        "dataDisks": [
                            {
                                "diskSizeGB": 32,
                                "createOption": "Empty",
                                "lun": 0
                            }
                        ]
{{- end }}
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "nic",
                                "properties": {
                                    "primary": true,
                                    "enableIPForwarding": true,
                                    "networkSecurityGroup": {
{{- if eq $app.Role "master" }}
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-master')]"
{{- else }}
                                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-worker')]"
{{- end }}
                                    },
                                    "ipConfigurations": [
                                        {
                                            "name": "ipconfig",
                                            "properties": {
                                                "primary": true,
                                                "subnet": {
                                                    "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'vnet'), '/subnets/default')]"
                                                }
{{- if eq $app.Role "master" }},
                                                "publicIpAddressConfiguration": {
                                                    "name": "ip",
                                                    "properties": {
                                                        "idleTimeoutInMinutes": 15
                                                    }
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'lb-apiserver'), '/backendAddressPools/backend')]"
                                                    }
                                                ]
{{- end }}
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "cse",
                                "properties": {
                                    "autoUpgradeMinorVersion": true,
                                    "protectedSettings": {
                                        "script": "{{ Base64Encode (Startup $app.Role ) | js }}"
                                    },
                                    "publisher": "Microsoft.Azure.Extensions",
                                    "settings": {},
                                    "type": "CustomScript",
                                    "typeHandlerVersion": "2.0"
                                }
                            }
                        ]
                    }
                }
            }
        }
{{- end }}
    ],
    "outputs": {}
}
