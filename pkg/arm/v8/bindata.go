// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x93\x13\x37\x12\xfe\x1c\xfd\x8a\xce\x78\x13\x5e\x82\x66\x76\x49\x72\xa4\x9c\x98\xaa\x65\x31\x1c\xc7\x82\x7d\x5e\xb8\xd4\x15\xa1\x28\x79\xd4\x33\x16\xd6\x48\x13\x49\xe3\x5d\xc7\xf8\xbf\x5f\x49\x33\x7e\xf7\x1a\x36\x84\xfb\x10\x3e\x2c\x3b\x52\xab\xbb\xd5\x7a\xf4\x74\xb7\xb6\xf5\x75\x32\x14\x2a\x19\x32\x3b\x02\x8a\x57\x84\xb4\xe0\x89\x36\xe0\xd0\x3a\xa1\xf2\x36\x48\x9d\x03\x53\x1c\xb8\xd1\x25\x30\x29\xc1\x19\x96\x65\x22\x05\x37\x62\x0e\x2e\x75\x25\x39\x18\x5d\x39\x84\x89\x60\xe0\x46\x08\x05\xb3\x0e\x0d\x74\xcf\x1f\x91\x16\x0c\xba\x17\xbd\xd7\x83\xb3\xee\xd3\x41\xef\x75\xbf\x13\x4d\x75\x65\xa8\x41\xab\x2b\x93\x22\xcd\x8d\xae\xca\x88\xb4\xa0\x77\xf1\xee\xc9\xbf\x1f\xbf\xec\x44\xba\x44\x65\x47\x22\x73\xf1\xd1\xc6\xca\x58\x5b\xc6\x71\x12\xa7\x52\x57\x3c\x22\x2d\xd2\x02\x51\x3a\x36\x94\x68\x81\x3e\x83\x67\x2f\xfb\xaf\x5f\x01\xb5\x70\x74\x9b\x8b\x1c\xbe\xb3\x23\x6d\x1c\x44\x47\x8d\xde\x08\x3e\x80\x63\x42\x02\x3d\xb9\x03\xf4\x3d\x9c\xf7\x9e\x02\xa5\x52\xe7\xb4\x34\x98\x89\x2b\x88\x9e\xbf\x7e\xd4\x05\x2f\x0a\x8f\x07\xbd\x7e\x3b\xfa\x3c\xfd\x5e\x07\x21\xb3\x19\x88\x0c\xe2\x33\xad\x32\x91\xc7\x17\x98\x56\x46\xb8\x69\x9f\xb9\x74\xd4\x67\xe9\x98\xe5\x68\x61\x3e\x27\x52\xe7\x39\x1a\xa0\xae\x09\x1c\xb5\x8e\x19\x57\x95\xb1\x1d\x41\x24\x94\x75\x4c\x4a\xa1\x72\x30\xc8\xc1\x87\x3c\xe5\x0a\xd2\xa0\xb3\x32\xcc\x09\xad\x40\x2b\x38\xba\x3d\xd2\xd6\x29\x56\xe0\x9d\x88\xa4\xcc\xc1\xc3\x64\xc2\x4c\x22\xc5\x30\x99\x56\x45\x92\x4a\x81\xca\xd1\x14\x8d\x8b\x4b\x2c\xe0\x97\x5f\x6e\x75\x7b\x4f\x6e\x79\x17\xcf\xd0\xb8\x53\xfb\x68\xea\xd0\x2e\x7d\xf5\x63\x22\x13\x29\x73\x68\xe3\xc6\xd7\x01\x96\xda\x0a\xa7\xcd\x34\x4c\xc3\x07\xb8\x70\xc6\xfb\x35\x9f\x93\x6e\xef\xc9\xf5\x46\xc7\x38\xdd\xb6\xd9\x37\x62\xc2\x1c\x3e\xc7\xe9\x0d\x2d\x3f\xc7\xe9\x8e\xe1\x16\xbc\xea\x3d\xee\xb5\x81\xa3\x44\x87\x01\x81\x99\x96\x52\x5f\x7a\x19\x8b\x69\x08\x11\xcb\x3c\x24\x3d\x7c\x53\x59\xf9\x28\x5b\x60\x06\xc1\x54\x0a\x2e\x85\x1b\x01\x83\x49\x01\xa2\x60\x39\xd6\xdf\x63\x91\x8e\xc3\x39\xc4\x06\x4b\x0d\x43\x36\x46\x0e\x42\xd5\xbb\x84\x04\x5d\xea\xb7\x18\x26\x6d\xcc\x93\x2d\xf1\xc5\x56\xdf\x98\x11\x4a\xfa\x80\x5a\x34\x13\x34\xd4\x94\x85\x7d\x4b\xfc\x21\x75\x06\xc8\xe1\x9f\xcc\x41\x57\x39\x34\xa5\x11\x16\xe1\x5c\xa8\xea\x0a\x1e\xc0\x45\x10\x86\xdb\x83\xfe\x0b\x7b\x87\x0c\x99\xc5\xca\xc8\xce\xc8\xb9\xd2\xb6\x93\x24\xe5\x2a\x36\xc8\x47\xcc\xc5\xa9\x2e\x92\x54\x2b\x87\xca\x25\x5c\x58\x97\x78\x6b\x49\x6d\x2b\x79\x90\x3c\xa8\x15\x25\x47\x5e\x05\x33\xe9\x28\xd1\x96\xe4\x65\x3e\xc6\x69\x27\x13\x12\xdb\x49\x12\xf6\x51\x8e\x45\x62\xca\x82\xe6\x65\x9e\x0c\xfa\x2f\xe8\xd3\xfe\x53\xfa\xbc\xfb\x5f\x5a\x5b\xa1\x06\x25\x32\x8b\xc4\x5a\x99\x32\x0f\xa0\x4e\x58\x65\x46\xb6\x48\x52\x96\x34\x52\x15\x96\xfe\x90\x83\x54\x38\xf6\x5a\xf2\x00\x06\x57\xa2\xde\xa1\x03\xc0\x21\xa8\xfc\x3d\xe4\x9d\x29\x5a\xb2\x1d\x52\xbc\x72\x86\xd9\x9b\x45\x96\x42\x37\xac\xfa\x12\x21\xae\xfd\xf9\x3b\x46\x5a\x5b\xa4\xdf\xc7\x27\x27\xfb\x62\xdd\x2b\x51\x5d\x78\xd6\x86\x33\xad\x1c\x13\x0a\x0d\xf4\x25\x73\x99\x36\x05\xf8\x45\x5f\x06\xcd\x98\x78\xdd\x7f\x8f\x60\xb3\x3f\x2a\x83\xa9\x36\xd8\x84\x76\xf9\xbd\x13\xb3\xb2\xc9\x1d\x71\x21\x52\xa3\xad\xce\xea\xd8\x4d\xab\x22\xb0\x51\xb2\x5a\xb9\x6e\x21\x2f\xf3\x74\x84\xe9\xb8\xa3\x74\x60\xcd\x4f\x4e\x3b\xa7\x83\x9e\x67\xd1\x90\xbb\xa0\x2a\xb9\x67\x66\x78\x33\x9b\x35\x2c\x6c\xff\xa5\x85\xfa\x48\x92\x8b\xee\x41\x04\xf3\xf9\xdb\x9d\x44\x95\x69\x03\xcc\x39\x2c\x4a\x07\x42\xc1\xec\x24\x8e\x7f\x9c\xff\x0c\x5c\x13\x80\x69\x55\x40\xe3\x06\xd0\x29\xd0\xdf\xe1\x66\x36\x83\x49\xf8\xf6\x5b\x18\x1a\x64\x63\x02\x70\x70\xc3\x6f\x16\x6e\x1c\xcd\x9a\xdf\xe6\x6f\xf7\x6f\xbd\xf1\xa9\xce\xbc\x19\x13\x12\x79\x44\xc0\x67\xfa\x37\x6f\xd6\x56\x03\x95\x0e\x7e\x84\xb7\x6f\x7f\xf6\x19\x49\x81\x95\x88\x25\x9c\xfc\x0c\x28\x2d\x02\x5e\x09\xe7\x3f\x32\x41\xb8\x56\xf8\x91\xd3\x30\x58\xe8\xc9\xcd\x4a\x00\x1f\xbd\x54\x22\x53\x3e\xe7\x11\x53\x00\x35\x19\x1c\x2c\x09\x0e\x41\x75\x36\x43\xc5\xe7\x73\x72\x38\xd7\x86\x6a\x0e\x52\x83\x6c\x2d\xe5\x0a\x07\xc2\x2e\xf3\xa7\xd3\xa0\x2b\x03\xff\x79\x51\xe7\x5a\x4b\xc2\x1a\xc6\x39\x70\x9d\x8e\xd1\x10\x22\x32\xf8\x1a\x72\x83\xe5\xca\xa1\x7a\xaa\x4e\xba\x99\x75\x6c\x58\x87\x94\x00\xd8\xa9\x75\x58\xa4\x4e\x82\x75\xba\x6c\x74\xd0\xb0\xef\xaa\x8c\x9d\x28\xd0\x7c\x54\xca\x33\x8c\x48\xf1\x3a\xb9\xb5\xf9\x62\x9c\xd9\xf8\x2a\xb3\x40\x33\x48\x38\x4e\x3c\x4d\x8d\xeb\xeb\x96\x2c\x4b\xda\x92\x19\x77\x42\x00\x30\x1d\x69\xb8\x75\x58\x0c\x76\xf6\x08\x5e\x3d\xe4\xa6\xfc\xbd\xd2\x8e\x01\x1c\xc3\xf1\x2d\x78\xf8\x70\xb5\x75\xef\x86\xae\x94\xdb\x5e\x49\x00\x0c\x5a\xa7\xfd\xcd\x57\x40\x07\x7b\xe6\xeb\x02\xcd\x6b\xaa\x87\x12\xce\xb0\xd0\x2a\x7e\x6f\xb5\x5a\x15\x67\x04\x20\xf2\x85\x31\x37\x62\x82\x26\x6a\x43\xf4\x5e\x57\x46\x31\xc9\xa3\x7b\x7e\x8e\x0b\xeb\x49\x85\x4a\xcc\x59\x3a\xa5\x06\x73\x61\x9d\x99\x46\x6d\x70\xa6\x42\x52\x97\x64\x9b\xb1\x64\xc6\xed\x06\x73\xbf\xc0\xd6\xd9\x65\x82\x90\x26\x32\x65\x25\xa5\x67\x80\xc5\xad\x7f\x16\xf0\x13\xbf\xd4\x1c\xc3\x3d\x7f\x18\x42\xad\xbc\xd4\xb7\x7b\x51\x84\x2e\xe5\xfb\x30\xb4\x3c\xd5\xed\xb3\xb2\xa9\x15\x27\x89\xac\xd4\x31\x7c\xf8\x50\xef\xee\xba\x63\x5d\x13\xdd\x32\x58\x1f\x28\xc7\x8c\x55\xd2\xd9\x4f\x3a\x50\xbf\xee\xfa\xe3\x0c\xb3\x3e\x2e\x9e\x3b\xb9\x0d\xbc\xe9\xd2\xf2\xde\x4f\x3f\xfc\xf0\x43\x60\xce\xaf\x4a\xa3\x9d\xee\x1c\xcd\xb8\x75\xdf\x7c\x73\xef\xee\x9c\x7c\x55\x6a\xe3\xea\x81\x56\xeb\xee\xbd\x39\xf9\x6a\xd5\xda\x9c\x86\xd6\xeb\xd9\xa0\xfb\xeb\xe9\xf9\xf9\xbb\xd3\xf3\xf3\xde\xaf\x40\x4b\x38\x0a\x4a\x80\x16\xfe\x74\x1c\x02\xa5\xf5\xff\x2f\xbb\xbf\xfa\xc1\xc5\x34\xe5\x5e\x35\x1c\x85\x9f\xf4\x3d\x9c\x9e\x9d\x75\xfb\xaf\x80\x5e\x36\xac\xb6\xb0\x43\x2d\x9b\x60\x03\x3e\x3b\xb5\x35\x75\x25\x8b\x59\x4f\x2b\x97\x81\x23\x3d\x12\x3c\x93\x28\x7f\xaa\x97\x8c\xe5\xa8\x5c\x68\x3e\x15\xba\x4b\x6d\xc6\x50\x39\x21\x85\x13\x68\x21\xd7\x81\x8b\x9d\x06\xc3\x52\xf4\x6c\xc8\x85\xa7\x9d\xd8\x77\x6e\xd9\x72\xb1\xa9\x94\x85\x21\x66\xda\x20\x70\x65\x3d\x17\x8d\x95\xbe\x54\xe0\x74\x60\xaf\xda\x12\x02\x2a\x0e\x55\x59\xd7\xfe\x9e\xbf\xa7\x60\x43\xaa\x21\x97\x23\x21\x31\x50\xfb\x92\x5e\x81\xf2\x3b\xd0\xe9\x40\x14\x05\x7a\xe7\x7a\x45\xee\x9f\x40\xe6\x1e\xc8\x7e\x8f\xbb\x58\xbe\xa8\xa5\x60\x3e\x3f\x9c\x19\x0f\xdf\x88\x95\x96\xcf\x4b\x7e\x9f\x6c\xe5\xa6\x39\xf0\x1f\xc7\xd7\x25\x41\x8b\x0e\xbe\xbb\x22\x78\x15\xf0\x74\x71\x7a\xf1\x7a\xf0\xac\x73\x6b\xcd\xf8\x8b\xe0\x7b\x63\xbb\x9e\x87\xf9\xfc\x56\x58\x48\xaf\x16\x54\xe1\x9b\x3a\x4a\x4b\x23\x26\x42\x62\x8e\x1c\x28\xf5\x09\x90\x2e\x40\xe4\xcf\x11\xe8\x04\x92\x76\xe2\x7f\x6d\xff\x01\x14\x1b\x6b\x87\x77\xda\xc4\x8c\x54\xca\x1b\xac\x57\x10\x52\x17\x06\x34\x65\xd4\x99\xca\x3a\x8f\xe6\xbe\x50\x30\xae\x86\x58\x03\xdd\x7a\xb0\x55\x16\x41\xea\x94\x49\x60\xa5\x68\x6a\x6a\x62\xbd\x73\x02\xa8\x41\x88\x6c\xeb\x36\xdc\xad\xc7\xdb\x70\x27\xbe\xdb\xfa\xed\x64\x51\xf1\xad\x65\xf6\x56\x54\x73\x98\x36\x22\x17\x2a\xa9\x0f\x33\x59\xbe\x9a\xd0\x7a\x20\x5e\x19\xff\x7c\x1b\xfe\x8a\x84\x1f\x7f\xbd\x56\xcb\xd5\xe7\x2b\x35\x5a\xbb\x24\xa8\x49\x1a\x3d\x64\x36\xa3\x1e\x8c\x0a\xe1\x28\x7e\xc4\xd2\x71\x55\x3e\x92\x7a\xf8\xd2\xdf\xdd\x28\xfa\xe8\x9b\xcb\x92\x86\x3c\xfb\x4e\xd0\x4c\x77\xaa\x2b\xd2\x02\xeb\xfc\x8d\x87\x1c\x5d\xe0\x91\x61\xb0\x12\x0a\xad\x41\xb6\xc9\xd6\xc9\x5d\xe2\xaf\x83\xf7\xe3\xb1\x30\x9d\xcd\xb9\x66\x5d\x31\xe6\xc2\xc0\xd1\x9a\xdc\x9f\x66\x91\xae\x4b\x79\xbd\xe7\xcf\x24\x92\x0d\x45\x5f\x92\x4b\x36\x0d\xfd\x75\x74\x72\xd0\x4f\xae\x2f\x95\xd4\x8c\xfb\x20\xd6\x87\x10\x6d\xf2\xc7\x2e\x65\xfc\x46\x20\xd0\xc6\xce\xfd\x6b\xef\x0e\xed\x13\x0e\x6f\x97\xa5\xd1\x13\xc1\xd1\x24\xed\xe4\x1d\x67\x8e\x25\xef\x74\xb5\x54\xbd\x0e\x80\x76\xa2\x2b\xcf\x4d\x7e\xea\x63\x31\xf3\x50\xaa\x37\x51\x6b\xa2\xc3\x06\xee\x1d\xbf\x72\xeb\x06\xcc\xe7\x8d\x10\x0f\x4f\xbc\xa1\x58\xef\x78\x63\x0d\x18\x63\x3e\x6c\x04\x58\x78\x3b\xeb\x2c\x42\x75\x38\xa0\x8d\xfd\x85\xb0\x3f\xc2\xc5\x35\xb9\xbf\x28\x66\xfe\x2c\xa6\x6b\xde\xf7\x7b\xfe\x4c\x4c\x6f\x28\xfa\x92\x98\xde\x34\xf4\x7f\xc2\x74\x1d\xe5\xf0\xec\xa9\x58\x69\x47\xda\xdd\x08\xd3\x1e\x45\xed\xe5\x6f\xcb\xa9\x75\xbe\x6a\x6f\x7e\xd5\xe8\xa4\x08\xdd\x57\x67\x8f\xcf\x5e\x9d\xbf\x3b\xed\x3f\xeb\x44\xdf\x47\xd7\x80\x76\x33\x28\x5e\xc6\x6b\x09\x3d\x40\xe3\xef\x02\x28\x1b\x37\x61\x07\x97\xfe\xde\x50\x4f\x98\x9b\x5c\xaa\xf0\xb2\x11\x08\x55\xda\x1a\x63\x37\xc3\x42\x09\x27\x98\xa4\xcd\x13\x30\x44\x4d\x0c\x8f\xc3\xbf\xe5\x03\xcb\xc6\x68\xfb\xfe\xf7\x3f\x1d\xdf\x5b\x1f\x3a\xd9\x2b\x78\xb2\x2b\x78\x7f\xaf\xe0\xfd\x20\x18\xed\x77\x89\x3a\x3d\x46\x15\xc2\x42\x33\x6d\x68\x68\x2f\xb6\x44\x19\x9f\xa0\x71\xc2\x22\x2d\x11\x0d\xad\x8c\xb4\xb0\x27\x35\x06\x33\x84\x14\x93\xdd\x28\x25\x77\xb7\xc6\x76\x1e\x08\x96\xf1\xdc\x48\x49\x1b\x2d\xc9\x96\xde\x4f\x41\x26\x86\xfa\x38\x0a\xe9\xd9\x17\xdc\xf3\x39\x21\xae\x52\xc8\x29\xe3\x05\x94\x46\x67\xbe\xd6\x5e\x15\x33\xa9\x56\xce\x68\x49\x4b\xc9\x3c\xf6\x5b\xbe\x50\x67\xd2\x6a\x50\x88\x7c\x25\x17\x87\xba\x2a\x9e\x68\x59\x15\x68\xc1\x03\x23\x3c\x42\x20\x5f\x54\xfe\xbe\x09\xab\x3b\xea\xd4\xd7\xfb\xbe\x29\x68\x52\x2e\x2d\xe0\xf8\xc1\x8f\xc7\xbe\xe7\x59\x6e\xa7\xa1\xeb\x6b\xf4\x7b\x3f\xea\x26\x38\x94\x08\x76\x6a\xa5\xce\xc1\x0a\x95\x86\x46\xa2\x60\x8a\xe5\x08\xe8\xeb\x06\x37\xf2\x22\x6e\x64\x74\x95\x8f\x60\xd1\x47\x93\x55\xeb\xdb\x34\xd3\x0b\x2d\xcb\xf6\x78\xeb\x25\x62\x7b\xda\xf3\x2a\xba\x50\xa2\x54\x25\xe4\xa8\x70\xc2\x02\x83\x85\xab\xef\x58\x3a\x5e\xd3\x50\xa9\x82\xd9\x31\x14\xdc\xf2\x85\x02\x60\x7f\x58\x4c\xb7\x3e\x0b\xad\xf8\x1e\x07\xea\x37\xc4\x3f\xbd\xbc\x6e\xee\x6f\xb6\x9a\xb4\x40\x69\x87\x6d\x60\x4e\x17\x22\xa5\x2b\x40\x84\x6e\x2d\x35\xcc\x8e\x40\x6a\x5d\x5a\xa8\x94\x13\x72\xf1\x07\x47\x61\xa1\x2a\x77\x5d\xdf\xab\x65\x69\xec\xaf\xf8\x23\x9d\x4d\x47\xc8\xab\x80\x87\x75\xd2\x31\x38\xd4\xda\xf9\xe2\x3f\xd5\x45\x19\x1e\xcc\xf6\xbd\x28\x46\xc4\x8e\x2a\xe7\xf3\xa6\x67\xe8\x7a\xcd\x77\xf7\xc9\x6c\xe6\x33\xc0\x7c\xbe\x13\xcc\x83\xfb\x59\x3e\x55\x2c\x9f\xec\xfe\x17\x00\x00\xff\xff\x72\x0b\x37\xc0\xe0\x1d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5f\x6f\x1c\xb7\x11\x7f\xe7\xa7\x98\x9c\x0c\x2b\x46\xc2\x5d\xa9\x85\x2b\x40\x8e\x0c\xb8\xae\x92\xa6\xae\x2b\x41\xea\x1f\x14\x82\x1e\x78\xe4\xec\x2e\x73\x5c\x72\x3d\x9c\x3d\x69\x7d\xbe\xef\x5e\x90\x7b\x27\x5d\x75\xf2\x39\x4a\x90\x97\xbc\x1d\xc5\xf9\xfb\xe3\xcc\x6f\x66\xb5\xf7\x55\x39\xb5\xbe\x9c\xaa\xd8\x80\xc4\x5b\x21\x16\x0b\xb0\x15\x14\x6f\x83\xaf\x6c\x5d\x5c\xa2\xee\xc9\xf2\x70\xae\x58\x37\xe7\x4a\xcf\x54\x8d\x11\x96\x4b\xe1\x42\x5d\x23\x81\x64\xf0\xc1\xa0\x8c\xac\x88\xfb\xae\x88\x0d\x4c\xac\x8f\xac\x9c\xb3\xbe\x06\x42\x03\x8d\x62\xd0\xc6\x83\xce\x16\x7b\x52\x6c\x83\x87\xe0\xe1\xd9\xd7\x4d\x88\xec\x55\x8b\x2f\x26\x42\x2b\x86\xd7\xe5\x5c\x51\xe9\xec\xb4\x1c\xfa\xb6\xd4\xce\xa2\x67\xa9\x91\xb8\xe8\xb0\x85\xef\xbe\xdb\x3f\x3d\xfb\x7e\x3f\x05\xf8\x16\x89\xdf\xc4\x3f\x0f\x8c\xf1\x2e\xd2\xf4\x37\x5b\x59\xad\x18\x63\xb1\x8a\xf4\x02\xbb\x10\x2d\x07\x1a\xf2\x35\x7c\x82\x4b\xa6\x14\xd7\x72\x29\x4e\xcf\xbe\xff\xbc\xd3\x19\x0e\x0f\x7d\x9e\x93\x9d\x2b\xc6\x77\x38\x3c\xd1\xf3\x3b\x1c\xb6\x1c\xef\xc1\x3f\xcf\xfe\x72\x76\x0c\x06\x1d\x32\x02\x37\x08\x55\x70\x2e\xdc\x24\x99\x88\x3a\x43\xa4\x2a\x46\x02\xe5\x1c\x68\xd7\x47\x46\x8a\xa0\x08\x81\x7a\x0f\x37\x96\x1b\x50\x30\x6f\xc1\xb6\xaa\xc6\xf1\x3c\xb3\x7a\x96\xdf\xa1\x20\xec\x02\x4c\xd5\x0c\x0d\x58\x3f\x66\x09\x25\xb2\x4e\x29\xe6\xcb\x58\x98\xf2\x81\xf8\x3a\xd5\x2b\x6a\xd0\xc9\x23\x19\x91\xe6\x48\x92\xba\x36\x5e\x8b\xf4\x48\x27\x17\x68\xe0\xaf\x8a\xe1\xd4\x33\x52\x47\x36\x22\xfc\xdd\xfa\xfe\x16\x8e\xe0\x32\x0b\xc3\xd7\x17\xe7\xef\xe3\x0b\x31\x55\x11\x7b\x72\x27\x0d\x73\x17\x8f\xcb\x52\x1b\x5f\x10\x9a\x46\x71\xa1\x43\x5b\xea\xe0\x19\x3d\x97\xc6\x46\x2e\x93\xb7\x72\xf4\x55\x1e\x95\x47\xa3\xa1\xf2\x59\x32\xa1\x48\x37\x65\x88\xa2\xee\xea\x19\x0e\x27\x95\x75\x78\x5c\x96\x39\x8f\x6e\x66\x4b\xea\x5a\x59\x77\x75\x79\x71\xfe\x5e\xfe\x70\xfe\x83\x7c\x77\xfa\x5f\x39\x7a\x91\x84\x0e\x55\x44\x11\xa3\xd3\x2a\x15\xd0\x49\xd6\xa2\x26\xb6\xa5\x56\xe5\x4a\xaa\xc7\x2e\x3d\x72\x96\xca\xcf\x3e\x4a\xee\xa8\xc1\x7b\xd1\x14\xd0\x8e\xc2\x11\xe8\xd5\xd4\xa1\x39\x19\x30\x8a\x87\x90\xe2\x2d\x93\x8a\x4f\x43\x56\xc2\x69\xd6\xfa\x2d\x20\x1e\xe3\xf9\x3d\x22\x1d\x22\xca\x3f\x16\x87\x87\x8f\x61\x7d\xd6\xa1\xbf\x6c\x6c\xc5\xf0\x36\x78\x56\xd6\x23\xc1\xb9\x53\x5c\x05\x6a\x21\x29\xfd\x36\xd5\x8c\x65\xb2\xfd\xfb\x00\x5b\x7d\xec\x09\x75\x20\x5c\x41\x7b\x77\xde\xc2\xac\x5b\x4d\x8e\xa2\xb5\x9a\x42\x0c\xd5\x88\xdd\xd0\xb7\x99\x8d\xca\x7b\xcd\x4d\x0f\x75\x57\xeb\x06\xf5\xec\xc4\x87\xcc\x9a\x3f\x73\xe8\xbc\xb9\x38\x4b\x1c\x9a\xe7\x16\xf4\x9d\x49\xbc\x0c\x57\x8b\xc5\x8a\x83\xe3\xdf\x82\xf5\x5f\x18\x70\x93\x6f\x61\x02\xcb\xe5\xf5\xd6\x98\xaa\x02\x81\x62\xc6\xb6\x63\xb0\x1e\x16\x87\x45\xf1\x72\xf9\x0a\x4c\x10\x00\x43\xdf\xc2\x2a\x0c\x90\x03\xc8\x0f\xf0\x34\x9f\xd9\x25\x3c\x7f\x0e\x53\x42\x35\x13\x00\x3b\xd2\xbd\x5a\x07\xf1\x6c\xb1\xfa\xb5\xbc\x7e\x3c\xf1\x55\x44\xe3\xd4\xad\x94\x75\x68\x26\x02\xd2\x8c\xbf\xba\xda\xd0\x06\xe9\x18\x5e\xc2\xf5\xf5\xab\x34\x8d\x3c\x44\x87\xd8\xc1\xe1\x2b\x40\x17\x11\xf0\xd6\x72\x3a\x54\x56\x98\xe0\x71\xe7\x4b\x10\xb6\x61\xfe\xb4\xe1\x9f\x90\xd3\x0e\x95\x4f\xd3\x4e\x50\x0b\x92\x2a\xd8\xb9\x0c\xec\x2a\xd2\xc5\x02\xbd\x59\x2e\xc5\xee\x29\x5b\x53\xe8\x3b\xd0\x84\x6a\x63\xd8\x5a\x06\x1b\xef\x26\x27\x07\x08\x3d\xc1\xbf\xdf\x8f\x53\x36\x8a\xac\xa3\x8c\x01\x13\xf4\x0c\x49\x08\x5b\xc1\x57\x50\x13\x76\xf7\x01\x8d\x57\xe3\xb8\xad\x22\xab\xe9\x08\xa8\x00\x88\x43\x64\x6c\x35\x3b\x88\x1c\xba\x95\x0d\x99\xf3\xee\xbb\x82\x6d\x8b\xf4\x45\xa9\xc4\x2d\x56\xe3\xe7\xe4\x36\xee\xdb\x59\x15\x8b\xdb\x2a\x82\xac\xa0\x34\x38\x4f\x04\x35\x1b\x1b\xad\x24\x8c\xa1\x27\x8d\xb2\x53\xc4\x87\x02\x00\x75\x13\x60\x7f\xb7\x18\x6c\xe5\x08\xc9\x3c\xd4\xd4\x7d\xe8\x03\x2b\x80\x03\x38\xd8\x87\xd7\xaf\xef\x53\x4f\x61\x84\xde\xf3\x43\x4d\x01\x40\x18\x39\xa4\x9e\xf7\x20\x2f\xb6\xee\x17\x0b\x99\x2a\x14\x3f\x40\x71\x11\x1c\xa6\xf6\xae\x48\xa5\xfe\x10\x00\xe3\xd6\x96\x9c\x8c\xd2\xa5\x51\xd8\x06\x5f\xfc\x14\x83\xbf\xdf\xd8\x04\xc0\xc4\x85\x5a\x1a\xb2\x73\xa4\xc9\x31\x4c\x7e\x0a\x3d\x79\xe5\xcc\xe4\xdb\x74\x67\x6c\x4c\x4c\x23\x1d\xd6\x4a\x0f\x92\xb0\xb6\x91\x69\x98\x1c\x03\x53\x8f\x62\xdc\xd3\x52\x1c\xe8\xcd\xe8\x77\x13\x71\x45\xbc\x0d\xf9\xe3\x02\x0f\x5e\xb8\xb2\x42\xac\xf0\xeb\x7a\xe7\x12\x47\xac\x79\xe1\xc7\x5c\x65\xc5\x3f\x82\xc1\xcc\x04\xaf\xf3\x83\xf8\x24\xf5\x3c\x55\xf3\x4d\x6e\xcc\x64\x3a\x15\x70\x6a\x3c\xb8\x51\xaa\x46\xcf\xa0\xbc\x01\x8f\x7c\x13\x68\x06\x3d\x5b\x67\xd9\x62\x84\x3a\x64\x02\xe0\x00\xa4\x34\xa6\x26\x34\x36\x55\x7b\x21\xf6\x12\xbc\x6b\x65\xea\x7d\x84\x29\x56\x81\x10\x8c\x8f\xa9\x05\x66\x3e\xdc\x78\xe0\x90\x9b\x66\xf4\x84\x19\x89\xbe\x1b\x97\xcd\x44\x1a\x03\xc4\xcc\x6e\xe2\xa6\xb1\x0e\x33\x9f\xdc\x75\x35\x48\xf3\x02\x4e\x4e\x60\x32\xc9\x9c\x62\xc2\x3d\xa3\x7c\x91\x41\x12\x2e\x29\xc3\x6d\x68\x2e\x47\x29\x58\x2e\x77\x53\xf1\x6e\x80\xef\xad\xfc\x1a\xb6\xfd\xd9\x3e\x9e\x4a\xba\x7f\x3a\xf8\x1c\xeb\x46\x64\xf8\xe6\x56\xe0\x6d\x17\x88\xe1\xf2\xcd\xe5\xbf\x2e\x7e\x3c\xd9\xdf\x70\xfe\x9f\x40\x33\xa4\x95\xef\xf1\x1e\x96\xcb\xfd\xac\x28\x6f\xd7\x75\x97\xbe\x20\xa4\xec\xc8\xce\xad\xc3\x1a\x0d\x48\x99\x38\x57\xae\x0b\x28\xbd\x21\xc8\x39\x94\xc7\x65\xfa\x79\xfc\x11\x24\xae\xbc\xed\xce\x74\x85\x99\xe8\x7d\x72\x38\x6a\x08\x31\x4e\x22\xa9\x95\x64\xea\x23\x8b\x5d\xdd\xcd\xbd\x47\x23\x95\x69\xa1\xa3\x90\x56\x23\x08\x1d\xfa\x98\xf6\x34\x99\x36\x2d\x0a\x4e\x76\x4e\x79\x1c\x5b\x33\xa1\xf4\x05\xad\xf4\x98\x9b\x7d\x9c\xfa\x08\x41\xb9\x18\xc0\x23\x9a\x7b\xc9\xc2\x05\xad\x5c\x31\x0f\xae\x6f\x31\x82\xb1\x34\x4e\x07\x34\xeb\xde\x48\x74\x37\x52\x9d\x4e\x1d\x91\xda\x46\xb4\xb3\x24\x28\x5b\x38\x38\x7a\x79\x00\x72\x63\x10\x04\xb2\xb5\xf5\xe5\x67\xec\xa7\x38\x46\x0a\xca\xa3\x32\x0e\xd1\x85\x1a\xa2\xf5\x3a\xb7\x5a\xab\x7c\xfa\xae\xc3\x39\xd2\xc0\x4d\x12\xe1\x86\x42\x5f\x37\xb0\x66\x31\x71\xcf\x36\x2b\x2a\x5b\x5b\xb9\x63\xa4\x07\x23\xe2\xe1\xb5\xd8\x83\x88\x9c\xb9\xa4\xef\xa0\x46\x8f\x73\x95\xbb\x20\x7f\x84\xb2\xd2\xb3\x0d\x0b\xbd\x6f\x55\x9c\x41\x6b\xa2\x59\x1b\x00\xf5\x31\xa2\x7e\x70\x6c\x83\x37\x8f\x04\x30\xae\x75\xbf\x58\x7d\xe4\xd3\xa7\x69\x8b\x3d\xf0\x81\xf1\x18\x14\x87\xd6\x6a\xf9\xff\x25\x01\x9a\x54\x6c\xc0\x85\xd0\x45\xe8\x3d\x5b\x07\xad\x8a\x79\x07\x88\xd0\x77\xdb\xa1\x3f\x6a\xe5\xce\xd9\xaf\xff\xaf\x49\xd4\x0d\x9a\x3e\x57\xc3\xc6\x6e\x04\x84\xd3\x10\x38\x31\xb1\x0e\x6d\x97\xf7\x98\xc7\xd6\xbc\x89\x88\x4d\xcf\x26\x91\xb6\x94\x2b\x9d\x6f\xfe\x90\x56\x21\x17\x71\xb9\xdc\x82\x72\x67\x36\xf0\xe9\xd3\x38\x04\xef\x36\xa9\xff\x05\x00\x00\xff\xff\xd7\x66\xf4\x46\x26\x12\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
