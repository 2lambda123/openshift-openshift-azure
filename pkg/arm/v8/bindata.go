// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xdd\x73\xdb\x36\x12\x7f\x2e\xfe\x8a\x2d\xe5\x36\x1f\x0d\x48\x3b\x6d\x27\x1d\xb5\xca\x8c\xe3\x28\xb9\x5c\xdc\x58\x27\x27\xd3\xb9\x49\x33\x19\x08\x58\x52\x88\x40\x80\x05\x40\xd9\xaa\xa2\xff\xfd\x06\x20\x25\xeb\xcb\x76\x72\x69\x5f\x9a\x07\xc7\x04\x16\xbb\x8b\xfd\xf8\xed\x2e\xdc\xf9\x3a\x1b\x49\x9d\x8d\x98\x1b\x03\xc5\x4b\x42\x3a\xf0\xcc\x58\xf0\xe8\xbc\xd4\x45\x17\x94\x29\x80\x69\x01\xc2\x9a\x0a\x98\x52\xe0\x2d\xcb\x73\xc9\xc1\x8f\x99\x87\x0b\x53\x2b\x01\xd6\xd4\x1e\x61\x2a\x19\xf8\x31\x42\xc9\x9c\x47\x0b\xfd\xd3\x27\xa4\x03\xc3\xfe\xf9\xd9\x9b\xe1\x49\xff\xf9\xf0\xec\xcd\xa0\x97\xcc\x4c\x6d\xa9\x45\x67\x6a\xcb\x91\x16\xd6\xd4\x55\x42\x3a\x70\x76\xfe\xfe\xd9\x7f\x9e\xbe\xea\x25\xa6\x42\xed\xc6\x32\xf7\xe9\xc1\xc6\xc9\xd4\x38\x26\x70\x9a\x72\x65\x6a\x91\x90\x0e\xe9\x80\xac\x3c\x1b\x29\x74\x40\x5f\xc0\x8b\x57\x83\x37\xaf\x81\x3a\x38\xb8\x2b\x64\x01\xdf\xb9\xb1\xb1\x1e\x92\x83\x96\x6f\x02\x1f\xc1\x33\xa9\x80\x1e\xdd\x03\xfa\x01\x4e\xcf\x9e\x03\xa5\xca\x14\xb4\xb2\x98\xcb\x4b\x48\x5e\xbe\x79\xd2\x87\x40\x0a\x4f\x87\x67\x83\x6e\xf2\x65\xfc\x03\x0f\x42\xe6\x73\x90\x39\xa4\x27\x46\xe7\xb2\x48\xcf\x91\xd7\x56\xfa\xd9\x80\x79\x3e\x1e\x30\x3e\x61\x05\x3a\x58\x2c\x88\x32\x45\x81\x16\xa8\x6f\x0d\x47\x9d\x67\xd6\xd7\x55\xea\xc6\x90\x48\xed\x3c\x53\x4a\xea\x02\x2c\x0a\x08\x26\xe7\x42\x03\x8f\x3c\x6b\xcb\xbc\x34\x1a\x8c\x86\x83\xbb\x63\xe3\xbc\x66\x25\xde\x4b\x08\x67\x1e\x1e\x67\x53\x66\x33\x25\x47\xd9\xac\x2e\x33\xae\x24\x6a\x4f\x39\x5a\x9f\x56\x58\xc2\x2f\xbf\xdc\xe9\x9f\x3d\xbb\x13\x54\x3c\x41\xeb\x8f\xdd\x93\x99\x47\xb7\xd2\x35\xac\xc9\x5c\x72\xe6\xd1\xa5\xad\xae\x43\xac\x8c\x93\xde\xd8\x59\xdc\x86\x8f\x70\xee\x6d\xd0\x6b\xb1\x20\xfd\xb3\x67\xd7\x0b\x9d\xe0\x6c\x5b\xe6\xc0\xca\x29\xf3\xf8\x12\x67\x9f\x29\xf9\x25\xce\x76\x04\x77\xe0\xf5\xd9\xd3\xb3\x2e\x08\x54\xe8\x31\x46\x60\x6e\x94\x32\x17\x81\xc6\x21\x8f\x26\x62\x79\x08\xc9\x10\xbe\x5c\xd5\xc1\xca\x0e\x98\x45\xb0\xb5\x86\x0b\xe9\xc7\xc0\x60\x5a\x82\x2c\x59\x81\xcd\xf7\x44\xf2\x49\xf4\x43\x6a\xb1\x32\x30\x62\x13\x14\x20\x75\x73\x4b\xc8\xd0\xf3\x70\xc5\xb8\xe9\x52\x91\x6d\x91\x2f\xaf\xfa\xd6\x8e\x51\xd1\x47\xd4\xa1\x9d\xa2\xa5\xb6\x2a\xdd\x3b\x12\x9c\xd4\x1b\xa2\x80\x7f\x31\x0f\x7d\xed\xd1\x56\x56\x3a\x84\x53\xa9\xeb\x4b\x78\x04\xe7\x91\x18\xee\x0e\x07\xbf\xba\x7b\x64\xc4\x1c\xd6\x56\xf5\xc6\xde\x57\xae\x9b\x65\x5c\xe8\xd4\xa2\x18\x33\x9f\x72\x53\x66\xdc\x68\x8f\xda\x67\x42\x3a\x9f\x05\x69\x59\x23\x2b\x7b\x94\x3d\x6a\x18\x65\x07\x81\x05\xb3\x7c\x9c\x19\x47\x8a\xaa\x98\xe0\xac\x97\x4b\x85\xdd\x2c\x8b\xf7\xa8\x26\x32\xb3\x55\x49\x8b\xaa\xc8\x86\x83\x5f\xe9\xf3\xc1\x73\xfa\xb2\xff\x5f\xda\x48\xa1\x16\x15\x32\x87\xc4\x39\xc5\x59\x08\xa0\x5e\x3c\x65\xc7\xae\xcc\x38\xcb\x5a\xaa\x1a\xab\xe0\xe4\x48\x15\xdd\xde\x50\xde\x10\x83\x57\xa4\x41\xa1\x1b\x02\x87\xa0\x0e\x79\x28\x7a\x33\x74\x64\xdb\xa4\x78\xe9\x2d\x73\x9f\x67\x59\x0a\xfd\x78\xea\xef\x30\x71\xa3\xcf\x3f\xd1\xd2\xc6\x21\xfd\x3e\x3d\x3a\xda\x67\xeb\xb3\x0a\xf5\x79\x40\x6d\x38\x31\xda\x33\xa9\xd1\xc2\x40\x31\x9f\x1b\x5b\x42\x38\xf4\xf7\x44\x33\x66\x81\xf7\x3f\xc3\xd8\xec\xcf\xda\x22\x37\x16\x5b\xd3\xae\xbe\x77\x6c\x56\xb5\xb5\x23\x2d\x25\xb7\xc6\x99\xbc\xb1\xdd\xac\x2e\x23\x1a\x65\x57\x27\xd7\x25\x14\x55\xc1\xc7\xc8\x27\x3d\x6d\x22\x6a\x7e\x72\xd9\x39\x1e\x9e\x05\x14\x8d\xb5\x0b\xea\x4a\x04\x64\x86\xb7\xf3\x79\x8b\xc2\xee\xdf\x46\xea\x5b\x8a\x5c\xf2\x00\x12\x58\x2c\xde\xed\x14\xaa\xdc\x58\x60\xde\x63\x59\x79\x90\x1a\xe6\x47\x69\xfa\xe3\xe2\x67\x10\x86\x00\xcc\xea\x12\x5a\x35\x80\xce\x80\xfe\x01\x9f\x27\x33\x8a\x84\x6f\xbf\x85\x91\x45\x36\x21\x00\x37\x5e\xf8\xed\x52\x8d\x83\x79\xfb\xdb\xe2\xdd\xfe\xab\xb7\x3a\x35\x95\x37\x67\x52\xa1\x48\x08\x84\x4a\xff\xf6\xed\xda\x69\xa0\xca\xc3\x8f\xf0\xee\xdd\xcf\xa1\x22\x69\x70\x0a\xb1\x82\xa3\x9f\x01\x95\x43\xc0\x4b\xe9\xc3\x47\x2e\x89\x30\x1a\x6f\xf1\x86\xc5\xd2\x4c\x3f\xaf\x05\x08\xd6\xe3\x0a\x99\x0e\x35\x8f\xd8\x12\xa8\xcd\xe1\xc6\x96\xe0\xa6\x50\x9d\xcf\x51\x8b\xc5\x82\x10\x99\xc3\xd7\x50\x58\xac\xae\xc8\x85\xe1\x13\xb4\x4d\x49\xcc\x9d\x67\xa3\xe6\xc2\x04\xc0\xcd\x9c\xc7\x92\x7b\x05\xce\x9b\x0a\x1a\x42\x1a\xb5\xaa\xab\xd4\xcb\x12\xed\xad\x54\x21\xff\x25\xc7\xeb\xe8\xd6\xf6\xcb\x49\xee\xd2\xcb\xdc\x01\xcd\x21\x13\x38\x0d\x20\x32\x69\x92\x21\x5b\x35\x9c\x15\xb3\xfe\x88\x00\x20\x1f\x1b\xb8\x73\x33\x19\xec\xdc\x11\x02\x7b\x28\x6c\xf5\x47\x6d\x3c\x03\x38\x84\xc3\x3b\xf0\xf8\xf1\xd5\xd5\x83\x1a\xa6\xd6\x7e\xfb\x24\x01\xb0\xe8\xbc\x09\x79\xa9\x81\x0e\xf7\xec\x37\xed\x53\xe0\xd4\x2c\x65\x82\x61\x69\x74\xfa\xc1\x19\x7d\xd5\x3a\x11\x80\x24\xb4\xad\xc2\xca\x29\xda\xa4\x0b\xc9\x07\x53\x5b\xcd\x94\x48\x1e\x84\x3d\x21\x5d\x48\x79\xaa\xb0\x60\x7c\x46\x2d\x16\xd2\x79\x3b\x4b\xba\xe0\x6d\x8d\xa4\x69\x98\x36\x6d\xc9\xac\xdf\x35\xe6\x7e\x82\x2d\xdf\xe5\x92\x90\xd6\x32\x55\xad\x54\xc8\xcf\x65\x4e\xbe\x28\x23\x42\xbd\x32\x02\x63\x16\x3e\x8e\xa6\xd6\x81\xea\xdb\xbd\x51\x84\x9e\x8b\x7d\x31\xb4\xf2\xea\xb6\xaf\x1c\x77\xf2\x28\x53\xb5\x3e\x84\x8f\x1f\x9b\xdb\x5d\xe7\xd6\x35\xd2\x2d\x81\x8d\x43\x05\xe6\xac\x56\xde\x7d\x92\x43\xc3\xb9\xeb\xdd\x19\x77\x83\x5d\x02\xb2\x09\x17\x51\xcd\xf3\xea\xc1\x4f\x3f\xfc\xf0\x43\xc4\xb5\xaf\x2a\x6b\xbc\xe9\x1d\xcc\x85\xf3\xdf\x7c\xf3\xe0\xfe\x82\x7c\x55\x19\xeb\x9b\x85\x4e\xe7\xfe\x83\x05\xf9\xea\x6a\xf0\x38\x8e\x83\xd1\x8b\x61\xff\xb7\xe3\xd3\xd3\xf7\xc7\xa7\xa7\x67\xbf\x01\xad\xe0\x20\x32\x01\x5a\x06\xef\x78\x04\x4a\x9b\xff\x5f\xf5\x7f\x0b\x8b\xcb\x6d\x2a\x02\x6b\x38\x88\x3f\xe9\x07\x38\x3e\x39\xe9\x0f\x5e\x03\xbd\x68\x31\x67\x29\x87\x3a\x36\xc5\x36\xf8\xdc\xcc\x35\xc0\x92\x2d\x77\xc3\x40\x78\x11\x11\x2c\x44\x42\x40\x21\x1d\xbc\x7a\xc1\x58\x81\xda\xc7\xd1\x50\xa3\xbf\x30\x76\x02\xb5\x97\x4a\x7a\x89\x0e\x0a\x13\x91\xd2\x1b\xb0\x8c\x63\xc0\x2a\x21\x03\x4e\xa5\x61\xae\xca\x57\x87\x6d\xad\x1d\x8c\x30\x37\x16\x41\x68\x07\xd2\xc1\x44\x9b\x0b\x0d\xde\xc4\x3e\xbe\x91\x84\x80\x5a\x40\x5d\x35\x9d\x79\x40\xd7\x19\xb8\x58\x08\xc8\xc5\x58\x2a\x8c\xc0\xbb\x02\x3f\xa0\xe2\x1e\xf4\x7a\x90\x24\x11\x7c\x85\xb9\x82\xde\xe6\xda\xcd\x99\xaf\xe1\xe6\xd0\x3d\x6f\xf0\x17\x16\xcb\x7a\xd4\x72\x69\x6c\xe7\xd0\xc3\x77\x97\x04\x2f\xa3\x6d\xcf\x8f\xcf\xdf\x0c\x5f\xf4\xee\xac\x71\xf9\x35\xa2\x78\xcb\xa4\xd9\x87\xc5\xe2\x4e\x3c\x48\x2f\x97\x69\x13\xc6\x0f\x4a\x2b\x2b\xa7\x52\x61\x81\x02\x28\x0d\x50\x4d\x97\x06\x0d\x77\x02\x3a\x85\xac\x9b\x85\x5f\xbb\x7f\x02\xc5\x56\xda\x8d\x2a\x43\x5b\x3d\x48\xad\x83\xc0\xe6\x04\x21\x4d\x09\xa3\x9c\x51\x6f\x6b\xe7\x83\x67\x07\x52\xc3\xa4\x1e\x61\xe3\x74\x17\x0c\x5f\x3b\x04\x65\x38\x53\xc0\x2a\xd9\x76\x7f\xc4\x05\xe5\x24\x50\x8b\x90\xb8\xce\x5d\xb8\xdf\xac\x77\xe1\x5e\x7a\xbf\xf3\xfb\xd1\xb2\x37\x59\xab\x41\x9d\xa4\xc9\x67\x63\x65\x21\x75\xd6\x94\xb5\x6c\x35\xdf\xd3\x66\x21\xbd\x12\xfe\xe5\x32\x42\xb8\xc4\x1f\x7f\x3d\x57\x27\xf4\x97\x33\xb5\xc6\xf8\x2c\xb2\xc9\x5a\x3e\x64\x3e\xa7\x21\x21\x34\xc2\x41\xfa\x84\xf1\x49\x5d\x3d\x51\x66\xf4\x2a\xc4\x71\x92\xdc\xfa\x3a\xb0\x4a\xc9\x80\x44\x53\xb4\xb3\x9d\x3e\x80\x74\xc0\xf9\x10\xb7\x50\xa0\x8f\x39\x35\x8a\x52\x62\x4b\x30\xcc\x37\x91\x2b\xbb\x4f\x42\xf3\x12\xf4\x78\x2a\x6d\x6f\x73\xaf\x3d\x57\x4e\x84\xb4\x70\xb0\x46\x77\x4b\xf3\x22\xcc\x85\x56\x86\x89\xa0\x66\xc3\x23\xf9\xc4\x14\xec\x7b\x2e\x1a\x9b\x5c\x93\x85\x1b\x59\xb4\x9b\x38\xbf\x13\x88\xc9\xb3\x13\x85\xdd\xdd\xa5\x7d\xc4\xf1\xad\xa9\xb2\x66\x2a\x05\xda\xac\x9b\xbd\x17\xcc\xb3\xec\xbd\xa9\x57\xac\xd7\xcd\xd0\xcd\x4c\x1d\x32\x34\x6c\xdd\x72\x17\x08\x06\x6d\x6c\xd1\x70\xa2\xa3\xd6\xe9\xbd\x70\x72\x2b\x0e\x16\x8b\x96\x48\xc4\x27\xb9\xd8\xef\xf5\x82\xb0\xd6\x25\xa9\x18\xb5\x04\x2c\xbe\x75\xf4\x96\x16\xbf\xd9\x2f\xad\xfc\x25\x71\xe8\x62\x97\xc1\xf2\x70\x59\xde\x6e\x6b\x4b\x03\x51\x7c\x65\xd1\xac\x72\x63\xe3\x3f\xd5\xb3\x0d\x3a\x06\x9b\x7c\xb9\x67\x83\x2d\xbb\xab\xdf\x56\x5b\xeb\xb1\xdb\xdd\xfc\x6a\x7c\x44\x11\xfa\xaf\x4f\x9e\x9e\xbc\x3e\x7d\x7f\x3c\x78\xd1\x4b\xbe\x4f\xae\x71\xdd\x86\xb2\x91\x26\x70\x89\xbd\x51\x7b\xed\xa5\xb9\x36\xe2\x61\xc7\x3b\x21\x7a\x68\x48\x9e\xcd\xbc\xd2\x78\xd1\x12\xc4\xea\xb5\x96\xbd\xed\xb2\xd4\xd2\x4b\xa6\x68\xfb\x70\x05\x49\xeb\x8a\xc3\xf8\x6f\x35\x16\x6e\xac\x76\x1f\x7e\xff\xd3\xe1\x83\xf5\xa5\xa3\xbd\x84\x47\xbb\x84\x0f\xf7\x12\x3e\x8c\x84\xc9\x7e\x95\xa8\x37\x13\xd4\xd1\x2c\x34\x37\x96\xc6\xb6\x6b\x8b\x94\x89\x29\x5a\x2f\x1d\xd2\x0a\xd1\xd2\xda\x2a\x07\x7b\x60\x32\x8a\x21\xa4\x9c\xee\x5a\x29\xbb\xbf\xb5\xb6\x33\xd6\xac\xec\xb9\x01\x4f\x1b\xad\xda\x16\xdf\x4f\x09\x70\x8c\x7d\x43\x12\xa1\x3a\x34\x22\x61\x0e\xf2\xb5\x46\x41\x99\x28\xa1\xb2\x26\x0f\x21\x7f\x55\xd8\xb8\xd1\xde\x1a\x45\x2b\xc5\x42\xbb\xd1\x09\x0d\x0c\x53\xce\x80\x46\x14\x57\x74\x69\xac\xb1\xe9\xd4\xa8\xba\x44\x07\x21\x30\xb8\x45\xe6\x51\x2c\x3b\xa2\xd0\x9c\x36\x93\x06\x0f\x7d\x50\x68\x96\x5a\xf8\xa5\x25\x1c\x3e\xfa\xf1\x30\xf4\x82\xab\xeb\xb4\xa0\x75\x0d\xff\xa0\x47\x33\x1c\xc4\x72\xe1\x66\x4e\x99\x02\x9c\xd4\x3c\x36\x58\x25\xd3\xac\x40\xc0\x50\x43\xfc\x38\x90\xf8\xb1\x35\x75\x31\x86\xe5\x7c\x41\xae\x46\x82\x76\xc8\x58\x72\x59\x8d\x0d\x5b\x13\xda\xf6\x76\x40\x17\xf4\xb1\x5c\xd5\x15\x14\xa8\x71\xca\xe2\x50\x1e\x11\xc4\x33\x3e\x59\xe3\x50\xeb\x92\xb9\x09\x94\xc2\x89\x25\x03\x60\x7f\x3a\xe4\x5b\x9f\xa5\xd1\x62\x8f\x02\xcd\xcb\xc7\xff\x7d\xbc\x19\x7a\x3e\xef\x34\xe9\x80\x36\x1e\xbb\xc0\xbc\x29\x25\xa7\x57\x01\x11\xbb\x58\x6e\x99\x1b\x83\x32\xa6\x72\x50\x6b\x2f\xd5\xf2\xcf\x24\xd2\x41\x5d\xed\xaa\xbe\x97\xcb\x4a\xd8\x5f\xf1\xa7\x05\xc7\xc7\x28\xea\x18\x0f\xeb\xa0\x63\x71\x64\x8c\x0f\x8d\x20\x37\x65\x15\x9f\xd4\xf7\xbd\x83\x24\xc4\x8d\x6b\x1f\xaa\x47\x40\xe8\xe6\xcc\x77\x0f\xc9\x7c\x8e\xca\xe1\x62\xb1\x63\xcc\x1b\xef\xb3\x1a\xe1\x56\x0f\x0d\xff\x0b\x00\x00\xff\xff\x6a\x7a\x05\x29\x96\x1a\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdf\x6f\x1b\xb9\x11\x7e\xe7\x5f\xf1\x45\x0e\xe2\x0b\xee\xb8\x1b\xb7\x08\x0c\x38\xe7\x00\x69\xea\xbb\x5e\xd3\xab\x0d\xbb\x45\x51\x18\x7e\xa0\xc8\xd9\x5d\x9e\xb8\xe4\x86\x9c\x95\xad\x28\xfa\xdf\x0b\xee\x4a\xb6\x6a\x3b\x4a\xdd\xc3\xbd\xdc\x9b\x56\x9c\xdf\x9c\xef\x9b\xe1\xde\xb3\x72\x6a\x7d\x39\x55\xa9\x81\xa4\x1b\x21\x96\x4b\xd8\x0a\xc5\xfb\xe0\x2b\x5b\x17\x17\xa4\xfb\x68\x79\x71\xa6\x58\x37\x67\x4a\xcf\x54\x4d\x09\xab\x95\x70\xa1\xae\x29\x42\x32\x7c\x30\x24\x13\xab\xc8\x7d\x57\xa4\x06\x13\xeb\x13\x2b\xe7\xac\xaf\x11\xc9\xa0\x51\x0c\x6d\x3c\xf4\x60\xb1\x8f\x8a\x6d\xf0\x08\x1e\xcf\xbf\x69\x42\x62\xaf\x5a\x7a\x39\x11\x5a\x31\xde\x96\x73\x15\x4b\x67\xa7\xe5\xa2\x6f\x4b\xed\x2c\x79\x96\x9a\x22\x17\x1d\xb5\xf8\xfe\xfb\xfd\x93\xd3\x1f\xf6\x73\x80\xef\x29\xf2\xbb\xf4\xa7\x05\x53\xba\x8d\x34\xff\x67\x2b\xab\x15\x53\x2a\xd6\x91\x9e\x53\x17\x92\xe5\x10\x17\xc3\x31\x3e\xe3\x82\x63\x8e\x6b\xb5\x12\x27\xa7\x3f\x7c\xd9\xe9\x8c\x16\xf7\x7d\x9e\x45\x3b\x57\x4c\x1f\x68\xf1\x44\xcf\x1f\x68\xf1\xc0\xf1\x1e\xfe\x71\xfa\xe7\xd3\x23\x18\x72\xc4\x04\x6e\x08\x55\x70\x2e\x5c\x67\x99\x44\x7a\x28\x91\xaa\x98\x22\x94\x73\xd0\xae\x4f\x4c\x31\x41\x45\x42\xec\x3d\xae\x2d\x37\x50\x98\xb7\xb0\xad\xaa\x69\xfc\x9e\x59\x3d\x1b\xee\xa1\x88\xd4\x05\x4c\xd5\x8c\x0c\xac\x1f\xb3\x44\x49\xac\x73\x8a\xc3\x61\x2a\x4c\x79\x4f\x7c\x93\xea\x65\x6c\xc8\xc9\x43\x99\x28\xce\x29\xca\xd8\xb5\xe9\x4a\xe4\x4b\x3a\x3e\x27\x83\xbf\x28\xc6\x89\x67\x8a\x5d\xb4\x89\xf0\x37\xeb\xfb\x1b\x1c\xe2\x62\x10\xc6\x37\xe7\x67\x3f\xa7\x97\x62\xaa\x12\xf5\xd1\x1d\x37\xcc\x5d\x3a\x2a\x4b\x6d\x7c\x11\xc9\x34\x8a\x0b\x1d\xda\x52\x07\xcf\xe4\xb9\x34\x36\x71\x99\xbd\x95\xa3\xaf\xf2\xb0\x3c\x1c\x0d\x95\xcf\xb3\x09\x15\x75\x53\x86\x24\xea\xae\x9e\xd1\xe2\xb8\xb2\x8e\x8e\xca\x72\xc8\xa3\x9b\xd9\x32\x76\xad\xac\xbb\xba\x3c\x3f\xfb\x59\xfe\x78\xf6\xa3\xfc\x70\xf2\x6f\x39\x7a\x91\x91\x1c\xa9\x44\x22\x25\xa7\x55\x6e\xa0\xe3\x41\x2b\x36\xa9\x2d\xb5\x2a\xd7\x52\x3d\x75\xf9\x92\x07\xa9\xe1\xda\x47\xc9\x1d\x3d\x78\x27\x9a\x03\xda\xd1\x38\x82\xbc\x9a\x3a\x32\xc7\x0b\x4a\xe2\x7e\x49\xe9\x86\xa3\x4a\x4f\xab\xac\xc4\xc9\xa0\xf5\x5b\x94\x78\x8c\xe7\xf7\x58\xe9\x90\x48\xfe\xb1\x38\x38\x78\xac\xd6\xa7\x1d\xf9\x8b\xc6\x56\x8c\xf7\xc1\xb3\xb2\x9e\x22\xce\x9c\xe2\x2a\xc4\x16\x59\xe9\xb7\xe9\x66\x2a\xb3\xed\xdf\x47\xb1\xd5\xa7\x3e\x92\x0e\x91\xd6\xa5\xbd\xfd\x7e\x50\xb3\x6e\x3d\x39\x8a\xd6\xea\x18\x52\xa8\xc6\xda\x2d\xfa\x76\x60\xa3\xf2\x4e\x73\xdb\x43\xdd\xd5\xba\x21\x3d\x3b\xf6\x61\x60\xcd\xff\x71\xe8\xbc\x3b\x3f\xcd\x1c\x3a\xcc\x2d\xf4\x9d\xc9\xbc\x8c\xcb\xe5\x72\xcd\xc1\xe9\xaf\xc1\xfa\xaf\x0c\xb8\xc9\x77\x98\x60\xb5\xba\x7a\x30\xa6\xaa\x10\xa1\x98\xa9\xed\x18\xd6\x63\x79\x50\x14\xaf\x57\x6f\x60\x82\x00\x16\x7d\x8b\x75\x18\x90\x0b\xc8\x8f\x78\x9a\xcf\xc1\x25\x5e\xbc\xc0\x34\x92\x9a\x09\x60\x47\xba\x97\x9b\x20\x9e\x2f\xd7\xbf\x56\x57\x8f\x27\xbe\x8e\x68\x9c\xba\x95\xb2\x8e\xcc\x44\x20\xcf\xf8\xcb\xcb\x2d\x6d\x48\xc7\x78\x8d\xab\xab\x37\x79\x1a\x79\x24\x47\xd4\xe1\xe0\x0d\xc8\x25\x02\xdd\x58\xce\x1f\x95\x15\x26\x78\xda\x79\x13\x91\xda\x30\x7f\xda\xf0\xcf\x95\xd3\x8e\x94\xcf\xd3\x4e\xc4\x16\x32\x56\xd8\xb9\x0c\xec\x6a\xd2\xe5\x92\xbc\x59\xad\x84\xb0\x15\x9e\xa1\x8e\xd4\xdd\x89\x9b\xa0\x67\x14\xc7\x61\x58\x25\x56\xd3\x31\x5d\x01\xa4\x45\x62\x6a\x35\x3b\x24\x0e\x1d\x46\x41\x39\x44\xd5\x77\x05\xdb\x96\xe2\x57\xa5\x32\xf2\xad\xa6\x2f\xc9\x6d\x9d\xb7\xb3\x2a\x15\x37\x55\x82\xac\x50\x1a\x9a\x67\xfa\x98\x8d\x30\x28\x23\xa5\xd0\x47\x4d\xb2\x53\x91\x0f\x04\x40\xba\x09\xd8\xdf\x2d\x86\x07\x39\x22\x9b\x47\x1d\xbb\x8f\x7d\x60\x05\xbc\xc2\xab\x7d\xbc\x7d\x7b\x97\x7a\x0e\x23\xf4\x9e\xef\x6b\x0a\x20\x52\xe2\x90\x11\xe9\x21\xcf\x1f\x9c\x2f\x97\x32\xf7\x0f\x7d\x44\x71\x1e\x1c\x65\xf0\x55\x51\xe5\xee\x15\xc0\xb8\x53\x65\x27\xa3\x74\x69\x14\xb5\xc1\x17\xbf\xa4\xe0\xef\xf6\x29\x01\x4c\x5c\xa8\xa5\x89\x76\x4e\x71\x72\x84\xc9\x2f\xa1\x8f\x5e\x39\x33\xf9\x2e\x9f\x19\x9b\x32\x0f\x48\x47\xb5\xd2\x0b\x19\xa9\xb6\x89\xe3\x62\x72\x04\x8e\x3d\x89\x71\x8b\xca\x71\x90\x37\xa3\xdf\xed\x8a\xab\xc8\x0f\x4b\xfe\xb8\xc0\xbd\x1b\xae\xac\x10\xeb\xfa\x75\xbd\x73\x19\xc1\x1b\xd4\xfe\xd4\x0e\x0c\xf6\xf7\x60\x68\xc0\xe9\xdb\xe1\x42\x7c\x96\x7a\x21\xc4\x1e\xae\x07\xd8\x64\xd3\xb9\xf9\x33\x2c\x70\xad\x54\x4d\x9e\xa1\xbc\x81\x27\xbe\x0e\x71\x86\x9e\xad\xb3\x6c\x29\xa1\x0e\x03\x3c\x39\x20\x2a\x4d\x19\x22\xc6\x66\x78\x14\x62\x2f\x97\x77\xa3\x1c\x7b\x9f\x30\xa5\x2a\x44\x82\xf1\x09\x36\x61\xe6\xc3\xb5\x07\x87\x61\x71\x1c\x3d\xd1\x50\x89\xbe\x1b\x57\xc1\x0c\xe9\x05\xd2\xc0\x3d\xe2\xba\xb1\x8e\x06\xb4\xdf\x62\x0e\xd2\xbc\xc4\xf1\x31\x26\x93\x01\xf1\x26\xdc\xe1\x7d\xc4\xf7\xa8\xf3\x0c\xbb\x6b\x71\x31\xc2\x1e\xab\x0d\x05\xae\xad\x8c\x24\x91\x88\xf1\xed\x8d\xa0\x9b\x2e\x44\xc6\xc5\xbb\x8b\x7f\x9e\xff\x74\xbc\xbf\x65\xe5\x5f\x21\xce\x28\xae\x8d\x8c\xe7\x58\xad\xf6\x07\x45\x79\xb3\xb9\x87\xbc\xef\x4a\xd9\x45\x3b\xb7\x8e\x6a\x32\x90\x32\x33\x84\xdc\x14\x34\xe7\x04\x39\x47\x79\x54\xe6\x9f\x47\x9f\x20\x69\xed\x6d\x67\xc8\x58\x93\x96\xe8\x7d\x76\x38\x6a\x08\x31\xf2\xa6\xd4\x4a\x72\xec\x13\x8b\x5d\xdd\xce\xbd\x27\x23\x95\x69\xd1\xc5\x90\x07\x39\x42\x47\x3e\xe5\xad\x42\xe6\xbd\x20\x06\x27\x3b\xa7\x3c\x8d\xad\x9a\x99\xf4\x2b\x5a\xf9\x32\xb7\xfb\x3a\xf7\x15\x41\xb9\x14\xe0\x89\xcc\x9d\x64\xe1\x82\x56\xae\x98\x07\xd7\xb7\x94\x60\x6c\x84\x8e\xa4\x98\xcc\xa6\x57\x32\xfc\x47\xe8\xeb\xdc\x21\xb9\x8d\x44\x3b\xcb\x82\xb2\xc5\xab\xc3\xd7\xaf\x20\xb7\x88\x31\x44\x5b\x5b\x5f\x7e\xc1\x7e\x8e\x63\x84\xe4\x40\xec\x69\x91\x5c\xa8\x91\xac\xd7\x43\xeb\xb5\xca\xe7\x57\x08\xcd\x29\x2e\xb8\xc9\x22\xdc\xc4\xd0\xd7\x0d\x36\xa8\x16\x77\xe8\x5b\x43\x7b\x63\xe5\x16\xa1\xf7\x28\xf3\xfe\xb1\xd8\x43\x22\x1e\xb0\xd5\x77\xa8\xc9\xd3\x5c\x0d\x13\x72\x78\x32\xb1\xd2\xb3\x2d\x0b\xbd\x6f\x55\x9a\xa1\x35\xc9\x6c\x0c\x40\x7d\x4a\xa4\xef\x7d\xb6\xc1\x9b\x47\x02\x18\x97\x90\xff\x5b\x7d\xe4\x97\xa7\x69\x8b\x3d\xf8\xc0\x74\x04\xc5\xa1\xb5\x5a\xfe\x77\x4b\x40\xc7\xfc\x40\x77\x21\x74\x09\xbd\x67\xeb\xd0\xaa\xfc\x24\xcc\x6c\xd0\x77\x0f\x43\x7f\xd4\xca\xad\xb3\x5f\xff\xc6\x4f\xba\x21\xd3\x0f\xdd\xb0\x35\xc9\x11\x69\x1a\x02\x67\x66\xd2\xa1\xed\x86\xb7\xed\x63\x4b\xc9\x44\xa4\xa6\x67\x93\x49\x4c\xca\xb5\xce\xb7\x7f\xc8\x83\xdb\x25\x5a\xad\x1e\x94\x72\x67\x36\xf8\xfc\x79\x1c\x0a\xb7\x73\xff\x3f\x01\x00\x00\xff\xff\x78\x97\x36\xcb\xd4\x10\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
