// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x5f\x6f\x13\xbf\x12\x7d\xc6\x9f\x62\xd8\x14\x4a\x7b\xeb\x6c\x5b\xb8\xba\x28\x10\xa4\x52\x8a\x54\xa9\x97\xa2\x96\x2b\x1e\x00\x55\xce\x7a\xb2\x31\xf1\xda\x7b\xed\x71\xd2\x52\xf6\xbb\xff\xe4\xdd\x4d\x9a\x7f\x2d\x95\xe0\x21\xa4\xf6\xf1\x8c\x7d\xce\xf1\x78\xd2\x79\x9a\x0e\x94\x49\x07\xc2\x8f\x80\xe3\x35\x63\x6a\x08\x4f\x21\x77\x58\x42\x3a\x11\x2e\xd5\x6a\x90\x4a\x9b\x8d\xd1\x41\x8a\x94\xa5\x43\x4f\x62\xf0\x06\x68\x84\x86\x01\xf8\x1b\x4f\x58\x64\xa4\xc1\x93\x2d\xa1\x01\xf2\x4c\xa3\x30\xa1\xec\x92\x2a\xd0\xfd\x11\xe5\xd1\x4d\x54\x86\xf7\xe1\x16\xe6\x8b\xf1\xd0\x77\xaf\x87\x1e\xf8\x10\x52\x89\x93\x54\x2a\x3f\x4e\xc5\xaf\xe0\x30\x75\xe8\x6d\x70\x19\xf2\x52\x38\x3a\x60\x00\x98\x8d\x2c\x6c\x3f\x0c\x83\xb5\x33\x42\x0c\x0f\xb9\x2b\xff\x1f\x2c\x09\x80\x7d\xd8\xdf\x86\x77\xef\xee\x8e\x1e\xb7\x61\x83\xa1\xd5\x95\x0c\xc0\xa1\x27\xeb\x30\xb3\x06\xf8\xc5\x86\xf9\x4c\x10\x34\x91\x9a\xa1\x54\x0a\x2c\xac\xe9\xfe\xf4\xd6\xc0\xdb\xb7\xdb\x27\xe7\x1f\xb7\xd9\x2d\x03\x48\xb4\xcd\xb9\x74\x6a\x82\x2e\xe9\x41\xf2\xd3\x06\x67\x84\x96\xc9\x5e\x9c\x93\xca\x8b\x81\x46\xae\x31\x17\xd9\x0d\x77\x98\x2b\x4f\xee\x26\xe9\x01\xb9\x80\xac\x62\x27\xe7\x1f\x57\xb8\x14\x8e\xd6\xc9\xdc\x0c\x58\xd1\x6e\xa8\x18\x6b\x99\x29\x83\xd6\x70\x7b\x0b\xdd\x63\x6b\x86\x2a\xef\x9e\x16\x22\x47\xdf\xfd\x64\x25\x42\x55\xc1\xf3\x77\x35\xd5\x26\xa2\x9e\x6f\x74\x11\x52\x26\x37\x79\x68\xae\xea\xaa\x56\x3e\xf3\xea\x20\xd5\xc1\xec\xc3\xef\xdf\xcd\xe9\xee\x93\x75\x01\xba\x92\xb0\x11\x54\xe2\x50\x04\x4d\xfe\x51\x82\xc6\x75\xf7\xcb\x59\xcf\x46\x5e\x86\xd6\x81\xf4\x04\xca\x00\x65\xe5\xde\xeb\x57\xaf\x5e\xbd\x01\x69\xd9\x93\xd2\x59\xb2\xfd\xad\x5b\xe9\xe9\xd9\xb3\xbd\xdd\x8a\x3d\x29\xad\xa3\x66\xa0\xd3\xd9\xdd\xab\xd8\x13\x55\x52\x14\xd1\x03\x3f\x82\xf3\xcb\xab\x8f\xa7\x17\x27\x5f\x8f\xce\xce\xae\x8e\xce\xce\xce\xbf\x02\x2f\x61\xab\x0e\x02\xbc\x88\xea\x10\x02\xe7\xcd\xff\x9f\x4e\xbe\xc6\xc1\xd9\x34\x97\x31\x34\x6c\xd5\x9f\xfc\x27\x1c\x1d\x1f\x9f\x7c\xfe\x02\x7c\xca\xa4\x35\xc8\xd8\x2c\x0f\xf7\x62\x82\xad\xf9\xfc\x8d\xcf\x6a\x09\xd3\xd9\x2c\x63\x1d\x98\x8e\xd0\x34\x4e\x50\x26\x07\x13\x55\x9d\x0a\x91\xa3\x21\x10\x46\x82\x41\x9a\x5a\x37\x86\x40\x4a\x2b\x52\xe8\x21\xb7\xe8\x41\x19\xb2\xe0\x44\x86\x90\x59\x23\x15\x29\x6b\xba\xac\x03\x6a\x38\x5f\xec\x82\xf1\x30\xc0\xa1\x75\x08\xd2\x78\x50\x1e\xc6\xc6\x4e\x0d\x90\x8d\x06\x68\x33\x21\xa0\x91\x10\x4a\x98\x2a\x1a\x01\x16\x25\xdd\x80\x27\xa7\x4c\xce\xa6\x23\xa5\x11\xbe\x7d\x83\xad\x17\x23\xeb\xc9\x88\x02\x81\xcb\x1d\xe8\xf7\x21\x49\xe0\xc7\x8f\xc8\x39\x78\x8d\x58\xc2\x41\xfc\x1e\x8f\xdd\xac\x79\x0a\x0f\x5b\xf7\x32\x9e\x36\x94\x50\x55\xb5\x6e\x30\x8b\xd2\x70\xe7\x91\xe0\x5f\xd7\x0c\xaf\x6b\x6e\x2f\x8f\x2e\xff\x77\x71\xda\xdf\x5e\x88\xf2\x5f\xe1\x09\x5d\x1b\xa4\x99\x87\xaa\xda\xae\x17\xf2\xeb\xd9\xb5\x71\xc1\x00\xe7\xa5\x53\x13\xa5\x31\x47\x09\x9c\xbb\x02\x38\x9f\x11\x1a\xcf\x04\x7c\x02\x69\x2f\x8d\x5f\x7b\xbf\x80\x63\x9b\xed\xc1\x2d\x37\x5a\x85\x92\x05\x13\x13\x36\x2b\x18\x0b\xa5\x14\x84\x3c\x13\x9c\x5c\xf0\xc4\x98\x8f\x29\x15\x70\x87\x90\xf8\xce\x0b\xd8\x8d\x15\x00\x5d\x0f\x76\xba\xbb\x9d\xef\x07\x23\xa2\xd2\xf7\xd2\xf4\x8e\xdc\x9d\x4e\xd2\xdc\x52\xeb\x54\xae\x4c\x5a\xd4\xc7\x4c\x6d\x89\xc6\x8f\xd4\x90\x78\x33\xd0\x1d\x87\x01\x36\x3e\xfa\xfb\x1c\xd1\x04\xf5\xc7\x62\x54\x76\x7b\xcb\xa3\x93\x0c\xc2\x56\xf7\xbd\xc8\xc6\xa1\x7c\xaf\xed\xe0\x53\x34\x40\x92\x40\x55\x31\x6d\xf3\x1c\x1d\x70\x82\x66\x4f\xbc\xe5\xa4\xeb\x47\x90\xcc\xbd\x1c\xaf\xf0\x04\xdd\x0d\x58\xb3\xe0\xa1\x9d\x24\xba\xde\x53\x14\x1c\x72\xa4\xda\x8c\x83\x3a\x0b\x8b\x02\x5d\x0c\x97\xaf\x7c\xba\xcb\x08\x8b\x32\xee\xe3\x83\x72\xfd\xe5\xb9\x76\x5d\x31\x96\xca\xc1\xd6\x02\x8e\x3d\xbc\x47\x69\xa7\x46\x5b\x21\xe3\x36\x9b\x18\xc9\x23\xbd\x7b\x42\x99\x6c\x38\xb9\xc7\xbe\x4b\xf6\x5b\x77\xdc\x77\x06\xb5\xeb\xd6\x84\xee\xad\x0f\x6d\x02\x67\xda\x06\x59\x3a\x3b\x51\x12\x5d\xda\x4b\xaf\xa4\x20\x91\x5e\xd9\x30\x0f\xbd\x48\x43\x2f\xb5\x21\x5a\x3b\x4e\xfd\xe1\x2c\x10\x09\x6d\xb8\x68\x22\xf1\x41\x2b\x7a\x3f\xae\x5c\xf1\x41\x55\xb5\x20\x89\x9e\x94\x11\xb1\x00\xf5\x63\xb2\x56\x92\xae\x1c\xb4\x00\x91\xd5\x73\x33\xc6\x1f\xd6\xa5\xcd\x3f\x03\xa3\xbc\x33\xcb\xe1\xec\x5d\x78\x38\x42\x03\x8a\xba\x7a\x23\x4a\x3f\xb2\xf4\x58\x65\x9b\xb2\x12\x39\xf9\x7b\x65\x23\x97\xbd\xf9\xb7\xf9\xd4\xa2\x77\x7b\xcb\x7f\x35\x1a\x71\x84\x93\x2f\xc7\x1f\x8e\xbf\x9c\x5d\x1d\x7d\x3e\xed\x27\x2f\x93\x7b\xa4\x5b\xda\x6c\x8d\x89\x51\xea\xa6\xa2\x3d\xf6\x8c\xae\x25\x3f\xac\xa9\x13\xdd\xc3\xe3\xe5\x59\xbe\x57\x06\xa7\x2d\xa0\x2e\xfb\x0b\xb7\xb7\x1d\x56\x46\x91\x12\x9a\x67\x3a\xd4\x4e\x4d\x5a\x29\xf6\xeb\x7f\xfd\x59\xe5\x59\x1a\xed\x1d\xbe\x7c\xbd\xbf\xb7\x38\x74\xb0\x11\x78\xb0\x0e\x3c\xdc\x08\x3c\xac\x81\xc9\xe6\x2d\x71\xb2\x63\x34\x35\x2d\x7c\x68\x1d\xaf\xfb\x95\x15\xa8\x90\x13\x74\xa4\x3c\xf2\x12\xd1\xf1\xe0\xb4\x87\x0d\x45\xb3\x4e\xc3\x58\x31\x59\x67\x29\xdd\x5d\x19\xab\x6b\x98\x5b\xad\x61\x91\xcf\xa5\xf2\xb4\xd4\xe3\xac\xc4\x7d\x8c\xc1\xb1\x7e\x70\x93\xba\x54\xc7\x17\xbc\xaa\x18\xa3\x60\x50\x72\x21\x0b\x28\x9d\x1d\x46\xcb\xdf\xbd\x1d\x99\x35\xe4\xac\xe6\xa5\x16\xf1\x9d\xee\xc4\x97\x5f\x68\x6f\xc1\x20\xca\x3b\x5c\x57\xdb\x4c\xe8\xee\xc4\xea\x50\xa0\x87\x68\x8c\xcc\xa1\x20\x94\xb3\x56\x22\x76\x75\x4d\x8b\x9e\xc5\x06\x22\x76\x19\x6d\xf9\xe5\x05\xec\xff\xe7\xdf\xfb\xb1\x89\x9a\x1f\xa7\x2d\x5a\xf7\xc4\x8f\xfb\x30\x96\xb0\x07\x82\x6c\xa1\x32\x7e\xb7\xdf\xba\x3b\xc9\x5c\xfc\x71\xa4\xad\x2d\x3d\x04\x43\x4a\xb7\x7c\xc4\x5e\x26\x94\xec\xae\x91\x46\x13\xdb\xa9\xcd\x51\xe6\x9d\xf7\x6a\xdf\xfd\x20\x3a\xb6\xd2\x1d\x68\x5a\xfe\xfa\x2d\xf3\x37\x5e\xdb\x1c\xbc\x32\x59\xdd\x36\x15\xc2\x88\x1c\x01\xe3\x03\x47\xa3\x08\xa1\x91\xb3\x21\x1f\xc1\xec\x57\xc3\x42\xc2\xf6\xa7\xc3\x2c\xca\xc6\x2d\xd9\x72\x6d\xfa\x9f\x00\x00\x00\xff\xff\xf8\x9e\x0d\x1b\x23\x0e\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4f\x6f\x1b\xb7\x13\xbd\xf3\x53\x3c\xcb\x3f\x44\xbf\xa2\xa5\xd6\x39\x14\x05\x9c\xd8\x40\x51\x24\x40\x2e\x0d\x60\xa3\xe8\x21\xc8\x81\xda\x9d\xdd\x65\xc4\xe5\x6c\x86\x43\xc9\x8a\xa1\xef\x5e\x50\x2b\xd5\xaa\xed\x38\x37\x02\xf3\xe6\x0f\xdf\xbc\x37\xe7\x67\xd5\xd2\xc7\x6a\xe9\x52\x0f\x4b\x77\xc6\xf8\x16\x67\xe8\x84\x46\x54\x6b\x27\x55\xf0\xcb\xaa\xe1\x7a\x45\x82\x8a\xb4\xae\xda\xa4\x6e\xf9\x06\xda\x53\x34\x40\xda\x26\xa5\xa1\xd6\x80\xa4\x3c\x62\x02\xda\x3a\x90\x8b\x79\x5c\xa8\x1f\x48\x7e\x88\x4a\x24\x6b\x5f\xd3\xf7\x70\x27\xf1\x61\xd5\xa6\xc5\x5d\x9b\x60\x5b\x54\x0d\xad\xab\xc6\xa7\x55\xe5\xbe\x65\xa1\x4a\x28\x71\x96\x9a\xec\xe8\x44\x5f\x1b\x80\xea\x9e\x31\x7f\x19\x86\x27\x7f\x44\x29\x8f\x4e\xc6\xaf\x99\xd5\x01\x17\xb8\x98\xe3\xfa\xfa\xe1\xeb\x65\x0c\xce\x51\x1f\x67\x1a\x40\x28\x29\x0b\xd5\x1c\x61\x6f\x9e\xc4\xef\xef\x2d\x7c\x0b\xfa\x8a\xc5\x0d\x07\xc2\xcc\xc7\x56\xdc\x0c\xbb\x9d\x01\x6a\xa7\x98\x9a\x4c\xe8\xaa\x71\x34\x70\x5c\x7c\x49\x1c\xf1\xf6\xed\xfc\xdd\xc7\xf7\x73\x73\x6f\x80\x59\xe0\xce\x36\xe2\xd7\x24\xb3\x4b\xcc\xbe\x70\x96\xe8\x42\x33\xfb\xa5\xc4\x1a\x9f\xdc\x32\x90\x0d\xd4\xb9\x7a\x6b\x85\x3a\x9f\x54\xb6\xb3\x4b\xa8\x64\x32\x3b\xf3\xee\xe3\xfb\xfd\x1c\x14\x9b\xa9\xef\x29\xe3\x4e\xf4\x29\xe5\xcf\x03\x1e\x6d\xb8\xf5\xc6\x1c\xf8\x1b\x73\x08\xb8\xbf\xc7\xe2\x0f\x8e\xad\xef\x16\x1f\x06\xd7\x51\x5a\xfc\xc9\x0d\x61\xb7\xc3\xab\xeb\xfd\x42\x62\x41\xbd\x32\xe6\x1c\x9b\x9e\xe2\x54\xda\xc7\x0e\xb1\xc0\x36\xce\x75\x14\x15\x2e\x36\x88\xa4\x1b\x96\x15\xb2\xfa\xe0\xd5\x53\x42\xc7\x94\xe0\xa3\x32\xc4\xd5\x84\x9a\x63\xe3\xd5\x73\x5c\x98\xf3\x42\xef\x31\x59\x72\x4c\x58\x52\xcb\x42\x68\x62\x82\x4f\x58\x45\xde\x44\x28\x17\xed\x1e\x3a\xd1\x9e\x89\x3c\x62\xe3\xb5\x07\x0d\xa3\x6e\x91\x54\x7c\xec\xcc\xa6\xf7\x81\xf0\xe9\x13\xfe\xf7\xff\x9e\x93\x46\x37\x10\x6c\xf3\x13\xae\xae\x30\x9b\xe1\xf3\xe7\x37\x68\x18\x29\x10\x8d\x78\x5d\xde\x91\xcc\x21\xe7\x0c\x2f\x73\x71\x5b\x7e\x9b\x47\xec\x76\x25\xaf\x70\x3c\x55\x31\xfb\x22\x89\x14\x3f\xdf\x19\xba\x1b\x59\x14\xb7\xbf\xdf\xfe\x75\xf3\xe1\x6a\x7e\x52\xe5\x6f\x96\x15\xc9\xa1\xc8\x14\xc7\x6e\x37\xdf\x27\xda\xbb\xe3\x1e\x24\x47\x58\x3b\x8a\x5f\xfb\x40\x1d\x35\xb0\x56\x06\x58\x7b\x24\xb4\xfc\x09\x76\x8d\xea\xb2\x2a\xcf\xcb\x6f\xb0\x74\xe8\xf6\xe2\xc8\xd3\xae\xf2\x68\x72\x2c\x0d\xa7\x0c\x63\xf2\xd8\x38\x25\x5b\x3b\xab\x92\x93\x9a\x97\xd4\xae\x39\x52\x63\x5d\x33\x60\x14\x6e\x0b\x63\x3c\x52\x4c\xbd\x6f\xd5\xd6\x1c\x55\x38\xd8\x31\xb8\x48\x93\x54\x43\xa2\x1f\x65\x95\x65\x9e\xea\xba\xe8\x8a\xe0\x42\x62\x44\xa2\xe6\x01\xb9\x08\x5c\xbb\xb0\x58\x73\xc8\x03\x25\x34\x5e\x50\x0b\x39\xa5\xe6\xa8\x95\x62\xff\xc9\xfa\x75\x51\x48\x91\x91\x19\x56\x05\x68\x07\x5c\xfc\xf6\xeb\x05\xec\xc9\x61\x64\xf1\x9d\x8f\xd5\x77\xea\x97\x39\x22\x2b\x5d\xc2\x29\x0f\xbe\xb6\xff\x9d\x18\xb5\x94\xa3\x1b\x98\xc7\x84\x1c\xd5\x07\x0c\x2e\x29\x49\x11\x6b\x1e\xcd\x83\xf5\x28\x16\x5b\x3f\x5f\xe5\x5f\xaf\x3e\x76\xea\x8b\xe8\xc9\x7c\xd3\xbd\x28\xc6\x93\xb4\x4d\x81\x3b\x24\x1f\xeb\xbd\x2f\x06\x17\x5d\x47\xa0\x35\xc9\x56\xfb\x02\xd1\x5e\x38\x77\x3d\x8e\x27\xe7\xa4\xe1\xe1\xee\x1c\xab\x3c\x3b\x12\x8f\x4f\xc2\xff\x04\x00\x00\xff\xff\xfd\x76\x5a\x70\x7b\x06\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
