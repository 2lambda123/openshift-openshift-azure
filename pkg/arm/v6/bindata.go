// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x6f\x1b\x37\x12\xfe\x1c\xfe\x8a\x89\xec\x46\xb1\x2f\xdc\xb5\xd3\x1c\x5a\xa8\x55\x00\xd7\x71\x70\x06\x7c\x71\x60\x27\x97\x0f\x6d\x61\x50\xcb\xd9\x15\x23\x2e\xb9\xc7\x17\xc9\xaa\xaa\xff\x7e\x98\x7d\x91\xf5\x66\x37\x87\xe6\x83\xb2\x26\x87\x33\x9c\xe7\x79\x38\x1c\x1e\x3c\x4f\x47\xca\xa4\x23\xe1\xc7\xc0\xf1\x9e\xb1\xc5\x02\x54\x0e\x45\x80\x97\x1a\x0d\x24\xe7\xd6\xe4\xaa\x48\x6e\x31\x8b\x4e\x85\xf9\x47\x11\xb2\xf1\x47\x91\x4d\x44\x81\xfe\x08\x4e\x60\xb9\x64\x07\x80\x46\x8c\x34\xc2\xcd\xbf\x3e\x5f\x02\xde\x07\x34\x12\x25\xc4\x4a\x8a\x80\xe0\x63\x55\x59\x17\xe0\xe5\xc5\xe7\xdb\x23\x10\x46\x82\xb6\xd9\x04\xb2\xe8\x1c\x9a\x00\xa5\x32\xd6\xc1\x14\x9d\x57\xd6\xb0\x79\x2c\x81\xcf\x81\xf3\xac\x0e\x3b\xec\x8f\x43\xa8\xfc\x20\x4d\xdd\x18\xb5\x2a\x45\x81\xc9\x48\xdb\x51\x92\x59\x87\xc9\x4c\x19\x69\x67\x3e\x31\x18\x52\x87\x95\xf5\x2a\x58\xa7\xd0\xa7\x6e\x1c\x15\x2f\x55\xe6\xac\xb7\x79\xe0\xe2\x8f\xe8\x90\x93\x87\x1f\x38\x46\x9f\x34\xbe\xfb\xa0\x8c\x0f\x42\x6b\xe8\xd7\xf6\x5b\x56\x7d\x86\xd9\xd8\xc2\xe1\xcb\x04\x52\x0c\x59\x6a\x3d\x77\xa8\x51\x78\x84\x17\x2f\xa0\x99\xfb\xcf\xc5\xcd\xed\xe5\xf5\x87\xbb\xcb\x77\x47\xf0\xb6\x31\x9b\xc7\x32\x9d\x0a\xe7\xd3\xd6\x78\x8a\xae\x4e\xaa\x05\x83\xcf\x19\x3b\x58\x05\xce\xa6\xc8\x73\x75\xaf\x4c\x01\xae\x2a\xa1\x6a\x61\x25\x0a\x9c\x30\x05\x3e\x8d\x3e\x41\x4f\xae\x3b\x6f\x7c\x0e\x8b\x45\xb2\x5c\xb2\xc5\x02\x8d\x5c\x2e\x29\x92\x54\xfe\xff\x61\xc6\x61\x69\xa7\xd8\xb1\x51\x13\xc5\x5c\x09\xdc\xe5\x4f\x67\x57\x53\xd6\xc6\x22\x26\x86\xfd\xe3\x7e\xe7\xec\x11\x74\x57\x9b\x54\x39\x3c\x87\xc2\x61\x05\xe4\x3a\xd5\x6a\x94\x4a\x9b\x4d\xd0\x35\x21\x73\x1f\xc4\xe8\x27\x08\x63\x34\x0c\xc0\xcf\x7d\xc0\x32\x0b\x1a\x7c\xb0\x15\x34\x86\x3c\xd3\x28\x4c\xac\x92\xa0\x4a\x74\x7f\x69\xe5\xd1\x4d\x55\x86\x8f\xd9\xad\xcd\x97\x93\xdc\x27\xf7\xb9\x07\x9e\x43\x2a\x71\x9a\x4a\xe5\x27\x69\x9d\x4a\xea\xd0\xdb\xe8\x32\xe4\x95\x70\xe1\x94\x41\x23\x89\xfe\xd3\x66\xb0\x93\x23\x90\x7b\x28\x5c\xf5\xdf\x68\x83\x00\x38\x81\x93\x3e\xbc\x7d\xfb\x90\x3a\x6d\xc3\x46\x13\xb6\x57\x32\x00\x87\x3e\x58\x87\x99\x35\xc0\x6f\xf6\xcc\x67\x22\x40\xe3\xa9\x19\x4a\xa5\xc0\xd2\x9a\xe4\xab\xb7\x06\x7e\xfe\xb9\x7f\x71\xfd\xbe\xcf\x16\x0c\xa0\xa7\x6d\xc1\xa5\x53\x53\x74\xbd\x01\xf4\xbe\xda\xe8\x8c\xd0\xb2\xc7\x96\xec\xe2\xfa\xfd\x16\x50\xc2\x85\x5d\xa4\xf6\x1b\x6c\x11\x93\x2b\xc6\xda\xb4\xab\xa8\x35\x2c\x16\x2b\x81\x5f\xd2\xd1\xf6\xc9\x07\x2b\x11\x96\x4b\x78\xf1\xb6\xc6\xd1\x90\xd5\x8b\xbd\x12\xc1\x90\xc9\x7d\x02\x59\x51\xb6\x4d\x84\xcf\xbc\x3a\x4d\x75\x34\x27\xf0\xe7\x9f\x10\x5c\xc4\x47\x39\x5b\x33\xdd\x0a\xd8\xb0\x25\x31\x17\x51\x07\xff\x4d\x6c\xd1\xba\xc7\xb9\xaa\x67\x09\x97\xdc\x3a\x90\x3e\x80\x32\x10\xb2\xea\xd5\x8f\x6f\xde\xbc\xf9\x09\xa4\x65\xcf\x2a\x67\x83\x1d\x1e\x2e\xa4\x0f\xdf\x7d\xf7\xea\x78\xc9\x9e\xd1\x99\x6d\x06\x0e\x0e\x8e\x5f\x2d\xd9\x33\x55\x05\x3a\x78\x1e\xf8\x19\x5c\xdf\xde\xbd\xbf\xbc\xb9\xf8\x72\x76\x75\x75\x77\x76\x75\x75\xfd\x05\x78\x05\x87\xb5\x13\xe0\x25\xb1\x43\x55\x88\x37\xff\x7f\xb8\xf8\x42\x83\xdd\x34\x97\x75\x39\x38\xac\x7f\xf9\x57\x38\x3b\x3f\xbf\xf8\xf8\x09\xf8\x8c\x49\x6b\x90\xb1\x2e\x0e\xf7\x62\x8a\xad\xb2\xfc\xdc\x37\xe5\x34\xed\x66\xa9\xec\xcc\xc6\x68\x1a\x25\x50\x6d\x33\xc4\xea\x4c\x88\x82\xea\x3d\x95\x19\x83\x61\x66\xdd\x04\x62\x50\x5a\x05\x85\x1e\x0a\x8b\x1e\x94\x09\x16\x9c\xc8\x10\x32\x6b\xa4\x0a\xca\x9a\x84\xaa\x65\xbe\x5a\xec\xa2\xf1\x30\xc2\xdc\x3a\x04\x69\x3c\x28\x0f\x13\x63\x67\x06\x82\x25\x01\xb4\x91\x10\xd0\x50\x91\x83\x99\x0a\x63\xc0\xb2\x0a\x73\xf0\xc1\x29\x53\xb0\xd9\x58\x69\x84\x5f\x7f\x85\xc3\x97\x63\xeb\x83\x11\x25\x02\x97\x47\x30\x1c\x42\xaf\x07\xbf\xff\x4e\x98\x83\xd7\x88\x15\x9c\xd2\x37\xa5\xdd\xac\x79\x0e\x4f\x4b\xf7\x96\xb2\x8d\x15\x2c\x97\x35\x6f\xd0\x79\x69\xb0\xf3\x18\xe0\x1f\xf7\x0c\xef\x6b\x6c\x6f\xcf\x6e\x3f\xdf\x5c\x0e\xfb\x6b\x5e\xfe\x2d\x7c\x40\xd7\x3a\x69\xe6\x61\xb9\xec\xd7\x0b\xf9\x7d\x77\x6c\x5c\x34\xc0\x79\xe5\xd4\x54\x69\x2c\x50\x02\xe7\x54\x9e\x79\x07\x28\xe5\x04\x7c\x0a\xe9\x20\xa5\xcf\xc1\x1f\xc0\xb1\x8d\xf6\xe4\x96\x1b\xae\x62\xc5\xa2\xa1\x80\xcd\x0a\xc6\x9a\x7b\x82\x67\x82\x07\x17\x7d\x60\xcc\x53\x48\x05\xdc\x21\xf4\xfc\xc1\x4b\x38\xa6\x0a\x80\x6e\x00\x47\xc9\xf1\xc1\x6f\xa7\xdd\x65\xfd\x00\xee\xd1\x41\xaf\xbd\x3e\x9d\x2a\x94\x49\xcb\x3a\xcd\xd4\x56\x68\xfc\x58\xe5\x81\x37\x03\xc9\x24\x8e\xb0\xd1\xd1\xdf\x8f\x41\x22\xa8\x7f\xd6\xbd\xb2\xc5\x82\x93\x92\x0c\xc2\x61\xf2\x8b\xc8\x26\xb1\xfa\x45\xdb\xd1\x07\x12\x40\xaf\x47\x57\xa9\xb6\x45\x81\x0e\x78\x80\x66\x4f\xbc\xc5\x24\xf1\x63\xe8\xad\xb4\x4c\x47\x78\x8a\x6e\x0e\xd6\xac\x69\xe8\xa8\x47\xaa\xf7\x81\x08\x87\x02\x43\x2d\xc6\x51\x1d\xa5\xbe\x3f\x6f\xf2\xcd\x23\x9f\x1e\xb3\x80\x65\x45\xfb\x78\xa7\xdc\x70\x73\xae\x5d\x57\x4e\xa4\x72\x70\xb8\x66\xc7\x9e\xde\xa3\xb4\x33\xa3\xad\x90\xb4\xcd\xc6\x47\xef\x1b\xb5\x7b\x11\x32\xd9\x60\xf2\x88\x7c\x37\xe4\xb7\xab\xb8\xdf\x18\xd4\xaa\xdb\x21\x7a\xb0\x3b\xb4\xcf\x38\xd3\x36\xca\xca\xd9\xa9\x92\xe8\xd2\x41\x7a\x27\x45\x10\xe9\x9d\x8d\x2b\xd7\xeb\x30\x0c\x52\x1b\x49\xda\x34\xf5\x17\xb9\x00\x01\xda\x60\xd1\x78\xe2\xa3\x96\xf4\x21\xad\xdc\xd2\xc1\x72\xd9\x1a\x49\xf4\x41\x19\x41\x05\x68\x48\xc1\x5a\x4a\x12\x39\x6a\x0d\x44\x56\xcf\x75\x88\x3f\xcd\x4b\x1b\xbf\x33\x46\xf9\x20\x96\xd7\xdd\xbd\xf0\xb4\x87\xc6\x88\x78\xf5\x46\x54\x7e\x6c\xc3\xb7\x32\xdb\x94\x15\xc2\xe4\xef\x33\x4b\x58\x0e\x56\x5f\xab\xa9\x75\xed\x0e\x36\xff\x6a\x38\xe2\x08\x17\x9f\xce\xdf\x9d\x7f\xba\xba\x3b\xfb\x78\x39\xec\x7d\xdf\x7b\x84\xba\x8d\xcd\xd6\x36\xe4\xa5\x6e\x2a\xda\xb4\x3b\xb8\x36\xf4\xb0\xc3\x0e\xa9\x87\xd3\xe1\xd9\x3c\x57\x06\x67\xad\x41\x5d\xf6\xd7\x4e\x6f\x3b\xac\x8c\x0a\x4a\x68\x9e\xe9\x58\x2b\xb5\xd7\x52\x71\x52\xff\x1b\x76\x95\x67\x63\x74\xf0\xfa\xfb\x1f\x4f\x5e\xad\x0f\x9d\xee\x35\x3c\xdd\x35\x7c\xbd\xd7\xf0\x75\x6d\xd8\xdb\xbf\x25\x1e\xec\x04\x4d\x0d\x0b\xcf\xad\x6b\xba\xea\x2d\x53\x21\xa7\xe8\x82\xf2\xc8\x2b\x44\xc7\xa3\xd3\x1e\xf6\x14\xcd\x3a\x0c\x63\xe5\x74\x17\xa5\xf4\x78\x6b\x6c\xf5\x06\xd8\xc1\x73\xa3\x3c\x6d\xf4\x38\x5b\x7e\xbf\x45\xe0\x58\x5f\xb8\xbd\xba\x54\xd3\x0d\x4e\xaf\x83\x10\x0d\x4a\x2e\x64\x09\x95\xb3\x39\x49\xfe\xe1\xee\xc8\xac\x09\xce\x6a\x5e\x69\x41\xf7\xf4\x01\xdd\xfc\x42\x7b\x0b\x06\x51\x3e\xd8\x25\xda\x66\x42\x27\x53\xab\x63\x89\x1e\x48\x18\x99\x43\x11\x50\x76\xad\x04\x75\x75\x4d\xff\x9d\x51\x03\x41\x5d\x46\x5b\x7e\x79\x09\x27\x3f\xfc\xf3\x84\x9a\xa8\x55\x3a\x6d\xd1\x7a\xc4\x3f\xed\xc3\xd8\x80\x03\x10\xc1\x96\x2a\xe3\x0f\xfb\xad\xbb\x93\xcc\xd1\x4b\x5b\x5b\x5b\x79\x88\x26\x28\xdd\xe2\x41\xbd\x4c\xac\xd8\x43\x23\xdd\xbe\xa9\xf7\x7a\x59\x75\xde\xdb\x7d\xf7\x93\xd6\xd4\x4a\x77\x4f\xc2\xfa\x2e\xf3\x73\xaf\x6d\x01\x5e\x99\xac\x6e\x9b\x4a\x61\x44\x81\x40\xcf\xba\x79\x18\x93\x49\x18\x3b\x1b\x8b\x31\x74\x4f\x82\xb5\x80\xdd\xd3\xb2\xf5\xb2\x77\x4b\xb6\xda\x99\xfe\x5f\x00\x00\x00\xff\xff\xe3\x2d\x80\x47\x70\x10\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xdc\x38\x12\xbd\xf3\x57\xbc\x74\x02\xb7\xbd\x0b\x4a\xce\x61\x11\xc0\x89\x0d\x2c\x76\x1d\x8c\x2f\x49\x60\x23\x33\x87\x20\x18\xb0\xa9\x92\xc4\x34\x45\x2a\x45\xb2\x3f\xd2\xd0\x7f\x1f\x50\xea\x76\x3c\x76\xd2\xc1\xdc\x08\xf0\xd5\x2b\xd6\xab\x57\xc5\xe7\xcf\xca\x85\x71\xe5\x42\x85\x16\x92\x36\x42\xec\x76\x30\x35\x9a\x88\x53\x4b\x0e\xc5\xff\xbc\xab\x4d\x53\xdc\x91\x4e\x6c\xe2\xf6\x83\x8a\xba\xfd\xa0\xf4\x52\x35\x14\xce\x70\x8e\x61\x10\xcf\x41\x4e\x2d\x2c\xe1\xf6\xb7\x8f\x37\xa0\x4d\x24\x57\x51\x85\xd4\x57\x2a\x12\x42\xea\x7b\xcf\x11\xa7\xd7\x1f\xef\xce\xa0\x5c\x05\xeb\xf5\x12\x3a\x31\x93\x8b\xe8\x8c\xf3\x8c\x15\x71\x30\xde\x89\x6d\xea\x20\xb7\x90\x52\x8f\x69\x2f\xe7\x6d\x8c\x7d\xb8\x28\x4b\x6e\xc9\x9a\x4e\x35\x54\x2c\xac\x5f\x14\xda\x33\x15\x6b\xe3\x2a\xbf\x0e\x85\xa3\x58\x32\xf5\x3e\x98\xe8\xd9\x50\x28\xb9\x4d\x46\x76\x46\xb3\x0f\xbe\x8e\x52\x7d\x4b\x4c\x32\x33\xbc\x92\x94\x42\x31\x71\xcf\x61\x5c\x88\xca\x5a\xcc\x47\xfc\x23\xd4\x5c\x90\x6e\x3d\x5e\x9c\x16\x28\x29\xea\xd2\x07\xc9\x64\x49\x05\xc2\xc9\x09\xa6\xbb\xdf\xaf\x6f\xef\x6e\xde\xbf\xfb\xf3\xe6\xff\x67\xb8\x9a\x60\xdb\xd4\x95\x2b\xc5\xa1\xdc\x83\x57\xc4\x63\x51\x7b\x31\xe4\x56\x88\xe7\xf7\x89\xf5\x8a\x64\x6d\x36\xc6\x35\xe0\xbe\x43\xbf\x97\x35\xb7\x80\x95\x6b\xe8\xb8\xfa\x59\xfa\x4c\x7d\x60\x93\x5b\xec\x76\xc5\x30\x88\xdd\x8e\x5c\x35\x0c\x39\x53\x65\xc2\x3f\xe9\x0c\x53\xe7\x57\x74\xe8\xc6\xd8\x28\xc1\x1d\x24\xd7\xc7\xab\x1b\x5b\xb6\xcf\x95\x3b\x71\x39\xff\xd7\xfc\x40\xf6\x13\x75\xef\x1f\x69\x6a\x3c\x43\xc3\xd4\x23\x53\x97\xd6\x2c\xca\xca\xeb\x25\xf1\x94\xb2\x0e\x51\x2d\x5e\x23\xb6\xe4\x04\x10\xb6\x21\x52\xa7\xa3\x45\x88\xbe\xc7\x04\x94\xda\x92\x72\xa9\x2f\xa2\xe9\x88\x7f\x89\x0a\xc4\x2b\xa3\xe9\x67\xb8\x07\xf7\xdd\xb2\x0e\xc5\xa6\x0e\x90\x35\xca\x8a\x56\x65\x65\xc2\xb2\x1c\x4b\x29\x99\x82\x4f\xac\x49\xf6\x8a\xe3\x4b\x81\xc9\x12\xf3\xe3\x30\x3c\xa9\x11\x99\x1e\x0d\xf7\x5f\x93\x8f\x0a\x38\xc7\xf9\x1c\x57\x57\xdf\x4b\xcf\xcf\xf0\xc9\xc5\xc7\x91\x02\x60\x0a\xd1\x33\x69\xef\x20\x6f\x9f\xdc\xef\x76\x32\x0f\x32\x7d\x45\x71\xeb\x2d\x61\x66\x5c\xcd\x6a\x96\x5d\x03\x68\x15\x31\x25\x99\xd0\x65\xa5\xa8\xf3\xae\xf8\x12\xbc\xc3\x9b\x37\xf3\xeb\xf7\x6f\xe7\x62\x27\x80\x99\xf5\x8d\xac\xd8\xac\x88\x67\x17\x98\x7d\xf1\x89\x9d\xb2\xd5\x4c\x0c\xe2\xfa\xfd\xdb\x31\x09\xb9\x6a\x22\x7d\x28\xa7\xe2\xf8\x54\xcf\x1f\x03\x1e\xb5\xaf\x36\x42\xec\xc5\xe9\x93\xb5\xd8\xed\xee\xc7\xe0\x26\x2f\x80\x50\xbc\xf3\x15\x61\x18\x70\x72\x35\xaa\xed\x32\xea\x24\xbb\x7d\xdd\x92\x9b\xa8\xf3\x48\xb9\x0c\x5b\x2b\xd5\xe4\x35\x93\xdd\xed\x28\xae\x3d\x2f\x91\xa2\xb1\x26\x1a\x0a\x68\x3c\x05\x18\x17\x3d\x58\x69\x82\xf6\xae\x32\xd1\x78\x57\xe4\x21\xad\xef\x83\x39\xb9\x80\x05\xd5\x9e\x09\x95\x0b\x30\x01\x4b\xe7\xd7\x0e\xd1\x67\x63\xee\x33\xd1\xa8\x44\xea\xb1\x36\xb1\x05\x75\x7d\xdc\x22\x44\x36\xae\x11\xeb\xd6\x58\xc2\xa7\x4f\x78\x71\xda\xfa\x10\x9d\xea\x08\xb2\x3a\xc3\xe5\x25\x66\x33\x7c\xfe\xfc\x1a\x95\x47\xb0\x44\x3d\x5e\xe6\xb3\x23\xb1\x8f\x79\x86\xe3\x5a\xdc\xe5\x6a\x53\x8f\x61\xc8\x71\x59\xe3\x89\x45\x8c\x24\x81\x22\xfe\xbd\x11\xb4\x19\xe7\xfc\xee\xbf\x77\x1f\x6f\x6f\x2e\xe7\x0f\x58\xfe\xf0\xbc\x24\xde\x93\x4c\xf7\x18\x86\xf9\x18\x28\x37\x87\x3e\x70\x72\x90\xb2\x67\xb3\x32\x96\x1a\xaa\x20\x65\xde\x0a\xf2\x20\x68\xae\x09\x72\x85\xf2\xa2\xcc\xc7\x8b\x6f\x90\xb4\xcf\x76\xf4\xc9\x53\xaf\x52\x2f\x92\xcb\x09\xa7\x08\x21\xa6\xf5\x24\xb5\x92\x91\x53\x88\xe2\x98\x95\x63\x72\x54\x49\x55\x75\xe8\xd9\xd7\x59\x31\xdf\x93\x0b\xad\xa9\x63\xfe\x43\x22\x7b\x2b\x7b\xab\x1c\x4d\x56\xb5\x81\x7e\x15\x95\x9b\xf9\xd0\xd7\xd9\x57\x04\x65\x83\x87\x23\xaa\xbe\x23\x0b\xeb\xb5\xb2\xc5\xca\xdb\xd4\x51\x40\x65\x18\x9a\x49\x45\xaa\x0e\x5e\xc9\xb3\x3d\xcd\xb5\xce\x0e\xc9\x36\x12\xdd\x32\x03\x65\x87\xf3\x57\xff\x39\x87\x7c\xb0\xf5\x3c\x9b\xc6\xb8\xf2\x27\xfc\xf9\x1d\xce\x47\xba\x80\x8a\xbe\x33\x5a\xfe\xfd\xc5\xd0\x9c\x7f\x70\xeb\x7d\x1f\x90\x5c\x34\x16\x9d\x0a\x91\x38\x9b\x35\xf5\xe2\xfb\xe8\xed\xff\xea\x1f\xb2\xdc\xcf\xea\xe3\x49\x3d\x8a\x9e\x86\x6f\x5a\xff\xe3\x5f\x16\xb6\xc1\xfa\x06\xc1\x38\x3d\xce\x45\xa7\x9c\x6a\x08\xf9\xbb\xd8\xc6\x36\x43\x62\xcb\x3e\x35\x2d\x0e\xfb\xe4\x41\xc2\xc3\x97\xb5\x67\xf9\xe1\x93\x7c\xff\xe4\xfa\xaf\x00\x00\x00\xff\xff\x48\xbb\x5e\x3a\xc8\x08\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
