// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdf\x53\x1b\x39\x12\x7e\x8e\xfe\x8a\xce\x98\x5d\x02\x8b\x3c\x90\xcd\xd5\x6d\x79\xd7\xa9\x22\xc4\xd9\xa2\x8e\x03\x0e\x42\xe5\x61\x77\x8b\x92\x47\x3d\x63\x85\x19\x69\x4e\x6a\xd9\xb0\xc4\xff\xfb\x95\x34\xe3\xdf\x86\xa4\x2a\x97\x07\x67\x90\x3e\x7d\x2d\xf5\xd7\xdd\x6a\x75\x5e\xa6\x43\xa5\xd3\xa1\x70\x23\xe0\x78\xcf\x58\x07\x3e\x18\x0b\x84\x8e\x94\x2e\x7a\x50\x9a\x02\x84\x96\x20\xad\xa9\x41\x94\x25\x90\x15\x79\xae\x32\xa0\x91\x20\x98\x18\x5f\x4a\xb0\xc6\x13\xc2\x58\x09\xa0\x11\x42\x25\x1c\xa1\x85\xc1\xd9\x3b\xd6\x81\xab\xc1\xf5\xc5\xcd\xd5\xc9\xe0\xf7\xab\x8b\x9b\xcb\x7e\xf2\x60\xbc\xe5\x16\x9d\xf1\x36\x43\x5e\x58\xe3\xeb\x84\x75\xe0\xe2\xfa\xf6\xc3\x7f\xde\x9f\xf7\x13\x53\xa3\x76\x23\x95\x53\x77\x67\x65\x65\xd7\x38\x21\x71\xdc\xcd\x4a\xe3\x65\xc2\x3a\xac\x03\xaa\x26\x31\x2c\xd1\x01\x3f\x85\xd3\xf3\xcb\x9b\x8f\xc0\x1d\xec\xbc\x92\xaa\x80\x9f\xdc\xc8\x58\x82\x64\xa7\xe5\x4d\xe0\x0b\x90\x50\x25\xf0\xa3\x3d\xe0\x9f\xe1\xec\xe2\x77\xe0\xbc\x34\x05\xaf\x2d\xe6\xea\x1e\x92\x7f\xdd\xbc\x1b\x40\x80\xc2\xfb\xab\x8b\xcb\x5e\xf2\x7d\xfc\x81\x83\x31\x95\xc3\x4b\x28\x2c\xd6\x90\x8e\x85\x4d\x4b\x35\x4c\xa5\xc9\xee\xd0\x42\x8a\x94\xa5\xb9\x23\x31\xfc\x35\x78\x4c\x33\x00\xf7\xe0\x08\xab\x8c\x4a\x70\x64\x6a\x68\x80\x3c\x2b\x51\x68\x5f\x77\x49\x55\x68\xbf\x8a\x72\x68\xc7\x2a\xc3\xa7\x70\x4b\xf3\xd5\x5d\xee\xba\xf7\xb9\x03\x9e\x43\x2a\x71\x9c\x4a\xe5\xee\x52\xf1\xb7\xb7\x98\xce\xd5\xa9\x85\xa5\x23\x06\x80\xd9\xc8\xc0\xee\xf3\x30\xd8\x38\x23\x04\x7a\x28\x6c\xfd\x5f\x6f\x48\x00\x1c\xc2\xe1\x2e\xbc\x7d\xbb\x38\x7a\xd8\x86\xf1\x9a\xd6\x57\x32\x00\x8b\x8e\x8c\xc5\xcc\x68\xe0\x57\x5b\xe6\x33\x41\xd0\x30\x35\x43\xa9\x14\x58\x19\xdd\xfd\xec\x8c\x86\xdf\x7e\xdb\x1d\x5c\x7c\xd8\x65\x8f\x0c\x20\x09\x1a\x4b\xab\xc6\x68\x93\x1e\x24\x9f\x8d\xb7\x5a\x94\x32\x39\x08\x73\x52\xb9\x20\x30\x2f\xb1\x10\xd9\x03\xb7\x58\x28\x47\xf6\x21\xe9\x01\x59\x8f\x6c\xca\x06\x17\x1f\xd6\x7c\x29\x2c\x6d\x3a\x73\x3b\x60\x4d\xbb\x5c\x31\xd6\x7a\xa6\xf6\x65\x09\x8f\x8f\xd0\x3d\x31\x3a\x57\x45\xf7\xb4\x12\x05\xba\xee\xb9\x91\x08\xd3\x29\xfc\xf8\x36\xba\x5a\x07\xd4\x8f\x5b\xa3\x08\x29\x93\xdb\x62\x68\xae\xea\xba\x56\x2e\x73\xea\x28\x2d\xbd\x3e\x84\x2f\x5f\x9a\xd3\x3d\x25\xeb\x12\x74\xcd\x60\x23\xa8\xc4\x5c\xf8\x92\xdc\x37\x09\x1a\xd6\x3d\x2d\x67\x9c\x0d\x7e\xc9\x8d\x05\xe9\x08\x94\x06\xca\xea\x83\x5f\xde\xbc\x79\xf3\x2b\x48\xc3\x5e\xd4\xd6\x90\xe9\xef\x3c\x4a\x47\x3f\xfc\x70\xb0\x3f\x65\x2f\x6a\x63\xa9\x19\xe8\x74\xf6\x0f\xa6\xec\xc5\x22\x4b\x8f\x63\x15\x39\xbd\x1a\x7c\x3a\x3e\x3b\xbb\x3d\x3e\x3b\xbb\xf8\x04\xbc\x86\x9d\x48\x02\xbc\x0a\xea\x10\x02\xe7\xcd\xff\xe7\x83\x4f\x61\x70\x36\xcd\x65\xa0\x86\x9d\xf8\xcb\x3f\xc3\xf1\xc9\xc9\xe0\xf2\x23\xf0\x09\x93\x46\x23\x63\x33\x3b\xdc\x89\x31\xb6\xc1\xe7\x1e\x5c\x16\x25\x4c\x67\xb3\xa1\x7a\x4e\x46\xa8\x9b\x48\x50\xba\x00\x1d\x54\x9d\x08\x51\xa0\xa6\x58\x47\x35\xd2\xc4\xd8\x3b\xf0\xa4\x4a\x45\x0a\x1d\x14\x06\x1d\x28\x4d\x06\xac\xc8\x10\x32\xa3\xa5\x22\x65\x74\x37\x14\xa1\x7c\xbe\xd8\x7a\xed\x60\x88\xb9\xb1\x08\x52\x3b\x50\x0e\xee\xb4\x99\x68\x20\x13\xcb\x6e\x63\x09\x01\xb5\x04\x5f\xc3\x44\xd1\x08\xb0\xaa\xe9\x01\x1c\x59\xa5\x0b\x36\x19\xa9\x12\xe1\x8f\x3f\x60\xe7\xd5\xc8\x38\xd2\xa2\x42\xe0\x72\x0f\xfa\x7d\x48\x12\xf8\xeb\xaf\xe0\x73\x70\x25\x62\x0d\x47\xe1\x3b\x1c\xbb\x59\xf3\x12\x9e\x0f\xdd\xeb\x70\x5a\x5f\xc3\x74\x1a\x75\x83\x19\x4b\xe3\x3b\x87\x04\x3f\xdd\x33\xbc\x8f\xbe\xbd\x3e\xbe\xbe\xb9\x3a\xed\xef\x2e\xb1\xfc\x3b\x5e\x18\x2d\x49\x33\x0f\xd3\xe9\x6e\x5c\xc8\xef\x67\x69\x63\xbd\x06\xce\x6b\xab\xc6\xaa\xc4\x02\x25\x70\x6e\x2b\xe0\x7c\xe6\xd0\x70\x26\xe0\x63\x48\x7b\x69\xf8\xec\xfd\x0d\x1c\x5b\x6b\xcf\x6e\xb9\xd1\xca\xd7\xcc\xeb\x60\xb0\x59\xc1\x98\xaf\xa5\x20\xe4\x99\xe0\x64\xbd\xa3\xa0\xec\xa5\xd2\x70\xe7\x87\xd8\x88\xee\x82\xe3\xbd\x43\x28\x4d\x26\x4a\x10\xb5\xe2\xa1\x26\xa0\x65\x2e\x6c\x4e\x01\xb7\x08\x89\xeb\xbc\x82\xfd\x66\xbc\x07\x7b\xdd\xfd\xce\x9f\x47\x23\xa2\xda\xf5\xd2\x74\x21\xc3\x5e\x27\x69\xf2\xd9\x58\x55\x28\x9d\x36\x37\x68\x3a\xbf\x0c\x79\x33\xd0\x5d\x18\xff\x7e\x1b\x21\x5c\xe2\xcf\xff\x9f\xd5\x49\xfd\xfd\xa4\xd6\x18\x4a\x23\x4d\xda\xf2\xb0\xc7\x47\x1e\x12\x42\x23\xec\x74\xdf\x89\xec\xce\xd7\xef\x4a\x33\x3c\x0f\x71\x9c\x24\x30\x9d\xb2\xd2\x14\x05\x5a\xe0\xd4\xf6\x20\xbc\x95\xb6\xeb\x46\x90\xcc\x53\x32\x54\xa2\x31\xda\x07\x30\x7a\x29\x15\xf6\x92\x20\xb1\xa3\x10\xb7\x50\x20\xc5\x9c\x1a\x46\x2b\x2c\xc4\xd9\x55\xbe\x5a\xb9\xd2\x7d\x46\x58\xd5\x61\x1f\xef\x95\xed\xaf\xce\xb5\xeb\xaa\x3b\xa9\x2c\xec\x2c\xe1\xd8\xf3\x7b\x94\x66\xa2\x4b\x23\x64\xd8\x66\xc3\x91\x7c\x63\x0a\x0e\x28\x93\x8d\x4f\x9e\xc8\xc2\x95\x2c\xda\x4c\x9c\x3f\x19\xc4\xe4\xd9\x88\xc2\xde\xe6\xd0\x36\x70\x6c\xcc\x6a\x6b\xc6\x4a\xa2\x4d\x7b\xe9\xad\x14\x24\xd2\x5b\xe3\xe7\xd4\xcb\x6e\xe8\xa5\xc6\x87\x0c\x0d\x53\x5f\x39\x0b\x04\x87\x36\xbe\x68\x98\xf8\xb0\x15\xbd\x1f\x56\xae\xc5\xc1\x74\xda\x82\x64\xec\x5f\x45\xa8\xa3\xfd\x60\xac\x95\xa4\x2b\x87\x2d\x40\x64\x71\x6e\xe6\xf1\xe7\x75\x69\xed\xcf\xc0\x28\x17\xc1\xf2\x7a\x76\xbd\x3d\xcf\xd0\x80\x82\xae\x4e\x8b\xda\x8d\x0c\x7d\xab\xb2\x4d\x75\x0c\x3e\xf9\x7e\x65\x83\x2f\x7b\xf3\xaf\xf9\xd4\x72\xec\xf6\x56\xff\x6a\x34\xe2\x08\x83\x8f\x27\xef\x4f\x3e\x9e\xdd\x1e\x5f\x9e\xf6\x93\x9f\x93\x27\xa4\x5b\xd9\x6c\xc4\x04\x96\xd8\x1b\xb5\xc7\x9e\xb9\x6b\x25\x1e\x36\xd4\x09\xd1\xc3\x43\xf2\xac\xe6\x95\xc6\x49\x0b\x88\xb7\xd7\x52\xf6\xb6\xc3\x4a\x2b\x52\xa2\xe4\x59\xe9\x63\xa4\x26\xad\x14\x87\xf1\x5f\x7f\x56\x6b\x56\x46\x7b\xaf\x7f\xfe\xe5\xf0\x60\x79\xe8\x68\x2b\xf0\x68\x13\xf8\x7a\x2b\xf0\x75\x04\x26\xdb\xb7\xc4\xc9\xdc\xa1\x8e\x6e\xe1\xb9\xb1\x3c\xb6\x5d\x6b\x50\x21\xc7\x68\x49\x39\xe4\x35\xa2\xe5\xde\x96\x0e\xb6\x94\xc9\x68\x86\xb1\x6a\xbc\xe9\xa5\x74\x7f\x6d\x2c\xd6\x30\xbb\x5e\xc3\x82\x3f\x57\xca\xd3\x4a\xab\xb6\xc6\xfb\x2d\x01\x8e\xb1\x6f\x48\x62\xa9\x0e\x8d\xc8\x74\xca\x18\x79\x8d\x92\x0b\x59\x41\x6d\x4d\x1e\x42\x7e\x71\xb1\x65\x46\x93\x35\x25\xaf\x4b\x11\xda\x8d\x4e\x68\x60\x44\xe9\x0c\x68\x44\xb9\xc0\x75\xe3\x1d\xdb\x1d\x9b\xd2\x57\xe8\x20\x04\x46\x66\x51\x10\xca\x59\x47\x14\x9a\xd3\xe6\xa5\x91\x85\x3e\x28\x34\x4b\x6d\xf9\xe5\x15\x1c\xfe\xf3\x1f\x87\xa1\x17\x9c\x1f\xa7\x2d\x5a\x4f\xf0\x87\x7d\x68\x43\xd8\x03\x41\xa6\x52\x19\x5f\xec\x37\x36\x59\x99\x0d\x8f\xe5\xd2\x98\xda\x81\xd7\xa4\xca\xd9\x93\x57\x39\xf0\x35\x5b\xbc\x07\x50\x87\xae\x70\x3b\xcb\xfc\x01\xb1\xfe\x7c\x78\x16\x1d\x5e\x04\x1d\x68\x5e\x2e\xf1\x2e\x73\x0f\x2e\xbc\xd0\x9d\xd2\x59\xec\xfe\x2a\xa1\x45\x81\x80\xe1\x82\xa3\x51\x80\xd0\xc8\x1a\x5f\x8c\x60\xf6\xf8\x59\x32\xd8\xbe\x80\x66\x2c\x5b\xb7\x64\xea\x8d\xe9\xff\x05\x00\x00\xff\xff\xc4\x68\x3c\x54\x33\x10\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4f\x6f\x1b\xb7\x13\xbd\xf3\x53\x3c\xcb\x3f\x44\xbf\xa2\xa5\xd6\x39\x14\x05\x9c\xd8\x40\x51\x24\x40\x2e\x0d\x60\xa3\xe8\x21\xc8\x81\xda\x9d\xdd\x65\xc4\xe5\x6c\x86\x43\xc9\x8a\xa1\xef\x5e\x50\x2b\xd5\xaa\xed\x38\x37\x02\xf3\xe6\x0f\xdf\xbc\x37\xe7\x67\xd5\xd2\xc7\x6a\xe9\x52\x0f\x4b\x77\xc6\xf8\x16\x67\xe8\x84\x46\x54\x6b\x27\x55\xf0\xcb\xaa\xe1\x7a\x45\x82\x8a\xb4\xae\xda\xa4\x6e\xf9\x06\xda\x53\x34\x40\xda\x26\xa5\xa1\xd6\x80\xa4\x3c\x62\x02\xda\x3a\x90\x8b\x79\x5c\xa8\x1f\x48\x7e\x88\x4a\x24\x6b\x5f\xd3\xf7\x70\x27\xf1\x61\xd5\xa6\xc5\x5d\x9b\x60\x5b\x54\x0d\xad\xab\xc6\xa7\x55\xe5\xbe\x65\xa1\x4a\x28\x71\x96\x9a\xec\xe8\x44\x5f\x1b\x80\xea\x9e\x31\x7f\x19\x86\x27\x7f\x44\x29\x8f\x4e\xc6\xaf\x99\xd5\x01\x17\xb8\x98\xe3\xfa\xfa\xe1\xeb\x65\x0c\xce\x51\x1f\x67\x1a\x40\x28\x29\x0b\xd5\x1c\x61\x6f\x9e\xc4\xef\xef\x2d\x7c\x0b\xfa\x8a\xc5\x0d\x07\xc2\xcc\xc7\x56\xdc\x0c\xbb\x9d\x01\x6a\xa7\x98\x9a\x4c\xe8\xaa\x71\x34\x70\x5c\x7c\x49\x1c\xf1\xf6\xed\xfc\xdd\xc7\xf7\x73\x73\x6f\x80\x59\xe0\xce\x36\xe2\xd7\x24\xb3\x4b\xcc\xbe\x70\x96\xe8\x42\x33\xfb\xa5\xc4\x1a\x9f\xdc\x32\x90\x0d\xd4\xb9\x7a\x6b\x85\x3a\x9f\x54\xb6\xb3\x4b\xa8\x64\x32\x3b\xf3\xee\xe3\xfb\xfd\x1c\x14\x9b\xa9\xef\x29\xe3\x4e\xf4\x29\xe5\xcf\x03\x1e\x6d\xb8\xf5\xc6\x1c\xf8\x1b\x73\x08\xb8\xbf\xc7\xe2\x0f\x8e\xad\xef\x16\x1f\x06\xd7\x51\x5a\xfc\xc9\x0d\x61\xb7\xc3\xab\xeb\xfd\x42\x62\x41\xbd\x32\xe6\x1c\x9b\x9e\xe2\x54\xda\xc7\x0e\xb1\xc0\x36\xce\x75\x14\x15\x2e\x36\x88\xa4\x1b\x96\x15\xb2\xfa\xe0\xd5\x53\x42\xc7\x94\xe0\xa3\x32\xc4\xd5\x84\x9a\x63\xe3\xd5\x73\x5c\x98\xf3\x42\xef\x31\x59\x72\x4c\x58\x52\xcb\x42\x68\x62\x82\x4f\x58\x45\xde\x44\x28\x17\xed\x1e\x3a\xd1\x9e\x89\x3c\x62\xe3\xb5\x07\x0d\xa3\x6e\x91\x54\x7c\xec\xcc\xa6\xf7\x81\xf0\xe9\x13\xfe\xf7\xff\x9e\x93\x46\x37\x10\x6c\xf3\x13\xae\xae\x30\x9b\xe1\xf3\xe7\x37\x68\x18\x29\x10\x8d\x78\x5d\xde\x91\xcc\x21\xe7\x0c\x2f\x73\x71\x5b\x7e\x9b\x47\xec\x76\x25\xaf\x70\x3c\x55\x31\xfb\x22\x89\x14\x3f\xdf\x19\xba\x1b\x59\x14\xb7\xbf\xdf\xfe\x75\xf3\xe1\x6a\x7e\x52\xe5\x6f\x96\x15\xc9\xa1\xc8\x14\xc7\x6e\x37\xdf\x27\xda\xbb\xe3\x1e\x24\x47\x58\x3b\x8a\x5f\xfb\x40\x1d\x35\xb0\x56\x06\x58\x7b\x24\xb4\xfc\x09\x76\x8d\xea\xb2\x2a\xcf\xcb\x6f\xb0\x74\xe8\xf6\xe2\xc8\xd3\xae\xf2\x68\x72\x2c\x0d\xa7\x0c\x63\xf2\xd8\x38\x25\x5b\x3b\xab\x92\x93\x9a\x97\xd4\xae\x39\x52\x63\x5d\x33\x60\x14\x6e\x0b\x63\x3c\x52\x4c\xbd\x6f\xd5\xd6\x1c\x55\x38\xd8\x31\xb8\x48\x93\x54\x43\xa2\x1f\x65\x95\x65\x9e\xea\xba\xe8\x8a\xe0\x42\x62\x44\xa2\xe6\x01\xb9\x08\x5c\xbb\xb0\x58\x73\xc8\x03\x25\x34\x5e\x50\x0b\x39\xa5\xe6\xa8\x95\x62\xff\xc9\xfa\x75\x51\x48\x91\x91\x19\x56\x05\x68\x07\x5c\xfc\xf6\xeb\x05\xec\xc9\x61\x64\xf1\x9d\x8f\xd5\x77\xea\x97\x39\x22\x2b\x5d\xc2\x29\x0f\xbe\xb6\xff\x9d\x18\xb5\x94\xa3\x1b\x98\xc7\x84\x1c\xd5\x07\x0c\x2e\x29\x49\x11\x6b\x1e\xcd\x83\xf5\x28\x16\x5b\x3f\x5f\xe5\x5f\xaf\x3e\x76\xea\x8b\xe8\xc9\x7c\xd3\xbd\x28\xc6\x93\xb4\x4d\x81\x3b\x24\x1f\xeb\xbd\x2f\x06\x17\x5d\x47\xa0\x35\xc9\x56\xfb\x02\xd1\x5e\x38\x77\x3d\x8e\x27\xe7\xa4\xe1\xe1\xee\x1c\xab\x3c\x3b\x12\x8f\x4f\xc2\xff\x04\x00\x00\xff\xff\xfd\x76\x5a\x70\x7b\x06\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
