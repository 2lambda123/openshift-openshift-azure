// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x5f\x6f\x13\xbf\x12\x7d\xc6\x9f\x62\xd8\x14\x4a\x7b\xeb\x6c\x5b\xb8\xba\x28\x10\xa4\x52\x8a\x54\xa9\x97\xa2\x96\x2b\x1e\x00\x55\xce\x7a\xb2\x31\xf1\xda\x7b\xed\x71\xd2\x52\xf6\xbb\xff\xe4\xdd\x4d\x9a\x7f\x2d\x95\xe0\x21\xa4\xf6\xf1\x8c\x7d\xce\xf1\x78\xd2\x79\x9a\x0e\x94\x49\x07\xc2\x8f\x80\xe3\x35\x63\x6a\x08\x4f\x21\x77\x58\x42\x3a\x11\x2e\xd5\x6a\x90\x4a\x9b\x8d\xd1\x41\x8a\x94\xa5\x43\x4f\x62\xf0\x06\x68\x84\x86\x01\xf8\x1b\x4f\x58\x64\xa4\xc1\x93\x2d\xa1\x01\xf2\x4c\xa3\x30\xa1\xec\x92\x2a\xd0\xfd\x11\xe5\xd1\x4d\x54\x86\xf7\xe1\x16\xe6\x8b\xf1\xd0\x77\xaf\x87\x1e\xf8\x10\x52\x89\x93\x54\x2a\x3f\x4e\xc5\xaf\xe0\x30\x75\xe8\x6d\x70\x19\xf2\x52\x38\x3a\x60\x00\x98\x8d\x2c\x6c\x3f\x0c\x83\xb5\x33\x42\x0c\x0f\xb9\x2b\xff\x1f\x2c\x09\x80\x7d\xd8\xdf\x86\x77\xef\xee\x8e\x1e\xb7\x61\x83\xa1\xd5\x95\x0c\xc0\xa1\x27\xeb\x30\xb3\x06\xf8\xc5\x86\xf9\x4c\x10\x34\x91\x9a\xa1\x54\x0a\x2c\xac\xe9\xfe\xf4\xd6\xc0\xdb\xb7\xdb\x27\xe7\x1f\xb7\xd9\x2d\x03\x48\xb4\xcd\xb9\x74\x6a\x82\x2e\xe9\x41\xf2\xd3\x06\x67\x84\x96\x09\xab\xd8\xc9\xf9\xc7\x15\xa2\x84\xa3\x75\xa6\x36\x03\x56\x84\x19\x2a\xc6\xda\x63\x97\x41\x6b\xb8\xbd\x85\xee\xb1\x35\x43\x95\x77\x4f\x0b\x91\xa3\xef\x7e\xb2\x12\xa1\xaa\xe0\xf9\xbb\x9a\x47\x13\x51\xcf\x37\x5a\x04\x29\x93\x9b\x0c\x32\x97\x6c\x55\x08\x9f\x79\x75\x90\xea\x60\xf6\xe1\xf7\x6f\x20\x17\xf0\x5e\xcd\x16\xa0\x2b\x09\x1b\xb5\x24\x0e\x45\xd0\xe4\x1f\xa5\x56\x5c\x77\xbf\x56\xf5\x6c\xe4\x65\x68\x1d\x48\x4f\xa0\x0c\x50\x56\xee\xbd\x7e\xf5\xea\xd5\x1b\x90\x96\x3d\x29\x9d\x25\xdb\xdf\xba\x95\x9e\x9e\x3d\xdb\xdb\xad\xd8\x93\xd2\x3a\x6a\x06\x3a\x9d\xdd\xbd\x8a\x3d\x51\x25\x89\x81\x46\x0f\xfc\x08\xce\x2f\xaf\x3e\x9e\x5e\x9c\x7c\x3d\x3a\x3b\xbb\x3a\x3a\x3b\x3b\xff\x0a\xbc\x84\xad\x3a\x08\xf0\x22\xaa\x43\x08\x9c\x37\xff\x7f\x3a\xf9\x1a\x07\x67\xd3\x5c\xc6\xd0\xb0\x55\x7f\xf2\x9f\x70\x74\x7c\x7c\xf2\xf9\x0b\xf0\x29\x93\xd6\x20\x63\xb3\x3c\xdc\x8b\x09\xb6\xce\xf2\x37\x3e\xab\x25\x4c\x67\xb3\x8c\x75\x60\x3a\x42\xd3\x38\x41\x99\x1c\x4c\x54\x75\x2a\x44\x8e\x86\x40\x18\x09\x06\x69\x6a\xdd\x18\x02\x29\xad\x48\xa1\x87\xdc\xa2\x07\x65\xc8\x82\x13\x19\x42\x66\x8d\x54\xa4\xac\xe9\xb2\x0e\xa8\xe1\x7c\xb1\x0b\xc6\xc3\x00\x87\xd6\x21\x48\xe3\x41\x79\x18\x1b\x3b\x35\x40\x36\x1a\xa0\xcd\x84\x80\x46\x42\x28\x61\xaa\x68\x04\x58\x94\x74\x03\x9e\x9c\x32\x39\x9b\x8e\x94\x46\xf8\xf6\x0d\xb6\x5e\x8c\xac\x27\x23\x0a\x04\x2e\x77\xa0\xdf\x87\x24\x81\x1f\x3f\x22\xe7\xe0\x35\x62\x09\x07\xf1\x7b\x3c\x76\xb3\xe6\x29\x3c\x6c\xdd\xcb\x78\xda\x50\x42\x55\xd5\xba\xc1\x2c\x4a\xc3\x9d\x47\x82\x7f\x5d\x33\xbc\xae\xb9\xbd\x3c\xba\xfc\xdf\xc5\x69\x7f\x7b\x21\xca\x7f\x85\x27\x74\x6d\x90\x66\x1e\xaa\x6a\xbb\x5e\xc8\xaf\x67\xd7\xc6\x05\x03\x9c\x97\x4e\x4d\x94\xc6\x1c\x25\x70\xee\x0a\xe0\x7c\x46\x68\x3c\x13\xf0\x09\xa4\xbd\x34\x7e\xed\xfd\x02\x8e\x6d\xb6\x07\xb7\xdc\x68\x15\x4a\x16\x4c\x4c\xd8\xac\x60\x2c\x94\x52\x10\xf2\x4c\x70\x72\xc1\x13\x63\x3e\xa6\x54\xc0\x1d\x42\xe2\x3b\x2f\x60\x37\x56\x00\x74\x3d\xd8\xe9\xee\x76\xbe\x1f\x8c\x88\x4a\xdf\x4b\xd3\x3b\x72\x77\x3a\x49\x73\x4b\xad\x53\xb9\x32\x69\x51\x1f\x33\xb5\x25\x1a\x3f\x52\x43\xe2\xcd\x40\x77\x1c\x06\xd8\xf8\xe8\xef\x73\x44\x13\xd4\x1f\x8b\x51\xd9\xed\x2d\x8f\x4e\x32\x08\x5b\xdd\xf7\x22\x1b\x87\xf2\xbd\xb6\x83\x4f\xd1\x00\x49\x02\x55\xc5\xb4\xcd\x73\x74\xc0\x09\x9a\x3d\xf1\x96\x93\xae\x1f\x41\x32\xf7\x72\xbc\xc2\x13\x74\x37\x60\xcd\x82\x87\x76\x92\xe8\x7a\x4f\x51\x70\xc8\x91\x6a\x33\x0e\xea\x2c\x2c\x0a\x74\x31\x5c\xbe\xf2\xe9\x2e\x23\x2c\xca\xb8\x8f\x0f\xca\xf5\x97\xe7\xda\x75\xc5\x58\x2a\x07\x5b\x0b\x38\xf6\xf0\x1e\xa5\x9d\x1a\x6d\x85\x8c\xdb\x6c\x62\x24\x8f\xf4\xee\x09\x65\xb2\xe1\xe4\x1e\xfb\x2e\xd9\x6f\xdd\x71\xdf\x19\xd4\xae\x5b\x13\xba\xb7\x3e\xb4\x09\x9c\x69\x1b\x64\xe9\xec\x44\x49\x74\x69\x2f\xbd\x92\x82\x44\x7a\x65\xc3\x3c\xf4\x22\x0d\xbd\xd4\x86\x68\xed\x38\xf5\x87\xb3\x40\x24\xb4\xe1\xa2\x89\xc4\x07\xad\xe8\xfd\xb8\x72\xc5\x07\x55\xd5\x82\x24\x7a\x52\x46\xc4\x02\xd4\x8f\xc9\x5a\x49\xba\x72\xd0\x02\x44\x56\xcf\xcd\x18\x7f\x58\x97\x36\xff\x0c\x8c\xf2\xce\x2c\x87\xb3\x77\xe1\xe1\x08\x0d\x28\xea\xea\x8d\x28\xfd\xc8\xd2\x63\x95\x6d\xca\x4a\xe4\xe4\xef\x95\x8d\x5c\xf6\xe6\xdf\xe6\x53\x8b\xde\xed\x2d\xff\xd5\x68\xc4\x11\x4e\xbe\x1c\x7f\x38\xfe\x72\x76\x75\xf4\xf9\xb4\x9f\xbc\x4c\xee\x91\x6e\x69\xb3\x35\x26\x46\xa9\x9b\x8a\xf6\xd8\x33\xba\x96\xfc\xb0\xa6\x4e\x74\x0f\x8f\x97\x67\xf9\x5e\x19\x9c\xb6\x80\xba\xec\x2f\xdc\xde\x76\x58\x19\x45\x4a\x68\x9e\xe9\x50\x3b\x35\x69\xa5\xd8\xaf\xff\xf5\x67\x95\x67\x69\xb4\x77\xf8\xf2\xf5\xfe\xde\xe2\xd0\xc1\x46\xe0\xc1\x3a\xf0\x70\x23\xf0\xb0\x06\x26\x9b\xb7\xc4\xc9\x8e\xd1\xd4\xb4\xf0\xa1\x75\xbc\xee\x57\x56\xa0\x42\x4e\xd0\x91\xf2\xc8\x4b\x44\xc7\x83\xd3\x1e\x36\x14\xcd\x3a\x0d\x63\xc5\x64\x9d\xa5\x74\x77\x65\xac\xae\x61\x6e\xb5\x86\x45\x3e\x97\xca\xd3\x52\x8f\xb3\x12\xf7\x31\x06\xc7\xfa\xc1\x4d\xea\x52\x1d\x5f\xf0\xaa\x62\x8c\x82\x41\xc9\x85\x2c\xa0\x74\x76\x18\x2d\x7f\xf7\x76\x64\xd6\x90\xb3\x9a\x97\x5a\xc4\x77\xba\x13\x5f\x7e\xa1\xbd\x05\x83\x28\xef\x70\x5d\x6d\x33\xa1\xbb\x13\xab\x43\x81\x1e\xa2\x31\x32\x87\x82\x50\xce\x5a\x89\xd8\xd5\x35\xfd\x77\x16\x1b\x88\xd8\x65\xb4\xe5\x97\x17\xb0\xff\x9f\x7f\xef\xc7\x26\x6a\x7e\x9c\xb6\x68\xdd\x13\x3f\xee\xc3\x58\xc2\x1e\x08\xb2\x85\xca\xf8\xdd\x7e\xeb\xee\x24\x73\xf1\x97\x8f\xb6\xb6\xf4\x10\x0c\x29\xdd\xf2\x11\x7b\x99\x50\xb2\xbb\x46\x1a\x4d\x6c\xa7\x36\x47\x99\x77\xde\xab\x7d\xf7\x83\xe8\xd8\x4a\x77\x40\x2a\x2f\x06\xba\x7e\xcb\xfc\x8d\xd7\x36\x07\xaf\x4c\x56\xb7\x4d\x85\x30\x22\x47\xc0\xf8\xc0\xd1\x28\x42\x68\xe4\x6c\xc8\x47\x30\xfb\x49\xb0\x90\xb0\x89\x83\xb3\x28\x1b\xb7\x64\xcb\xb5\xe9\x7f\x02\x00\x00\xff\xff\xb8\x3b\x50\x97\x00\x0e\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x6f\x1b\x37\x10\xbd\xf3\x57\x3c\xcb\x45\xd4\xa2\xe0\xae\x73\x28\x0a\x38\xb1\x81\xa2\x48\x80\x5c\x1a\xc0\x46\xd1\x43\x90\x03\xb5\x9c\xdd\x65\xc4\x9d\x61\xf8\x21\xd9\x31\xf4\xdf\x0b\x6a\xad\x5a\xb5\x1d\xe7\x46\x80\x6f\xde\x0c\xdf\xbc\xc7\xd3\x93\x76\xe5\xb8\x5d\x99\x34\x42\xd3\x8d\x52\xae\xc7\x09\x86\x48\x01\xed\xc6\xc4\xd6\xbb\x55\x6b\xa5\x5b\x53\x44\x4b\xb9\x6b\xfb\x94\xcd\xea\x0d\xf2\x48\xac\x80\x74\x9b\x32\x4d\x5d\xf6\x48\x59\x02\x66\xa0\xee\x3c\x19\x2e\xa1\xc9\x6e\xa2\xf8\x43\x54\xa2\xb8\x71\x1d\x7d\x0f\x77\x74\x3f\xad\xfb\xd4\xdc\xf4\x09\xba\x47\x6b\x69\xd3\x5a\x97\xd6\xad\xf9\x56\x22\xb5\x91\x92\x94\xd8\x91\x0e\x26\xe6\xd7\x0a\xa0\x6e\x14\x2c\x5f\x86\xe1\xc9\x1b\x51\xe9\x31\xc4\xf0\xb5\x48\x36\xc0\x19\xce\x96\xb8\xbc\x7c\x78\x7a\x1d\x43\x0a\xe7\xc7\x95\x0a\x88\x94\xb2\x44\xea\x84\xa1\xaf\x9e\xdc\xdf\xdd\x69\xb8\x1e\xf4\x15\xcd\x95\x78\xc2\xc2\x71\x1f\xcd\x02\xbb\x9d\x02\x3a\x93\x31\x37\x99\xd1\xad\x35\x34\x09\x37\x5f\x92\x30\xde\xbe\x5d\xbe\xfb\xf8\x7e\xa9\xee\x14\xb0\xf0\x32\x68\x1b\xdd\x86\xe2\xe2\x1c\x8b\x2f\x52\x22\x1b\x6f\x17\x6a\xa7\xde\x7d\x7c\xbf\x6f\x42\x6c\x67\xd2\x63\x39\x4d\xcc\x4f\xf5\x7c\x1e\xf0\x68\x7d\xbd\x53\xea\x5e\x9c\x50\xbc\xc7\xdd\x1d\x9a\x3f\x85\x7b\x37\x34\x1f\x26\x33\x50\x6a\xfe\x12\x4b\xd8\xed\xf0\xea\x72\xaf\x36\x57\xd4\x2b\xa5\x4e\xb1\x1d\x89\x67\x6a\xc7\x03\xb8\xc2\xb6\xc6\x0c\xc4\x19\x86\x2d\x98\xf2\x56\xe2\x1a\x25\x3b\xef\xb2\xa3\x84\x41\x28\xc1\x71\x16\x44\xd3\x11\x3a\x61\xeb\xb2\x13\x6e\xd4\x69\xd5\xee\x50\x1c\x0b\x27\xac\xa8\x97\x48\xb0\x9c\xe0\x12\xd6\x2c\x5b\x46\x96\x6a\xcc\xfb\x4e\xb4\x57\xa2\x04\x6c\x5d\x1e\x41\x53\xc8\xb7\x48\x39\x3a\x1e\xd4\x76\x74\x9e\xf0\xe9\x13\x7e\xfa\x79\x94\x94\xd9\x4c\x04\x6d\x7f\xc1\xc5\x05\x16\x0b\x7c\xfe\xfc\x06\x56\x90\x3c\x51\xc0\xeb\x7a\x66\x52\xf7\x35\x27\x78\x59\x8b\xeb\xfa\xda\x12\xb0\xdb\xd5\xba\xaa\xf1\xcc\xa2\xf6\x24\x89\x32\x7e\xbd\x51\x74\x13\x24\x66\x5c\xff\x71\xfd\xf7\xd5\x87\x8b\xe5\x11\xcb\x3f\x12\xd7\x14\xef\x49\xe6\x7b\xec\x76\xcb\x7d\xa1\xbe\x39\xec\x21\x16\x86\xd6\x21\xba\x8d\xf3\x34\x90\x85\xd6\x71\x82\xd6\x07\x41\xeb\x9b\xa0\x37\x68\xcf\xdb\x7a\x3c\xff\x06\x4d\xf7\xdd\x5e\x1c\x79\xde\x55\x09\xaa\x70\x6d\x38\x57\x28\x55\x82\x35\x99\x74\x67\x74\x8e\x25\x65\xf5\x92\x95\x73\x61\xb2\xda\xd8\x09\x21\x4a\x5f\x15\x93\x40\x9c\x46\xd7\x67\xdd\x09\xe7\x28\x5e\x07\x6f\x98\x66\xab\xfa\x44\x3f\xaa\xaa\xcb\x3c\xf6\x75\xf5\x15\xc1\xf8\x24\x60\x22\xfb\x80\x6c\xbc\x74\xc6\x37\x1b\xf1\x65\xa2\x04\xeb\x22\xba\x48\x26\x93\x3d\x78\xa5\x66\x7b\xce\x75\x57\x1d\x52\x6d\xa4\xa6\x75\x05\xea\x09\x67\xbf\xff\x76\x06\x7d\xf4\xeb\x49\x74\x83\xe3\xf6\x3b\xfc\x75\x0e\x96\x4c\xe7\x30\x59\x26\xd7\xe9\xff\x4f\x8c\x2e\xd6\x1f\xd5\x8b\x84\x84\xc2\xd9\x79\x4c\x26\x65\x8a\xd5\xac\x25\xa8\x87\xe8\x11\x9b\x95\xa7\xe7\x59\xfe\xcb\xea\xe3\xa4\xbe\x88\x9e\xc3\x67\x5d\x32\x2b\x5f\x83\x17\xd3\x6d\xf2\x32\x20\x39\xee\xf6\xb9\x98\x0c\x9b\x81\x40\x1b\x8a\xb7\x79\xac\x90\x3c\x46\x29\xc3\x88\xc3\x7f\x72\xd4\x70\xe6\xa1\x03\xcb\xb3\x23\x49\x78\x72\xfd\x6f\x00\x00\x00\xff\xff\x94\xf2\x4c\xb9\x58\x06\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
