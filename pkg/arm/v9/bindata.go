// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5d\x73\x1b\xb7\xce\xbe\x2e\x7f\x05\xba\x72\x9b\x26\x35\xb5\x76\xda\xbe\x6f\x47\xad\x33\xe3\x38\x4e\xc7\xa7\x6e\xec\x63\x27\xa7\x17\x69\x26\x43\x2d\xb1\x12\x23\x2e\xb9\xe5\x87\x64\x55\xd1\x7f\x3f\x03\xee\x4a\x96\x2c\xd9\x49\xea\xf4\xe4\xc2\x91\x48\x10\x00\xf1\xf1\x00\xa0\x3a\x5f\xe6\x7d\x65\xf2\xbe\xf0\x43\xe0\x78\xc5\x58\x07\x9e\x5b\x07\x01\x7d\x50\x66\xd0\x03\x6d\x07\x20\x8c\x04\xe9\x6c\x0d\x42\x6b\x08\x4e\x94\xa5\x2a\x20\x0c\x45\x80\x89\x8d\x5a\x82\xb3\x31\x20\x8c\x95\x80\x30\x44\xa8\x84\x0f\xe8\xe0\xf8\xf4\x29\xeb\xc0\xc5\xf1\xe5\xd9\xab\x8b\xa3\xe3\x5f\x2e\xce\x5e\x9d\x1f\x64\x53\x1b\x1d\x77\xe8\x6d\x74\x05\xf2\x81\xb3\xb1\xce\x58\x07\xce\x2e\xdf\x3e\xff\xf7\xb3\x17\x07\x99\xad\xd1\xf8\xa1\x2a\x43\x77\x67\xed\x64\xd7\x7a\x21\x71\xdc\x2d\xb4\x8d\x32\x63\x1d\xd6\x01\x55\x07\xd1\xd7\xe8\x81\x9f\xc0\xc9\x8b\xf3\x57\x2f\x81\x7b\xd8\xf9\x46\xaa\x01\x7c\xeb\x87\xd6\x05\xc8\x76\x5a\xbe\x19\xbc\x87\x20\x94\x06\xbe\xff\x10\xf8\x3b\x38\x3d\xfb\x05\x38\xd7\x76\xc0\x6b\x87\xa5\xba\x82\xec\xd7\x57\x4f\x8f\x81\x48\xe1\xd9\xc5\xd9\x79\x2f\xbb\x1f\x7f\xe2\xc1\xd8\x6c\x06\xaa\x84\xee\x91\x35\xa5\x1a\x74\x2f\xb1\x88\x4e\x85\xe9\xb9\x08\xc5\xf0\x5c\x14\x23\x31\x40\x0f\xf3\x39\xd3\x76\x30\x40\x07\x3c\xb4\x86\xe3\x3e\x08\x17\x62\xdd\xf5\x43\xc8\x94\xf1\x41\x68\xad\xcc\x00\x1c\x4a\x20\x93\x17\xd2\x40\x91\x78\x46\x27\x82\xb2\x06\xac\x81\x9d\x6f\x86\xd6\x07\x23\x2a\x7c\x98\xb1\x42\x04\x78\x92\x8f\x85\xcb\xb5\xea\xe7\xd3\x58\xe5\x85\x56\x68\x02\x2f\xd0\x85\x6e\x8d\x15\xfc\xfc\xf3\x83\xe3\xb3\xe7\x0f\x48\xc5\x23\x74\xe1\xd0\x3f\x9d\x06\xf4\x4b\x5d\x69\x4d\x95\xaa\x10\x01\x7d\xb7\xd5\xf5\x02\x6b\xeb\x55\xb0\x6e\x9a\xb6\xe1\x3d\x5c\x06\x47\x7a\xcd\xe7\xec\xf8\xec\xf9\xed\x42\x47\x38\xbd\x29\xf3\xdc\xa9\xb1\x08\xf8\x2b\x4e\x3f\x51\xf2\xaf\x38\xdd\x10\xfc\xd1\x06\x3c\xbc\x38\x03\xdf\x7a\x01\x62\x2d\x49\x06\xbc\x9e\xcd\x5a\x7e\xfe\x5f\x56\x99\x0f\xb8\x2b\xdb\x85\x0c\xe6\xf3\x37\x1b\x26\x2f\xad\x03\x11\x02\x56\x75\x00\x65\x60\xb6\xdf\xed\xfe\x30\xff\x09\xa4\x65\x00\xd3\x58\x41\xab\x06\xf0\x29\xf0\x3f\xe1\xd3\x64\x26\x91\xf0\xf5\xd7\xd0\x77\x28\x46\x0c\xe0\xce\x0b\xbf\x5e\xa8\xb1\x33\x6b\x3f\xcd\xdf\x6c\xbf\x7a\xab\x53\x13\x43\xa5\x50\x1a\x65\xc6\x80\x62\xf6\xf5\xeb\x95\xd3\xc0\x75\x80\x1f\xe0\xcd\x9b\x9f\x28\xbb\x0d\x78\x8d\x58\xc3\xfe\x4f\x80\xda\x23\xe0\x95\x0a\xf4\xa5\x54\x4c\x5a\x83\x1f\xf0\x86\xc3\xca\x8e\x3f\x2d\x98\xc9\x7a\x85\x46\x61\x08\x7c\x98\xab\x80\xbb\x12\xee\x0c\xee\x3b\x82\x90\xcd\x66\x68\xe4\x7c\x4e\x28\xf7\xf2\xec\xd9\x59\x0f\x24\x6a\x0c\x98\x70\xab\xb4\x5a\xdb\x09\x69\x97\x70\x09\x0a\x87\x8d\x4a\xa2\x24\x3c\x53\x01\x94\x87\xbe\x18\xa1\x04\x65\x82\x05\x1b\x1d\xfc\xe7\x37\x50\x15\xb9\x89\xa5\x33\x42\x4a\xe0\x25\x48\x5b\x8c\xd0\x31\xa6\x4a\xf8\x12\x06\x0e\xeb\x6b\x9d\x9a\x2d\xc8\x31\x14\x79\xe9\x83\xe8\x37\x56\x65\x00\x7e\xea\x03\x56\x45\xd0\xe0\x83\xad\x5b\x1e\x3c\x5d\x3d\xd6\xdd\xa0\x2a\x74\x1f\xa4\xf2\xe8\xc6\xaa\xc0\xdb\xe8\x56\xf6\xab\x51\xe9\xbb\x57\xa5\x27\x75\x73\x89\xe3\x5c\x2a\x3f\xca\xc5\x5f\xd1\x61\xbe\xc4\xe7\x5a\xb8\xb0\xcf\x00\xb0\x18\x5a\x78\x70\x37\x19\x6c\xdc\x11\x88\x3d\x0c\x5c\xfd\x67\xb4\x41\x00\xec\xc1\xde\x03\x78\xf2\xe4\xfa\xea\xa4\x86\x8d\x26\xdc\x3c\xc9\x00\x1c\xfa\x60\x1d\x16\xd6\x00\xbf\xd8\xb2\xdf\xa0\x0d\x71\x6a\x96\x72\x29\xb0\xb2\xa6\xfb\xce\x5b\x73\x8d\x34\x0c\x20\x23\x94\x97\x4e\x8d\xd1\x65\x3d\xc8\xde\xd9\xe8\x8c\xd0\x32\xdb\xa5\x3d\xa9\x3c\x41\x3c\xd7\x38\x10\xc5\x94\x3b\x1c\x28\x1f\xdc\x34\xeb\x41\x70\x11\x59\x83\x2f\xeb\xb6\x14\x2e\x6c\x1a\x73\x3b\xc1\x0d\xdf\x95\x8a\xb1\xd6\x32\x75\xd4\x9a\x40\x60\x91\xf8\x27\x29\x84\xba\x2f\xac\xc4\x94\xea\x4f\x92\xa9\x0d\x51\x7d\xbd\x35\x8a\x30\x14\x72\x5b\x0c\x2d\xbd\x7a\xd3\x57\xbe\xf0\x6a\x3f\xd7\xd1\xec\xc1\xfb\xf7\xcd\xed\x6e\x73\xeb\x0a\xe9\x0d\x81\x8d\x43\x25\x96\x22\xea\xe0\x3f\xca\xa1\x74\xee\x76\x77\xa6\x5d\xb2\x0b\xc1\xa7\xf4\x09\x3a\x43\x51\xef\xfe\xf8\xfd\xf7\xdf\x27\xf0\xfc\xa2\x76\x36\xd8\x83\x9d\x99\xf4\xe1\xab\xaf\x76\x1f\xcd\xd9\x17\xb5\x75\xa1\x59\xe8\x74\x1e\xed\xce\xd9\x17\xd7\x75\xfa\x30\xf5\x11\x27\x17\xc7\xbf\x1f\x9e\x9e\xbe\x3d\x3c\x3d\x3d\xfb\x1d\x78\x0d\x3b\x89\x09\xf0\x8a\xbc\x13\x10\x38\x6f\xfe\x7f\x71\xfc\x3b\x2d\x2e\xb6\xb9\x24\xd6\xb0\x93\xfe\xf2\x77\x70\x78\x74\x74\x7c\xfe\x12\xf8\xa4\x05\xb6\x85\x1c\xee\xc5\x18\xdb\xe0\xf3\x53\xdf\xa0\x57\xbe\xd8\x25\x64\x99\x24\x98\xa4\x48\x20\x30\x31\xe4\xd5\x89\x10\x03\x34\x21\x75\x52\x06\xc3\xc4\xba\x11\xc4\xa0\xb4\x0a\x0a\x3d\x0c\x6c\x82\xe3\x60\xc1\x89\x02\x09\x10\xa5\x22\xe4\xe9\x52\x1b\x52\x2e\x0f\xbb\x68\x3c\xf4\xb1\xb4\x0e\x41\x1a\x4f\x70\x34\x32\x76\x62\x20\xd8\x04\x60\x8d\x24\x04\x34\x12\x62\x0d\x13\x15\x86\x40\x10\x3e\x05\x9f\xaa\x0d\x9b\x0c\x95\xc6\x84\xee\x4b\x84\x05\x2e\x1f\xc2\xc1\x01\x64\x59\x42\x78\x69\xaf\xf1\xfd\x23\xf0\x9c\x02\x99\xee\xb8\x19\xcb\x97\x0d\x15\xcc\xe7\x77\x17\xc7\xbb\x33\xe2\x9a\xcb\xfd\xea\xdf\x47\x4b\xf9\xd4\x32\xf8\x7f\x7b\xb7\xd5\x41\x6a\x51\x5f\x9c\xbd\x3c\xee\xc1\x89\x81\x32\x86\xe8\x70\x17\x2a\x3b\xc6\xa6\x71\x56\xa6\xb4\xae\x6a\x4b\x5e\x0c\x5e\x49\x04\x5b\x02\x9a\xb1\x72\xd6\x54\xe4\xee\xb1\x70\xaa\x89\xa9\x0e\xf3\x18\xe0\xdb\x2b\x86\x57\x29\x3a\x2f\x0f\x2f\x5f\x5d\x9c\x1c\x3c\x58\xb9\xca\x6f\xc9\x12\xed\x4d\x9a\x7d\x98\xcf\x1f\xa4\x83\xfc\x6a\x01\x3c\x2e\x1a\xe0\xbc\x76\x6a\xac\x34\x0e\x50\x02\xe7\x54\x51\xf9\x22\x24\x29\x2a\x80\x8f\x21\xef\xe5\xf4\xb1\xf7\x17\x70\x6c\xa5\xdd\x6d\xb7\xd6\x03\x2c\x1a\x12\xd8\x9c\x60\xac\xe9\x34\x78\x21\x78\x70\xd1\x07\xca\x0d\x8f\x21\x65\x45\xac\x61\x80\x06\xc7\x22\x79\x93\x56\x7c\x10\xc5\x08\x84\x07\x6f\xa9\xe6\xfa\x14\xd2\xeb\xbd\x81\xf2\xa0\x85\x92\x64\x30\xe8\x4f\x59\x27\x91\xb4\xa2\x89\x34\x08\x65\xd0\xed\x36\x27\xb5\xf5\xe8\x20\x0c\x55\x4a\x94\x36\x45\x6e\x21\xae\xac\x43\xd6\x21\x55\x3c\x94\xce\x56\x6b\xb4\xb5\xb3\x05\x7a\x4f\x99\x35\x51\x5a\x83\x1f\xaa\x9a\xf8\x35\xfa\xb3\x46\x0d\x8f\xe0\x87\xcd\x30\x14\xa9\x89\x29\x10\x04\x48\x31\x05\x6b\xf4\x94\x6e\x53\x27\x65\x90\x42\xd1\xb3\x3c\x7a\x97\x6b\x5b\x08\x9d\x86\x2f\xf1\x97\xc7\x42\xb6\x97\xa5\x31\xa3\x2f\x3c\x6a\x65\x28\x3b\xe1\x7c\xff\xd9\x07\xe9\xbd\x2d\xc3\x44\xb8\x8f\xa6\x2f\xb4\xa8\xc4\x78\x41\xcd\x3a\x80\x86\x22\x2d\xc1\x53\x53\xc2\xd6\xbd\xd2\x96\x3a\xcf\xae\x2b\x5d\x34\x95\xf0\x23\xa8\xa4\x97\x8b\x4a\x08\x8d\x9c\xf5\xaf\x95\x35\xd7\x2b\xa5\x8e\x68\xc2\xf2\xfb\x0a\xbb\x56\x81\xcf\xc5\xae\xb9\xc4\xfd\xb8\xb1\x0e\x9c\x2b\x03\xa3\xd8\xc7\xc6\x72\x29\x8a\xa2\x47\x48\x96\x05\x51\x2b\x4e\xb4\xe8\x98\xa7\x54\x52\xc0\x1d\x42\xe6\x3b\xdf\xc0\xa3\x66\xbd\x07\x0f\xbb\x8f\x3a\x7f\xec\x0f\x43\xa8\x7d\x2f\xcf\x57\x1a\xdb\x4e\xd6\xd4\x6f\xeb\xd4\x40\x99\xbc\x01\xb2\x7c\x39\xfe\xf2\x66\xa1\x7b\x2d\xfc\xfe\x32\xa8\x3c\xa4\x3f\x9f\x9f\xab\x97\xe6\xfe\x4c\x9d\xb5\x21\x4f\x6c\xf2\x96\x0f\x9b\xcd\x38\x01\xb1\x41\xd8\xe9\x3e\x15\xc5\x28\xd6\x4f\xb5\xed\xbf\xa0\xba\x95\x65\x1f\x1c\x9e\x97\x25\x98\x3a\x8f\x31\xba\xe9\xc6\x70\x41\x80\x14\xa8\xda\xc1\x00\x43\x4a\xcf\x7e\x92\x92\xe6\x8c\x8b\x72\xbd\x53\xc9\x1f\x31\x2a\x05\xa4\xc7\x33\xe5\x0e\xd6\xf7\xda\x73\xd5\x48\x2a\x07\x3b\x2b\x74\x7f\xbb\x82\x1e\x87\x42\x36\x77\xbe\x67\x11\x5d\x63\xf4\x4f\xd6\xd1\x75\x41\x9f\xaf\x94\xde\xa9\xa7\xb4\x13\xa3\xad\x90\x64\xc4\xc6\x09\xd9\x7a\xb5\xdb\x2c\x70\x7f\x30\x48\x45\x6e\x23\xff\x7a\x9b\x4b\xdb\x88\xd3\x23\x54\xed\xec\x58\x49\x74\x79\x2f\x7f\x2b\x45\x10\xf9\x5b\xaa\x4a\x2d\xf5\x6a\x00\xf4\x72\x1b\xa9\x92\xd2\xd6\x87\x6c\x46\xa1\xd4\x5c\xa2\xe1\xc4\xfb\x6d\xb8\x1f\xd0\xc9\x1b\x19\x30\x9f\xb7\x44\x32\xbd\xd5\xa5\x12\x79\x40\xc2\xda\x60\xec\xca\x7e\x4b\x20\x8a\xb4\xb7\x30\xd5\xdd\x06\x6d\xe5\x2f\x88\xc9\x85\x8b\x34\x79\xbc\x68\xe4\xff\x6e\x4c\x37\x5d\x0a\xdd\xf9\x9e\x31\xbd\xc6\xe8\x9f\x8c\xe9\x75\x41\xff\xa3\x98\x6e\xac\x9c\xca\xaf\x11\xb5\x1f\xda\xf0\x49\x31\x4d\x51\xd4\x5b\x7e\x5a\x6e\xad\xe2\x55\x6f\xfd\x5b\x13\x9d\x1c\xe1\xf8\xe5\xd1\xb3\xa3\x97\xa7\x6f\x0f\xcf\x4f\x0e\xb2\xef\xb2\x5b\x82\x76\xdd\x28\x44\x43\x5c\x52\xdd\x6d\xf5\x5d\x04\xca\x5a\x26\x6c\xc4\x25\xe5\x0d\x27\xc0\x5c\xc7\x52\x83\x93\x96\x20\x4d\x28\x2b\x88\xdd\x2e\x2b\xa3\x82\x12\x9a\x17\x3a\xa6\x1c\xcd\x5a\x1b\xee\xa5\x7f\x07\x8b\xfa\xb2\xb6\xda\x7b\xfc\xdd\x8f\x7b\xbb\xab\x4b\xfb\x5b\x09\xf7\x37\x09\x1f\x6f\x25\x7c\x9c\x08\xb3\xed\x2a\xf1\x60\x47\x68\x92\x59\x78\x69\x1d\x4f\xa3\xf5\x0d\x52\x21\xc7\xe8\x82\xf2\xc8\x6b\x44\xc7\xa3\xd3\x1e\xb6\x94\xc6\x24\x86\xb1\x6a\xbc\x69\xa5\xfc\xd1\x8d\xb5\x8d\xf7\xb1\xa5\x3d\xd7\x4a\xd2\xda\x38\x7e\x83\xef\xc7\x44\x26\xa6\xd9\x30\x4b\xe5\x99\x86\xcd\xf9\x9c\xb1\x10\x0d\x4a\x2e\x64\x45\xfd\x72\x49\x73\xe6\x75\x33\x43\xdd\xb6\xb3\x9a\xd7\x5a\xa4\xd1\x88\x5a\x69\xa1\xbd\x05\x83\x28\xaf\xe9\xba\xa9\xaf\xea\x8e\xad\x8e\x15\x7a\xa0\xc0\x48\x6f\x70\x28\x17\x53\xef\x55\xe9\xa1\x79\x4d\x2a\x68\xd6\xa5\x81\xb8\x2d\xb9\xbc\x82\xbd\xff\xff\x61\x8f\xe6\xfd\xe5\x75\x5a\xb8\xbe\x85\x3f\xe9\xd1\x3c\x00\xa5\x16\xc1\x4f\xbd\xb6\x03\xf0\x8a\x5a\xf7\x09\x42\x25\x8c\x18\x20\x20\xf5\x0d\x61\x48\x24\x61\xe8\x6c\x1c\x0c\x61\xf1\x86\xb4\xd2\x6e\xb6\x0f\x49\x0b\x2e\x5b\x1b\x52\x5b\x6f\x6c\xb3\x0e\x18\x1b\xb0\x07\x22\xd8\x4a\x15\xfc\xda\x62\x69\x94\x2f\x9c\xf0\x43\xd0\xd6\xd6\x1e\xa2\x09\x4a\x2f\x7e\x5a\x51\x1e\x62\xbd\xd9\x3c\x6f\xe5\xb2\x14\xf6\x39\x7e\x8e\xf0\xc5\x10\x65\x4c\x06\x5b\xcd\x4a\x87\x7d\x6b\x03\x75\xc7\x85\xad\xea\xf4\xa0\xba\xed\xc5\x39\x63\x7e\x18\x03\x15\x16\x82\xb0\xe6\xcc\xb7\x8f\xd9\x6c\x46\x10\x39\x9f\x6f\xb4\xef\x77\xde\x67\xf9\x8e\xb5\x7c\xd2\xfd\x6f\x00\x00\x00\xff\xff\x38\x2b\x54\x27\xca\x1a\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x6f\x13\x49\x16\x7d\xaf\x5f\x71\xc6\x1e\x91\x1d\x0d\x65\x87\x91\xd8\x95\xc2\x80\xc4\x02\x23\xb1\xa3\x25\x51\xc2\xec\x3e\x20\x1e\xca\x5d\xb7\xdd\x85\xab\xeb\x36\xf5\x61\xc7\x18\xff\xf7\x55\x55\xb7\x13\x43\x12\x07\xc4\xbe\x44\x71\xd7\xad\xfb\x7d\xcf\x3d\x35\xfe\x69\x3a\x33\x6e\x3a\x53\xa1\x81\xa4\x4b\x21\xc6\xd0\x9e\x3b\x28\x6b\x11\xbd\xaa\x6b\x53\x21\x32\x62\x43\x58\xa4\x19\x59\x8a\xf0\xa4\xb4\x64\x67\xd7\xe8\xd8\x47\xac\x1a\x53\x35\xd0\x4c\xc1\x1d\x45\xb0\x37\x73\xe3\x54\x24\xd4\x9e\x5b\x58\xae\x94\x6d\x38\x44\x31\xc6\xdb\xd3\x97\xa7\x27\xd0\x59\x07\x65\x85\x81\x60\xba\xa8\x66\x96\x02\x7c\xca\x7f\x55\x1d\xc9\x17\x5b\xea\x53\xf2\x24\x5b\x76\x26\xb2\x47\x24\xd5\xa2\x36\x97\x14\xf2\xa1\xf1\x50\x73\x72\x31\xfb\xa5\xaa\x8a\x42\xe8\xaf\xa4\xd8\x90\x8b\xa6\x52\x91\x74\x71\x4d\x5c\xa9\x97\xd2\xb8\x40\x3e\xe2\xf5\x9b\xb3\xbf\xde\x42\xca\xce\x73\xe4\x8a\x2d\x62\xd5\x41\x4a\x5d\x22\x79\x74\xfc\xdb\xe3\xc7\x90\xf2\x43\x6a\x3b\xbc\x3c\x3f\x3d\xfb\x76\x05\x81\x93\xaf\xe8\x3a\xdc\xdb\x75\x3e\x7f\xf1\xe2\xd5\xd9\x5b\x21\x36\x1b\x98\x1a\x93\x17\xec\x6a\x33\x9f\x5c\x50\x95\xbc\x89\xeb\x33\x15\xab\xe6\x4c\x55\x0b\x35\xa7\x80\xed\x56\x58\x9e\xcf\xc9\x43\x46\x38\xd6\x24\x43\x54\x3e\xa6\x6e\x12\x1a\x8c\x8c\x0b\x51\x59\x6b\xdc\x1c\x9e\x34\x1a\x15\x51\x69\x87\xaa\x68\x4c\x5e\x45\xc3\x0e\xec\xf0\xf3\xdf\xb2\x37\x4e\xb5\xf4\xcb\x48\x54\x2a\xe2\xd9\x74\xa9\xfc\xd4\x9a\xd9\x74\x9d\xda\x69\x65\x0d\xb9\x28\x2b\xf2\x71\xd2\x51\x8b\xdf\x7f\x3f\x7a\x75\xfa\xc7\x51\x76\xf0\x05\xf9\xf8\x3c\xfc\x73\x1d\x29\x5c\x79\x9a\xbf\x99\xba\x64\x38\x4c\x06\x4f\xcf\xa9\xe3\x90\xab\xb4\x2e\xc7\xf8\x8c\x8b\xe8\xb3\x5f\xdb\xad\x78\x75\xfa\xc7\xdd\x46\x17\xb4\xfe\xda\xe6\x99\x37\x4b\x15\xe9\x4f\x5a\x7f\xa7\xe5\x3f\x69\x7d\xc3\xf0\x37\xa6\xef\xf9\xf9\x29\xc2\x50\x01\xa4\x4e\x67\x0b\x78\xb7\xd9\x0c\xda\xc2\xbf\xd8\xb8\x7b\x4a\x35\x7a\x88\x11\xb6\xdb\xf7\x37\x12\x5e\xb3\x87\x8a\x91\xda\x2e\xc2\x38\x6c\x1e\x4d\x26\x8f\xb7\x4f\xa0\x59\x00\xeb\xd4\x62\x70\x03\x72\x0d\xf9\x11\xdf\x67\xb3\x98\xc4\x83\x07\x98\x79\x52\x0b\x01\x1c\x08\xf7\xdd\xce\x89\x9f\x37\xc3\x7f\xdb\xf7\xb7\x07\x3e\x78\xd4\xf7\x4f\xad\x8c\x25\x3d\x12\xc8\xdd\xfa\xee\xdd\xde\x6d\x48\x1b\xf1\x18\xef\xdf\x3f\xc9\xa3\xe7\x10\x2c\x51\x87\x47\x4f\x40\x36\x10\xe8\xd2\xc4\xfc\xa3\x36\x42\xb3\xa3\x83\x95\xf0\xd4\xf2\xf2\xfb\xda\x38\x67\xae\xb2\xa4\x5c\x06\x29\xe1\x5b\x48\x5f\xe3\x60\x5b\x1f\x68\x3f\xb1\xd9\x90\xd3\xdb\xad\xb8\x05\xa0\x50\xb3\xb5\xbc\xca\xde\xcd\x3d\xa7\x0e\x95\xa7\xde\xa5\x1e\xa8\x4c\x84\x09\x98\xa9\x05\x69\x18\x17\x19\x9c\x3c\xfe\xf3\x6f\x98\x36\x97\x48\x94\x3b\x4a\x6b\xc8\x1a\x9a\xab\x05\x79\x21\x4c\x8d\x9f\x30\xf7\xd4\x5d\xfb\xd4\x1f\x61\x4a\xb1\x9a\xd6\x21\xaa\x59\x9f\x53\x01\x84\x75\x88\xd4\x56\xd1\x22\x44\xee\x06\x1d\xb2\x84\x9e\xba\x49\x34\x2d\xf9\x7b\xa5\x02\xf9\xa5\xa9\xe8\x2e\xb9\xbd\xf3\x76\x51\x87\xc9\x65\x1d\xb2\xbb\x53\x4d\xcb\xa9\x36\x61\x31\x2d\x40\x3c\xf5\xd4\x03\x9c\xec\x94\x8f\x8f\x04\x40\x55\xc3\x38\x3a\x2c\x86\x1b\x31\x22\xab\xc7\xdc\x77\x1f\x13\x47\x05\x1c\xe3\xf8\x08\xcf\x9e\x5d\x87\x9e\xdd\xe0\xe4\xe2\xd7\x37\x05\xe0\x29\x44\xf6\x54\xb1\x83\x3c\xbf\x71\xbe\xd9\xc8\xdc\xa4\xf4\x11\x93\x73\xb6\x94\x27\xbc\xf6\x2a\x8f\x88\x00\x7a\x08\xca\x46\x7a\xe9\xa9\x56\xd4\xb2\x9b\x7c\x08\xec\xae\xe1\x47\x00\x23\xcb\x73\xa9\xbd\x59\x92\x1f\x9d\x60\xf4\x81\x93\x77\xca\xea\xd1\xc3\x7c\xa6\x4d\xc8\xbb\x40\x5a\x9a\xab\x6a\x2d\x3d\xcd\x4d\x88\x7e\x3d\x3a\x41\xf4\x89\x44\x0f\x3a\xd9\x0f\x72\xba\xb7\xbb\x9f\x71\xe5\xe3\xcd\x94\xdf\x2e\xf0\x55\x85\x6b\x23\xc4\x90\xbf\x2e\x59\x9b\x61\x62\x07\x0d\xaf\x4b\xa3\x4d\xde\xb0\xa6\x02\x06\xcf\x4a\x41\x5c\x96\x7a\x90\x1b\x7a\x55\x66\x33\xab\xce\x3d\x9c\x67\x0f\x2b\xd5\xef\x4e\xe5\x34\x1c\xc5\x15\xfb\x05\x52\x34\xd6\x44\x43\x01\x73\x2e\x18\x10\x19\x5e\x55\x94\xe7\x50\x9b\xdc\xf0\x13\x31\xce\xe9\xdd\x5d\xf6\xc9\x05\xcc\xa8\x66\x4f\xd0\x2e\xe4\x29\x58\x38\x5e\xb9\x1d\x53\xe8\x2d\x51\xc9\x44\xea\xb0\x32\xb1\x41\xc6\x8d\x35\x42\x01\x38\xb1\x6a\x8c\xa5\x02\x29\x57\x83\x0d\xa9\x7f\xc1\xd3\xa7\x18\x8d\x0a\xac\x68\xbe\x06\x95\x7b\x41\x24\xe7\x25\x47\x78\x33\x35\x17\xbd\x14\xb6\xdb\xc3\x68\x7c\x38\xc1\xd7\x5a\x7e\x04\x70\xbf\xd9\xc6\xf7\xe2\xee\xdf\x8f\xef\x02\xde\xb1\x18\xe3\xcd\xe9\xdb\x57\x27\x78\xed\x50\xa7\x98\x3c\x3d\x44\xcb\xcb\x0c\x6f\x2a\x67\xa1\x66\xdf\x0e\x28\x9b\x62\x30\x9a\xc0\x35\xc8\x2d\x8d\x67\xd7\xe6\x52\x2f\x95\x37\x85\x02\x89\xb1\x08\x14\xf1\xeb\xa5\xa0\xcb\xc2\x6c\x2e\x9e\x5f\xfc\x75\xfe\xfa\xe9\xd1\x5e\x28\xff\x65\xbf\x20\x3f\x44\xd2\x9f\x63\xbb\x3d\x2a\x17\xe5\xe5\xae\x8b\x7d\x72\x85\x40\x99\xa5\xb1\x34\x27\x0d\x29\x33\x88\xcb\x5d\x3b\xf6\xfc\x69\x89\xe9\xc9\x34\xff\x7b\xf2\x09\x92\x06\x6b\x87\xf3\x36\x54\x40\x24\x97\x0d\xf6\x37\x84\xe8\x57\x9b\xac\x94\x8c\x3e\x85\x98\xe7\x22\x50\x2c\x13\x91\x3a\xcc\xc9\xd1\x52\x95\x5a\xe6\x2f\x21\xaa\x6a\x01\x15\x10\x38\xc3\x7c\xcf\x2c\xbf\x5c\x47\x26\xc0\x2a\xa3\x73\xc2\x30\x5b\x8b\x71\x11\x19\x4c\x67\xd1\xa8\x8c\x23\xff\xb0\xbf\x69\x39\x14\x46\x6b\xca\x90\x0c\xe3\x71\x87\x70\xcb\x9e\xc4\x38\xbb\x12\x7a\xf2\xbc\x2f\xdb\x79\x2e\x4c\x77\x45\x58\x19\x6b\x11\x1a\xd3\x65\x7d\xbd\xff\xa2\x77\x23\x10\x42\xc3\xc9\xea\x92\x63\x76\x15\x41\x41\xab\x35\x0a\x5b\x57\x01\xdd\x40\xaf\x35\x57\x41\x4c\x53\xf0\xd3\xc2\x58\xcb\x13\x40\x7d\x0a\x54\xe9\x21\x58\xc8\xbc\xd8\x02\x59\xe3\xf2\x64\xe2\xec\xd1\xcb\x7b\xe5\x03\xd7\x71\xa5\xfc\x37\xcb\x57\x56\xb5\x6a\xb9\x93\x16\x63\x90\xcb\x9d\x56\xa0\xa9\xc7\xc3\x2f\xab\x32\xe0\x66\x10\xd7\xb0\x99\x5c\xab\xc2\x02\xad\x0e\x7a\x07\xab\xe8\xed\x7c\xf9\xb3\x65\x77\xfd\xa5\xb6\x89\x5c\xbc\xfa\xbd\xa7\x6e\x70\xe0\xff\xa5\xae\x0f\xe2\xc7\xb4\x89\x43\xab\x2d\x26\x47\x5a\x2a\xdd\xe6\xf6\xa8\x33\xa4\x72\x47\x2e\x34\xa6\x8e\x32\x37\x97\x67\x2b\x3b\xab\x1c\xf5\x7b\x29\x43\xc4\x3d\xb7\x32\x92\xed\x2f\xb1\xbc\x44\x08\xca\x06\x86\x23\xd2\xd7\x92\x93\x52\xd8\xc9\x92\x6d\x6a\x29\x40\x1b\xdf\xb3\x23\xd2\xbb\xc5\x90\x77\x7d\xbf\xe7\xab\xbc\x0e\xf2\xce\x10\xed\x22\x0b\xca\x16\xc7\xff\x78\x7c\x0c\xb9\xc7\x82\xfa\x77\xe3\xf4\x0e\xfd\xe5\x59\x5a\xf6\x6f\xa1\x8a\x61\x1d\x2c\xcf\x11\x4c\xee\xf0\x15\xa1\x55\x4e\xcd\x09\xb4\x24\xbf\x8e\x4d\x16\x89\x8d\xe7\x34\x6f\xb0\x5b\xe1\x7b\x55\x19\xf6\xf8\x4e\xcb\xad\x75\xe3\xee\xc6\xb1\x18\xc3\x71\xa4\x13\xa8\xc8\xad\xa9\xe4\x97\x39\x43\xe5\xf3\x0b\xda\x32\x77\x01\xc9\x45\x63\xd1\xaa\x50\x48\x62\x40\xea\x6e\xf6\xd8\xad\x5a\xae\x8c\xfd\xf8\x03\x31\x54\x0d\xe9\x54\xd2\xb5\x47\x9e\xe1\x69\xc6\x5c\x5e\xce\x15\xb7\x5d\x21\xba\xb7\xbd\x03\x46\x22\x34\x29\xea\xbc\xd2\xa5\x1c\xee\xfc\xfa\x5b\xe6\xca\x36\xd0\x76\x7b\xa3\xc7\x0f\x46\x83\xcf\x9f\x7b\x8a\x74\x45\xb5\xff\x17\x00\x00\xff\xff\x25\xc0\x9a\xeb\x75\x10\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
