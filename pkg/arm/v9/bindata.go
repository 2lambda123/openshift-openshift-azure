// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x73\x14\xb7\xb2\xfe\x1c\xfd\x8a\xce\xac\x13\x5e\x62\xcd\xd8\x24\xb9\xa4\x36\x59\xaa\x8c\x59\xb8\xbe\x18\xec\x6b\xc3\x49\x9d\x22\x14\xa5\x1d\xf5\xcc\x8a\x9d\x91\x26\x92\x66\xed\x8d\xd9\xff\x7e\xaa\x35\xb3\xef\x6b\x03\x31\x9c\x0f\xe1\x83\xf1\x48\xad\x6e\x75\xeb\xd1\xd3\xdd\x72\xe7\xdb\x64\xa0\x74\x32\x10\x6e\x08\x1c\x2f\x19\xeb\xc0\x53\x63\xc1\xa3\xf3\x4a\xe7\x5d\x28\x4c\x0e\x42\x4b\x90\xd6\x54\x20\x8a\x02\xbc\x15\x59\xa6\x52\xf0\x43\xe1\xe1\xc2\xd4\x85\x04\x6b\x6a\x8f\x30\x56\x02\xfc\x10\xa1\x14\xce\xa3\x85\xfe\xf1\x63\xd6\x81\xb3\xfe\xf9\xc9\xeb\xb3\xc3\xfe\xb3\xb3\x93\xd7\xa7\xbd\x68\x62\x6a\xcb\x2d\x3a\x53\xdb\x14\x79\x6e\x4d\x5d\x45\xac\x03\x27\xe7\xef\x9e\xfe\xff\x93\x97\xbd\xc8\x54\xa8\xdd\x50\x65\x3e\xde\x59\x59\x19\x1b\x27\x24\x8e\xe3\xb4\x30\xb5\x8c\x58\x87\x75\x40\x55\x5e\x0c\x0a\x74\xc0\x8f\xe0\xe8\xe5\xe9\xeb\x57\xc0\x1d\xec\xdc\x95\x2a\x87\x1f\xdc\xd0\x58\x0f\xd1\x4e\xab\x37\x82\x0f\xe0\x85\x2a\x80\xef\xdf\x03\xfe\x1e\x8e\x4f\x9e\x01\xe7\x85\xc9\x79\x65\x31\x53\x97\x10\x3d\x7f\xfd\xb8\x0f\x24\x0a\x4f\xce\x4e\x4e\xbb\xd1\xed\xf4\x93\x0e\xc6\xae\xae\x40\x65\x10\x1f\x1a\x9d\xa9\x3c\x3e\xc7\xb4\xb6\xca\x4f\x4e\x85\x4f\x87\xa7\x22\x1d\x89\x1c\x1d\x4c\xa7\xac\x30\x79\x8e\x16\xb8\x6f\x03\xc7\x9d\x17\xd6\xd7\x55\xec\x86\x10\x29\xed\xbc\x28\x0a\xa5\x73\xb0\x28\x81\x42\x9e\x4a\x0d\x69\xd0\x59\x5b\xe1\x95\xd1\x60\x34\xec\xdc\x1d\x1a\xe7\xb5\x28\xf1\x5e\xc4\x52\xe1\xe1\x51\x32\x16\x36\x29\xd4\x20\x99\xd4\x65\x92\x16\x0a\xb5\xe7\x29\x5a\x1f\x57\x58\xc2\x6f\xbf\xdd\xe9\x9f\x3c\xbd\x43\x5b\x3c\x44\xeb\x0f\xdc\xe3\x89\x47\x37\xdf\x2b\x8d\xa9\x4c\xa5\xc2\xa3\x8b\xdb\xbd\x9e\x61\x65\x9c\xf2\xc6\x4e\xc2\x34\x7c\x80\x73\x6f\x69\x5f\xd3\x29\xeb\x9f\x3c\xbd\xde\xe8\x08\x27\xeb\x36\x4f\xad\x1a\x0b\x8f\xcf\x71\xf2\x99\x96\x9f\xe3\x64\xc3\x70\x07\x5e\x9d\x3c\x39\xe9\x82\xc4\x02\x3d\x06\x04\x66\xa6\x28\xcc\x05\xc9\x38\x4c\x43\x88\x44\x46\x90\x24\xf8\xa6\x45\x4d\x51\x76\x20\x2c\x82\xad\x35\x5c\x28\x3f\x04\x01\xe3\x12\x54\x29\x72\x6c\xbe\x47\x2a\x1d\x85\x73\x88\x2d\x56\x06\x06\x62\x84\x12\x94\x6e\xbc\x84\x04\x7d\x4a\x2e\x86\x49\x17\xcb\x64\x4d\x7c\xe6\xea\x1b\x3b\xc4\x82\x3f\xe4\x0e\xed\x18\x2d\xb7\x55\xe9\xde\x32\x3a\xa4\xde\x19\x4a\xf8\x5f\xe1\xa1\xaf\x3d\xda\xca\x2a\x87\x70\xac\x74\x7d\x09\x0f\xe1\x3c\x08\xc3\xdd\xb3\xd3\x17\xee\x1e\x1b\x08\x87\xb5\x2d\x7a\x43\xef\x2b\xd7\x4d\x92\x54\xea\xd8\xa2\x1c\x0a\x1f\xa7\xa6\x4c\x52\xa3\x3d\x6a\x9f\x48\xe5\x7c\x42\xd6\x92\xc6\x56\xf2\x30\x79\xd8\x28\x4a\x76\x48\x85\xb0\xe9\x30\x31\x8e\xe5\x55\x3e\xc2\x49\x2f\x53\x05\x76\x93\x24\xf8\x51\x8d\x54\x62\xab\x92\xe7\x55\x9e\x9c\x9d\xbe\xe0\xcf\x4e\x9f\xf1\xe7\xfd\x7f\xf3\xc6\x0a\xb7\x58\xa0\x70\xc8\x9c\x2b\x52\x41\x00\xea\x85\x55\x76\xe8\xca\x24\x15\x49\x2b\x55\x63\x45\x87\x1c\xa4\xc2\xb1\x37\x92\x37\x60\x70\x21\x4a\x1b\xba\x01\x38\x0c\x35\xdd\x43\xd9\x9b\xa0\x63\xeb\x21\xc5\x4b\x6f\x85\xfb\xbc\xc8\x72\xe8\x87\x55\x5f\x23\xc4\xcd\x7e\xfe\x89\x91\x36\x0e\xf9\x8f\xf1\xfe\xfe\xb6\x58\x9f\x54\xa8\xcf\x89\xb5\xe1\xd0\x68\x2f\x94\x46\x0b\xa7\x85\xf0\x99\xb1\x25\xd0\xa2\xaf\x83\x66\x4c\x48\xf7\x3f\x23\xd8\xe2\xaf\xda\x62\x6a\x2c\xb6\xa1\x9d\x7f\x6f\xc4\xac\x6a\x73\x47\x5c\xaa\xd4\x1a\x67\xb2\x26\x76\x93\xba\x0c\x6c\x94\x2c\x56\x2e\x5b\xc8\xab\x3c\x1d\x62\x3a\xea\x69\x13\x58\xf3\x93\xd3\xce\xc1\xd9\x09\xb1\x68\xc8\x5d\x50\x57\x92\x98\x19\xde\x5c\x5d\xb5\x2c\xec\xfe\xcf\x28\xfd\x91\x24\x17\xed\x42\x04\xd3\xe9\xdb\x8d\x44\x95\x19\x0b\xc2\x7b\x2c\x2b\x0f\x4a\xc3\xd5\x7e\x1c\xff\x3c\xfd\x15\xa4\x61\x00\x93\xba\x84\x76\x1b\xc0\x27\xc0\xff\x84\xcf\xb3\x19\x4c\xc2\xf7\xdf\xc3\xc0\xa2\x18\x31\x80\x1b\x1d\x7e\x33\xdb\xc6\xce\x55\xfb\xdb\xf4\xed\x76\xd7\xdb\x3d\x35\x99\x37\x13\xaa\x40\x19\x31\xa0\x4c\xff\xe6\xcd\xd2\x6a\xe0\x85\x87\x9f\xe1\xed\xdb\x5f\x29\x23\x69\x70\x05\x62\x05\xfb\xbf\x02\x16\x0e\x01\x2f\x95\xa7\x8f\x4c\x31\x69\x34\x7e\xe4\x34\x2c\x96\x66\xfc\x79\x25\x00\x45\x2f\x2d\x50\x68\xca\x79\xcc\x96\xc0\x6d\x06\x37\x96\x04\x37\x41\xf5\xea\x0a\xb5\x9c\x4e\xd9\xcd\xb9\x36\x54\x73\x90\x5a\x14\x4b\x29\x57\x79\x50\x6e\x9e\x3f\xbd\x01\x53\x5b\xf8\xd7\x8b\x26\xd7\x3a\x16\xd6\x08\x29\x81\x67\x20\x4d\x3a\x42\xcb\x98\xca\xe0\x5b\xc8\x2d\x56\x8b\x3d\x35\x53\x4d\xde\xcd\x9c\x17\x83\x26\xaa\x0c\xc0\x4d\x9c\xc7\x32\xf5\x05\x38\x6f\xaa\x56\x07\x0f\xae\xd7\x55\xec\x55\x89\xf6\xa3\x52\x44\x32\x2a\xc5\xeb\xe4\x96\xe6\xcb\x51\xe6\xe2\xcb\xcc\xd1\x76\x13\x89\x63\x62\xaa\x51\x73\xe3\x92\x79\x55\x5b\x09\xeb\xf7\x19\x00\xa6\x43\x03\x77\x6e\x16\x83\x0d\x1f\x81\xd4\x43\x6e\xab\x3f\x6b\xe3\x05\xc0\x1e\xec\xdd\x81\x47\x8f\x16\xae\xd3\x36\x4c\xad\xfd\xfa\x4a\x06\x60\xd1\x79\x43\x97\x5f\x03\x3f\xdb\x32\xdf\xd4\x68\xa4\xa9\x19\x4a\xa4\xc0\xd2\xe8\xf8\xbd\x33\x7a\x51\x9f\x31\x80\x88\x6a\x63\x69\xd5\x18\x6d\xd4\x85\xe8\xbd\xa9\xad\x16\x85\x8c\x76\x69\x4e\x2a\x47\xbc\xc2\x0b\xcc\x45\x3a\xe1\x16\x73\xe5\xbc\x9d\x44\x5d\xf0\xb6\x46\xd6\x54\x65\xab\xb1\x14\xd6\x6f\x06\x73\xbb\xc0\xda\xd9\x65\x8a\xb1\x36\x32\x55\x5d\x14\x44\x02\xb3\x8b\x7f\x14\x20\x14\xbf\x34\x12\xc3\x55\x7f\x14\x42\xad\x49\xea\xfb\xad\x28\x42\x9f\xca\x6d\x18\x9a\x9f\xea\xfa\x59\xb9\xd4\xa9\xfd\xa4\xa8\xf5\x1e\x7c\xf8\xd0\x78\x77\xdd\xb1\x2e\x89\xae\x19\x6c\x0e\x54\x62\x26\xea\xc2\xbb\x4f\x3a\x50\x5a\x77\xfd\x71\x86\x59\x8a\x0b\xd1\xa7\x74\x81\x3a\x7d\x5a\xed\xfe\xf2\xd3\x4f\x3f\x05\xf2\xfc\xa6\xb2\xc6\x9b\xde\xce\x95\x74\xfe\xbb\xef\x76\xef\x4f\xd9\x37\x95\xb1\xbe\x19\xe8\x74\xee\xef\x4e\xd9\x37\x8b\xee\xe6\x20\x74\x5f\x47\x67\xfd\xdf\x0f\x8e\x8f\xdf\x1d\x1c\x1f\x9f\xfc\x0e\xbc\x82\x9d\xa0\x04\x78\x49\xa7\xe3\x11\x38\x6f\xfe\x7f\xd9\xff\x9d\x06\x67\xd3\x5c\x92\x6a\xd8\x09\x3f\xf9\x7b\x38\x38\x3c\xec\x9f\xbe\x02\x7e\xd1\x12\xdb\xcc\x0e\x77\x62\x8c\x2d\xf8\xdc\xc4\x35\xec\x95\xcc\x66\x89\x59\x2e\x02\x4d\x12\x12\x88\x4c\x34\x9d\xea\x85\x10\x39\x6a\x1f\xfa\x4f\x8d\xfe\xc2\xd8\x11\xd4\x5e\x15\xca\x2b\x74\x90\x9b\x40\xc7\xde\x80\x15\x29\x12\x21\x4a\x45\xcc\x13\x53\xf3\x96\xcd\x17\xdb\x5a\x3b\x18\x60\x66\x2c\x82\xd4\x8e\xe8\x68\xa4\xcd\x85\x06\x6f\x02\x81\x35\x96\x10\x50\x4b\xa8\xab\xa6\xfc\x27\x0a\x9f\x80\x0b\xd9\x86\x5d\x0c\x55\x81\x81\xdd\xe7\x0c\x0b\x5c\xde\x83\x5e\x0f\xa2\x28\x30\xbc\x34\x0b\x7e\xff\x04\x3e\x27\x20\x93\x8f\x9b\x58\x3e\x6f\xa4\x60\x3a\xbd\x39\x39\xde\x7c\x23\x16\x5a\x6e\x97\xff\x3e\xd9\xca\xe7\xa6\xc1\xff\xd9\xbb\x2e\x0f\x52\x63\xff\xf2\xe4\x55\xbf\x0b\x47\x1a\xb2\xda\xd7\x16\x77\xa1\x34\x63\x6c\x9e\x1b\x94\xa6\x92\xb2\x4d\x79\xb5\x77\x4a\x22\x98\x0c\x50\x8f\x95\x35\xba\xa4\xe3\x1e\x0b\xab\x1a\x4c\x75\x98\x43\x0f\x3f\x5c\x32\xbc\x0c\xe8\x3c\x3f\x38\x7f\x7d\x76\xd4\xbb\xb3\xe4\xca\x8b\x10\x89\xd6\x93\x66\x1e\xa6\xd3\x3b\x61\x21\xbf\x9c\x11\x0f\x75\x89\x9c\x57\x56\x8d\x55\x81\x39\x4a\xe0\x9c\x32\x2a\x9f\x41\x92\x50\x01\x7c\x0c\x49\x37\xa1\x5f\xbb\x7f\x01\xc7\xd6\xda\xcd\x71\x6b\x4f\x80\xd5\x9a\x0c\x36\x2b\x18\x6b\x2a\x0d\x9e\x0a\xee\x6d\xed\x3c\xdd\x8d\x53\xa5\x61\x54\x0f\xb0\xb9\x36\x8e\xa0\x5b\x3b\x84\xc2\xa4\xa2\x00\x51\xa9\xb6\x48\x67\x8e\x36\xa7\x80\x5b\x84\xc8\x75\xee\xc2\xfd\x66\xbc\x0b\xf7\xe2\xfb\x9d\x3f\xf6\x67\x25\xe4\x52\xa9\xd0\x89\x1a\x46\x34\x56\xe5\x4a\x27\x0d\x34\x92\xf9\x33\x0c\x6f\x06\xe2\x85\xf1\xdb\xdb\xa0\x0b\x17\x7e\x7c\x79\xad\x4e\xea\xdb\x2b\xb5\xc6\xf8\x24\xa8\x49\x5a\x3d\xec\xea\x8a\x13\xb4\x35\xc2\x4e\xfc\x58\xa4\xa3\xba\x7a\x5c\x98\xc1\x4b\x62\x82\x28\xfa\xe8\x23\xce\x9c\xd4\x88\xcb\xc7\x68\x27\x1b\xe5\x1a\xeb\x80\xf3\xc4\x1f\x90\xa3\x0f\xac\x34\x08\x56\x42\xe5\x76\x96\xad\x72\x7f\x72\x9f\xd1\xe5\xa2\x7d\x3c\x51\xb6\xb7\x3a\xd7\xae\x2b\x47\x52\x59\xd8\x59\x92\xfb\xdb\x9c\xd4\xf7\xa9\x6c\x7c\xbe\x25\x2d\xad\x28\xfa\x9a\xcc\xb4\x6a\xe8\xcb\x91\xd3\x8d\xfb\x94\xe6\x42\x17\x46\x48\x0a\x62\x73\x08\xd1\x2a\x7f\x6c\x52\xc6\x1f\x0c\x02\x6d\x6c\xdc\xbf\xee\xe6\xd0\x36\xe1\xf0\x18\x5a\x59\x33\x56\x12\x6d\xd2\x4d\xde\x49\xe1\x45\xf2\xce\xd4\x73\xd5\xcb\x00\xe8\x26\xa6\x26\x6e\xa2\xa9\x8f\xc5\x8c\xa0\xd4\x38\xd1\x68\xe2\x83\x16\xee\x3d\x5a\xb9\x76\x03\xa6\xd3\x56\x48\x86\x37\xe3\xc0\xce\x3d\x32\xd6\x82\x31\x96\x83\x56\x40\x84\xc7\xb8\xde\x2c\x54\x37\x07\xb4\xb5\x3f\x13\xa6\x23\x9c\x5d\x93\x07\xb3\xd2\xe8\xef\x62\xba\xe1\x7d\xf2\xf9\x96\x98\x5e\x51\xf4\x35\x31\xbd\x6a\xe8\xbf\x84\xe9\x26\xca\xe1\x1d\x55\x8b\xca\x0d\x8d\xff\x2c\x4c\x13\x8a\xba\xf3\xdf\xe6\x53\xcb\x7c\xd5\x5d\xfd\x6a\xd0\xc9\x11\xfa\xaf\x0e\x9f\x1c\xbe\x3a\x7e\x77\x70\x7a\xd4\x8b\x7e\x8c\xae\x01\xed\x6a\x50\x48\x86\xb4\x84\x8e\xa2\xdd\xef\x0c\x28\x2b\x37\x61\x03\x97\x74\x6f\x38\x11\xe6\x2a\x97\x6a\xbc\x68\x05\x42\xcd\xb7\xc4\xd8\xed\xb0\xd2\xca\x2b\x51\xf0\xf6\x4d\x19\xa2\x36\x86\x7b\xe1\xdf\xfc\xc5\x66\x65\xb4\xfb\xe0\xc7\x5f\xf6\x76\x97\x87\xf6\xb7\x0a\xee\x6f\x0a\x3e\xd8\x2a\xf8\x20\x08\x46\xdb\xb7\xc4\xbd\x19\xa1\x0e\x61\xe1\x99\xb1\x3c\x34\x2b\x6b\xa2\x42\x8e\xd1\x7a\xe5\x90\x57\x88\x96\xd7\xb6\x70\xb0\x25\x35\x06\x33\x8c\x95\xe3\xcd\x28\x25\xf7\xd7\xc6\x36\x5e\x1c\xe6\xf1\x5c\x49\x49\x2b\x0d\xce\x9a\xde\x4f\x41\x26\x86\x6a\x3b\x0a\xe9\x99\xca\xf7\xe9\x94\x31\x5f\x6b\x94\x5c\xc8\x12\x2a\x6b\x32\xaa\xdc\x17\xc5\x4c\x6a\xb4\xb7\xa6\xe0\x55\x21\x42\xb1\x49\x65\xbf\x28\x9c\x01\x8d\x28\x17\x72\x71\xa8\xab\xe2\xb1\x29\xea\x12\x1d\x10\x30\xc2\xab\x06\xca\x59\x1f\x41\x2d\x5d\xd3\x9f\xa7\xd4\x3d\x50\x8b\xd1\xa6\x5c\x5e\xc2\xde\xc3\x9f\xf7\xa8\x83\x9a\xbb\xd3\xd2\xf5\x35\xfa\x69\x1f\x4d\x4b\x1d\x4a\x04\x37\x71\x85\xc9\xc1\x29\x9d\x86\xb6\xa4\x14\x5a\xe4\x08\x48\x75\x83\x1f\x92\x88\x1f\x5a\x53\xe7\x43\x98\x75\xe5\x6c\xd1\x48\xb7\xad\xf9\x4c\xcb\xbc\xd9\x5e\x7b\xd7\x58\x9f\x26\x5e\x45\x1f\x4a\x94\xba\x82\x1c\x35\x8e\x45\x60\xb0\x70\xf5\xbd\x48\x47\x4b\x1a\x6a\x5d\x0a\x37\x82\x52\x3a\x39\x53\x00\xe2\x2f\x87\xe9\xda\x67\x69\xf4\x62\x24\x2b\x6a\xd4\x5e\x6e\xd9\x50\xf3\x48\xf9\xc5\xd4\x35\x4f\x09\xb7\xd3\xc6\x3a\xa0\x8d\xc7\x2e\x08\x6f\x4a\x95\xf2\x05\x80\x42\xaf\x98\x5a\xe1\x86\x50\x18\x53\x39\xa8\xb5\x57\xc5\xec\x2f\x9e\xca\x41\x5d\x6d\xba\xb6\x55\xcb\xdc\xd8\x97\xf8\x2b\xa1\x4b\x87\x28\xeb\x80\x9f\x65\x92\xb2\x38\x30\xc6\x53\xb3\x90\x9a\xb2\x0a\x2f\x76\xdb\x9e\x34\x23\xe6\x86\xb5\xa7\x3c\x4b\x8c\xde\xac\xf9\xe1\x01\xbb\xba\xa2\x8c\x31\x9d\x6e\x04\xf7\x46\x7f\xe6\x0f\x25\xf3\x37\xc3\xff\x04\x00\x00\xff\xff\x62\xa2\x4c\x0b\x61\x1e\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5f\x6f\x14\x39\x12\x7f\xf7\xa7\xa8\x9d\xac\xc8\xa2\xc5\xdd\xc9\x9e\x38\xa4\xb0\x41\xe2\xd8\xec\x1e\xc7\x41\xa2\x84\xbd\xd3\x09\xf1\xe0\xb1\xab\xbb\xcd\xb8\xed\xa6\x5c\x9e\x64\x08\xf3\xdd\x4f\x76\xcf\x24\xb9\x4c\x18\x40\xdc\xbe\xec\xcb\xa8\x7b\x5c\xae\x3f\x3f\x57\xfd\xaa\xdc\x3b\xdf\xd5\x53\xeb\xeb\xa9\x8a\x1d\x48\xbc\x10\x62\x07\x0c\x85\x01\x94\x73\xc0\xa4\x9a\xc6\x6a\xe0\x00\xdc\x21\xcc\xd2\x14\x1d\x32\x10\x2a\x23\x83\x77\x0b\x18\x02\x31\x9c\x77\x56\x77\x60\x02\x46\xbf\xcb\x10\xc8\xb6\xd6\x2b\x46\x68\x28\xf4\xe0\x82\x56\xae\x0b\x91\xc5\x0e\xbc\x3e\xfe\xe5\xf8\x00\x4c\xd6\x81\x59\x61\x44\xb0\x03\xab\xa9\xc3\x08\x94\xf2\xaf\x6a\x18\xa9\xd8\x52\x1f\x12\xa1\xec\x83\xb7\x1c\x08\x18\x55\x0f\x8d\xbd\xc0\x98\x17\x2d\x81\x6a\xd1\x73\xf6\x4b\x69\x8d\x31\x8e\x5b\x12\x77\xe8\xd9\x6a\xc5\x68\x8a\x6b\xe2\x4a\xbd\x94\xd6\x47\x24\x86\xe7\xaf\x4e\x7e\x7f\x0d\x52\x0e\x14\x38\xe8\xe0\x80\xf5\x00\x52\x9a\x12\xc9\xfe\xde\x4f\x0f\x1f\x82\x94\xef\x52\x3f\xc0\x2f\xa7\xc7\x27\x5f\xae\xc0\x7a\x69\x3d\x23\x35\x4a\x23\xb8\x00\x52\xc6\x90\xa8\x3c\xaf\x00\xb8\xdb\xca\xd3\x67\xcf\x8e\x4e\x5e\x0b\x71\x79\x09\xb6\x81\xea\x59\xf0\x8d\x6d\xab\x33\xd4\x89\x2c\x2f\x4e\x14\xeb\xee\x44\xe9\x99\x6a\x31\xc2\x72\x29\x5c\x68\x5b\x24\x90\x0c\x3e\x18\x94\x91\x15\x71\x1a\xaa\xd8\xc1\xc4\xfa\xc8\xca\x39\xeb\x5b\x20\x34\xd0\x29\x06\x6d\x3c\xe8\xa2\x31\x91\x62\x1b\x3c\x04\x0f\xdf\xff\x90\xbd\xf1\xaa\xc7\xfb\x13\xa1\x15\xc3\x93\x7a\xae\xa8\x76\x76\x5a\x2f\x52\x5f\x6b\x67\xd1\xb3\xd4\x48\x5c\x0d\xd8\xc3\xcf\x3f\xef\x1e\x1d\xff\xba\x9b\x1d\x7c\x86\xc4\x4f\xe3\xdf\x16\x8c\xf1\xca\xd3\xfc\x9f\x6d\x0a\xe6\xb1\x5a\x79\x7a\x8a\x43\x88\xf9\xdc\x16\x65\x19\x3e\xc2\x19\x53\xf6\x6b\xb9\x14\x47\xc7\xbf\x7e\xda\xe8\x0c\x17\xb7\x6d\x9e\x90\x9d\x2b\xc6\x17\xb8\xf8\x4a\xcb\x2f\x70\xb1\x61\x78\x33\x05\xa1\x09\xce\x85\xf3\x2c\x13\x51\x17\x88\xc6\x1c\xcc\xe9\xaf\x5d\x8a\x8c\x14\x41\x11\x02\x25\x0f\xe7\x96\x3b\x50\x30\xef\xc1\xf6\xaa\xc5\xf1\x7d\x66\xf5\xac\x9c\x43\x45\x38\x04\x98\xaa\x19\x1a\xb0\x7e\x8c\x12\x6a\x64\x9d\x43\x2c\x8b\xb1\x32\xf5\x2d\xf1\x75\xa8\x6f\xa8\x43\x27\x1f\xc9\x88\x34\x47\x92\x34\xf4\xf1\xad\xc8\x87\x74\x78\x8a\x06\xfe\xae\x18\x8e\x72\x7a\x0d\x64\x23\xc2\x3f\xad\x4f\x17\xf0\x08\xce\x8a\x30\xfc\x70\x7a\xf2\x32\xde\x17\x53\x15\x31\x91\x3b\xec\x98\x87\x78\x50\xd7\xda\xf8\x8a\xd0\x74\x8a\x2b\x1d\xfa\x5a\x07\xcf\xe8\xb9\x36\x36\x72\x9d\xad\xd5\xa3\xad\xfa\x51\xfd\x68\x54\x54\x7f\x9f\x55\x28\xd2\x5d\x1d\xa2\x68\x87\x76\x86\x8b\xc3\xc6\x3a\x3c\xa8\xeb\x12\xc7\x30\xb3\x35\x0d\xbd\x6c\x87\xb6\x3e\x3d\x79\x29\x7f\x3b\xf9\x4d\xbe\x38\xfa\x8f\x1c\xad\x48\x42\x87\x2a\xa2\x88\xd1\x69\x95\x13\xe8\xb0\xec\xa2\x2e\xf6\xb5\x56\xf5\x4a\x2a\xe1\x90\x0f\xb9\x48\x95\x63\x1f\x25\xb7\xe4\xe0\xb5\x68\x76\x68\x4b\xe2\x08\xf4\xb9\x5a\xcd\xe1\x02\xa3\xb8\x0d\x29\x5e\x30\xa9\xf8\x75\xc8\x4a\x38\x2a\xbb\xfe\x08\x88\x47\x7f\xfe\x8c\x48\x87\x88\xf2\x2f\xd5\xfe\xfe\x5d\x58\x1f\x0f\xe8\xcf\x3a\xdb\x30\x3c\x0b\x9e\x95\xf5\x48\x70\xe2\x14\x37\x81\x7a\xc8\x9b\xfe\x98\x6c\xc6\x3a\xeb\xfe\x73\x80\x5d\x5a\xa3\x0e\x84\x2b\x68\xaf\xde\x37\x30\x1b\x56\x9d\xa3\xea\xad\xa6\x10\x43\x33\x62\xb7\x48\x7d\x61\xa3\xfa\x7a\xe7\x4d\x0b\xed\xd0\xea\x0e\xf5\xec\xd0\x87\xc2\x9a\x5f\xd8\x74\x9e\x9e\x1e\x67\x0e\x2d\x7d\x0b\xd2\x60\x32\x2f\xc3\x9b\xcb\xcb\x15\x07\xc7\x7f\x04\xeb\x3f\xd3\xe0\x26\x0f\x60\x02\xcb\xe5\xdb\x8d\x36\xd5\x04\x02\xc5\x8c\xfd\xc0\x60\x3d\x5c\xee\x57\xd5\xc3\xe5\x63\x30\x41\x00\x2c\x52\x0f\x2b\x37\x40\x2e\x40\xbe\x87\xaf\xb3\x59\x4c\xc2\xbd\x7b\x30\x25\x54\x33\x01\xb0\x25\xdc\x37\x6b\x27\xbe\xbf\x5c\x3d\x2d\xdf\xde\x1d\xf8\xca\xa3\xb1\xeb\x36\xca\x3a\x34\x13\x01\xb9\xc7\xbf\x79\x73\x63\x37\x48\xc7\xf0\x10\xde\xbe\x7d\x9c\xbb\x91\x87\xe8\x10\x07\xd8\x7f\x0c\xe8\x22\x02\x5e\x58\xce\x2f\x8d\x15\x26\x78\xdc\x7a\x12\x84\x7d\x98\x7f\x5d\xf3\xcf\xc8\x69\x87\xca\xe7\x6e\x27\xa8\x07\x49\x0d\x6c\x1d\x06\xb6\x25\xe9\xe5\x25\x7a\xb3\x5c\x8a\xed\x5d\xb6\xa5\x90\x06\xd0\x84\xea\x46\xb3\xb5\x0c\x36\x5e\x75\x4e\x0e\x10\x12\xc1\xbf\x5e\x8e\x5d\x36\x8a\xb2\x47\x19\x03\xb2\x01\x13\xf4\x0c\x49\x08\xdb\xc0\x77\xd0\x12\x0e\xd7\x3e\x8d\x4b\x63\xc7\x6d\x22\xab\xe9\x88\xa9\x00\x88\x8b\xc8\xd8\x6b\x76\x10\x39\x0c\x2b\x1d\xb2\x84\x9e\x86\x8a\x6d\x8f\xf4\x59\xa9\x4c\x2f\x56\xe3\xa7\xe4\x6e\xac\xf7\xb3\x26\x56\x17\x4d\xcc\xee\xd6\x06\xe7\x99\xa3\x66\x63\xad\xd5\x84\xe3\x58\x28\x07\x45\xbc\x2f\x00\x50\x77\x01\x76\xb7\x8b\xc1\x46\x8c\x90\xd5\x43\x4b\xc3\xfb\x14\x58\x01\xec\xc1\xde\x2e\x3c\x79\x72\x1d\x7a\x76\x23\x24\xcf\xb7\x77\x0a\x00\xc2\xc8\x21\x97\xbd\x07\x79\xba\xb1\x7e\x79\x29\x73\x92\xe2\x7b\xa8\x4e\x83\xc3\x5c\xe1\x0d\xa9\x5c\x22\x02\x60\x1c\xdc\xb2\x91\x51\xba\x36\x0a\xfb\xe0\xab\x77\x31\xf8\xeb\xa1\x4d\x00\x4c\x5c\x68\xa5\x21\x3b\x47\x9a\x1c\xc0\xe4\x5d\x48\xe4\x95\x33\x93\x07\x79\xcd\xd8\x98\xc9\x46\x3a\x6c\x95\x5e\x48\xc2\xd6\x46\xa6\xc5\xe4\x00\x98\x12\x8a\x71\x54\xcb\x7e\xa0\x37\xa3\xdd\x9b\x88\x2b\xe2\x4d\xc8\xef\x16\xb8\x75\xc2\x8d\x15\x62\x85\xdf\x90\x9c\xcb\x34\xb1\xa6\x86\xe7\x25\xd1\xaa\x57\xc1\x60\x21\x83\x27\xe5\x40\x7c\x96\xba\x97\x13\xfa\xbc\xd4\x66\x56\x9d\x73\x38\xd7\x1e\x9c\xab\xf1\x0e\xa2\xbc\x01\x8f\x7c\x1e\x68\x06\x89\xad\xb3\x6c\x31\x42\x1b\x0a\x07\x70\x00\xca\x17\x02\x1d\xbc\xb1\x39\xe1\x2b\xb1\x93\xe1\x5d\x6f\xa6\xe4\x23\x4c\xb1\x09\x84\x60\x7c\xcc\x55\x30\xf3\xe1\xdc\xaf\x6f\x5c\xa3\x25\x2c\x48\xa4\x61\x9c\x37\x33\x6f\x2c\x20\x16\x82\x13\xe7\x9d\x75\x58\x28\xe5\xaa\xb0\x41\x9a\xfb\x70\x78\x08\x93\x49\xa1\x15\x13\xae\x49\xe5\xb3\x24\x92\x71\xc9\x11\x6e\x42\x73\x36\x4a\xc1\x72\xb9\x9d\x8d\xb7\x03\x7c\xad\xe5\x5b\x08\xf7\x8b\x6d\x7c\x2d\xef\xfe\x75\xef\x53\xc4\xbb\x23\x76\xe0\xd5\xf1\xeb\xa3\x03\x78\xee\xa1\x49\x9c\x08\x1f\x40\x1f\xe6\x99\xde\x54\x46\x21\xcf\x2f\x2b\x96\x4d\x1c\xad\x41\x08\x0d\xa0\x9f\x5b\x0a\xbe\xcf\x47\x3d\x57\x64\xcb\x55\x52\xec\x88\x88\x0c\x3f\x5e\x08\xbc\x28\xf7\xc1\xb3\xa7\x67\xbf\x9f\x3e\x3f\xdc\xbd\x11\xca\xbf\x03\xcd\x90\x56\x91\x8c\xeb\xb0\x5c\xee\x96\x8d\xf2\x62\x9d\xc5\xf9\x4a\x92\x2f\xa2\x76\x6e\x1d\xb6\x68\x40\xca\x4c\xe2\x72\x9d\x8e\xe3\xad\x73\x0e\xf5\x41\x9d\x1f\x0f\x3e\x80\xc4\x95\xb5\xed\xb8\xad\x4e\x40\x24\x9f\x0d\x8e\x3b\x84\x18\x5b\x9b\xd4\x4a\x32\xa5\xc8\x62\x1b\x57\x70\xf2\x68\xa4\x32\x3d\x0c\x14\xf2\xac\x05\x61\x40\x1f\xf3\xe0\x27\xf3\xe8\x46\xc1\xc9\xc1\x29\x8f\x63\xa1\x67\xcc\x3f\xb3\x2b\xa7\xc6\x4d\x56\xc8\x55\x89\xa0\x5c\x0c\xe0\x11\xcd\xb5\x64\x55\x6e\xdc\xd5\x3c\xb8\xd4\x63\x04\x63\x69\x6c\x37\x68\xd6\x95\x96\xc9\x73\x24\x4e\x9d\xeb\x2b\x17\xa1\xe8\x67\x59\x50\xf6\xb0\xf7\xe8\xe1\x1e\xc8\x1b\x6d\x65\xfc\xa0\x51\x7f\x42\x7f\xf9\x5e\x52\x08\xad\xf4\xde\xb8\x88\x2e\xb4\x10\xad\xd7\xa5\x70\x7b\xe5\xf3\x45\x11\xe7\x48\x0b\xee\xb2\x08\x77\x14\x52\xdb\xc1\x9a\x13\xc5\x35\x77\xad\x88\x71\xad\xe5\x8a\xdf\x6e\x35\x9c\xdb\xcb\x62\x07\x22\x72\x61\xa6\x34\x40\x8b\x1e\xe7\xaa\xd4\x54\xb9\xd5\xb2\xd2\xb3\x1b\x1a\x92\xef\x55\x9c\x41\x6f\xa2\x59\x2b\x00\xf5\x21\xa2\xbe\xf5\xda\x07\x7f\xfd\x4f\xe3\x12\x7a\x36\x77\x38\x34\xce\x8d\xff\x37\x75\x23\x7b\x7f\x9b\x36\xb1\x03\x3e\x30\x1e\x80\xe2\xd0\x5b\x2d\xff\x37\x85\x40\x93\x8a\x1d\xb8\x10\x86\x08\xc9\xb3\x75\xd0\xab\x58\x86\x90\x08\x69\xd8\x0c\xed\x4e\x2d\x57\xc6\xbe\xfd\xb3\x4d\xd4\x1d\x9a\x54\xb2\xe7\xc6\x70\x06\x84\xd3\x10\xca\x17\x2e\x1d\xfa\xa1\x0c\x52\x77\xcd\x99\x13\x11\xbb\xc4\x26\xb7\x0c\x29\x57\x7b\x7e\xfc\x29\xcf\x62\x2e\xe2\x72\xb9\x01\xed\xd6\x68\xe0\xe3\xc7\xb1\x05\x5f\x8d\x72\xff\x0d\x00\x00\xff\xff\x33\xe6\x54\xc0\x1d\x14\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
