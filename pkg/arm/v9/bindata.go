// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x73\xdb\x36\x12\xfe\x5c\xfc\x8a\x2d\xe5\x36\x2f\x0d\x48\x3b\x6d\x2f\x1d\xb5\xca\x8c\xe3\x28\xb9\x5c\x9c\x58\x27\x27\xd7\xb9\x49\x33\x19\x88\x58\x52\x88\x40\x80\x05\x40\xd9\x8a\xa2\xff\x7e\x03\x90\x7a\x97\x95\xb8\x4e\xee\x43\xf3\xc1\x31\x81\xc5\xee\x62\xf1\xe0\xd9\x5d\xb8\xf5\x6d\x32\x10\x2a\x19\x30\x3b\x04\x8a\x97\x84\xb4\xe0\x89\x36\xe0\xd0\x3a\xa1\xf2\x36\x48\x9d\x03\x53\x1c\xb8\xd1\x25\x30\x29\xc1\x19\x96\x65\x22\x05\x37\x64\x0e\x2e\x74\x25\x39\x18\x5d\x39\x84\xb1\x60\xe0\x86\x08\x05\xb3\x0e\x0d\x74\x4f\x1f\x91\x16\xf4\xbb\xe7\x67\xaf\xfb\x27\xdd\xa7\xfd\xb3\xd7\xbd\x4e\x34\xd1\x95\xa1\x06\xad\xae\x4c\x8a\x34\x37\xba\x2a\x23\xd2\x82\xb3\xf3\x77\x4f\xfe\xfd\xf8\x65\x27\xd2\x25\x2a\x3b\x14\x99\x8b\x0f\xd6\x56\xc6\xda\x32\x8e\xe3\x38\x95\xba\xe2\x11\x69\x91\x16\x88\xd2\xb1\x81\x44\x0b\xf4\x19\x3c\x7b\xd9\x7b\xfd\x0a\xa8\x85\x83\xdb\x5c\xe4\xf0\x83\x1d\x6a\xe3\x20\x3a\x68\xf4\x46\xf0\x11\x1c\x13\x12\xe8\xd1\x1d\xa0\xef\xe1\xf4\xec\x29\x50\x2a\x75\x4e\x4b\x83\x99\xb8\x84\xe8\xf9\xeb\x47\x5d\xf0\xa2\xf0\xb8\x7f\xd6\x6b\x47\x37\xd3\xef\x75\x10\x32\x9d\x82\xc8\x20\x3e\xd1\x2a\x13\x79\x7c\x8e\x69\x65\x84\x9b\xf4\x98\x4b\x87\x3d\x96\x8e\x58\x8e\x16\x66\x33\x22\x75\x9e\xa3\x01\xea\x9a\xc0\x51\xeb\x98\x71\x55\x19\xdb\x21\x44\x42\x59\xc7\xa4\x14\x2a\x07\x83\x1c\x7c\xc8\x53\xae\x20\x0d\x3a\x2b\xc3\x9c\xd0\x0a\xb4\x82\x83\xdb\x43\x6d\x9d\x62\x05\xde\x89\x48\xca\x1c\x3c\x4c\xc6\xcc\x24\x52\x0c\x92\x49\x55\x24\xa9\x14\xa8\x1c\x4d\xd1\xb8\xb8\xc4\x02\x7e\xfb\xed\x56\xf7\xec\xc9\x2d\xef\xe2\x09\x1a\x77\x6c\x1f\x4d\x1c\xda\x85\xaf\x7e\x4c\x64\x22\x65\x0e\x6d\xdc\xf8\xda\xc7\x52\x5b\xe1\xb4\x99\x84\x69\xf8\x08\xe7\xce\x78\xbf\x66\x33\xd2\x3d\x7b\x72\xb5\xd1\x11\x4e\x36\x6d\xf6\x8c\x18\x33\x87\xcf\x71\x72\x4d\xcb\xcf\x71\xb2\x65\xb8\x05\xaf\xce\x1e\x9f\xb5\x81\xa3\x44\x87\x01\x81\x99\x96\x52\x5f\x78\x19\x8b\x69\x08\x11\xcb\x3c\x24\x3d\x7c\x53\x59\xf9\x28\x5b\x60\x06\xc1\x54\x0a\x2e\x84\x1b\x02\x83\x71\x01\xa2\x60\x39\xd6\xdf\x23\x91\x8e\xc2\x39\xc4\x06\x4b\x0d\x03\x36\x42\x0e\x42\xd5\xbb\x84\x04\x5d\xea\xb7\x18\x26\x6d\xcc\x93\x0d\xf1\xf9\x56\xdf\x98\x21\x4a\xfa\x80\x5a\x34\x63\x34\xd4\x94\x85\x7d\x4b\xfc\x21\x75\xfa\xc8\xe1\x9f\xcc\x41\x57\x39\x34\xa5\x11\x16\xe1\x54\xa8\xea\x12\x1e\xc0\x79\x10\x86\xdb\xfd\xde\x0b\x7b\x87\x0c\x98\xc5\xca\xc8\xce\xd0\xb9\xd2\xb6\x93\x24\xe5\x2a\x36\xc8\x87\xcc\xc5\xa9\x2e\x92\x54\x2b\x87\xca\x25\x5c\x58\x97\x78\x6b\x49\x6d\x2b\x79\x90\x3c\xa8\x15\x25\x07\x5e\x05\x33\xe9\x30\xd1\x96\xe4\x65\x3e\xc2\x49\x27\x13\x12\xdb\x49\x12\xf6\x51\x8e\x44\x62\xca\x82\xe6\x65\x9e\xf4\x7b\x2f\xe8\xd3\xde\x53\xfa\xbc\xfb\x5f\x5a\x5b\xa1\x06\x25\x32\x8b\xc4\x5a\x99\x32\x0f\xa0\x4e\x58\x65\x86\xb6\x48\x52\x96\x34\x52\x15\x96\xfe\x90\x83\x54\x38\xf6\x5a\x72\x0f\x06\x97\xa2\xde\xa1\x3d\xc0\x21\xa8\xfc\x3d\xe4\x9d\x09\x5a\xb2\x19\x52\xbc\x74\x86\xd9\xeb\x45\x96\x42\x37\xac\xfa\x1a\x21\xae\xfd\xf9\x3b\x46\x5a\x5b\xa4\x3f\xc6\x47\x47\xbb\x62\x7d\x56\xa2\x3a\xf7\xac\x0d\x27\x5a\x39\x26\x14\x1a\xe8\x49\xe6\x32\x6d\x0a\xf0\x8b\xbe\x0e\x9a\x31\xf1\xba\xff\x1e\xc1\x66\x1f\x2a\x83\xa9\x36\xd8\x84\x76\xf1\xbd\x15\xb3\xb2\xc9\x1d\x71\x21\x52\xa3\xad\xce\xea\xd8\x4d\xaa\x22\xb0\x51\xb2\x5c\xb9\x6a\x21\x2f\xf3\x74\x88\xe9\xa8\xa3\x74\x60\xcd\xcf\x4e\x3b\xc7\xfd\x33\xcf\xa2\x21\x77\x41\x55\x72\xcf\xcc\xf0\x66\x3a\x6d\x58\xd8\xfe\x4b\x0b\xf5\x89\x24\x17\xdd\x83\x08\x66\xb3\xb7\x5b\x89\x2a\xd3\x06\x98\x73\x58\x94\x0e\x84\x82\xe9\x51\x1c\xff\x3c\xfb\x15\xb8\x26\x00\x93\xaa\x80\xc6\x0d\xa0\x13\xa0\x7f\xc2\xf5\x6c\x06\x93\xf0\xfd\xf7\x30\x30\xc8\x46\x04\x60\xef\x86\xdf\xcc\xdd\x38\x98\x36\xbf\xcd\xde\xee\xde\x7a\xe3\x53\x9d\x79\x33\x26\x24\xf2\x88\x80\xcf\xf4\x6f\xde\xac\xac\x06\x2a\x1d\xfc\x0c\x6f\xdf\xfe\xea\x33\x92\x02\x2b\x11\x4b\x38\xfa\x15\x50\x5a\x04\xbc\x14\xce\x7f\x64\x82\x70\xad\xf0\x13\xa7\x61\xb0\xd0\xe3\xeb\x95\x00\x3e\x7a\xa9\x44\xa6\x7c\xce\x23\xa6\x00\x6a\x32\xd8\x5b\x12\xec\x83\xea\x74\x8a\x8a\xcf\x66\x64\x7f\xae\x0d\xd5\x1c\xa4\x06\xd9\x4a\xca\x15\x0e\x84\x5d\xe4\x4f\xa7\x41\x57\x06\xfe\xf3\xa2\xce\xb5\x96\x84\x35\x8c\x73\xa0\x19\x70\x9d\x8e\xd0\x10\x22\x32\xf8\x16\x72\x83\xe5\xd2\xa7\x7a\xaa\xce\xbb\x99\x75\x6c\x50\x47\x95\x00\xd8\x89\x75\x58\xa4\x4e\x82\x75\xba\x6c\x74\xd0\xb0\xf5\xaa\x8c\x9d\x28\xd0\x7c\x52\xca\x93\x8c\x48\xf1\x2a\xb9\x95\xf9\x62\x94\xd9\xf8\x32\xb3\xde\xdd\x84\xe3\xd8\x33\xd5\xa8\xbe\x71\xc9\xa2\xaa\x2d\x99\x71\x47\x04\x00\xd3\xa1\x86\x5b\xfb\xc5\x60\x6b\x8f\xe0\xd5\x43\x6e\xca\x3f\x2b\xed\x18\xc0\x21\x1c\xde\x82\x87\x0f\x97\x5b\xf7\x6e\xe8\x4a\xb9\xcd\x95\x04\xc0\xa0\x75\xda\x5f\x7e\x05\xb4\xbf\x63\xbe\xae\xd1\xbc\xa6\x7a\x28\xe1\x0c\x0b\xad\xe2\xf7\x56\xab\x65\x7d\x46\x00\x22\x5f\x1b\x73\x23\xc6\x68\xa2\x36\x44\xef\x75\x65\x14\x93\x3c\xba\xe7\xe7\xb8\xb0\x9e\x57\xa8\xc4\x9c\xa5\x13\x6a\x30\x17\xd6\x99\x49\xd4\x06\x67\x2a\x24\x75\x55\xb6\x1e\x4b\x66\xdc\x76\x30\x77\x0b\x6c\x9c\x5d\x26\x08\x69\x22\x53\x56\x52\x7a\x12\x98\x5f\xfc\x67\x01\x42\xf1\x4b\xcd\x31\x5c\xf5\x87\x21\xd4\xca\x4b\x7d\xbf\x13\x45\xe8\x52\xbe\x0b\x43\x8b\x53\xdd\x3c\x2b\x9b\x5a\x71\x94\xc8\x4a\x1d\xc2\xc7\x8f\xf5\xee\xae\x3a\xd6\x15\xd1\x0d\x83\xf5\x81\x72\xcc\x58\x25\x9d\xfd\xac\x03\xf5\xeb\xae\x3e\xce\x30\xeb\xe3\xe2\xe9\x93\xdb\x40\x9d\x2e\x2d\xef\xfd\xf2\xd3\x4f\x3f\x05\xf2\xfc\xa6\x34\xda\xe9\xce\xc1\x94\x5b\xf7\xdd\x77\xf7\xee\xce\xc8\x37\xa5\x36\xae\x1e\x68\xb5\xee\xde\x9b\x91\x6f\x96\xdd\xcd\x71\xe8\xbe\x9e\xf5\xbb\xbf\x1f\x9f\x9e\xbe\x3b\x3e\x3d\x3d\xfb\x1d\x68\x09\x07\x41\x09\xd0\xc2\x9f\x8e\x43\xa0\xb4\xfe\xff\x65\xf7\x77\x3f\x38\x9f\xa6\xdc\xab\x86\x83\xf0\x93\xbe\x87\xe3\x93\x93\x6e\xef\x15\xd0\x8b\x86\xd8\xe6\x76\xa8\x65\x63\x6c\xc0\x67\x27\xb6\x66\xaf\x64\x3e\xeb\x99\xe5\x22\xd0\xa4\x47\x82\x27\x13\xe5\x4f\xf5\x82\xb1\x1c\x95\x0b\xfd\xa7\x42\x77\xa1\xcd\x08\x2a\x27\xa4\x70\x02\x2d\xe4\x3a\xd0\xb1\xd3\x60\x58\x8a\x9e\x10\xb9\xf0\xcc\x13\xfb\xe6\x2d\x5b\x2c\x36\x95\xb2\x30\xc0\x4c\x1b\x04\xae\xac\xa7\xa3\x91\xd2\x17\x0a\x9c\x0e\x04\x56\x5b\x42\x40\xc5\xa1\x2a\xeb\xf2\xdf\x53\xf8\x04\x6c\xc8\x36\xe4\x62\x28\x24\x06\x76\x5f\x30\x2c\x50\x7e\x07\x3a\x1d\x88\xa2\xc0\xf0\x5c\x2f\xf9\xfd\x33\xf8\xdc\x03\xd9\xef\x71\x1b\xcb\xe7\xb5\x14\xcc\x66\xfb\x93\xe3\xfe\x1b\xb1\xd4\x72\xb3\xfc\xf7\xd9\x56\xae\x9b\x06\xff\x71\x78\x55\x1e\xb4\xe8\xe0\x87\x4b\x82\x97\x01\x4f\xe7\xc7\xe7\xaf\xfb\xcf\x3a\xb7\x56\x8c\xbf\x08\xbe\x37\xb6\xeb\x79\x98\xcd\x6e\x85\x85\xf4\x72\x4e\x15\xbe\xaf\xa3\xb4\x34\x62\x2c\x24\xe6\xc8\x81\x52\x9f\x03\xe9\x1c\x44\xfe\x1c\x81\x8e\x21\x69\x27\xfe\xd7\xf6\x07\xa0\xd8\x58\xdb\xbf\xd3\x26\x66\xa4\x52\xde\x60\xbd\x82\x90\xba\x36\xa0\x29\xa3\xce\x54\xd6\x79\x34\xf7\x84\x82\x51\x35\xc0\x1a\xe8\xd6\x83\xad\xb2\x08\x52\xa7\x4c\x02\x2b\x45\x53\x56\x13\xeb\x9d\x13\x40\x0d\x42\x64\x5b\xb7\xe1\x6e\x3d\xde\x86\x3b\xf1\xdd\xd6\x1f\x47\xf3\xa2\x6f\x25\xb9\xb7\xa2\x9a\xc3\xb4\x11\xb9\x50\x49\x7d\x98\xc9\xe2\xe1\x84\xd6\x03\xf1\xd2\xf8\xcd\x6d\xf8\x2b\x12\x7e\x7c\x79\xad\x96\xab\x9b\x2b\x35\x5a\xbb\x24\xa8\x49\x1a\x3d\x64\x3a\xa5\x1e\x8c\x0a\xe1\x20\x7e\xc4\xd2\x51\x55\x3e\x92\x7a\xf0\xd2\xdf\xdd\x28\xfa\xe4\xb3\xcb\x82\x86\x3c\xfb\x8e\xd1\x4c\xb6\x0a\x2c\xd2\x02\xeb\xfc\x8d\x87\x1c\x5d\xe0\x91\x41\xb0\x12\x6a\xad\x7e\xb6\xce\xd6\xc9\x5d\xe2\xaf\x83\xf7\xe3\xb1\x30\x9d\xf5\xb9\x66\x5d\x31\xe2\xc2\xc0\xc1\x8a\xdc\x5f\x66\x91\xae\x4b\x79\xbd\xe7\x1b\x12\xc9\x9a\xa2\xaf\xc9\x25\xeb\x86\xbe\x1c\x9d\xec\xf5\x93\xeb\x0b\x25\x35\xe3\x3e\x88\xf5\x21\x44\xeb\xfc\xb1\x4d\x19\x7f\x10\x08\xb4\xb1\x75\xff\xda\xdb\x43\xbb\x84\xc3\xf3\x65\x69\xf4\x58\x70\x34\x49\x3b\x79\xc7\x99\x63\xc9\x3b\x5d\x2d\x54\xaf\x02\xa0\x9d\xe8\xca\x73\x93\x9f\xfa\x54\xcc\x3c\x94\xea\x4d\xd4\x9a\xe8\xa0\x81\x7b\xc7\xaf\xdc\xb8\x01\xb3\x59\x23\xc4\xc3\x2b\x6f\xa8\xd7\x3b\xde\x58\x03\xc6\x98\x0f\x1a\x01\x16\x9e\xcf\x3a\xf3\x50\xed\x0f\x68\x63\x7f\x2e\xec\x8f\x70\x7e\x4d\xee\xcf\x8b\x99\xbf\x8a\xe9\x9a\xf7\xfd\x9e\x6f\x88\xe9\x35\x45\x5f\x13\xd3\xeb\x86\xfe\x4f\x98\xae\xa3\x1c\x5e\x3e\x15\x2b\xed\x50\xbb\x6b\x61\xda\xa3\xa8\xbd\xf8\x6d\x31\xb5\xca\x57\xed\xf5\xaf\x1a\x9d\x14\xa1\xfb\xea\xe4\xf1\xc9\xab\xd3\x77\xc7\xbd\x67\x9d\xe8\xc7\xe8\x0a\xd0\xae\x07\xc5\xcb\x78\x2d\xa1\x07\x68\xfc\x9d\x03\x65\xed\x26\x6c\xe1\xd2\xdf\x1b\xea\x09\x73\x9d\x4b\x15\x5e\x34\x02\xa1\x4a\x5b\x61\xec\x66\x58\x28\xe1\x04\x93\xb4\x79\x05\x86\xa8\x89\xe1\x61\xf8\xb7\x78\x63\x59\x1b\x6d\xdf\xff\xf1\x97\xc3\x7b\xab\x43\x47\x3b\x05\x8f\xb6\x05\xef\xef\x14\xbc\x1f\x04\xa3\xdd\x2e\x51\xa7\x47\xa8\x42\x58\x68\xa6\x0d\x0d\xed\xc5\x86\x28\xe3\x63\x34\x4e\x58\xa4\x25\xa2\xa1\x95\x91\x16\x76\xa4\xc6\x60\x86\x90\x62\xbc\x1d\xa5\xe4\xee\xc6\xd8\xd6\x1b\xc1\x22\x9e\x6b\x29\x69\xad\x25\xd9\xd0\xfb\x39\xc8\xc4\x50\x1f\x47\x21\x3d\xfb\x82\x7b\x36\x23\xc4\x55\x0a\x39\x65\xbc\x80\xd2\xe8\xcc\xd7\xda\xcb\x62\x26\xd5\xca\x19\x2d\x69\x29\x99\xc7\x7e\xcb\x17\xea\x4c\x5a\x0d\x0a\x91\x2f\xe5\xe2\x50\x57\xc5\x63\x2d\xab\x02\x2d\x78\x60\x84\x77\x08\xe4\xf3\xca\xdf\x37\x61\x75\x47\x9d\xfa\x7a\xdf\x37\x05\x4d\xca\xa5\x05\x1c\x3e\xf8\xf9\xd0\xf7\x3c\x8b\xed\x34\x74\x7d\x85\x7e\xef\x47\xdd\x04\x87\x12\xc1\x4e\xac\xd4\x39\x58\xa1\xd2\xd0\x48\x14\x4c\xb1\x1c\x01\x7d\xdd\xe0\x86\x5e\xc4\x0d\x8d\xae\xf2\x21\xcc\xfb\x68\xb2\x6c\x7d\x9b\x66\x7a\xae\x65\xd1\x1e\x6f\xbc\x44\x6c\x4e\x7b\x5e\x45\x17\x4a\x94\xaa\x84\x1c\x15\x8e\x59\x60\xb0\x70\xf5\x1d\x4b\x47\x2b\x1a\x2a\x55\x30\x3b\x82\x82\x5b\x3e\x57\x00\xec\x83\xc5\x74\xe3\xb3\xd0\x6a\x39\x92\xc9\x0a\x95\xe3\x3b\x1c\xaa\x9f\x15\xbf\x98\xba\xba\xf9\xbf\x99\x36\xd2\x02\xa5\x1d\xb6\x81\x39\x5d\x88\x94\x2e\x01\x14\xba\xbb\xd4\x30\x3b\x04\xa9\x75\x69\xa1\x52\x4e\xc8\xf9\xdf\x28\x85\x85\xaa\xdc\xde\xda\x4e\x2d\x0b\x63\x5f\xe2\xef\x7a\x36\x1d\x22\xaf\x02\x7e\x56\x49\xca\xe0\x40\x6b\xe7\x9b\x85\x54\x17\x65\x78\x63\xdb\xf5\x08\x19\x11\x3b\xac\x9c\xcf\xb3\x9e\xd1\xeb\x35\x3f\xdc\x27\xd3\xa9\xcf\x18\xb3\xd9\x56\x70\xf7\xee\x67\xf1\xb4\xb1\x78\xe5\xfb\x5f\x00\x00\x00\xff\xff\xf5\x04\x83\x73\x13\x1e\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xdf\x6f\xdb\x38\xf2\x7f\xe7\x5f\x31\xeb\x14\xcd\x16\xbb\x94\x92\xef\x17\xbd\x00\xe9\xa6\x40\xaf\x97\xdd\xdb\xeb\xf5\x12\x24\xf7\x03\x87\x20\x0f\x34\x39\x92\xb8\xa6\x48\x75\x38\x74\xa2\xba\xfe\xdf\x0f\x94\xec\xd8\x97\xa4\xee\x06\xbd\x7d\xd9\x37\x4b\x9c\x9f\x1f\xce\x7c\x66\xe4\xbd\x6f\xca\xa9\xf5\xe5\x54\xc5\x06\x24\xde\x0a\xb1\x58\x80\xad\xa0\x78\x1b\x7c\x65\xeb\xe2\x12\x75\x22\xcb\xfd\xb9\x62\xdd\x9c\x2b\x3d\x53\x35\x46\x58\x2e\x85\x0b\x75\x8d\x04\x92\xc1\x07\x83\x32\xb2\x22\x4e\x5d\x11\x1b\x98\x58\x1f\x59\x39\x67\x7d\x0d\x84\x06\x1a\xc5\xa0\x8d\x07\x3d\x58\x4c\xa4\xd8\x06\x0f\xc1\xc3\xb3\x6f\x9b\x10\xd9\xab\x16\x5f\x4c\x84\x56\x0c\xaf\xcb\xb9\xa2\xd2\xd9\x69\xd9\xa7\xb6\xd4\xce\xa2\x67\xa9\x91\xb8\xe8\xb0\x85\x1f\x7e\xd8\x3f\x3d\xfb\x71\x3f\x07\xf8\x16\x89\xdf\xc4\x3f\xf6\x8c\xf1\x2e\xd2\xfc\xce\x56\x56\x2b\xc6\x58\xac\x22\xbd\xc0\x2e\x44\xcb\x81\xfa\xe1\x18\x3e\xc1\x25\x53\x8e\x6b\xb9\x14\xa7\x67\x3f\x7e\xde\xe9\x0c\xfb\xfb\x3e\xcf\xc9\xce\x15\xe3\x3b\xec\x9f\xe8\xf9\x1d\xf6\x0f\x1c\xef\xc1\xdf\xcf\xfe\x74\x76\x0c\x06\x1d\x32\x02\x37\x08\x55\x70\x2e\xdc\x64\x99\x88\x7a\x80\x48\x55\x8c\x04\xca\x39\xd0\x2e\x45\x46\x8a\xa0\x08\x81\x92\x87\x1b\xcb\x0d\x28\x98\xb7\x60\x5b\x55\xe3\xf8\x3c\xb3\x7a\x36\xdc\x43\x41\xd8\x05\x98\xaa\x19\x1a\xb0\x7e\xcc\x12\x4a\x64\x9d\x53\x1c\x0e\x63\x61\xca\x7b\xe2\xeb\x54\xaf\xa8\x41\x27\x8f\x64\x44\x9a\x23\x49\xea\xda\x78\x2d\xf2\x25\x9d\x5c\xa0\x81\x3f\x2b\x86\x53\xcf\x48\x1d\xd9\x88\xf0\x57\xeb\xd3\x2d\x1c\xc1\xe5\x20\x0c\xdf\x5e\x9c\xbf\x8f\x2f\xc4\x54\x45\x4c\xe4\x4e\x1a\xe6\x2e\x1e\x97\xa5\x36\xbe\x20\x34\x8d\xe2\x42\x87\xb6\xd4\xc1\x33\x7a\x2e\x8d\x8d\x5c\x66\x6f\xe5\xe8\xab\x3c\x2a\x8f\x46\x43\xe5\xb3\x6c\x42\x91\x6e\xca\x10\x45\xdd\xd5\x33\xec\x4f\x2a\xeb\xf0\xb8\x2c\x87\x3c\xba\x99\x2d\xa9\x6b\x65\xdd\xd5\xe5\xc5\xf9\x7b\xf9\xd3\xf9\x4f\xf2\xdd\xe9\xbf\xe5\xe8\x45\x12\x3a\x54\x11\x45\x8c\x4e\xab\x5c\x40\x27\x83\x16\x35\xb1\x2d\xb5\x2a\x57\x52\x09\xbb\x7c\xc9\x83\xd4\x70\xed\xa3\xe4\x8e\x1a\xdc\x88\xe6\x80\x76\x14\x8e\x40\xaf\xa6\x0e\xcd\x49\x8f\x51\xdc\x87\x14\x6f\x99\x54\x7c\x1a\xb2\x12\x4e\x07\xad\xdf\x02\xe2\x31\x9e\xdf\x23\xd2\x21\xa2\xfc\xff\xe2\xf0\xf0\x31\xac\xcf\x3a\xf4\x97\x8d\xad\x18\xde\x06\xcf\xca\x7a\x24\x38\x77\x8a\xab\x40\x2d\x64\xa5\xdf\xa6\x9a\xb1\xcc\xb6\x7f\x1f\x60\xab\x8f\x89\x50\x07\xc2\x15\xb4\x77\xcf\x0f\x30\xeb\x56\x93\xa3\x68\xad\xa6\x10\x43\x35\x62\xd7\xa7\x76\x60\xa3\x72\xa3\xb9\xed\xa1\xee\x6a\xdd\xa0\x9e\x9d\xf8\x30\xb0\xe6\xaf\x1c\x3a\x6f\x2e\xce\x32\x87\x0e\x73\x0b\x52\x67\x32\x2f\xc3\xd5\x62\xb1\xe2\xe0\xf8\x97\x60\xfd\x17\x06\xdc\xe4\x7b\x98\xc0\x72\x79\xfd\x60\x4c\x55\x81\x40\x31\x63\xdb\x31\x58\x0f\x8b\xc3\xa2\x78\xb9\x7c\x05\x26\x08\x80\x3e\xb5\xb0\x0a\x03\x64\x0f\xf2\x03\x3c\xcd\xe7\xe0\x12\x9e\x3f\x87\x29\xa1\x9a\x09\x80\x1d\xe9\x5e\xad\x83\x78\xb6\x58\xfd\x5a\x5e\x3f\x9e\xf8\x2a\xa2\x71\xea\x56\xca\x3a\x34\x13\x01\x79\xc6\x5f\x5d\x6d\x69\x83\x74\x0c\x2f\xe1\xfa\xfa\x55\x9e\x46\x1e\xa2\x43\xec\xe0\xf0\x15\xa0\x8b\x08\x78\x6b\x39\x3f\x54\x56\x98\xe0\x71\xe7\x4d\x10\xb6\x61\xfe\xb4\xe1\x9f\x91\xd3\x0e\x95\xcf\xd3\x4e\x50\x0b\x92\x2a\xd8\xb9\x0c\xec\x2a\xd2\xc5\x02\xbd\x59\x2e\xc5\xee\x29\x5b\x53\x48\x1d\x68\x42\xb5\x35\x6c\x2d\x83\x8d\x77\x93\x93\x03\x84\x44\xf0\xcf\xf7\xe3\x94\x8d\x62\xd0\x51\xc6\x80\xac\xc0\x04\x3d\x43\x12\xc2\x56\xf0\x0d\xd4\x84\xdd\x26\xa6\xf1\x68\x9c\xb8\x55\x64\x35\x1d\x31\x15\x00\xb1\x8f\x8c\xad\x66\x07\x91\x43\xb7\xb2\x21\x87\xd4\x53\x57\xb0\x6d\x91\xbe\x28\x95\xe9\xc5\x6a\xfc\x9c\xdc\xd6\x79\x3b\xab\x62\x71\x5b\xc5\x1c\x6e\x69\x70\x9e\x39\x6a\x36\xf6\x5a\x49\x18\x43\x22\x8d\xb2\x53\xc4\x87\x02\x00\x75\x13\x60\x7f\xb7\x18\x3c\xc8\x11\xb2\x79\xa8\xa9\xfb\x90\x02\x2b\x80\x03\x38\xd8\x87\xd7\xaf\x37\xa9\xe7\x30\x42\xf2\x7c\x5f\x53\x00\x10\x46\x0e\xb9\xed\x3d\xc8\x8b\x07\xe7\x8b\x85\xcc\x45\x8a\x1f\xa0\xb8\x08\x0e\x73\x87\x57\xa4\x72\x8b\x08\x80\x71\x71\xcb\x4e\x46\xe9\xd2\x28\x6c\x83\x2f\x7e\x89\xc1\x6f\x96\x36\x01\x30\x71\xa1\x96\x86\xec\x1c\x69\x72\x0c\x93\x5f\x42\x22\xaf\x9c\x99\x7c\x9f\xcf\x8c\x8d\x99\x6c\xa4\xc3\x5a\xe9\x5e\x12\xd6\x36\x32\xf5\x93\x63\x60\x4a\x28\xc6\x55\x2d\xc7\x81\xde\x8c\x7e\xb7\x11\x57\xc4\x0f\x21\x7f\x5c\xe0\xde\x0d\x57\x56\x88\x15\x7e\x5d\x72\x2e\xd3\xc4\x9a\x1a\x7e\x1e\x0a\xad\xf8\x5b\x30\x38\x90\xc1\xeb\xe1\x42\x7c\x96\x7a\x9e\x0b\xfa\x66\xe8\xcd\x6c\x3a\xd7\x70\xee\x3d\xb8\x51\xaa\x46\xcf\xa0\xbc\x01\x8f\x7c\x13\x68\x06\x89\xad\xb3\x6c\x31\x42\x1d\x06\x0e\xe0\x00\xa4\x34\xe6\x3e\x34\x36\x17\x7c\x21\xf6\x32\xbc\x6b\x65\x4a\x3e\xc2\x14\xab\x40\x08\xc6\xc7\xdc\x05\x33\x1f\x6e\x3c\x70\x18\xfa\x66\xf4\x84\x03\x12\xa9\x1b\xf7\xcd\xcc\x1b\x3d\xc4\x81\xe0\xc4\x4d\x63\x1d\x0e\x94\x72\xd7\xd8\x20\xcd\x0b\x38\x39\x81\xc9\x64\xa0\x15\x13\x36\xa4\xf2\x45\x12\xc9\xb8\xe4\x0c\x1f\x42\x73\x39\x4a\xc1\x72\xb9\x9b\x8d\x77\x03\xbc\xb1\xf2\x35\x84\xfb\xab\x7d\x3c\x95\x77\xff\x70\xf0\x39\xe2\x8d\xc8\xf0\xdd\xad\xc0\xdb\x2e\x10\xc3\xe5\x9b\xcb\x7f\x5c\xfc\x7c\xb2\xbf\xe5\xfc\x5f\x81\x66\x48\x2b\xdf\xe3\x39\x2c\x97\xfb\x83\xa2\xbc\x5d\xd7\x5d\xfe\x88\x90\xb2\x23\x3b\xb7\x0e\x6b\x34\x20\x65\xa6\x5d\xb9\x2e\xa0\x7c\x87\x20\xe7\x50\x1e\x97\xf9\xe7\xf1\x47\x90\xb8\xf2\xb6\x3b\xd3\x15\x66\x22\xf9\xec\x70\xd4\x10\x62\x1c\x46\x52\x2b\xc9\x94\x22\x8b\x5d\xdd\xcd\xc9\xa3\x91\xca\xb4\xd0\x51\xc8\xdb\x11\x84\x0e\x7d\xcc\xab\x9a\xcc\xcb\x16\x05\x27\x3b\xa7\x3c\x8e\xad\x99\x51\xfa\x82\x56\xbe\xcc\xed\x3e\xce\x7d\x84\xa0\x5c\x0c\xe0\x11\xcd\x46\xb2\x70\x41\x2b\x57\xcc\x83\x4b\x2d\x46\x30\x96\xc6\x01\x81\x66\xdd\x1b\x99\xee\x46\xaa\xd3\xb9\x23\x72\xdb\x88\x76\x96\x05\x65\x0b\x07\x47\x2f\x0f\x40\x6e\x0d\x82\x40\xb6\xb6\xbe\xfc\x8c\xfd\x1c\xc7\x48\x41\xc3\xb4\x8c\x7d\x74\xa1\x86\x68\xbd\x1e\x5a\xad\x55\x3e\x7f\xda\xe1\x1c\xa9\xe7\x26\x8b\x70\x43\x21\xd5\x0d\xac\x59\x4c\x6c\xd8\x66\x45\x65\x6b\x2b\x77\x8c\x74\x6f\x44\xdc\x3f\x16\x7b\x10\x91\x07\x2e\x49\x1d\xd4\xe8\x71\xae\x86\x2e\x18\xbe\x43\x59\xe9\xd9\x96\x85\xe4\x5b\x15\x67\xd0\x9a\x68\xd6\x06\x40\x7d\x8c\xa8\xef\x3d\xb6\xc1\x6f\xde\x54\x2e\xa1\x67\xf3\x48\x40\xe3\xa6\xf7\x3f\x33\x37\xf2\xed\xd7\x59\x13\x7b\xe0\x03\xe3\x31\x28\x0e\xad\xd5\xf2\xbf\x4b\x08\x34\xa9\xd8\x80\x0b\xa1\x8b\x90\x3c\x5b\x07\xad\x8a\xc3\xda\x10\x21\x75\x0f\x53\x7b\xd4\xca\x9d\xb3\xaf\xff\xa3\x25\xea\x06\x4d\x1a\xaa\x67\x6b\x9d\x02\xc2\x69\x08\x9c\x99\x5b\x87\xb6\x1b\x56\x9f\xc7\x36\xc3\x89\x88\x4d\x62\x93\x49\x5e\xca\x95\xce\x77\xff\x97\xb7\x27\x17\x71\xb9\x7c\x00\xed\xce\x6c\xe0\xd3\xa7\x71\x68\xde\x2d\x5f\xff\x09\x00\x00\xff\xff\x9f\xad\x87\x13\x59\x12\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
