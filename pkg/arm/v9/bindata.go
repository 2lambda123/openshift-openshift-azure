// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6d\x73\xdb\x36\x12\xfe\x5c\xfc\x8a\x2d\xe5\x36\x2f\x0d\x48\x3b\x6d\x2f\x1d\xb5\xca\x8c\xe3\x28\xb9\x5c\x9c\x58\x27\x27\xd7\xb9\x49\x33\x19\x88\x58\x52\x88\x40\x80\x05\x40\xd9\x8a\xa2\xff\x7e\x03\x90\x7a\x97\x95\xb8\x4e\xee\x43\xf3\xc1\x31\x81\xc5\xee\x62\xf1\xe0\xd9\x5d\xb8\xf5\x6d\x32\x10\x2a\x19\x30\x3b\x04\x8a\x97\x84\xb4\xe0\x89\x36\xe0\xd0\x3a\xa1\xf2\x36\x48\x9d\x03\x53\x1c\xb8\xd1\x25\x30\x29\xc1\x19\x96\x65\x22\x05\x37\x64\x0e\x2e\x74\x25\x39\x18\x5d\x39\x84\xb1\x60\xe0\x86\x08\x05\xb3\x0e\x0d\x74\x4f\x1f\x91\x16\xf4\xbb\xe7\x67\xaf\xfb\x27\xdd\xa7\xfd\xb3\xd7\xbd\x4e\x34\xd1\x95\xa1\x06\xad\xae\x4c\x8a\x34\x37\xba\x2a\x23\xd2\x82\xb3\xf3\x77\x4f\xfe\xfd\xf8\x65\x27\xd2\x25\x2a\x3b\x14\x99\x8b\x0f\xd6\x56\xc6\xda\x32\x8e\xe3\x38\x95\xba\xe2\x11\x69\x91\x16\x88\xd2\xb1\x81\x44\x0b\xf4\x19\x3c\x7b\xd9\x7b\xfd\x0a\xa8\x85\x83\xdb\x5c\xe4\xf0\x83\x1d\x6a\xe3\x20\x3a\x68\xf4\x46\xf0\x11\x1c\x13\x12\xe8\xd1\x1d\xa0\xef\xe1\xf4\xec\x29\x50\x2a\x75\x4e\x4b\x83\x99\xb8\x84\xe8\xf9\xeb\x47\x5d\xf0\xa2\xf0\xb8\x7f\xd6\x6b\x47\x37\xd3\xef\x75\x10\x32\x9d\x82\xc8\x20\x3e\xd1\x2a\x13\x79\x7c\x8e\x69\x65\x84\x9b\xf4\x98\x4b\x87\x3d\x96\x8e\x58\x8e\x16\x66\x33\x22\x75\x9e\xa3\x01\xea\x9a\xc0\x51\xeb\x98\x71\x55\x19\xdb\x21\x44\x42\x59\xc7\xa4\x14\x2a\x07\x83\x1c\x7c\xc8\x53\xae\x20\x0d\x3a\x2b\xc3\x9c\xd0\x0a\xb4\x82\x83\xdb\x43\x6d\x9d\x62\x05\xde\x89\x48\xca\x1c\x3c\x4c\xc6\xcc\x24\x52\x0c\x92\x49\x55\x24\xa9\x14\xa8\x1c\x4d\xd1\xb8\xb8\xc4\x02\x7e\xfb\xed\x56\xf7\xec\xc9\x2d\xef\xe2\x09\x1a\x77\x6c\x1f\x4d\x1c\xda\x85\xaf\x7e\x4c\x64\x22\x65\x0e\x6d\xdc\xf8\xda\xc7\x52\x5b\xe1\xb4\x99\x84\x69\xf8\x08\xe7\xce\x78\xbf\x66\x33\xd2\x3d\x7b\x72\xb5\xd1\x11\x4e\x36\x6d\xf6\x8c\x18\x33\x87\xcf\x71\x72\x4d\xcb\xcf\x71\xb2\x65\xb8\x05\xaf\xce\x1e\x9f\xb5\x81\xa3\x44\x87\x01\x81\x99\x96\x52\x5f\x78\x19\x8b\x69\x08\x11\xcb\x3c\x24\x3d\x7c\x53\x59\xf9\x28\x5b\x60\x06\xc1\x54\x0a\x2e\x84\x1b\x02\x83\x71\x01\xa2\x60\x39\xd6\xdf\x23\x91\x8e\xc2\x39\xc4\x06\x4b\x0d\x03\x36\x42\x0e\x42\xd5\xbb\x84\x04\x5d\xea\xb7\x18\x26\x6d\xcc\x93\x0d\xf1\xf9\x56\xdf\x98\x21\x4a\xfa\x80\x5a\x34\x63\x34\xd4\x94\x85\x7d\x4b\xfc\x21\x75\xfa\xc8\xe1\x9f\xcc\x41\x57\x39\x34\xa5\x11\x16\xe1\x54\xa8\xea\x12\x1e\xc0\x79\x10\x86\xdb\xfd\xde\x0b\x7b\x87\x0c\x98\xc5\xca\xc8\xce\xd0\xb9\xd2\xb6\x93\x24\xe5\x2a\x36\xc8\x87\xcc\xc5\xa9\x2e\x92\x54\x2b\x87\xca\x25\x5c\x58\x97\x78\x6b\x49\x6d\x2b\x79\x90\x3c\xa8\x15\x25\x07\x5e\x05\x33\xe9\x30\xd1\x96\xe4\x65\x3e\xc2\x49\x27\x13\x12\xdb\x49\x12\xf6\x51\x8e\x44\x62\xca\x82\xe6\x65\x9e\xf4\x7b\x2f\xe8\xd3\xde\x53\xfa\xbc\xfb\x5f\x5a\x5b\xa1\x06\x25\x32\x8b\xc4\x5a\x99\x32\x0f\xa0\x4e\x58\x65\x86\xb6\x48\x52\x96\x34\x52\x15\x96\xfe\x90\x83\x54\x38\xf6\x5a\x72\x0f\x06\x97\xa2\xde\xa1\x3d\xc0\x21\xa8\xfc\x3d\xe4\x9d\x09\x5a\xb2\x19\x52\xbc\x74\x86\xd9\xeb\x45\x96\x42\x37\xac\xfa\x1a\x21\xae\xfd\xf9\x3b\x46\x5a\x5b\xa4\x3f\xc6\x47\x47\xbb\x62\x7d\x56\xa2\x3a\xf7\xac\x0d\x27\x5a\x39\x26\x14\x1a\xe8\x49\xe6\x32\x6d\x0a\xf0\x8b\xbe\x0e\x9a\x31\xf1\xba\xff\x1e\xc1\x66\x1f\x2a\x83\xa9\x36\xd8\x84\x76\xf1\xbd\x15\xb3\xb2\xc9\x1d\x71\x21\x52\xa3\xad\xce\xea\xd8\x4d\xaa\x22\xb0\x51\xb2\x5c\xb9\x6a\x21\x2f\xf3\x74\x88\xe9\xa8\xa3\x74\x60\xcd\xcf\x4e\x3b\xc7\xfd\x33\xcf\xa2\x21\x77\x41\x55\x72\xcf\xcc\xf0\x66\x3a\x6d\x58\xd8\xfe\x4b\x0b\xf5\x89\x24\x17\xdd\x83\x08\x66\xb3\xb7\x5b\x89\x2a\xd3\x06\x98\x73\x58\x94\x0e\x84\x82\xe9\x51\x1c\xff\x3c\xfb\x15\xb8\x26\x00\x93\xaa\x80\xc6\x0d\xa0\x13\xa0\x7f\xc2\xf5\x6c\x06\x93\xf0\xfd\xf7\x30\x30\xc8\x46\x04\x60\xef\x86\xdf\xcc\xdd\x38\x98\x36\xbf\xcd\xde\xee\xde\x7a\xe3\x53\x9d\x79\x33\x26\x24\xf2\x88\x80\xcf\xf4\x6f\xde\xac\xac\x06\x2a\x1d\xfc\x0c\x6f\xdf\xfe\xea\x33\x92\x02\x2b\x11\x4b\x38\xfa\x15\x50\x5a\x04\xbc\x14\xce\x7f\x64\x82\x70\xad\xf0\x13\xa7\x61\xb0\xd0\xe3\xeb\x95\x00\x3e\x7a\xa9\x44\xa6\x7c\xce\x23\xa6\x00\x6a\x32\xd8\x5b\x12\xec\x83\xea\x74\x8a\x8a\xcf\x66\x64\x7f\xae\x0d\xd5\x1c\xa4\x06\xd9\x4a\xca\x15\x0e\x84\x5d\xe4\x4f\xa7\x41\x57\x06\xfe\xf3\xa2\xce\xb5\x96\x84\x35\x8c\x73\xa0\x19\x70\x9d\x8e\xd0\x10\x22\x32\xf8\x16\x72\x83\xe5\xd2\xa7\x7a\xaa\xce\xbb\x99\x75\x6c\x50\x47\x95\x00\xd8\x89\x75\x58\xa4\x4e\x82\x75\xba\x6c\x74\xd0\xb0\xf5\xaa\x8c\x9d\x28\xd0\x7c\x52\xca\x93\x8c\x48\xf1\x2a\xb9\x95\xf9\x62\x94\xd9\xf8\x32\xb3\xde\xdd\x84\xe3\xd8\x33\xd5\xa8\xbe\x71\xc9\xa2\xaa\x2d\x99\x71\x47\x04\x00\xd3\xa1\x86\x5b\xfb\xc5\x60\x6b\x8f\xe0\xd5\x43\x6e\xca\x3f\x2b\xed\x18\xc0\x21\x1c\xde\x82\x87\x0f\x97\x5b\xf7\x6e\xe8\x4a\xb9\xcd\x95\x04\xc0\xa0\x75\xda\x5f\x7e\x05\xb4\xbf\x63\xbe\xae\xd1\xbc\xa6\x7a\x28\xe1\x0c\x0b\xad\xe2\xf7\x56\xab\x65\x7d\x46\x00\x22\x5f\x1b\x73\x23\xc6\x68\xa2\x36\x44\xef\x75\x65\x14\x93\x3c\xba\xe7\xe7\xb8\xb0\x9e\x57\xa8\xc4\x9c\xa5\x13\x6a\x30\x17\xd6\x99\x49\xd4\x06\x67\x2a\x24\x75\x55\xb6\x1e\x4b\x66\xdc\x76\x30\x77\x0b\x6c\x9c\x5d\x26\x08\x69\x22\x53\x56\x52\x7a\x12\x98\x5f\xfc\x67\x01\x42\xf1\x4b\xcd\x31\x5c\xf5\x87\x21\xd4\xca\x4b\x7d\xbf\x13\x45\xe8\x52\xbe\x0b\x43\x8b\x53\xdd\x3c\x2b\x9b\x5a\x71\x94\xc8\x4a\x1d\xc2\xc7\x8f\xf5\xee\xae\x3a\xd6\x15\xd1\x0d\x83\xf5\x81\x72\xcc\x58\x25\x9d\xfd\xac\x03\xf5\xeb\xae\x3e\xce\x30\xeb\xe3\xe2\xe9\x93\xdb\x40\x9d\x2e\x2d\xef\xfd\xf2\xd3\x4f\x3f\x05\xf2\xfc\xa6\x34\xda\xe9\xce\xc1\x94\x5b\xf7\xdd\x77\xf7\xee\xce\xc8\x37\xa5\x36\xae\x1e\x68\xb5\xee\xde\x9b\x91\x6f\x96\xdd\xcd\x71\xe8\xbe\x9e\xf5\xbb\xbf\x1f\x9f\x9e\xbe\x3b\x3e\x3d\x3d\xfb\x1d\x68\x09\x07\x41\x09\xd0\xc2\x9f\x8e\x43\xa0\xb4\xfe\xff\x65\xf7\x77\x3f\x38\x9f\xa6\xdc\xab\x86\x83\xf0\x93\xbe\x87\xe3\x93\x93\x6e\xef\x15\xd0\x8b\x86\xd8\xe6\x76\xa8\x65\x63\x6c\xc0\x67\x27\xb6\x66\xaf\x64\x3e\xeb\x99\xe5\x22\xd0\xa4\x47\x82\x27\x13\xe5\x4f\xf5\x82\xb1\x1c\x95\x0b\xfd\xa7\x42\x77\xa1\xcd\x08\x2a\x27\xa4\x70\x02\x2d\xe4\x3a\xd0\xb1\xd3\x60\x58\x8a\x9e\x10\xb9\xf0\xcc\x13\xfb\xe6\x2d\x5b\x2c\x36\x95\xb2\x30\xc0\x4c\x1b\x04\xae\xac\xa7\xa3\x91\xd2\x17\x0a\x9c\x0e\x04\x56\x5b\x42\x40\xc5\xa1\x2a\xeb\xf2\xdf\x53\xf8\x04\x6c\xc8\x36\xe4\x62\x28\x24\x06\x76\x5f\x30\x2c\x50\x7e\x07\x3a\x1d\x88\xa2\xc0\xf0\x5c\x2f\xf9\xfd\x33\xf8\xdc\x03\xd9\xef\x71\x1b\xcb\xe7\xb5\x14\xcc\x66\xfb\x93\xe3\xfe\x1b\xb1\xd4\x72\xb3\xfc\xf7\xd9\x56\xae\x9b\x06\xff\x71\x78\x55\x1e\xb4\xe8\xe0\x87\x4b\x82\x97\x01\x4f\xe7\xc7\xe7\xaf\xfb\xcf\x3a\xb7\x56\x8c\xbf\x08\xbe\x37\xb6\xeb\x79\x98\xcd\x6e\x85\x85\xf4\x72\x4e\x15\xbe\xaf\xa3\xb4\x34\x62\x2c\x24\xe6\xc8\x81\x52\x9f\x03\xe9\x1c\x44\xfe\x1c\x81\x8e\x21\x69\x27\xfe\xd7\xf6\x07\xa0\xd8\x58\xdb\xbf\xd3\x26\x66\xa4\x52\xde\x60\xbd\x82\x90\xba\x36\xa0\x29\xa3\xce\x54\xd6\x79\x34\xf7\x84\x82\x51\x35\xc0\x1a\xe8\xd6\x83\xad\xb2\x08\x52\xa7\x4c\x02\x2b\x45\x53\x56\x13\xeb\x9d\x13\x40\x0d\x42\x64\x5b\xb7\xe1\x6e\x3d\xde\x86\x3b\xf1\xdd\xd6\x1f\x47\xf3\xa2\x6f\x25\xb9\xb7\xa2\x9a\xc3\xb4\x11\xb9\x50\x49\x7d\x98\xc9\xe2\xe1\x84\xd6\x03\xf1\xd2\xf8\xcd\x6d\xf8\x2b\x12\x7e\x7c\x79\xad\x96\xab\x9b\x2b\x35\x5a\xbb\x24\xa8\x49\x1a\x3d\x64\x3a\xa5\x1e\x8c\x0a\xe1\x20\x7e\xc4\xd2\x51\x55\x3e\x92\x7a\xf0\xd2\xdf\xdd\x28\xfa\xe4\xb3\xcb\x82\x86\x3c\xfb\x8e\xd1\x4c\xb6\x0a\x2c\xd2\x02\xeb\xfc\x8d\x87\x1c\x5d\xe0\x91\x41\xb0\x12\x6a\xad\x7e\xb6\xce\xd6\xc9\x5d\xe2\xaf\x83\xf7\xe3\xb1\x30\x9d\xf5\xb9\x66\x5d\x31\xe2\xc2\xc0\xc1\x8a\xdc\x5f\x66\x91\xae\x4b\x79\xbd\xe7\x1b\x12\xc9\x9a\xa2\xaf\xc9\x25\xeb\x86\xbe\x1c\x9d\xec\xf5\x93\xeb\x0b\x25\x35\xe3\x3e\x88\xf5\x21\x44\xeb\xfc\xb1\x4d\x19\x7f\x10\x08\xb4\xb1\x75\xff\xda\xdb\x43\xbb\x84\xc3\xf3\x65\x69\xf4\x58\x70\x34\x49\x3b\x79\xc7\x99\x63\xc9\x3b\x5d\x2d\x54\xaf\x02\xa0\x9d\xe8\xca\x73\x93\x9f\xfa\x54\xcc\x3c\x94\xea\x4d\xd4\x9a\xe8\xa0\x81\x7b\xc7\xaf\xdc\xb8\x01\xb3\x59\x23\xc4\xc3\x2b\x6f\xa8\xd7\x3b\xde\x58\x03\xc6\x98\x0f\x1a\x01\x16\x9e\xcf\x3a\xf3\x50\xed\x0f\x68\x63\x7f\x2e\xec\x8f\x70\x7e\x4d\xee\xcf\x8b\x99\xbf\x8a\xe9\x9a\xf7\xfd\x9e\x6f\x88\xe9\x35\x45\x5f\x13\xd3\xeb\x86\xfe\x4f\x98\xae\xa3\x1c\x5e\x3e\x15\x2b\xed\x50\xbb\x6b\x61\xda\xa3\xa8\xbd\xf8\x6d\x31\xb5\xca\x57\xed\xf5\xaf\x1a\x9d\x14\xa1\xfb\xea\xe4\xf1\xc9\xab\xd3\x77\xc7\xbd\x67\x9d\xe8\xc7\xe8\x0a\xd0\xae\x07\xc5\xcb\x78\x2d\xa1\x07\x68\xfc\x9d\x03\x65\xed\x26\x6c\xe1\xd2\xdf\x1b\xea\x09\x73\x9d\x4b\x15\x5e\x34\x02\xa1\x4a\x5b\x61\xec\x66\x58\x28\xe1\x04\x93\xb4\x79\x05\x86\xa8\x89\xe1\x61\xf8\xb7\x78\x63\x59\x1b\x6d\xdf\xff\xf1\x97\xc3\x7b\xab\x43\x47\x3b\x05\x8f\xb6\x05\xef\xef\x14\xbc\x1f\x04\xa3\xdd\x2e\x51\xa7\x47\xa8\x42\x58\x68\xa6\x0d\x0d\xed\xc5\x86\x28\xe3\x63\x34\x4e\x58\xa4\x25\xa2\xa1\x95\x91\x16\x76\xa4\xc6\x60\x86\x90\x62\xbc\x1d\xa5\xe4\xee\xc6\xd8\xd6\x1b\xc1\x22\x9e\x6b\x29\x69\xad\x25\xd9\xd0\xfb\x39\xc8\xc4\x50\x1f\x47\x21\x3d\xfb\x82\x7b\x36\x23\xc4\x55\x0a\x39\x65\xbc\x80\xd2\xe8\xcc\xd7\xda\xcb\x62\x26\xd5\xca\x19\x2d\x69\x29\x99\xc7\x7e\xcb\x17\xea\x4c\x5a\x0d\x0a\x91\x2f\xe5\xe2\x50\x57\xc5\x63\x2d\xab\x02\x2d\x78\x60\x84\x77\x08\xe4\xf3\xca\xdf\x37\x61\x75\x47\x9d\xfa\x7a\xdf\x37\x05\x4d\xca\xa5\x05\x1c\x3e\xf8\xf9\xd0\xf7\x3c\x8b\xed\x34\x74\x7d\x85\x7e\xef\x47\xdd\x04\x87\x12\xc1\x4e\xac\xd4\x39\x58\xa1\xd2\xd0\x48\x14\x4c\xb1\x1c\x01\x7d\xdd\xe0\x86\x5e\xc4\x0d\x8d\xae\xf2\x21\xcc\xfb\x68\xb2\x6c\x7d\x9b\x66\x7a\xae\x65\xd1\x1e\x6f\xbc\x44\x6c\x4e\x7b\x5e\x45\x17\x4a\x94\xaa\x84\x1c\x15\x8e\x59\x60\xb0\x70\xf5\x1d\x4b\x47\x2b\x1a\x2a\x55\x30\x3b\x82\x82\x5b\x3e\x57\x00\xec\x83\xc5\x74\xe3\xb3\xd0\x6a\x39\x92\xc9\x0a\x95\xe3\x3b\x1c\xaa\x9f\x15\xbf\x98\xba\xba\xf9\xbf\x99\x36\xd2\x02\xa5\x1d\xb6\x81\x39\x5d\x88\x94\x2e\x01\x14\xba\xbb\xd4\x30\x3b\x04\xa9\x75\x69\xa1\x52\x4e\xc8\xf9\xdf\x28\x85\x85\xaa\xdc\xde\xda\x4e\x2d\x0b\x63\x5f\xe2\xef\x7a\x36\x1d\x22\xaf\x02\x7e\x56\x49\xca\xe0\x40\x6b\xe7\x9b\x85\x54\x17\x65\x78\x63\xdb\xf5\x08\x19\x11\x3b\xac\x9c\xcf\xb3\x9e\xd1\xeb\x35\x3f\xdc\x27\xd3\xa9\xcf\x18\xb3\xd9\x56\x70\xf7\xee\x67\xf1\xb4\xb1\x78\xe5\xfb\x5f\x00\x00\x00\xff\xff\xf5\x04\x83\x73\x13\x1e\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5f\x6f\x1b\x37\x12\x7f\xe7\xa7\x98\xca\x45\xdc\xa0\xe5\xae\xdd\x43\x2e\x80\x53\x07\xc8\xa5\x6e\x2f\x97\x4b\x6d\xd8\xe9\x1d\x0e\x41\x1e\x28\x72\x76\x97\x11\x97\xdc\x0c\x87\xb2\x15\x47\xdf\xfd\x40\xae\x64\xf9\x6c\x47\x89\x91\xeb\x4b\x5f\x0c\x4b\x9c\xbf\x3f\xce\xfc\x66\xa8\x9d\x6f\xea\xa9\xf5\xf5\x54\xc5\x0e\x24\x5e\x08\xb1\x03\x86\xc2\x00\xca\x39\x60\x52\x4d\x63\x35\x70\x00\xee\x10\x66\x69\x8a\x0e\x19\x08\x95\x91\xc1\xbb\x05\x0c\x81\x18\xce\x3b\xab\x3b\x30\x01\xa3\xdf\x65\x08\x64\x5b\xeb\x15\x23\x34\x14\x7a\x70\x41\x2b\xd7\x85\xc8\x62\x07\x5e\x1f\xff\x7c\x7c\x00\x26\xdb\xc0\x6c\x30\x22\xd8\x81\xd5\xd4\x61\x04\x4a\xf9\xaf\x6a\x18\xa9\xf8\x52\x1f\x12\xa1\xec\x83\xb7\x1c\x08\x18\x55\x0f\x8d\xbd\xc0\x98\x0f\x2d\x81\x6a\xd1\x73\x8e\x4b\x69\x8d\x31\x8e\x2a\x89\x3b\xf4\x6c\xb5\x62\x34\x25\x34\x71\x65\x5e\x4a\xeb\x23\x12\xc3\x8b\xdf\x4e\x7e\x7f\x0d\x52\x0e\x14\x38\xe8\xe0\x80\xf5\x00\x52\x9a\x92\xc9\xfe\xde\x8f\x8f\x1e\x81\x94\xef\x52\x3f\xc0\xcf\xa7\xc7\x27\x5f\x6e\x20\x86\x44\x1a\x37\xe9\xde\x6d\xf3\xd9\xf3\xe7\x47\x27\xaf\x85\xb8\xbc\x04\xdb\x40\xf5\x3c\xf8\xc6\xb6\xd5\x19\xea\x44\x96\x17\x27\x8a\x75\x77\xa2\xf4\x4c\xb5\x18\x61\xb9\x14\x2e\xb4\x2d\x12\x48\x06\x1f\x0c\xca\xc8\x8a\x38\x0d\x55\xec\x60\x62\x7d\x64\xe5\x9c\xf5\x2d\x10\x1a\xe8\x14\x83\x36\x1e\x74\xb1\x98\x48\xb1\x0d\x1e\x82\x87\x6f\xbf\xcb\xd1\x78\xd5\xe3\xc3\x89\xd0\x8a\xe1\x69\x3d\x57\x54\x3b\x3b\xad\x17\xa9\xaf\xb5\xb3\xe8\x59\x6a\x24\xae\x06\xec\xe1\xa7\x9f\x76\x8f\x8e\x7f\xd9\xcd\x01\x3e\x47\xe2\x67\xf1\x6f\x0b\xc6\x78\x15\x69\xfe\xce\x36\x05\xe1\x58\xad\x22\x3d\xc5\x21\xc4\x7c\x4b\x8b\x72\x0c\x1f\xe1\x8c\x29\xc7\xb5\x5c\x8a\xa3\xe3\x5f\x3e\xed\x74\x86\x8b\x9b\x3e\x4f\xc8\xce\x15\xe3\x4b\x5c\xdc\xd3\xf3\x4b\x5c\xdc\x72\x7c\xbb\xe0\xa0\x09\xce\x85\xf3\x2c\x13\x51\x17\x88\xc6\x8a\xcb\xc5\xae\x5d\x8a\x8c\x14\x41\x11\x02\x25\x0f\xe7\x96\x3b\x50\x30\xef\xc1\xf6\xaa\xc5\xf1\xf3\xcc\xea\x59\xb9\x87\x8a\x70\x08\x30\x55\x33\x34\x60\xfd\x98\x25\xd4\xc8\x3a\xa7\x58\x0e\x63\x65\xea\x1b\xe2\xeb\x54\xdf\x50\x87\x4e\x3e\x96\x11\x69\x8e\x24\x69\xe8\xe3\x5b\x91\x2f\xe9\xf0\x14\x0d\xfc\x5d\x31\x1c\x79\x46\x1a\xc8\x46\x84\x7f\x5a\x9f\x2e\xe0\x31\x9c\x15\x61\xf8\xee\xf4\xe4\x55\x7c\x28\xa6\x2a\x62\x22\x77\xd8\x31\x0f\xf1\xa0\xae\xb5\xf1\x15\xa1\xe9\x14\x57\x3a\xf4\xb5\x0e\x9e\xd1\x73\x6d\x6c\xe4\x3a\x7b\xab\x47\x5f\xf5\xe3\xfa\xf1\x68\xa8\xfe\x36\x9b\x50\xa4\xbb\x3a\x44\xd1\x0e\xed\x0c\x17\x87\x8d\x75\x78\x50\xd7\x25\x8f\x61\x66\x6b\x1a\x7a\xd9\x0e\x6d\x7d\x7a\xf2\x4a\xfe\x7a\xf2\xab\x7c\x79\xf4\x1f\x39\x7a\x91\x84\x0e\x55\x44\x11\xa3\xd3\x2a\x17\xd0\x61\xd1\xa2\x2e\xf6\xb5\x56\xf5\x4a\x2a\xe1\x90\x2f\xb9\x48\x95\x6b\x1f\x25\xb7\xd4\xe0\x46\x34\x07\xb4\xa5\x70\x04\xfa\xdc\x9b\xe6\x70\x81\x51\xdc\x84\x14\x2f\x98\x54\xbc\x1f\xb2\x12\x8e\x8a\xd6\x1f\x01\xf1\x18\xcf\x9f\x11\xe9\x10\x51\xfe\xa5\xda\xdf\xbf\x0b\xeb\xe3\x01\xfd\x59\x67\x1b\x86\xe7\xc1\xb3\xb2\x1e\x09\x4e\x9c\xe2\x26\x50\x0f\x59\xe9\x8f\xa9\x66\xac\xb3\xed\x3f\x07\xd8\x65\x10\xea\x40\xb8\x82\xf6\xea\xf3\x2d\xcc\x86\xd5\xe4\xa8\x7a\xab\x29\xc4\xd0\x8c\xd8\x2d\x52\x5f\xd8\xa8\xde\x68\x5e\xf7\xd0\x0e\xad\xee\x50\xcf\x0e\x7d\x28\xac\xf9\x85\x43\xe7\xd9\xe9\x71\xe6\xd0\x32\xb7\x20\x0d\x26\xf3\x32\xbc\xb9\xbc\x5c\x71\x70\xfc\x47\xb0\xfe\x33\x03\x6e\xf2\x03\x4c\x60\xb9\x7c\x7b\x6b\x4c\x35\x81\x40\x31\x63\x3f\x30\x58\x0f\x97\xfb\x55\xf5\x68\xf9\x04\x4c\x10\x00\x8b\xd4\xc3\x2a\x0c\x90\x0b\x90\xef\xe1\x7e\x3e\x8b\x4b\x78\xf0\x00\xa6\x84\x6a\x26\x00\xb6\xa4\xfb\x66\x1d\xc4\xb7\x97\xab\xff\x96\x6f\xef\x4e\x7c\x15\xd1\x38\x75\x1b\x65\x1d\x9a\x89\x80\x3c\xe3\xdf\xbc\xb9\xa6\x0d\xd2\x31\x3c\x82\xb7\x6f\x9f\xe4\x69\xe4\x21\x3a\xc4\x01\xf6\x9f\x00\xba\x88\x80\x17\x96\xf3\x87\xc6\x0a\x13\x3c\x6e\xbd\x09\xc2\x3e\xcc\xef\x37\xfc\x33\x72\xda\xa1\xf2\x79\xda\x09\xea\x41\x52\x03\x5b\x97\x81\x6d\x45\x7a\x79\x89\xde\x2c\x97\x62\xfb\x94\x6d\x29\xa4\x01\x34\xa1\xba\x36\x6c\x2d\x83\x8d\x57\x93\x93\x03\x84\x44\xf0\xaf\x57\xe3\x94\x8d\xa2\xe8\x28\x63\x40\x36\x60\x82\x9e\x21\x09\x61\x1b\xf8\x06\x5a\xc2\x61\x13\xd3\x78\x34\x4e\xdc\x26\xb2\x9a\x8e\x98\x0a\x80\xb8\x88\x8c\xbd\x66\x07\x91\xc3\xb0\xb2\x21\x4b\xea\x69\xa8\xd8\xf6\x48\x9f\x95\xca\xf4\x62\x35\x7e\x4a\xee\xda\x79\x3f\x6b\x62\x75\xd1\xc4\x1c\x6e\x6d\x70\x9e\x39\x6a\x36\xf6\x5a\x4d\x38\xae\x85\x72\x50\xc4\xfb\x02\x00\x75\x17\x60\x77\xbb\x18\xdc\xca\x11\xb2\x79\x68\x69\x78\x9f\x02\x2b\x80\x3d\xd8\xdb\x85\xa7\x4f\x37\xa9\xe7\x30\x42\xf2\x7c\x53\x53\x00\x10\x46\x0e\xb9\xed\x3d\xc8\xd3\x5b\xe7\x97\x97\x32\x17\x29\xbe\x87\xea\x34\x38\xcc\x1d\xde\x90\xca\x2d\x22\x00\xc6\xc5\x2d\x3b\x19\xa5\x6b\xa3\xb0\x0f\xbe\x7a\x17\x83\xdf\x2c\x6d\x02\x60\xe2\x42\x2b\x0d\xd9\x39\xd2\xe4\x00\x26\xef\x42\x22\xaf\x9c\x99\xfc\x90\xcf\x8c\x8d\x99\x6c\xa4\xc3\x56\xe9\x85\x24\x6c\x6d\x64\x5a\x4c\x0e\x80\x29\xa1\x18\x57\xb5\x1c\x07\x7a\x33\xfa\xbd\x8e\xb8\x22\xbe\x0d\xf9\xdd\x02\x37\x6e\xb8\xb1\x42\xac\xf0\x1b\x92\x73\x99\x26\xd6\xd4\xf0\xa2\x14\x5a\xf5\x5b\x30\x58\xc8\xe0\x69\xb9\x10\x9f\xa5\x1e\xe4\x82\x3e\x2f\xbd\x99\x4d\xe7\x1a\xce\xbd\x07\xe7\x6a\x7c\x71\x28\x6f\xc0\x23\x9f\x07\x9a\x41\x62\xeb\x2c\x5b\x8c\xd0\x86\xc2\x01\x1c\x80\x94\xc6\xdc\x87\xc6\xe6\x82\xaf\xc4\x4e\x86\x77\xad\x4c\xc9\x47\x98\x62\x13\x08\xc1\xf8\x98\xbb\x60\xe6\xc3\xb9\x5f\xbf\xaf\x46\x4f\x58\x90\x48\xc3\xb8\x6f\x66\xde\x58\x40\x2c\x04\x27\xce\x3b\xeb\xb0\x50\xca\x55\x63\x83\x34\x0f\xe1\xf0\x10\x26\x93\x42\x2b\x26\x6c\x48\xe5\xb3\x24\x92\x71\xc9\x19\xde\x86\xe6\x6c\x94\x82\xe5\x72\x3b\x1b\x6f\x07\x78\x63\xe5\x6b\x08\xf7\x8b\x7d\xdc\x97\x77\xff\xba\xf7\x29\xe2\x8d\xc8\xf0\xfd\x85\xc0\x8b\xf2\x82\x3b\x7b\x76\xf6\xfb\xe9\x8b\xc3\xdd\x6b\xce\xff\x1d\x68\x86\xb4\xf2\x3d\x9e\xc3\x72\xb9\x5b\x14\xe5\xc5\xba\xee\xf2\x23\x22\x3f\x14\xed\xdc\x3a\x6c\xd1\x80\x94\x99\x76\xe5\xba\x80\xc6\x77\xe2\x1c\xea\x83\x3a\xff\x7b\xf0\x01\x24\xae\xbc\x6d\xcf\x74\x85\x99\x48\x3e\x3b\x1c\x35\x84\x18\x87\x91\xd4\x4a\x32\xa5\xc8\x62\x5b\x77\x73\xf2\x68\xa4\x32\x3d\x0c\x14\xf2\x76\x04\x61\x40\x1f\xf3\xaa\x26\xf3\xb2\x45\xc1\xc9\xc1\x29\x8f\x63\x6b\x66\x94\x3e\xa3\x95\x2f\xf3\x7a\x1f\xe7\x3e\x42\x50\x2e\x06\xf0\x88\x66\x23\x59\x95\x37\x72\x35\x0f\x2e\xf5\x18\xc1\x58\x1a\x07\x04\x9a\x75\x6f\x64\xba\x1b\xa9\x4e\xe7\x8e\xc8\x6d\x23\xfa\x59\x16\x94\x3d\xec\x3d\x7e\xb4\x07\xf2\xda\x20\x18\x7f\x70\xa8\x3f\x61\xbf\xfc\x9e\x51\x28\xa8\x4c\xcb\xb8\x88\x2e\xb4\x10\xad\xd7\xa5\xd5\x7a\xe5\xf3\xd3\x0e\xe7\x48\x0b\xee\xb2\x08\x77\x14\x52\xdb\xc1\x9a\xc5\xc4\x86\x6d\x56\x54\xb6\xb6\x72\xc5\x48\x37\x46\xc4\xcd\x63\xb1\x03\x11\xb9\x70\x49\x1a\xa0\x45\x8f\x73\x55\xba\xa0\xbc\x43\x59\xe9\xd9\x35\x0b\xc9\xf7\x2a\xce\xa0\x37\xd1\xac\x0d\x80\xfa\x10\x51\xdf\xf8\xd8\x07\xbf\xf9\xa6\x71\x09\x3d\x9b\x3b\x02\x1a\x37\xbd\xff\x9b\xb9\x91\x6f\xbf\xce\x9a\xd8\x01\x1f\x18\x0f\x40\x71\xe8\xad\x96\xff\x5b\x42\xa0\x49\xc5\x0e\x5c\x08\x43\x84\xe4\xd9\x3a\xe8\x55\x2c\x6b\x43\x84\x34\xdc\x4e\xed\x4e\x2b\x57\xce\xbe\xfe\x87\x96\xa8\x3b\x34\xa9\x54\xcf\xb5\x75\x0a\x08\xa7\x21\x94\x5f\xa0\x74\xe8\x87\xb2\xfa\xdc\xb5\x19\x4e\x44\xec\x12\x9b\x4c\xf2\x52\xae\x74\xbe\xff\x31\x6f\x4f\x2e\xe2\x72\x79\x0b\xda\xad\xd9\xc0\xc7\x8f\xe3\xd0\xbc\x5a\xbe\xfe\x1b\x00\x00\xff\xff\x67\x3e\x62\xc0\xbd\x13\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
