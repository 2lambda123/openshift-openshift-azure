// Code generated by go-bindata.
// sources:
// data/master-startup.sh
// data/node-startup.sh
// DO NOT EDIT!

package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\x6d\x73\xdb\x36\x12\xfe\x7c\xfc\x15\x5b\xda\xad\x1b\xc7\x14\xed\x34\xb9\xeb\x28\x75\x66\x1c\xdb\xe9\xf8\x9a\xda\x3e\x3b\xb9\x7c\x48\x33\x19\x88\x04\x25\x44\x24\xc1\x02\xa0\x64\xe5\xe5\xbf\xdf\xb3\x20\x25\x4b\x96\xfc\x92\x3a\xbd\x4e\x93\x48\xc0\x62\xb1\xaf\xcf\xee\x42\x6b\xdf\xc5\x3d\x55\xc6\x3d\x61\x07\x14\xc9\x8b\x20\x58\xa3\x17\xda\x90\x93\xd6\xa9\xb2\xdf\xa5\x5c\xf7\x49\x94\x29\xa5\x46\x57\x24\xf2\x9c\x9c\x11\x59\xa6\x12\x72\x03\xe1\x68\xac\xeb\x3c\x25\xa3\x6b\x27\x69\xa4\x04\x16\x25\x15\xc2\x3a\x69\xe8\xf0\xe5\x73\xf0\x3a\x3b\x3c\x3f\x79\x7d\xb6\x7f\xf8\xeb\xd9\xc9\xeb\xd3\xdd\x70\xa2\x6b\x13\x19\x69\xf1\x4f\x22\xa3\x3e\x0e\x56\x21\xa8\x4e\xce\xdf\xbf\xf8\xcf\xc1\xf1\x6e\xa8\x2b\x59\xda\x81\xca\x5c\x67\x7d\xe1\x64\x47\x5b\x91\xca\x51\x27\xc9\x75\x9d\xe2\x04\xce\xa8\xca\x89\x5e\x2e\x2d\x45\x47\x74\x74\x7c\xfa\xfa\x15\x45\x96\xd6\x7f\x4c\x55\x9f\x1e\xda\x81\x36\x8e\xc2\xf5\x96\x6f\x48\x9f\xc9\x09\x95\x53\xb4\xf3\x80\xa2\x0f\xf4\xf2\xe4\x57\x8a\x22\x68\x16\x55\x46\x66\xea\x82\xc2\xdf\x5e\x3f\x3f\x24\x26\xa5\x83\xb3\x93\xd3\x6e\x78\x3f\xfe\xcc\x23\x08\x3e\x7d\x22\x95\x51\x67\x5f\x97\x99\xea\x77\xce\x65\x52\x1b\xe5\x26\xa7\xc2\x25\x83\x53\x91\x0c\x45\x1f\xbc\xbf\x7c\x09\x20\x46\x1f\xe6\x8a\x5c\x6b\xb8\xc8\x3a\x61\x5c\x5d\x75\xe0\x90\x50\x95\xf8\x96\xe7\xf0\x04\x19\x99\x12\x9b\x3c\x49\x4b\x4a\x3c\xcf\xda\x08\xa7\x74\x49\xf8\x7f\xfd\xc7\x81\xb6\xae\x14\x85\x7c\x10\x06\x09\xa8\x9e\xc5\x23\x61\xe2\x5c\xf5\xe2\x49\x5d\xc4\x49\xae\x64\xe9\xa2\x44\x1a\xd7\xa9\x64\x41\xbf\xfc\xb2\x71\x78\xf2\x62\x83\x45\xdc\xc7\xda\x9e\x7d\x3e\x81\xc3\x67\xb2\xf2\x9a\x82\x8f\x05\x16\x3b\xad\xac\x67\xb2\xd2\x56\x39\x6d\x26\x7e\x1b\x1a\x9f\x3b\xc3\x72\x41\x05\xf0\xba\xfe\xd2\xa1\x9c\x5c\xbd\xf3\xd4\xa8\x11\x78\xff\x26\x27\x5f\x79\x33\x4e\x2c\x5d\x7c\x67\x03\xee\x9d\x9d\x90\x6d\xbd\x40\x75\x95\xf2\x1d\xf4\x16\xe2\x34\xfc\xec\xbf\xb5\x2a\x6f\x71\x57\xb8\x45\x21\xee\x7d\xb7\x64\xf2\x0c\x29\x23\x9c\x93\x45\xe5\x08\x5c\x3e\xed\x74\x3a\x4f\xbe\x3c\xa5\x54\x07\x44\xb0\x05\xb5\x62\x50\x34\xa1\xe8\x4f\xfa\xba\x3b\xfd\x95\xf4\xc3\x0f\xd4\x33\x52\x0c\xc1\xf0\x46\x85\xdf\x4e\xc5\x58\xff\xd4\x7e\x82\xb8\x2b\x55\x6f\x65\x6a\x62\x28\x43\xf8\x4a\x64\x16\x71\xcc\xbe\x7d\x3b\x77\x9a\xa2\xdc\xd1\x13\x7a\xf7\xee\x29\x67\x77\x49\x36\x97\xb2\xa2\x9d\xa7\x24\x73\x2b\x49\x5e\x28\xc7\x5f\x32\x15\xa4\xba\x94\xb7\x78\xc3\xc8\x42\x8f\xbe\x2e\x98\xd9\x7a\x49\x2e\x45\xc9\xe0\x13\x98\x82\x22\x93\xd1\x8d\xc1\x7d\x43\x10\x22\xf8\x64\x99\x22\x70\x90\xdf\xaf\x4e\x0e\x4e\xba\x94\xca\x5c\x02\xbb\x18\xb7\x32\x9d\xe7\x7a\xcc\xd2\x79\x5c\xa2\x04\xe6\xf6\x22\x89\x8c\xf1\x0c\x7a\x2a\x4b\x3d\x31\x84\xe8\xaa\x74\x9a\x80\x61\xf4\xdf\xdf\x49\x15\xec\xa6\xc0\x9f\x11\x69\x4a\x51\x06\xb7\x27\x43\x69\x82\x00\xa6\xfc\x0e\xcc\x60\xae\x99\x4c\xcd\x16\xc5\xd2\x25\x71\x06\xd3\xf4\x1a\xab\xc2\xee\x76\x02\x73\x15\x89\xcb\xc9\x3a\x40\x6d\x43\x18\x79\xd5\x61\x3d\xa7\x0a\x70\xbc\x8d\xca\x4a\x33\x52\x89\xbc\x8e\x6e\x6e\xbf\x18\x66\xb6\x73\x91\x59\x16\x37\x06\xb2\xc6\xa9\xb2\xc3\x58\x7c\xac\x8d\x8c\x67\xf8\x5c\xc1\x73\x3b\x20\x96\xc9\x40\xd3\xc6\xcd\x64\xb4\xa4\x23\x31\x7b\xa8\x5f\xfd\x59\x6b\x27\x88\xb6\x69\x7b\x83\x9e\x3d\xbb\x54\x9d\xc5\xd0\x75\xe9\xae\x9e\xc4\x3a\x78\x23\xe1\x25\x42\x83\xa2\xb3\x15\xfb\x0d\xda\x30\xa7\x66\x29\x4e\x05\x42\xab\xec\x7c\xb0\x38\x31\x43\x1a\x10\x86\x8c\xf2\x29\xf0\x46\x9a\xb0\x4b\xe1\x07\x48\x5c\x8a\x3c\x0d\xb7\x78\x0f\xca\x30\xc4\x47\xb9\xec\x8b\x64\x82\xba\xd4\x57\xd6\x99\x09\x08\x9d\xa9\x65\xd0\xe0\xcb\xa2\x2d\xa1\xea\xb2\x31\x57\x13\x5c\xf1\x1d\x32\x24\x68\x2d\x53\xd5\x80\x02\x80\xc0\x34\xf1\x8f\x7c\x08\x75\x8e\x75\x2a\x7d\xaa\x3f\xf3\xa6\x2e\x99\xea\x87\x95\x51\x04\xc5\xd3\x55\x31\x34\xf3\xea\x55\x5f\xd9\xc4\xaa\x9d\x38\xaf\xcb\x6d\xfa\xfc\xb9\xd1\xee\x3a\xb7\xce\x91\x5e\xb9\xb0\x71\x68\x2a\x33\x51\xe7\xce\xde\xc9\xa1\x7c\xee\x7a\x77\xfa\x5d\xb6\x0b\xc3\x67\x6a\x3d\x74\xba\xa4\xda\xfa\xf9\xf1\xe3\xc7\x1e\x3c\xff\x51\x19\xed\xf4\xee\xfa\x27\x6c\x7e\xff\xfd\xd6\xe6\x17\xac\xa0\xf2\x36\x0b\x6b\x6b\x9b\x5b\x58\xb8\xac\xd3\x7b\xbe\x8f\x38\x3a\x3b\x7c\xb3\xf7\xf2\xe5\x7b\xfc\x39\x79\x43\x51\x45\xeb\x9e\x09\x45\x05\x7b\x07\xb9\x1e\x45\xcd\xbf\xc7\x87\x6f\x78\x71\xba\x1d\xa5\xcc\x1a\x5f\xf9\x6f\x14\xf1\xbd\xfd\xfd\xc3\x53\x14\xfd\x71\x0b\x6c\xd3\x7b\x22\x2b\x46\xb2\x0d\x3e\x38\xbe\x41\xaf\x78\xba\xcb\xc8\x32\xf6\x30\xc9\x91\xc0\x60\x52\xb2\x57\xc7\x02\x1e\x86\x61\xb8\x93\x2a\xa5\x1b\x6b\x33\xa4\xda\xa9\x5c\x39\x05\xc9\xfb\xda\xc3\x31\xa4\x30\x22\x91\x0c\x88\xa9\x62\xe4\xe9\x70\x1b\x92\xcd\x0e\x9b\xba\x04\x00\x49\x18\x4b\x52\x8a\x8f\x80\xa3\x61\xa9\xc7\xb0\x99\xf6\x00\xd6\xdc\x04\x4c\xc6\x25\xc0\xaf\xb1\x72\x03\x62\x08\x9f\x40\x18\xae\x36\xc1\x78\x00\x90\xf7\xe8\x3e\x43\x58\x8a\xd2\x07\xb4\xbb\x4b\x61\xe8\x11\x3e\xd5\x97\xf8\x7e\x07\x3c\xe7\x40\x66\x1d\x97\x63\xf9\xbc\xa1\x42\x38\xdf\x5c\x1c\x6f\xce\x88\x4b\x2e\xf7\xab\x7f\x77\xbe\xe5\x6b\xcb\xe0\x3f\xb7\xaf\xab\x83\xdc\xa2\x1e\x9f\xbc\x3a\xec\xd2\x11\xaa\x6b\xed\x90\x5a\x5b\xc8\x8e\x91\x6c\x1a\x67\x55\xc2\x2a\x45\x5b\xf2\x6a\x67\x15\x5c\xa7\x33\xb8\x6e\xa4\x8c\x2e\x0b\x76\x37\xb2\x44\x35\x31\xb5\x16\x58\xe9\xe8\xe1\x45\x20\x2f\x7c\x74\x9e\xef\x9d\xbf\x3e\x3b\xda\xdd\x98\x53\xe5\x77\x6f\x89\x56\x93\x66\x1f\xfa\x6c\xf8\x83\xd1\xc5\x14\x78\x10\x41\x08\xf4\x0a\x70\x08\x35\xfb\x28\x64\x51\xc4\x15\x35\x9a\x86\x24\x47\x05\x45\x23\x8a\xbb\x31\x7f\xec\x7e\xc4\x48\xd0\xde\x76\xb3\xdd\x5a\x0f\x04\x88\x50\x39\x95\x2f\x08\x9a\x4e\x23\x4a\x44\x04\xc4\xb1\x8e\x73\x03\xdb\x3e\x2b\x70\x0c\x31\x2d\x47\xc2\x7b\x93\x57\xc0\x22\x19\x92\xb0\x64\x35\xd7\x5c\xeb\x43\x7a\xb1\x37\x40\xc0\xe7\x42\xa5\x6c\x30\xea\x4d\xc0\x8d\x49\xda\xab\x99\x14\x3d\x78\x29\xcd\x56\x73\x32\xd7\x00\x68\x7c\x54\x3e\x51\xda\x14\xb9\x86\xb8\x40\x4a\x81\x1d\x44\xb1\x94\x19\x5d\x2c\xd0\x02\x1f\x12\x69\x2d\x67\xd6\x58\x21\x80\x30\x9f\x54\xcc\xaf\x91\x3f\x68\xc4\x40\x08\x60\x28\xf0\xc3\x50\xcd\x4d\x0c\xd2\x58\x50\x2a\x26\xf8\x98\x4f\x58\x9b\xca\x0b\x23\x39\x14\x6d\x10\xd7\x16\x08\xa8\x13\x91\xfb\xe1\x4b\x7c\x44\x73\x96\xb6\xca\xf2\x98\x81\x69\x4c\x22\xb1\x38\x3b\xe9\x74\xe7\xe0\x56\x7a\xab\x33\x37\x16\xe6\xce\xf4\x49\x2e\x0a\x31\x9a\x52\x43\x03\x59\x72\xa4\x79\x78\x6a\x4a\xd8\xa2\x57\xda\x52\x67\x83\xcb\x4a\x57\x97\x48\xbe\x21\x15\xa9\x4d\xa7\x95\x90\x9a\x7b\x16\xbf\xa2\x2a\x5f\xae\x64\x79\x8d\xc8\x9e\x7d\x9f\x63\xd7\x0a\xf0\xad\xd8\x35\x4a\xdc\x8f\x1b\xcc\x72\x0a\xb8\x1a\xd6\x3d\xd9\x58\xce\x47\x51\x0d\x4f\x7b\xcb\x92\xa8\x54\xc4\xb4\xa8\xed\x96\x53\x49\xa1\x35\x95\x14\xda\xb5\x1f\x69\xb3\x59\xef\xd2\x83\xce\xe6\xda\x1f\x3b\x03\xe7\x2a\xdb\x8d\xe3\xb9\xc6\x76\x2d\x6c\xea\xb7\x36\x0a\x76\x8e\x1b\x20\x8b\x67\xe3\x6f\xd4\x2c\x74\x2e\x2f\xbf\xff\x1d\x5c\x1e\xfc\x5f\xdf\x9e\xab\x4d\xcb\xfb\x33\x35\x5a\xbb\xd8\xb3\x89\x5b\x3e\x68\xd7\x23\x06\x62\x24\xc2\x7a\xe7\x39\x02\xb1\xae\x9e\xe7\xba\x77\xcc\x75\x2b\x0c\x6f\x1d\x9e\x67\x25\x98\x3b\x0f\xdc\x3f\x59\x1a\x2e\x18\x90\x1c\x57\x3b\x24\xb3\xf3\xe9\xd9\xf3\xb7\xf8\x39\xe3\x2c\x5b\xec\x54\xe2\xcd\x80\x4b\x01\xcb\x71\xa0\xcc\xee\xe2\x5e\x7b\xae\x18\xa6\xca\xd0\xfa\x1c\xdd\x5f\xae\xa0\x87\x60\xdb\xe8\x7c\xcf\x22\xba\xc0\xe8\xef\xac\xa3\x8b\x17\x7d\xbb\x52\x7a\xa3\x9c\x29\x1a\xa0\x5c\x8b\x94\x8d\xd8\x38\x21\x5c\xac\x76\xcb\x05\xee\x0f\xc8\xc4\x45\x6e\x29\xff\xba\xcb\x4b\xab\x88\xfd\x23\x14\xaa\xc2\x08\x45\xdb\xa0\x54\xbe\x47\x95\x13\xf1\x7b\xae\x4a\x2d\xf5\x7c\x00\x74\x63\x6c\xa0\x92\xf2\xd6\x6d\x36\xe3\x50\x6a\x94\x68\x38\x45\xbd\x36\xdc\x77\xf9\xe4\x95\x0c\x00\x7d\x43\x94\xfa\xb7\x3a\x5f\x22\x77\xf9\xb2\x36\x18\x3b\x69\xaf\x25\x10\x89\xdf\x9b\x9a\xea\x66\x83\xb6\xf7\x4f\x89\xd9\x85\xd3\x34\x79\x34\x6d\xe4\xff\x6a\x4c\x37\x5d\x0a\xeb\x7c\xcf\x98\x5e\x60\xf4\x77\xc6\xf4\xe2\x45\xff\xa7\x98\x6e\xac\xec\xcb\x6f\x29\x2a\xf4\x15\xee\xab\x62\x9a\xa3\xa8\x3b\xfb\x34\xdb\x9a\xc7\xab\xee\xe2\xb7\x26\x3a\xd1\xeb\x1d\xbe\xda\x3f\xd8\x7f\x85\xe1\xe9\xf4\x68\x37\xfc\x29\xbc\x26\x68\x17\x8d\xc2\x34\xcc\xc5\xd7\xdd\x56\xde\x69\xa0\x2c\x64\xc2\x52\x5c\x72\xde\x44\x0c\x98\x8b\x58\x5a\xca\x71\x4b\xe0\x27\x94\x39\xc4\x6e\x97\x55\x89\xf1\x48\xe4\x18\xb0\x6b\x9f\xa3\x61\x6b\xc3\x6d\xff\xdf\xee\xb4\xbe\x2c\xac\x76\x1f\xfd\xf4\xf3\xf6\xd6\xfc\xd2\xce\x4a\xc2\x9d\x65\xc2\x47\x2b\x09\x1f\x79\xc2\x70\xb5\x48\x91\xd3\x43\x44\x01\xab\x13\x21\xca\x23\x3f\x5a\x5f\x21\x15\xe9\x88\x5f\x3b\xad\x8c\x2a\x89\x13\xb5\xc9\x2d\xad\x28\x8d\xfe\x9a\x20\x28\x46\xcb\x56\x8a\x37\xaf\xac\x2d\xbd\x8f\xcd\xec\xb9\x50\x92\x16\xc6\xf1\x2b\x7c\xef\x12\x99\xd2\xcf\x86\xa1\x2f\xcf\x3c\x6c\xf2\x83\x9a\xab\x4b\x99\x42\xa7\x82\xfb\xe5\x8c\xe7\xcc\xcb\x66\x86\xbb\x6d\xa3\xf3\xa8\xca\x85\x1f\x8d\xb8\x95\x16\xb9\xd5\x28\xec\xe8\x14\x2e\xdf\xfc\x7d\x5f\xd5\x19\xe9\xbc\x2e\x30\x10\x73\x60\xf8\x37\x38\xd0\xb4\x53\x2f\x3f\x40\x34\xaf\x49\x09\xcf\xba\x3c\x10\xb7\x25\x17\x83\xfc\xf6\xbf\x9e\x6c\xf3\xbc\x3f\x53\xa7\x85\xeb\x6b\xf8\xb3\x1c\xcd\x03\x90\x6f\x11\xd0\x3b\xf2\x4f\x1d\x56\x71\xeb\x3e\xe6\x5f\x31\x4a\xc4\x3a\x49\xee\x1b\x30\x44\x80\xc4\x0d\x8c\xae\xfb\x03\x9a\xbe\x21\xcd\xb5\x9b\xed\x43\xd2\x94\xcb\xca\x86\x54\x57\x4b\xdb\x90\xa0\xd4\x4e\x76\x01\x82\xba\x50\x49\x74\x69\x31\x3f\xca\x27\x86\x7f\x94\xc9\xb5\xae\x2c\xda\x6d\xa7\xf2\xe9\x4f\x2b\x98\x67\xd0\x6b\x2c\x35\xcf\x2b\xb9\xcc\x2e\xfb\x16\x3f\x47\xd8\x64\x20\xd3\xda\x1b\x6c\x3e\x2b\x8d\xec\xa1\x77\xe3\xee\x38\xd1\x45\xe5\x1f\x54\x57\xbd\x38\x87\x81\x1d\xd4\x8e\x0b\x0b\x43\x58\x73\xe6\xe1\x23\x7e\x93\x05\x44\xe2\xea\xab\xed\xfb\x8d\xfa\xcc\xde\xb1\x66\x4f\xba\xff\x0b\x00\x00\xff\xff\x38\x2b\x54\x27\xca\x1a\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\xdd\x6e\xdb\xcc\x11\xbd\xe7\x53\xcc\xa7\x04\x71\x83\x78\x45\xbb\x40\x5a\xc0\x49\x0c\xa4\x49\x0a\xa4\x45\x63\xc3\x4e\xdb\x0b\x23\x17\x2b\x72\x28\x6d\xb4\xdc\x65\x76\x97\x92\x15\x27\xef\xde\x33\x24\x65\xcb\x7f\x72\x8c\x14\xd0\x05\xc9\x9d\x9d\xdf\x33\x67\x46\x4f\xfe\xc8\x27\xc6\xe5\x13\x1d\x67\xa4\xf8\x3c\xcb\x2e\x2e\xc8\x54\x34\x7e\xe7\x5d\x65\xa6\xe3\x53\x2e\xda\x60\xd2\xea\x58\xa7\x62\x76\xac\x8b\xb9\x9e\x72\xa4\x9f\x3f\x33\xeb\xa7\x53\x0e\xa4\x12\x39\x5f\xb2\x8a\x49\x87\xd4\x36\x63\x68\x19\x19\x87\x37\x6b\x8d\x9b\x52\xe0\x92\x66\x3a\x51\x51\x3a\x2a\x3a\x8d\x6d\xd0\xc9\x78\x47\xf8\x3d\xfd\xd3\xcc\xc7\xe4\x74\xcd\xcf\x47\x59\x01\xa9\xc3\x7c\xa1\x43\x6e\xcd\x24\x5f\xb5\x75\x5e\x58\xc3\x2e\xa9\x82\x43\x1a\x37\x5c\xd3\xeb\xd7\x3b\x1f\x8e\xfe\xbe\x23\x0e\xbe\xc3\xb7\xb7\xf1\x6f\xab\x04\x5f\xd6\x9e\xca\x37\x53\x19\xe8\xe1\x38\x1e\x3c\x3d\xe1\xc6\x47\x93\x7c\x58\x75\xc7\xf4\x83\x4e\x53\x10\xbf\x10\x00\x74\xdd\x6f\x74\xce\xab\x9b\x36\x8f\x83\x59\x40\xf7\x3f\x79\xf5\x48\xcb\xb8\x71\xcb\xf0\x2f\xa6\xef\xed\xc9\x11\xc5\xa1\x02\xd4\x36\xa5\x58\xa0\x33\x38\xd3\x6b\x8b\xff\xf0\xc6\x3d\x50\xaa\xd1\x2e\x8d\x60\xf5\xcb\xad\x84\x57\x3e\x90\x4e\x89\xeb\x26\x11\xb4\x5c\xec\x8f\xc7\x2f\x7f\xbe\xa2\xd2\x67\x44\xc8\x04\x0d\x6e\x90\x5a\x91\xfa\x46\x8f\xb3\xd9\x99\xa4\x67\xcf\x68\x12\x58\xcf\xa1\x70\x4b\xb8\x67\x6b\x27\x9e\x5e\x0c\x4f\x70\xf6\xce\xc0\x07\x8f\x7a\xfc\x54\xda\x58\x2e\x47\xd0\x0d\xb4\x9e\x9d\x6d\xdc\x26\x65\x13\xbd\xa4\x2f\x5f\x5e\x51\x9a\xb1\xa3\x68\x99\x1b\xda\x7f\x45\x6c\x23\x13\x9f\x9b\x24\x2f\x95\xc9\x4a\xef\x78\x6b\x25\x02\xd7\x7e\xf1\x38\x18\x4b\xe6\x0a\xcb\xda\x11\x3c\xcd\x42\x4d\x2a\x54\xb4\x15\xd6\x5b\xe0\x07\xd8\xb1\x2b\x01\x99\xec\x09\x7d\x3e\x7a\x7f\x74\x40\x25\x5b\x4e\x2c\x71\x51\xe5\xad\xf5\x4b\xf1\x6e\x1a\x7c\xdb\x50\x81\x54\x77\x2e\xe9\x2a\x21\x1e\x44\x69\x22\x4d\xf4\x1c\xae\x1b\x97\x3c\xf9\x36\xd0\x7f\xfe\x45\xa6\x96\x12\x65\xdd\x1d\x5d\x96\xa4\x2a\x94\xbc\x98\x73\xc8\x32\x24\xf2\x0f\x28\x43\xb2\x2e\x7d\xea\x8f\x28\xe7\x54\xe4\x15\x52\x33\xe9\x73\x8a\xac\xc7\x55\x44\xba\x8b\x64\x29\x26\xdf\x0c\x3a\x54\x17\x3a\xb2\x97\x4c\x0d\x8d\x0f\x49\x45\x0e\x0b\x53\xf0\x7d\x72\x1b\xe7\xf5\xbc\x8a\xe3\xf3\x2a\x8a\xbb\x79\xc9\x8b\xbc\x34\x71\x9e\xeb\xef\x6d\xe0\x3c\x70\x44\x6c\x05\xab\x06\x95\xdb\x87\x30\x17\x33\x4f\x3b\xdb\xc5\xe8\x56\x8c\x24\xea\x11\x7e\xf3\xad\xf5\x49\x13\xed\xd1\xde\x0e\x1d\x1e\x5e\x85\x2e\x6e\xf8\xd6\xa5\x9b\x37\xf1\x1d\xba\xd1\xea\x0c\x68\x90\x3a\xb9\x75\x7e\x71\xa1\x04\xa4\xfc\x8d\xc6\x27\xde\xb2\x74\x78\x15\xb4\xb4\x08\xae\xf6\x14\x24\x46\x7a\xe9\xbc\xd4\x40\x9d\x1b\x7f\x8d\x50\x76\x49\x3f\x10\x1c\x01\xa8\xaa\x04\x09\x71\x18\x1d\xd0\xe8\x2b\x82\x71\xda\x96\xa3\x5d\x39\x43\x9c\x7a\x62\x59\x59\x9e\xea\x62\xa5\x02\x4f\x4d\x4c\x61\x05\xc1\x14\x5a\xce\x7a\xd2\x11\x3f\x80\xa7\xde\xee\x66\xc6\x91\x90\xdb\x29\xbf\x5b\xe0\x46\x85\xd1\x45\xd9\x90\xbf\xa6\x05\x59\x80\x26\xd6\xd4\xf0\xb1\x03\xda\xf8\x13\x9a\xaa\x23\x83\xc3\xae\x20\x4e\xa4\x9e\x09\xa0\x97\x5d\x6f\x8a\x6a\xc1\xb0\xf4\x1e\x2d\x35\xae\x20\xc1\x1a\x4e\x3a\x4e\x4b\x1f\xe6\xd4\x26\x63\x4d\x32\x68\xff\xa9\xef\x38\x00\x50\x0e\xba\x60\xe9\xc3\xd2\x08\xe0\xc7\x50\x86\xf4\xae\x2f\x87\xd6\x01\xf7\x0c\x7a\x63\x2a\xf1\x88\x2e\x98\x3b\xbf\x74\x84\x8b\xd2\x37\xbd\x25\xee\x32\x81\xb6\x59\x9a\x34\x23\xe1\x8d\x15\x9c\x11\x82\xcb\x96\x33\x30\x4b\x47\x29\x97\x8d\x4d\xaa\x7c\x4e\x6f\xde\xd0\x68\xd4\xd1\x4a\xe9\xaf\x48\xe5\x41\x12\x91\xbc\x48\x84\xb7\x53\x73\xda\x4b\x21\x3b\xdb\xd9\x78\x7b\x82\xaf\xb4\xfc\x0e\xe1\xfe\xb2\x8d\xc7\xf2\xee\x5f\xf6\xee\x23\xde\x27\xa8\xdb\xa7\xa3\xcf\x1f\x0e\xe8\x23\xe8\xbc\x4d\x68\xd2\x5d\x74\xd8\x42\xe8\x4d\x4b\x16\x90\x93\x7a\x60\xd9\x36\x45\x83\xb2\x79\x74\x91\x5b\x98\xe0\x5d\x2d\xa5\x46\x9f\x19\x81\x7d\x84\xae\xc8\x89\x5e\x9c\x67\x7c\xde\x78\x80\xf5\xf4\xed\xe9\xbf\x4f\x3e\xbe\xd9\xd9\x08\xe5\xbf\x40\x13\x87\x21\x92\xfe\x1c\xf1\xec\x74\x17\xd5\xf9\x1a\xc5\x40\x0f\x29\xd5\xa0\xcd\x10\xe6\x14\xdc\xa9\x94\x90\xb8\x5a\xc3\x51\x10\x41\x6a\x41\xf9\x41\x2e\x8f\x07\xdf\xb1\x34\x0d\xd6\xb6\xe7\x6d\xa8\x40\x06\x74\xf2\xda\xbf\x2c\xeb\x47\x9b\x2a\xb4\x42\x9f\xc6\x24\x7d\x81\xe3\xae\x23\x70\x0d\x78\xe6\x85\xee\x6a\x29\x5f\xa0\xa2\x98\x93\x8e\x14\xbd\xd0\x7c\xec\xe0\x7c\x7d\x1c\x01\xec\x56\x9b\x52\x12\x46\x93\x15\xb4\x89\xc8\x60\x5a\x44\x93\x36\x8e\xc3\x6e\x7f\xd3\x7a\x74\x3b\x1e\x4d\xd7\x24\x43\x7b\xdc\x23\x5c\xa3\x9d\xa0\x0e\xae\x44\xaa\x82\xaf\xaf\xc9\x36\xc1\x17\x1c\xa3\x74\xd5\xd2\x00\x40\x71\x66\x1a\xd1\xd7\xfb\x9f\xf5\x6e\x00\x02\x71\xe6\x5b\x5b\x76\x39\xf6\x0e\x2d\xac\xa9\xd4\x2b\x3c\xda\x95\x44\xd3\x74\xce\xb0\x40\x31\x66\x79\x1b\xc1\xa1\xbe\xd0\xb6\x5b\x4f\xf5\x77\x6c\x03\xe5\x10\x2c\x29\x19\x6c\x91\xd1\x56\xd2\x99\x74\xbc\xff\xfe\x41\xf9\xe8\xab\xb4\xd4\xe1\x97\xe5\x0b\xab\x6b\xbd\x58\x4b\x23\x02\x76\x82\xb4\x8e\x9a\x7a\x3e\xbc\x5e\x95\x81\x37\x63\x76\x45\x9b\xad\xab\x75\x9c\x53\x5d\xc6\x72\x4d\xab\xd4\xdb\xb9\xfe\x0a\xb6\xbf\xfa\x52\xd9\x16\xc8\xbe\x7c\xdf\x50\x37\x38\xf0\xff\x52\xd7\x07\xf1\x7b\xda\xb2\x6d\xa3\x2d\xb5\x8e\x4b\xa5\xcb\x5a\xe0\x51\x09\xa5\xfa\x86\x1d\xa0\x51\x61\xf9\x01\xb8\x82\xb7\xaa\xb1\x1a\x4c\xd0\xcd\x25\xa1\x88\x07\x6e\x09\x93\x6d\x0e\x31\x19\x22\x70\xd3\x46\x8f\x69\x81\x56\xbd\x94\x1c\x77\x85\x1d\x2f\xbc\x6d\x6b\xcc\x8c\xd2\x84\x7e\x3b\x82\xcc\x30\x18\x64\xd6\xf7\x73\xbe\x90\x71\x20\x33\x23\xab\xe7\x22\xa8\x6a\xda\xfb\xeb\xcb\x3d\x52\x1b\x5b\x90\x0f\x06\xa5\xce\xef\xd1\x2f\x7e\xf4\xf3\xb7\x5b\x15\x91\x62\x40\x83\xa2\x11\x84\xc3\xbf\x5a\x3b\x70\x01\x31\xe6\xf6\x0a\xbd\x06\x91\x34\xc3\xf2\x35\x9d\xd1\x7a\x84\x6f\x54\x65\x98\xe3\x6b\x2d\x77\xd6\x0d\xfb\xd1\xcd\x63\x78\xe0\x7c\xe2\x03\x8c\x10\x5f\x9b\x42\x5d\xcf\x19\x82\x97\x7f\x77\xd6\xfb\x26\x02\x95\x18\xa8\x70\x2a\x76\x4b\x22\xde\x9b\xdb\x18\xbb\x53\xcb\xa5\xb1\xdf\xff\x83\x18\x8b\x19\x97\x6d\x97\xae\x8d\xe5\x19\x5b\xd4\xc4\xfb\x24\xc4\x51\xf8\xba\xe9\x16\xdd\xbb\xfe\x07\x8c\xb2\x38\x6b\x53\x29\x23\x1d\xe4\xdc\xdf\x79\xf1\x67\xd9\x95\x81\x21\x18\xbe\x89\xf1\xad\xd1\xd0\x8f\x1f\xfd\x8a\x74\xb9\x6a\xff\x2f\x00\x00\xff\xff\xdb\x54\x88\xf6\x11\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
