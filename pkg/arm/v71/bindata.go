// Code generated by go-bindata.
// sources:
// data/master-startup.sh
// data/node-startup.sh
// DO NOT EDIT!

package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x7b\x73\xdb\x36\x12\xff\xfb\xf8\x29\xb6\xb4\xdb\x3c\x1a\x88\x76\xda\x4e\x3a\x6a\x95\x99\xc4\x51\x73\xb9\xa6\xb1\xcf\x4e\xa6\x73\x93\x66\x32\x10\x09\x49\xa8\x48\x82\x05\x40\xd9\xaa\x93\xef\x7e\xbf\x05\xa9\xb7\xfc\xc8\xa4\xfd\xa7\x9d\xc6\xb6\x80\xc5\x62\x9f\xbf\xdd\x85\xf6\xbe\x48\x06\xba\x4c\x06\xd2\x8d\x49\xa8\x8b\x28\xda\xa3\x9f\x8c\x25\xaf\x9c\xd7\xe5\xa8\x4b\xb9\x19\x91\x2c\x33\xca\xac\xa9\x48\xe6\x39\x79\x2b\x87\x43\x9d\x92\x1f\x4b\x4f\xe7\xa6\xce\x33\xb2\xa6\xf6\x8a\xa6\x5a\x62\x51\x51\x21\x9d\x57\x96\xfa\x2f\x9f\x82\xd7\x69\xff\xec\xf8\xcd\xe9\x51\xff\xf9\xe9\xf1\x9b\x93\x5e\x3c\x33\xb5\x15\x56\x39\xfc\x4a\x95\x18\xe1\x60\x15\x83\xea\xf8\xec\xfd\x4f\xff\x7d\xf6\xaa\x17\x9b\x4a\x95\x6e\xac\x87\xbe\xb3\xbf\x76\xb2\x63\x9c\xcc\xd4\xb4\x93\xe6\xa6\xce\x70\x02\x67\x74\xe5\xe5\x20\x57\x8e\xc4\x0b\x7a\xf1\xea\xe4\xcd\x6b\x12\x8e\xf6\xef\x66\x7a\x44\x5f\xbb\xb1\xb1\x9e\xe2\xfd\x96\x6f\x4c\x1f\xc8\x4b\x9d\x93\x38\xbc\x47\xe2\x77\x7a\x79\xfc\x9c\x84\x80\x66\xa2\xb2\x6a\xa8\x2f\x28\xfe\xf9\xcd\xd3\x3e\x31\x29\x3d\x3b\x3d\x3e\xe9\xc6\x9f\xc7\x9f\x79\x44\xd1\xe5\x25\xe9\x21\x75\x8e\x4c\x39\xd4\xa3\xce\x99\x4a\x6b\xab\xfd\xec\x44\xfa\x74\x7c\x22\xd3\x89\x1c\x81\xf7\xc7\x8f\x11\xc4\x18\xc1\x5c\xc2\xb7\x86\x13\xce\x4b\xeb\xeb\xaa\x03\x87\xc4\xba\xc4\xa7\x3c\x87\x27\xc8\xaa\x8c\xd8\xe4\x69\x56\x52\x1a\x78\xd6\x56\x7a\x6d\x4a\xc2\xff\xfb\x77\xc7\xc6\xf9\x52\x16\xea\x5e\x1c\xa5\xa0\x7a\x9c\x4c\xa5\x4d\x72\x3d\x48\x66\x75\x91\xa4\xb9\x56\xa5\x17\xa9\xb2\xbe\x53\xa9\x82\x7e\xfc\xf1\x4e\xff\xf8\xa7\x3b\x2c\xe2\x11\xd6\x9e\xb8\xa7\x33\x38\x7c\x21\x2b\xaf\x69\xf8\x58\x62\xb1\xd3\xca\x7a\xaa\x2a\xe3\xb4\x37\x76\x16\xb6\xa1\xf1\x99\xb7\x2c\x17\x54\x00\xaf\xab\x2f\x9d\xa8\xd9\xe6\x9d\x27\x56\x4f\xc1\xfb\x67\x35\xfb\xc4\x9b\x71\x62\xeb\xe2\x3d\x7a\x7d\xfc\xec\xb8\x4b\x99\xca\x15\xa2\x90\x23\x70\x68\xf2\xdc\x9c\x33\x8d\x53\x69\x30\x91\x1c\x72\x48\x72\xf8\xa6\x79\xcd\x56\x76\x24\xad\x22\x5b\x97\x74\xae\xfd\x98\x24\x4d\x0b\xd2\x05\x6e\x6b\x3e\x4f\x74\x3a\x09\x7e\xe8\x58\xdc\x4e\x03\x39\x81\xf5\x75\xd9\x68\x49\x89\xf2\x29\xab\x18\x36\x5d\x27\x4b\x36\xc8\xe7\xaa\xbe\xb5\x63\x95\x8b\x47\xc2\x29\x3b\x85\x63\x6d\x55\xb8\x77\x11\x3b\xa9\x77\x0a\x76\xff\x06\xaf\x7e\x09\x59\x2a\xab\x9d\xa2\x97\xba\xac\x2f\xe8\x11\x9d\x05\x62\xba\x7b\x7a\xf2\x8b\xbb\x17\x21\x2f\x55\x6d\xf3\xde\xd8\xfb\xca\x75\x93\x04\xde\xc7\x1d\x19\x02\xa1\x93\x1a\xd8\xd8\x80\x41\xe9\x93\x4c\x3b\x9f\xf0\x6d\x49\x73\x57\xf2\x28\x79\xd4\x30\x4a\xf6\x99\x85\xb4\xe9\x38\x31\x2e\x1a\x55\x23\xf8\xa3\x37\xd4\xb9\x02\xb3\xa0\x47\x35\xd1\x09\x24\x13\xd8\x4a\x70\xa7\x78\x7e\xf2\x5c\xfc\xdc\xff\x9f\x68\x6e\xc1\xaf\x5c\x81\x41\xe4\x5c\x9e\x4a\x0e\xa0\x5e\x38\x65\xc7\x0e\xb7\xcb\xa4\xa5\xaa\x55\xc5\x4e\x0e\x54\xc1\xed\x0d\xe5\x35\x31\xb8\x24\x65\x81\xae\x09\x9c\x48\x95\x9c\x87\x59\x6f\xa6\x5c\xb4\x69\x52\x75\x01\x38\x72\x9f\x66\x59\x41\xfd\x70\xea\xef\x30\x71\x23\xcf\x3f\xd1\xd2\xc6\x29\xf1\x4d\xe7\xf0\x70\x97\xad\x8f\x81\xda\x67\x8c\xda\x84\x34\x06\x10\x96\xb0\xf2\x49\x2e\xfd\xd0\xd8\x82\xf8\xd0\xdf\x13\xcd\x2a\x61\xde\xff\x0c\x63\xcb\x3f\x6b\xab\x52\x63\x55\x6b\xda\xc5\xe7\x2d\x9b\x55\x6d\xed\xe8\x14\x3a\xb5\xc6\x99\x61\x63\x3b\xdc\x10\xd0\x28\x59\x9e\x5c\xbd\x01\x66\x48\xc7\x2a\x9d\xf4\x4a\x13\x50\xf3\xd6\x65\xe7\xc9\xe9\x31\xa3\x68\xa8\x5d\x54\x57\x19\x23\x33\xbd\x05\x88\x37\x28\xec\xfe\x63\x74\x79\x43\x91\x8b\x1f\x50\x0c\xb4\x7e\xb7\x55\xa8\x10\x1f\x24\xbd\x57\x45\xe5\x01\xae\x74\x79\xd8\xe9\x7c\xf7\xf1\x07\xca\x4c\x44\x04\x7d\xa8\x15\x83\xc4\x8c\xc4\x1f\xf4\x69\x77\x86\x2b\xe9\xab\xaf\x68\x60\x95\x9c\x80\xe1\xb5\x0a\xbf\x9d\x8b\xb1\x7f\xd9\xfe\x05\x71\x77\xaa\xde\xca\xd4\x54\xde\x21\x8a\xbe\x42\x3f\x42\x5c\xe9\xdf\xbe\x5d\x39\x4d\x22\xf7\xf4\x1d\xbd\x7b\xf7\x03\x57\xa4\x92\x5c\xae\x54\x45\x87\x3f\x90\xca\x81\x48\xea\x42\x7b\xfe\x30\xd4\x51\x66\x4a\x75\x83\x37\xac\x2a\xcc\xf4\xd3\x5a\x00\xb6\x5e\x8a\x08\x2f\xb9\xe6\x45\xc8\x42\x61\x87\x74\x6d\x4b\x70\x5d\xa8\x5e\x5e\xaa\x32\x43\xb9\x8d\xa0\xe5\x17\x34\x42\x9c\x2d\xc9\x33\x93\x4e\x20\x79\xc8\x9e\x21\xa4\x1e\x34\x0a\xc3\x24\x6e\x06\x4d\x8a\xd4\xe7\xe4\x3c\x7a\xc7\x86\x50\x04\xa9\xa0\x98\xd7\x85\xb2\x37\x52\x71\xfe\xeb\x54\x5d\x45\xb7\xb2\x5f\x4c\x86\xae\x73\x31\x44\xbb\x06\x45\xd1\x2a\x32\x88\x4c\x9a\x64\x48\x16\x0d\x67\x05\xa3\x1e\x82\x58\xa5\x63\x43\x77\xae\x27\xa3\x2d\x1d\x89\xd9\x43\xfd\xea\x8f\xda\x78\x49\x74\x40\x07\x77\xe8\xf1\xe3\xa5\xea\x2c\x86\xa9\x4b\xbf\x79\x12\xeb\xe0\x8d\x0e\x06\x79\x59\x92\x38\xdd\xb1\xdf\xb4\x4f\xcc\xa9\x59\x4a\x32\x09\xaf\x97\x9d\xdf\x1d\x4e\x2c\x5a\x27\x10\xc6\xdc\xb6\x66\x68\xa0\x94\x8d\xbb\x14\xff\x0e\x89\x4b\x99\x67\xf1\x03\xde\x83\x32\x9c\xf2\x22\x57\x23\x99\xce\x00\x72\x23\x20\xa9\x9d\x81\xd0\xdb\x5a\x45\x4d\xc3\xb4\x6e\x4b\xa8\xba\x6d\xcc\xdd\x04\x1b\xbe\x43\xf0\x46\xad\x65\xaa\x1a\x59\x8a\xfc\x9c\xe7\xe4\x8b\x22\x20\xd4\x2b\x93\xa9\x90\x85\x8f\x83\xa9\x4b\xa6\xfa\x6a\x67\x14\x41\xf1\x6c\x57\x0c\x2d\xbc\xba\xe9\x2b\x97\x3a\x7d\x98\xe4\x75\x79\x40\x1f\x3e\x34\xda\x5d\xe5\xd6\x15\xd2\x8d\x0b\x1b\x87\x66\x6a\x28\xeb\xdc\xbb\x5b\x39\x94\xcf\x5d\xed\xce\xb0\xcb\x76\x61\x64\xcb\x5c\x40\x35\x9f\x56\x0f\xbe\xff\xf6\xdb\x6f\x03\xae\xfd\xab\xb2\xc6\x9b\xde\xfe\x25\x36\xbf\xfc\xf2\xc1\xfd\x8f\x58\xc1\x28\xd1\x2c\xec\xed\xdd\x7f\x80\x85\xe5\xe0\xf1\x24\x0c\x46\x2f\x4e\xfb\xbf\x3e\x79\xf9\xf2\x3d\xfe\x1d\xff\x4a\xa2\xa2\xfd\xc0\x84\x44\xc1\xde\x41\xcb\x2b\x44\xf3\xfb\x55\xff\x57\x5e\x9c\x6f\x8b\x8c\x59\xe3\x23\xff\xc4\x54\xf2\xe4\xe8\xa8\x7f\x82\x29\xe6\xbc\xc5\x9c\xf9\x3d\xc2\xc9\xa9\x6a\x83\x0f\x8e\x6f\x80\x25\x99\xef\xf2\x40\x78\x1e\x10\x8c\x23\x81\x51\xa8\x64\xaf\x9e\x4b\x78\x18\x86\xe1\xd1\xb0\x54\xfe\xdc\xd8\x09\xd5\x5e\xe7\xda\x6b\x48\x3e\x32\x01\x29\x21\x85\x45\x71\x65\xac\xca\x34\xe3\x54\x87\xe7\xaa\xe1\xe2\x30\xda\x6f\x47\x03\x05\x63\x29\xca\xf0\xa7\x76\x34\x29\xcd\x39\x6c\x66\x42\x1f\xdf\xdc\x04\xb8\xc4\x25\x75\xd5\x74\xe6\x8c\xae\x33\x08\xc3\x85\x20\x3a\x1f\x03\x7f\x03\xf0\x2e\xc0\x8f\x44\x76\x8f\x7a\x3d\x8a\xe3\x00\xbe\x99\x59\x42\x6f\xa3\x76\x73\xe6\x0b\xba\x3e\x74\xcf\x1a\xfc\x45\xf4\xb6\xf5\xa8\xe5\xd2\xd8\xce\x29\x4f\x5f\x5f\x44\xea\x22\xd8\xf6\xec\xc9\xd9\x9b\xd3\x17\xbd\x3b\x2b\x5c\x7e\x09\x28\xde\x32\x69\xf6\xc1\xea\x4e\x38\x28\x2e\xe6\x69\xc3\xe3\x87\xc0\x0c\xaa\xa7\x10\x69\x04\x70\x17\x82\xa1\x5a\xcc\x0d\xca\x3a\x91\x98\x52\xd2\x4d\xf8\xcf\xee\x9f\x98\xd0\xdb\xdb\xae\x15\x99\xda\xea\x11\xc1\xbe\x6a\x2e\x5f\x14\x35\x25\x4c\xa4\x52\x20\x5f\x9c\x67\xcf\x9e\x20\x40\x27\xf5\x40\x35\x4e\x77\x6c\xf8\x1a\xf5\x29\x37\xa9\xcc\x49\x56\xba\xed\xfe\x20\x37\x84\xd3\xa8\x22\x8a\x62\xb7\x77\x97\xee\x37\xeb\x5d\xba\xd7\xb9\xbf\xf7\xdb\xe1\xbc\x37\x59\xa9\x41\x7b\x71\x93\xcf\xc6\xea\x91\x2e\x93\xa6\xac\x25\x8b\xf9\x5e\x34\x0b\x9d\xe5\xe5\x9f\x7f\x07\x87\x4b\xf8\xf1\xd7\x73\x75\x68\x54\x3f\x9b\xa9\x35\xc6\x27\x81\x4d\xd2\xf2\x41\x65\x15\x9c\x10\xa5\xa2\xfd\xce\x53\xf4\x2e\x75\xf5\x34\x37\x83\x57\x1c\xc7\x71\x7c\xe3\xeb\xc0\x22\x25\x19\x89\x70\xff\x6c\xab\x0f\x80\x8b\x71\x0a\x71\x4b\x23\x04\x02\xe7\xd4\x20\xdc\x12\x5a\x82\xd3\xe1\x3a\x72\x25\xf7\x23\x6e\x5e\x58\x8e\x67\xda\xf6\xd6\xf7\xda\x73\xc5\x24\xd3\x96\xf6\x57\xe8\x6e\x68\x5e\x32\xe4\x73\x6e\x64\xc6\x62\x36\x3c\xe2\x5b\xa6\x60\x1f\xd7\x36\x36\xb9\x22\x0b\xd7\xb2\x68\x3b\x71\x7e\x03\x3d\x27\xcf\x56\x14\x76\xb7\x97\x76\x11\x87\xb7\x26\x60\xe9\x54\x67\x88\xdc\x6e\xf2\x1e\xd9\x23\x93\xf7\xa6\x5e\xb0\x5e\x35\x43\x37\xc1\x06\x32\x94\xb7\x6e\xd0\x85\xd8\xa0\x8d\x2d\x1a\x4e\x62\xd0\x3a\xbd\xc7\x27\x37\xe2\x00\xf4\x0d\x51\x16\x9e\xe4\x42\xbf\xd7\xe3\xcb\x5a\x97\x74\xb2\x41\x4b\x20\xc3\x5b\x47\x6f\x6e\xf1\xeb\xfd\xd2\xde\x3f\x27\xe6\x2e\x76\x1e\x2c\x0f\xe7\xe5\xed\xa6\xb6\x94\x89\xc2\x2b\x4b\x29\x2b\x37\x36\xfe\xb6\x9e\x6d\xd0\x91\x6d\xf2\xf9\x9e\x65\x5b\x76\x17\x7f\x2d\xb6\x56\x63\xb7\xbb\xfe\xa9\xf1\x11\x90\xb4\xff\xfa\xe8\xd9\xd1\x6b\x14\xd6\x93\x17\xbd\xf8\x9b\xf8\x0a\xd7\xad\x09\x1b\x68\x98\x4b\xe8\x8d\x5a\xb5\xe7\xe6\x5a\x8b\x87\x2d\xef\x70\xf4\x08\x4e\x9e\xf5\xbc\x2a\xd5\x79\x4b\x10\xaa\xd7\x4a\xf6\xb6\xcb\xba\x44\xe9\x94\xb9\x68\x1f\xae\x28\x6e\x5d\x71\x10\xfe\x5b\x8c\x85\x6b\xab\xdd\x87\xdf\x7c\x7f\xf0\x60\x75\xe9\x70\x27\xe1\xe1\x36\xe1\xc3\x9d\x84\x0f\x03\x61\xbc\x5b\x24\xe1\xcd\x04\x0d\x02\xab\x23\x50\xcb\x45\x68\xbb\x36\x48\x65\x36\xe5\xa7\x3d\x87\xe6\x5a\xe1\x04\x06\x5a\x47\x3b\x60\x32\x5c\x13\x45\xc5\x74\xdb\x4a\xc9\xfd\x8d\xb5\xad\xb1\x66\x61\xcf\x35\x78\x5a\x6b\xd5\x36\xf8\xde\x26\xc0\x55\xe8\x1b\xe2\x00\xd5\xdc\x88\xf0\x1c\xe4\xeb\x52\x65\xd0\xa9\x20\xe0\x03\xbf\x3a\xd0\xb2\xb0\xf1\x23\x86\x35\xb9\xa8\x72\xc9\xed\xc6\x1e\x37\x30\x32\x77\x06\x20\x8f\xaa\xb1\x7c\xe0\x0e\x35\xb6\x33\x35\x79\x5d\xa0\x59\xe2\xc0\x48\x31\xa9\x7a\xd0\xb4\x1d\x11\x37\xa7\xcd\xa4\x91\x72\x1f\xc4\xcd\x52\x0b\xbf\x68\xf2\x0e\x1e\x7d\x77\xc0\xbd\xe0\x42\x9d\x16\xb4\xae\xe0\xcf\x72\x34\xc3\x41\x28\x17\x68\xf3\xf8\x5d\xdf\xe9\x32\x0d\x0d\x56\x21\x4b\x7e\xfa\x54\x5c\x43\xfc\x98\x49\xfc\xd8\x9a\x7a\x34\xa6\xf9\x7c\x11\x2d\x47\x82\x76\xc8\x98\x73\x59\x8c\x0d\x1b\x13\xda\xe6\x36\xa3\x8b\xf2\xa1\x5c\x01\x77\xd0\xff\xa9\xa9\x0c\x43\x79\x40\x10\x0f\x6f\xad\x70\xa8\x4b\xf8\x63\x42\x45\xe6\xb2\x39\x03\x92\x7f\x62\x18\xdf\xf8\x88\x11\x69\xb9\x32\xcc\x6b\x74\x95\xd9\x0e\x81\x9a\x97\x90\xbf\x8c\x5d\x33\x14\x7d\x1e\x37\xb6\x47\x69\xbc\xea\x92\xf4\xa6\xd0\xa9\x58\x46\x50\x68\x7b\x53\xcb\xdf\xc8\xe4\xc6\x54\x0e\xd6\x40\x67\x3d\xff\x5e\x05\x4d\x32\xea\xf0\x96\x6e\x3b\xb9\x5c\x29\xfb\xb5\xd4\x98\xd1\x6e\xf9\xdd\x05\x87\xb4\xe3\xef\x73\xe6\x8d\x08\xd0\x5a\x0d\xd0\xe6\x20\x86\xfc\xda\xd8\x87\x21\xed\xf2\xa6\x47\x98\xe6\x28\xb3\x59\x45\x41\xb4\xa4\xa9\x29\xaa\xf0\xb8\xbf\xeb\x45\x86\x5f\x5f\xdc\xb8\xf6\x5c\xc9\x16\xf7\xc3\xb4\xe7\x18\x77\x17\x0f\x17\xff\x0f\x00\x00\xff\xff\x05\xf1\x6c\x4a\xe6\x1a\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xef\x6f\x1b\xc7\x11\xfd\x7e\x7f\xc5\x98\x31\xac\x18\xcd\xde\x59\x28\x0c\x01\x72\x68\xc0\x4d\xdd\x34\x4d\x5b\x09\x52\x8b\xa2\x10\xfc\x61\x79\x37\xc7\xdb\xf0\x6e\xf7\xbc\xbb\x47\x89\xa6\xfd\xbf\xf7\xcd\x1e\x29\x31\x94\x4c\x47\x68\xf2\x25\x80\x01\x93\xbc\xd9\xf9\xf1\x76\xde\x9b\x39\x7d\xf5\xa4\x98\x19\x5b\xcc\x74\x68\x48\xf1\x4d\x96\xad\xd7\x64\x6a\xca\xbf\x73\xb6\x36\xf3\xfc\x92\xcb\xc1\x9b\xb8\x3a\xd7\xb1\x6c\xce\x75\xb9\xd0\x73\x0e\xf4\xe9\x53\xd6\xba\xf9\x9c\x3d\xa9\x48\xd6\x55\xac\x42\xd4\x3e\x0e\x7d\x0e\x2f\x13\x63\xf1\xad\x6d\x8d\x9d\x93\xe7\x8a\x1a\x1d\xa9\xac\x2c\x95\xc9\xe3\xe0\x75\x34\xce\x12\xfe\x3d\xfd\xba\x71\x21\x5a\xdd\xf1\xf3\x49\x56\xc2\xea\x75\xb1\xd4\xbe\x68\xcd\xac\x58\x0d\x5d\x51\xb6\x86\x6d\x54\x25\xfb\x98\xf7\xdc\xd1\xb7\xdf\x1e\xbd\x3d\xfb\xcb\x91\x24\xf8\x1d\x7e\x7b\x13\xfe\xb4\x8a\xc8\x65\x9b\xa9\xfc\x66\x6a\x03\x3f\x1c\xf2\x4d\xa6\x17\xdc\xbb\x60\xa2\xf3\xab\xf4\x98\x3e\xd2\x65\xf4\x92\x17\x0a\x80\xaf\xcf\x07\x5d\xf0\x6a\x3f\xe6\xb9\x37\x4b\xf8\xfe\x91\x57\x8f\x8c\x8c\x13\xf7\x02\x7f\x45\xff\x3a\xfb\xf3\xd9\x29\x55\xdc\x72\x64\x8a\x0d\x53\xed\xda\xd6\x5d\x8b\x4d\xe0\x32\x41\xa4\xeb\x08\x84\x81\x24\x95\xed\x10\xf0\x39\x90\xf6\x4c\x7e\xb0\x74\x6d\x62\x43\x9a\x96\x1d\x99\x0e\xd1\xc6\xef\x0b\x53\x2e\xd2\x3d\xe4\x1e\xd1\x69\xa6\x17\x40\xdf\xd8\xb1\x4a\x2a\x38\x96\x52\x62\x7a\x18\xf2\xaa\xd8\x33\xdf\x96\x7a\xe5\x1b\x6e\xd5\x89\x0a\xec\x97\xec\x95\xef\xbb\xf0\x2e\x93\x4b\x9a\x5e\xc0\xdd\x5f\xe1\xeb\xad\x45\x2e\xbd\x37\x81\xe9\xef\xc6\x0e\x37\x74\x42\x97\xc9\x98\xbe\xbe\x38\xff\x47\x78\x9e\xa1\x99\x78\xf0\xed\xb4\x89\xb1\x0f\xa7\x45\x81\xdb\x47\x8c\x0a\x8d\x90\x97\x0e\x18\x3b\x38\xb0\xb1\xa8\x4c\x88\x85\x44\x2b\xc6\x58\xc5\x49\x71\x32\x3a\x2a\x9e\x8a\x0b\xed\xcb\xa6\x70\x21\x9b\xf7\x73\xdc\xc7\xb4\x36\x2d\xc3\x59\xaa\xa3\x5f\x98\x02\x99\x29\x3c\x2a\x10\x53\x7d\x7f\xfe\xbd\xfa\xf1\xed\x7f\xd5\x18\x05\xff\xb5\x0c\x07\x59\x08\x6d\xa9\xa5\x81\xa6\xe9\x94\x6f\x02\xa2\xeb\x62\x63\x35\x70\x2f\x97\x9c\xac\xd2\xb5\x8f\x96\x07\x7a\xf0\xce\x54\x12\x3a\xd0\x38\x19\x5b\x3d\x6b\xb9\x9a\xae\x38\x64\xfb\x90\xf2\x4d\xf4\x3a\x3c\x0e\x59\x45\x6f\xd3\xa9\xdf\x02\xe2\x31\x9f\xdf\x23\xd2\x2e\xb0\xfa\x63\x7e\x7c\xfc\x10\xd6\x67\x3d\xdb\xcb\xc6\xd4\x91\x40\xe3\xa8\x8d\x05\xca\xe7\xad\x8e\xb5\xf3\x1d\xc9\xa1\xdf\xa6\x9b\xb9\x10\xdf\xbf\x0f\xb0\xf5\x87\xc1\x73\xe9\x3c\x6f\xa0\xbd\xfd\x7e\x0f\xb3\x7e\x33\x39\xf2\xce\x94\xde\x05\x57\x8f\xd8\x21\x42\x52\xa3\xe2\xee\xe4\x6e\x04\xc0\x50\x36\x5c\x2e\xa6\xd6\x25\xd5\xfc\x85\x43\xe7\xcd\xc5\x99\x68\x68\x9a\x5b\x34\xf4\x95\xe8\x32\x5d\x41\xc2\x47\x0d\x0e\x7f\x73\xc6\x7e\x61\xc0\x4d\xbe\xa1\x09\xb4\xfa\xdd\xbd\x31\x85\xee\x20\x1d\x23\x77\x7d\x84\xb4\xd2\xfa\x38\xcf\x5f\x7e\x7a\x45\x95\xcb\x88\x50\x0d\x6d\xd2\x20\xb5\x22\xf5\x9e\x1e\x17\x33\x85\xa4\x67\xcf\x68\xe6\x59\x2f\xe0\xf0\x40\xb9\x57\xdb\x24\x9e\xae\x37\x9f\x90\xec\x83\x85\x6f\x32\x1a\xa7\x6e\xad\xd1\x6d\xd5\x04\xbe\x31\xe3\xaf\xae\x76\x4e\x93\x6a\x23\xbd\xa4\x77\xef\x5e\xc9\x34\xb2\x14\x5a\xe6\x9e\x8e\x5f\x11\xb7\x50\x23\xbe\x31\x51\xbe\xd4\x26\xab\x9c\xe5\x83\x37\xe1\xb9\x73\xcb\xc7\x0d\x7f\x41\xae\x44\x6f\x5b\x99\x76\x19\xf8\xa7\x7c\x4d\x07\x97\x81\x43\x4d\xba\x5e\xb3\xad\x30\x68\x33\xd4\xf8\x84\xe6\xe8\xb0\x3b\xf3\xca\x95\x0b\xe4\x9d\x78\x53\x23\xeb\xd9\x58\x2e\x00\x09\x2b\x8c\xd8\xae\x8c\x2d\x85\xe8\x7a\x1a\x0d\x55\xca\x0a\x85\x45\xd3\xb1\xff\xa2\x95\x30\xdf\x94\xfc\x39\xbb\x9d\xe7\xdd\xa2\x0e\xf9\x4d\x1d\x48\xa1\xd0\x8a\x97\x22\x1f\x8b\x91\x06\xe0\x71\x70\x83\x2f\x59\xf5\x00\xf5\x18\xc6\x5c\x36\x8e\x8e\x0e\x9b\xd1\xbd\x1a\x49\xdc\xa3\xfc\xfe\xfd\xe0\xa2\x26\x7a\x41\x2f\x8e\xe8\xf5\xeb\xbb\xd2\x25\x0d\x37\xd8\xb8\x7f\x12\xbf\xc3\x37\x76\x17\x30\xd2\x92\xba\xb8\xf7\x7c\xbd\x56\xd2\x3f\xfc\x9e\xf2\x0b\xd7\xb2\x90\xaf\xf6\x5a\xba\x17\x47\xc7\x9d\x4a\x82\x8c\xd6\x45\xa5\xd1\x10\x36\xff\x29\xc0\xd9\xed\x3e\x05\xc3\x09\x7a\x48\x55\xd8\xaa\xd8\x4f\x4e\x69\xf2\x13\x8a\xb1\xba\xad\x26\xdf\xc8\x33\xd4\x29\x3a\xa0\x5a\x9e\xeb\x72\x05\xe5\x9b\x43\x5e\xfd\x0a\x86\xd1\x0f\x9c\x8d\x5b\x94\xe4\x81\xab\x1e\xe3\xee\x22\x0e\x40\xee\x43\xfe\xb0\xc1\xde\x0d\xa3\xc1\xb3\x0d\x7e\xfd\x00\x1e\x83\xc1\x5b\xd6\xfe\xd0\x25\x05\xfb\x27\xfa\x3d\xf1\xf4\x75\xba\x10\x2b\x56\xcf\x32\x6c\x74\xd7\x89\x36\xe2\x5a\x9a\x5f\x68\x41\xd7\x1a\x47\x00\xb0\x46\x92\x96\xe3\xb5\xf3\x0b\x1a\xa2\x69\x4d\x34\x60\xe6\xdc\x25\x7a\x46\x47\x1e\x6a\x2e\x14\xa9\x8c\xd0\x23\x87\x33\xc0\xbb\x3d\x8c\x7d\x2f\xd0\x8c\xa1\x3c\x4c\x15\x3e\x9a\x40\x0b\xeb\xae\x2d\xe1\xa0\x2c\x8e\x63\x24\x4e\x48\x0c\xfd\xb8\x0a\x0a\xa5\x57\x48\x46\xb4\x27\xbb\x6e\x40\xfa\xc4\xf6\x5b\xce\x91\xaa\x9e\xd3\x74\x4a\x93\x49\x62\x7c\xe5\xee\xf8\x3e\xf2\x7b\x3c\xf3\x84\x0e\x63\x71\x39\xd2\x1e\x70\x6c\x24\x70\xe3\x65\x14\x89\xc0\x91\xfe\x70\x93\xf1\x4d\xef\x00\xf7\xe5\x9b\xcb\x7f\x5f\xfc\x30\x3d\xda\xf1\xf2\x1f\xe0\xc1\x7e\xe3\x64\x7c\x0e\x57\x47\xe9\xa0\xba\xd9\xde\x83\xec\xbb\x4a\x61\x2b\x5a\x22\xa5\x39\x34\x45\x29\x51\x08\xb5\x05\x54\x6a\x22\xb5\xa4\xe2\xb4\x90\x8f\xa7\x1f\xf0\x1e\xb3\x89\x76\x30\x65\xda\x88\x56\x06\x7c\x79\x9b\x5f\x96\x8d\xba\xa9\x4a\xad\xd0\x69\x21\x66\x87\xba\x3d\x0e\x96\x2b\xa5\xab\x8e\x7a\xef\x64\x90\x93\xc3\x56\x11\x64\xab\x50\xb2\x17\x78\xd7\xaa\xbe\xd5\xc0\x22\xb5\xaa\x28\xe9\x17\x4e\xc9\x65\xee\xf6\xb5\xf4\x15\x43\x15\x83\x43\x03\xa1\xf6\x5b\xcb\xbc\x75\xa5\x6e\xf3\xa5\x6b\x87\x0e\x6d\x54\x19\x4f\x25\xc6\x46\x84\xcd\xa6\x57\x84\xfe\x23\xf5\x4b\xe9\x10\x69\xa3\xac\x5b\x88\xa1\xea\xe8\xc5\xc9\xcb\x17\xa4\x76\x84\xd1\x79\x33\xc7\x7b\xe0\x67\xfc\x4b\x1e\x23\x25\x93\xb0\x83\x4a\x20\x2f\x05\x63\xcb\xd4\x7a\x9d\xb6\xf2\x16\xc2\xa0\xf2\x2a\x36\x62\x12\x1b\xef\x86\x79\x43\x5b\x56\x67\x77\xec\xdb\x50\x7b\xeb\xe5\x96\xa1\x7b\x92\xb9\xff\x18\x19\xe0\x9a\x12\xb7\x70\x7d\x60\x06\x2f\x75\x9a\x90\xe9\x95\x29\x62\x8a\xee\x78\x18\x6c\xa7\xc3\x82\xba\x2a\x54\x5b\x07\xa4\x3f\x60\x36\xee\x7d\x85\x30\xdd\xfd\x52\xb7\x03\xf8\x56\x3d\x90\xd0\xb8\x94\xfc\x6a\xee\x46\xfd\xf9\xff\xbc\x01\x0e\xeb\x22\x9f\x62\x1b\x71\x58\xaa\xd4\xcf\x5b\x08\xbd\x20\x2f\xf4\xad\x73\x7d\x00\x18\x90\x1c\xdc\x91\xbc\x42\x8a\x7a\xa0\xe5\xef\x95\xf6\xa0\x97\xcf\xa6\x7e\xd0\x1a\x6a\xf8\x0b\xff\x86\x20\x1d\x8d\xf7\x20\xbe\x15\x4d\x30\x9b\x67\xce\x49\x0b\xc5\x9f\x09\xec\xc7\x8f\xb4\x3e\xbc\x10\x8d\x07\xc5\xc9\xce\x66\x21\x12\x89\x3d\xb3\x4f\x2f\xd9\x0f\x6d\x47\xb2\x09\x85\x66\x88\x95\xe8\xe9\x36\x3a\x9c\x5f\x63\xc2\xdc\xae\x11\xff\x0b\x00\x00\xff\xff\x14\x88\xe8\x2d\x23\x11\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
