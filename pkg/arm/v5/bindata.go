// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5f\x53\x14\xbf\x12\x7d\x36\x9f\xa2\x9d\xe5\x27\xc2\x25\x3b\x80\x3e\x58\xab\x6b\x15\x22\x56\x51\xc5\x15\x0b\xbc\xe5\x83\x5a\x54\x76\xd2\x33\x1b\x77\x26\x99\x9b\x74\x76\x41\x9c\xef\x7e\x2b\x99\x59\xd8\x7f\x70\xa9\xd2\x87\x75\x48\x4e\xba\x3b\xe7\x9c\x24\xdd\x7b\x9e\x8e\x94\x4e\x47\xc2\x8d\x81\xe3\x35\x63\x2a\x87\xe7\x50\x58\xac\x21\x9d\x0a\x9b\x96\x6a\x94\x4a\x93\x4d\xd0\x42\x8a\x94\xa5\xb9\x23\x31\x7a\x0b\x34\x46\xcd\x00\xdc\x8d\x23\xac\x32\x2a\xc1\x91\xa9\xa1\x05\xf6\x1d\xda\xa9\xca\x90\x01\x54\x93\xdc\xf5\xaf\x73\x07\x3c\x87\x54\xe2\x34\x95\xca\x4d\x52\xf1\xdb\x5b\x4c\x2d\x3a\xe3\x6d\x86\xbc\x16\x96\x0e\x18\x00\x66\x63\x03\xdb\x8f\xc3\x60\xad\x2a\x08\xe1\xa1\xb0\xf5\x7f\xbd\x21\x01\xb0\x0f\xfb\xdb\xf0\xfe\xfd\x7d\xb1\xa1\x0c\xe3\x35\xad\xae\x64\x00\x16\x1d\x19\x8b\x99\xd1\xc0\x2f\x36\xcc\x67\x82\xa0\x8d\xd4\x0e\xa5\x52\x60\x65\x74\xff\x97\x33\x1a\xde\xbd\xdb\x3e\x39\xff\xb4\xcd\x6e\x19\x40\x52\x9a\x82\x4b\xab\xa6\x68\x93\x01\x24\xbf\x8c\xb7\x5a\x94\x32\x61\x0d\x3b\x39\xff\xb4\x42\x94\xb0\xb4\xca\x54\xae\x18\xeb\xf6\x53\xfb\xb2\x84\xdb\x5b\xe8\x1f\x1b\x9d\xab\xa2\x7f\x5a\x89\x02\x5d\xff\xb3\x91\x08\x4d\x03\x2f\xde\x47\x82\x74\x40\xbd\xd8\xa8\x16\x52\x26\x37\x69\x75\xa7\xc5\x2a\xc3\x2e\x73\xea\x20\x2d\xbd\xde\x87\x3f\x7f\x80\xac\xc7\x07\xc5\x58\x80\xae\x24\x6c\x65\x90\x98\x0b\x5f\x92\x7b\x92\x0c\x61\xdd\xc3\x22\xc4\xd9\xc0\x4b\x6e\x2c\x48\x47\xa0\x34\x50\x56\xef\xbd\x79\xfd\xfa\xf5\x5b\x90\x86\x3d\xab\xad\x21\x33\xdc\xba\x95\x8e\xfe\xf9\x67\x6f\xb7\x61\xcf\x6a\x63\xa9\x1d\xe8\xf5\x76\xf7\x1a\xf6\x4c\xd5\x24\x46\x25\x3a\xe0\x47\x70\x7e\x79\xf5\xe9\xf4\xe2\xe4\xdb\xd1\xd9\xd9\xd5\xd1\xd9\xd9\xf9\x37\xe0\x35\x6c\xc5\x20\xc0\xab\xa0\x0b\x21\x70\xde\xfe\xff\xf9\xe4\x5b\x18\x9c\x4f\x73\x19\x42\xc3\x56\xfc\xe5\xbf\xe0\xe8\xf8\xf8\xe4\xcb\x57\xe0\x33\x26\x8d\x46\xc6\xe6\x79\xb8\x13\x53\xec\x2c\xe3\x6e\x5c\x16\x25\x4c\xe7\xb3\x8c\xf5\x60\x36\x46\xdd\x7a\x40\xe9\x02\x74\x50\x75\x26\x44\x81\x9a\x40\x68\x09\x1a\x69\x66\xec\x04\x3c\xa9\x52\x91\x42\x07\x85\x41\x07\x4a\x93\x01\x2b\x32\x84\xcc\x68\xa9\x48\x19\xdd\x67\x3d\x50\xf9\xdd\x62\xeb\xb5\x83\x11\xe6\xc6\x22\x48\xed\x40\x39\x98\x68\x33\xd3\x40\x26\x18\xa0\xcb\x84\x80\x5a\x82\xaf\x61\xa6\x68\x0c\x58\xd5\x74\x03\x8e\xac\xd2\x05\x9b\x8d\x55\x89\xf0\xfd\x3b\x6c\xbd\x1c\x1b\x47\x5a\x54\x08\x5c\xee\xc0\x70\x08\x49\x02\x3f\x7f\x06\xce\xc1\x95\x88\x35\x1c\x84\xef\xb0\xed\x76\xcd\x73\x78\xdc\xba\x97\x61\xb7\xbe\x86\xa6\x89\xba\xc1\x3c\x4a\xcb\x9d\x43\x82\x7f\x5d\x33\xbc\x8e\xdc\x5e\x1e\x5d\xfe\xe7\xe2\x74\xb8\xbd\x10\xe5\xdf\xc2\x11\xda\x2e\x48\x3b\x0f\x4d\xb3\x1d\x17\xf2\xeb\xf9\xb1\xb1\x5e\x03\xe7\xb5\x55\x53\x55\x62\x81\x12\x38\xb7\x15\x70\x3e\x27\x34\xec\x09\xf8\x14\xd2\x41\x1a\x3e\x07\xbf\x81\x63\x97\xed\xd1\x92\x5b\xad\x7c\xcd\xbc\x0e\x09\xdb\x15\x8c\xf9\x5a\x0a\x42\x9e\x09\x4e\xd6\x3b\x62\xcc\x85\x94\x0a\xb8\x45\x48\x5c\xef\x25\xec\x86\xa3\x8d\x76\x00\x3b\xfd\xdd\xde\x8f\x83\x31\x51\xed\x06\x69\x7a\x4f\xee\x4e\x2f\x69\x4f\xa9\xb1\xaa\x50\x3a\xad\xe2\x36\x53\x53\xa3\x76\x63\x95\x13\x6f\x07\xfa\x13\x3f\xc2\xd6\x47\x7f\x9f\x23\x98\x20\xfe\x2c\x46\x65\xb7\xb7\x3c\x38\x49\x23\x6c\xf5\x3f\x88\x6c\xe2\xeb\x0f\xa5\x19\x7d\x0e\x06\x48\x12\x68\x1a\x56\x9a\xa2\x40\x0b\x9c\xa0\xad\x89\x77\x9c\xf4\xdd\x18\x92\x3b\x2f\x87\x23\x3c\x45\x7b\x03\x46\x2f\x78\x68\x27\x09\xae\x77\x14\x04\x87\x02\x29\x9a\x71\x14\xb3\xb0\x20\xd0\x45\xbe\x7c\xe4\xd3\x5d\x46\x58\xd5\xa1\x8e\x8f\xca\x0e\x97\xe7\xba\x75\xd5\x44\x2a\x0b\x5b\x0b\x38\xf6\x78\x8d\xd2\xcc\x74\x69\x84\x0c\x65\xb6\x31\x92\x27\x7a\xf7\x84\x32\xd9\x72\xf2\x80\x7d\x97\xec\xb7\xee\xb8\x1f\x0c\xa2\xeb\xd6\x84\x1e\xac\x0f\x6d\x02\x67\xa5\xf1\xb2\xb6\x66\xaa\x24\xda\x74\x90\x5e\x49\x41\x22\xbd\x32\xfe\x2e\xf4\x22\x0d\x83\xd4\xf8\x60\xed\x30\xf5\x7f\xf6\x02\x81\xd0\x96\x8b\x36\x12\x1f\x75\xa2\x0f\xc3\xca\x15\x1f\x34\x4d\x07\x92\xe8\x48\x69\x11\x2e\xa0\x61\x48\xd6\x49\xd2\x97\xa3\x0e\x20\xb2\x38\x37\x67\xfc\x71\x5d\xba\xfc\x73\x30\xca\x7b\xb3\x1c\xce\xdf\x85\xc7\x23\xb4\xa0\xa0\xab\xd3\xa2\x76\x63\x43\x4f\x55\xb6\xbd\x56\x02\x27\x7f\xaf\x6c\xe0\x72\x70\xf7\x75\x37\xb5\xe8\xdd\xc1\xf2\x5f\xad\x46\x1c\xe1\xe4\xeb\xf1\xc7\xe3\xaf\x67\x57\x47\x5f\x4e\x87\xc9\xab\xe4\x01\xe9\x96\x8a\x8d\x98\x10\x25\xb6\x13\xdd\xb6\xe7\x74\x2d\xf9\x61\x4d\x9d\xe0\x1e\x1e\x0e\xcf\xf2\xb9\xd2\x38\xeb\x00\xf1\xda\x5f\x38\xbd\xdd\xb0\xd2\x8a\x94\x28\x79\x56\xfa\xe8\xd4\xa4\x93\x62\x3f\xfe\x1b\xce\x6f\x9e\xa5\xd1\xc1\xe1\xab\x37\xfb\x7b\x8b\x43\x07\x1b\x81\x07\xeb\xc0\xc3\x8d\xc0\xc3\x08\x4c\x36\x97\xc4\xc9\x4c\x50\x47\x5a\x78\x6e\x2c\x8f\xfd\xca\x0a\x54\xc8\x29\x5a\x52\x0e\x79\x8d\x68\xb9\xb7\xa5\x83\x0d\x97\x66\x4c\xc3\x58\x35\x5d\x67\x29\xdd\x5d\x19\x8b\x77\x98\x5d\xbd\xc3\x02\x9f\x4b\xd7\xd3\x52\x8f\xb3\x12\xf7\x29\x06\xc7\xf8\xe0\x26\xf1\xaa\x0e\x2f\x78\xd3\x30\x46\x5e\xa3\xe4\x42\x56\x50\x5b\x93\x07\xcb\xdf\xbf\x1d\x99\xd1\x64\x4d\xc9\xeb\x52\x84\x77\xba\x07\xda\x10\x0e\x40\x90\xa9\x54\xc6\xef\x71\xb1\x2b\xc8\x6c\x68\xfe\x4b\x63\x6a\x07\x5e\x93\x2a\xbb\x3a\x42\x0f\xe1\x6b\x76\xdf\xba\xa2\x0e\x6d\xcc\xe6\x28\x77\xad\xec\x6a\xa7\xfb\x28\x3a\xb4\xb0\x3d\x90\xca\x89\x51\x19\xdf\x10\x77\xe3\x4a\x53\x80\x53\x3a\x8b\xed\x4a\x25\xb4\x28\x10\x30\x3c\x2c\x34\x0e\x10\x1a\x5b\xe3\x8b\x31\xcc\x7b\xec\x85\x84\x6d\x1c\x9c\x47\xd9\x58\x92\xa9\xd7\xa6\xff\x17\x00\x00\xff\xff\x04\x85\xe5\x3f\x03\x0d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4f\x6f\x1b\xb7\x13\xbd\xf3\x53\x3c\xcb\x3f\x44\xbf\xa2\xa0\x36\xb9\x3a\xb1\x81\xa2\x48\x80\x5c\x1a\xc0\x46\xd1\x43\x90\x03\xb5\x3b\xbb\xcb\x88\x3b\xc3\x90\x43\xc9\x8e\xa1\xef\x5e\x50\x2b\x35\xae\x1d\xa8\xb7\x05\xf8\xfe\xcc\x3c\x3e\xee\xe5\x45\xb3\xf6\xdc\xac\x5d\x1e\x61\xe9\xde\x18\xdf\xe3\x02\x43\xa2\x88\x66\xeb\x52\x13\xfc\xba\xe9\xa4\xdd\x50\x42\x43\xda\x36\x7d\x56\xb7\x7e\x0b\x1d\x89\x0d\x90\x1f\xb2\xd2\xd4\x6a\x40\x56\x89\x98\x81\xab\x4c\x69\xeb\x5b\x32\xc0\xb4\xe9\xf3\xea\xbe\xcf\xb0\x3d\x9a\x8e\xb6\x4d\xe7\xf3\xa6\x71\xdf\x4b\xa2\x26\x51\x96\x92\x5a\xb2\xd1\x25\x7d\x63\x00\x6a\x47\xc1\xf2\x3c\x0c\x2f\xa6\x42\x95\xc7\x90\xe2\xb7\x22\xea\x80\xd7\x78\xbd\xc4\xcd\xcd\x8f\x61\xeb\x18\x52\x58\x9f\x33\x0d\x90\x28\xab\x24\x6a\x85\x61\x6f\x5f\x9c\x3f\x3e\x5a\xf8\x1e\xf4\x0d\xab\x5b\x09\x84\x85\xe7\x3e\xb9\x05\xf6\x7b\x03\xb4\x4e\x31\x9b\xcc\xe8\xa6\x73\x34\x09\xaf\xbe\x66\x61\xbc\x7b\xb7\x7c\xff\xe9\xc3\xd2\x3c\x1a\x60\x11\x64\xb0\x5d\xf2\x5b\x4a\x8b\x2b\x2c\xbe\x4a\x49\xec\x42\xb7\x30\x7b\xf3\xfe\xd3\x87\x83\x09\x71\x37\x8b\x3e\x8d\xd3\x25\x7d\x9e\x67\xef\x8d\x39\x6e\x1d\x4b\x08\x78\x7c\xc4\xea\x77\xe1\xde\x0f\xab\x8f\x93\x1b\x28\xaf\xfe\x90\x8e\xb0\xdf\xe3\xd5\xcd\x21\x46\xae\xa8\x57\xc6\x5c\x62\x37\x12\xcf\xa2\x9e\x07\x70\x85\xed\x9c\x1b\x88\x15\x8e\x3b\x30\xe9\x4e\xd2\x06\x45\x7d\xf0\xea\x29\x63\x10\xca\xf0\xac\x82\xe4\x5a\x42\x2b\xdc\x79\xf5\xc2\x2b\x73\x59\x43\x39\x91\x53\xe1\x8c\x35\xf5\x92\x08\x1d\x67\xf8\x8c\x0d\xcb\x8e\xa1\x52\x3b\x72\x74\xa2\xc3\x8a\x25\x62\xe7\x75\x04\x4d\x51\x1f\x90\x35\x79\x1e\xcc\x6e\xf4\x81\xf0\xf9\x33\xfe\xf7\xff\x51\xb2\xb2\x9b\x08\xb6\xfb\x05\xd7\xd7\x58\x2c\xf0\xe5\xcb\x5b\x74\x82\x1c\x88\x22\xde\xd4\x6f\x26\x73\xe4\x5c\xe0\x7c\x16\x77\x75\xdb\x12\xb1\xdf\x57\x5e\x4d\x77\x56\x31\x07\x91\x4c\x8a\x5f\xef\x0d\xdd\x47\x49\x8a\xbb\xdf\xee\xfe\xbc\xfd\x78\xbd\x7c\xa2\xf2\x97\xa4\x0d\xa5\xa3\xc8\x7c\x8e\xfd\x7e\x79\x20\xda\xfb\xd3\x3d\xa4\xc2\xb0\x36\x26\xbf\xf5\x81\x06\xea\x60\x6d\x9a\x60\xed\x29\xd0\xba\x13\xec\x16\xcd\x55\x53\x3f\xaf\xbe\xc3\xd2\xd1\xed\xec\xc8\xf3\x5d\x95\x68\x0a\x57\xc3\x99\x61\x4c\x89\x9d\x53\xb2\xad\xb3\x9a\x4a\x56\x73\xae\xa3\x5a\x98\x3a\xeb\xba\x09\x31\x49\x5f\x13\x93\x48\x9c\x47\xdf\xab\x6d\x85\x35\x49\xb0\x31\x38\xa6\xb9\x83\x21\xd3\x7f\xb1\xea\x65\x3e\x2d\xac\xb9\x04\x8b\xd2\x15\x9c\xca\xe4\x5b\xfb\x6f\x24\xda\x54\x7f\x2a\x41\x24\x66\x14\x56\x1f\x30\xb9\xac\x94\x6a\x49\x4a\x34\x3f\xca\x4e\xec\xd6\x81\x7e\xae\xf2\x4f\xf9\x9f\xbf\x8d\xb3\xe8\xb9\xf4\x9d\xcf\x6e\x1d\x6a\xe1\x53\x7e\xc8\x41\x06\x64\xcf\xed\xa1\x8f\x93\x63\x37\x10\x68\x4b\xe9\x41\xc7\x0a\xd1\x31\x49\x19\x46\x9c\x1e\xe8\x13\xc3\x59\x87\x4e\x2a\x3f\x1d\x49\xe2\x8b\xe3\xbf\x03\x00\x00\xff\xff\x68\x02\xdf\xab\x5b\x05\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
