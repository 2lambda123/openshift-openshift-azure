// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5f\x53\x14\xbf\x12\x7d\x36\x9f\xa2\x9d\xe5\x27\xc2\x25\x3b\x80\x3e\x58\xab\x6b\x15\x22\x56\x51\xc5\x15\x0b\xbc\xe5\x83\x5a\x54\x76\xd2\x33\x1b\x77\x26\xc9\x4d\x3a\xbb\x20\xce\x77\xbf\x95\x99\x59\xd8\x7f\x70\xa9\xd2\x87\x75\x48\x4e\xba\x3b\xe7\x9c\x24\xdd\x7b\x9e\x8e\x94\x4e\x47\xc2\x8f\x81\xe3\x35\x63\x2a\x87\xe7\x50\x38\xb4\x90\x4e\x85\x4b\x4b\x35\x4a\xa5\xc9\x26\xe8\x20\x45\xca\xd2\xdc\x93\x18\xbd\x05\x1a\xa3\x66\x00\xfe\xc6\x13\x56\x19\x95\xe0\xc9\x58\x68\x81\x7d\x8f\x6e\xaa\x32\x64\x00\xd5\x24\xf7\xfd\xeb\xdc\x03\xcf\x21\x95\x38\x4d\xa5\xf2\x93\x54\xfc\x0e\x0e\x53\x87\xde\x04\x97\x21\xb7\xc2\xd1\x01\x03\xc0\x6c\x6c\x60\xfb\x71\x18\xac\x55\x05\x31\x3c\x14\xce\xfe\x37\x18\x12\x00\xfb\xb0\xbf\x0d\xef\xdf\xdf\x17\x1b\xcb\x30\x41\xd3\xea\x4a\x06\xe0\xd0\x93\x71\x98\x19\x0d\xfc\x62\xc3\x7c\x26\x08\xda\x48\xed\x50\x2a\x05\x56\x46\xf7\x7f\x79\xa3\xe1\xdd\xbb\xed\x93\xf3\x4f\xdb\xec\x96\x01\x24\xa5\x29\xb8\x74\x6a\x8a\x2e\x19\x40\xf2\xcb\x04\xa7\x45\x29\x13\x56\xb3\x93\xf3\x4f\x2b\x44\x09\x47\xab\x4c\xe5\x8a\xb1\x6e\x3f\x36\x94\x25\xdc\xde\x42\xff\xd8\xe8\x5c\x15\xfd\xd3\x4a\x14\xe8\xfb\x9f\x8d\x44\xa8\x6b\x78\xf1\xbe\x21\x48\x47\xd4\x8b\x8d\x6a\x21\x65\x72\x93\x56\x77\x5a\xac\x32\xec\x33\xaf\x0e\xd2\x32\xe8\x7d\xf8\xf3\x07\xc8\x05\x7c\x50\x8c\x05\xe8\x4a\xc2\x56\x06\x89\xb9\x08\x25\xf9\x27\xc9\x10\xd7\x3d\x2c\x42\x33\x1b\x79\xc9\x8d\x03\xe9\x09\x94\x06\xca\xec\xde\x9b\xd7\xaf\x5f\xbf\x05\x69\xd8\x33\xeb\x0c\x99\xe1\xd6\xad\xf4\xf4\xcf\x3f\x7b\xbb\x35\x7b\x66\x8d\xa3\x76\xa0\xd7\xdb\xdd\xab\xd9\x33\x65\x49\x8c\x4a\xf4\xc0\x8f\xe0\xfc\xf2\xea\xd3\xe9\xc5\xc9\xb7\xa3\xb3\xb3\xab\xa3\xb3\xb3\xf3\x6f\xc0\x2d\x6c\x35\x41\x80\x57\x51\x17\x42\xe0\xbc\xfd\xff\xf3\xc9\xb7\x38\x38\x9f\xe6\x32\x86\x86\xad\xe6\x97\xff\x82\xa3\xe3\xe3\x93\x2f\x5f\x81\xcf\x98\x34\x1a\x19\x9b\xe7\xe1\x5e\x4c\xb1\xb3\x8c\xbf\xf1\x59\x23\x61\x3a\x9f\x65\xac\x07\xb3\x31\xea\xd6\x03\x4a\x17\xa0\xa3\xaa\x33\x21\x0a\xd4\x04\x42\x4b\xd0\x48\x33\xe3\x26\x10\x48\x95\x8a\x14\x7a\x28\x0c\x7a\x50\x9a\x0c\x38\x91\x21\x64\x46\x4b\x45\xca\xe8\x3e\xeb\x81\xca\xef\x16\xbb\xa0\x3d\x8c\x30\x37\x0e\x41\x6a\x0f\xca\xc3\x44\x9b\x99\x06\x32\xd1\x00\x5d\x26\x04\xd4\x12\x82\x85\x99\xa2\x31\x60\x65\xe9\x06\x3c\x39\xa5\x0b\x36\x1b\xab\x12\xe1\xfb\x77\xd8\x7a\x39\x36\x9e\xb4\xa8\x10\xb8\xdc\x81\xe1\x10\x92\x04\x7e\xfe\x8c\x9c\x83\x2f\x11\x2d\x1c\xc4\xef\xb8\xed\x76\xcd\x73\x78\xdc\xba\x97\x71\xb7\xc1\x42\x5d\x37\xba\xc1\x3c\x4a\xcb\x9d\x47\x82\x7f\x5d\x33\xbc\x6e\xb8\xbd\x3c\xba\xfc\xcf\xc5\xe9\x70\x7b\x21\xca\xbf\x85\x27\x74\x5d\x90\x76\x1e\xea\x7a\xbb\x59\xc8\xaf\xe7\xc7\xc6\x05\x0d\x9c\x5b\xa7\xa6\xaa\xc4\x02\x25\x70\xee\x2a\xe0\x7c\x4e\x68\xdc\x13\xf0\x29\xa4\x83\x34\x7e\x0e\x7e\x03\xc7\x2e\xdb\xa3\x25\xb7\x5a\x05\xcb\x82\x8e\x09\xdb\x15\x8c\x05\x2b\x05\x21\xcf\x04\x27\x17\x3c\x31\xe6\x63\x4a\x05\xdc\x21\x24\xbe\xf7\x12\x76\xe3\xd1\x46\x37\x80\x9d\xfe\x6e\xef\xc7\xc1\x98\xc8\xfa\x41\x9a\xde\x93\xbb\xd3\x4b\xda\x53\x6a\x9c\x2a\x94\x4e\xab\x66\x9b\xa9\xb1\xa8\xfd\x58\xe5\xc4\xdb\x81\xfe\x24\x8c\xb0\xf5\xd1\xdf\xe7\x88\x26\x68\x7e\x16\xa3\xb2\xdb\x5b\x1e\x9d\xa4\x11\xb6\xfa\x1f\x44\x36\x09\xf6\x43\x69\x46\x9f\xa3\x01\x92\x04\xea\x9a\x95\xa6\x28\xd0\x01\x27\x68\x6b\xe2\x1d\x27\x7d\x3f\x86\xe4\xce\xcb\xf1\x08\x4f\xd1\xdd\x80\xd1\x0b\x1e\xda\x49\xa2\xeb\x3d\x45\xc1\xa1\x40\x6a\xcc\x38\x6a\xb2\xb0\x28\xd0\x45\xbe\x7c\xe4\xd3\x5d\x46\x58\xd9\x58\xc7\x47\xe5\x86\xcb\x73\xdd\xba\x6a\x22\x95\x83\xad\x05\x1c\x7b\xbc\x46\x69\x66\xba\x34\x42\xc6\x32\xdb\x18\xc9\x13\xbd\x7b\x42\x99\x6c\x39\x79\xc0\xbe\x4b\xf6\x5b\x77\xdc\x0f\x06\x8d\xeb\xd6\x84\x1e\xac\x0f\x6d\x02\x67\xa5\x09\xd2\x3a\x33\x55\x12\x5d\x3a\x48\xaf\xa4\x20\x91\x5e\x99\x70\x17\x7a\x91\x86\x41\x6a\x42\xb4\x76\x9c\xfa\x3f\x7b\x81\x48\x68\xcb\x45\x1b\x89\x8f\x4a\x33\x8a\x8a\x0d\xe3\xca\x15\x1f\xd4\x75\x07\x92\xe8\x49\x69\x11\x2f\xa0\x61\x4c\xd6\x49\xd2\x97\xa3\x0e\x20\xb2\x38\x07\x73\xc6\xe1\xc7\xe3\xca\x74\x15\xcc\xe1\x28\xef\xed\x72\x38\x7f\x19\x1e\x8f\xd0\x82\xa2\xb2\x5e\x0b\xeb\xc7\x86\x9e\xaa\x6d\x7b\xb1\x44\x56\xfe\x5e\xdb\xc8\xe6\xe0\xee\xeb\x6e\x6a\xd1\xbd\x83\xe5\xbf\x5a\x95\x38\xc2\xc9\xd7\xe3\x8f\xc7\x5f\xcf\xae\x8e\xbe\x9c\x0e\x93\x57\xc9\x03\xe2\x2d\x15\xdb\x60\x62\x94\xa6\xa1\xe8\xb6\x3d\xa7\x6b\xc9\x11\x6b\xfa\x44\xff\xf0\x78\x7c\x96\x4f\x96\xc6\x59\x07\x68\x2e\xfe\x85\xf3\xdb\x0d\x2b\xad\x48\x89\x92\x67\x65\x68\xbc\x9a\x74\x52\xec\x37\xff\x86\xf3\xbb\x67\x69\x74\x70\xf8\xea\xcd\xfe\xde\xe2\xd0\xc1\x46\xe0\xc1\x3a\xf0\x70\x23\xf0\xb0\x01\x26\x9b\x4b\xe2\x64\x26\xa8\x1b\x5a\x78\x6e\x1c\x6f\x3a\x96\x15\xa8\x90\x53\x74\xa4\x3c\x72\x8b\xe8\x78\x70\xa5\x87\x0d\xd7\x66\x93\x86\xb1\x6a\xba\xce\x52\xba\xbb\x32\xd6\xdc\x62\x6e\xf5\x16\x8b\x7c\x2e\x5d\x50\x4b\x5d\xce\x4a\xdc\xa7\x18\x1c\x9b\x27\x37\x69\x2e\xeb\xf8\x86\xd7\x35\x63\x14\x34\x4a\x2e\x64\x05\xd6\x99\x3c\x5a\xfe\xfe\xf5\xc8\x8c\x26\x67\x4a\x6e\x4b\x11\x5f\xea\x1e\x68\x43\x38\x00\x41\xa6\x52\x19\xbf\xc7\x35\x7d\x41\xe6\x62\xfb\x5f\x1a\x63\x3d\x04\x4d\xaa\xec\xea\x88\x5d\x44\xb0\xec\xbe\x79\x45\x1d\x1b\x99\xcd\x51\xee\x9a\xd9\xd5\x5e\xf7\x51\x74\x6c\x62\x7b\x20\x95\x17\xa3\xb2\x79\x45\xfc\x8d\x2f\x4d\x01\x5e\xe9\xac\x69\x58\x2a\xa1\x45\x81\x80\xf1\x69\xa1\x71\x84\xd0\xd8\x99\x50\x8c\x61\xde\x65\x2f\x24\x6c\xe3\xe0\x3c\xca\xc6\x92\x8c\x5d\x9b\xfe\x5f\x00\x00\x00\xff\xff\x76\xee\x42\x63\x05\x0d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4f\x6f\x1b\xb7\x13\xbd\xf3\x53\x3c\xcb\x3f\x44\xbf\xa2\xa0\x36\xb9\x3a\xb1\x81\xa2\x48\x80\x5c\x1a\xc0\x46\xd1\x43\x90\x03\xb5\x3b\xbb\xcb\x88\x3b\xc3\x90\x43\xc9\x8e\xa1\xef\x5e\x50\x2b\x35\xae\x1d\xa8\xb7\x05\xf8\xfe\xcc\x3c\x3e\xee\xe5\x45\xb3\xf6\xdc\xac\x5d\x1e\x61\xe9\xde\x18\xdf\xe3\x02\x43\xa2\x88\x66\xeb\x52\x13\xfc\xba\xe9\xa4\xdd\x50\x42\x43\xda\x36\x7d\x56\xb7\x7e\x0b\x1d\x89\x0d\x90\x1f\xb2\xd2\xd4\x6a\x40\x56\x89\x98\x81\xab\x4c\x69\xeb\x5b\x32\xc0\xb4\xe9\xf3\xea\xbe\xcf\xb0\x3d\x9a\x8e\xb6\x4d\xe7\xf3\xa6\x71\xdf\x4b\xa2\x26\x51\x96\x92\x5a\xb2\xd1\x25\x7d\x63\x00\x6a\x47\xc1\xf2\x3c\x0c\x2f\xa6\x42\x95\xc7\x90\xe2\xb7\x22\xea\x80\xd7\x78\xbd\xc4\xcd\xcd\x8f\x61\xeb\x18\x52\x58\x9f\x33\x0d\x90\x28\xab\x24\x6a\x85\x61\x6f\x5f\x9c\x3f\x3e\x5a\xf8\x1e\xf4\x0d\xab\x5b\x09\x84\x85\xe7\x3e\xb9\x05\xf6\x7b\x03\xb4\x4e\x31\x9b\xcc\xe8\xa6\x73\x34\x09\xaf\xbe\x66\x61\xbc\x7b\xb7\x7c\xff\xe9\xc3\xd2\x3c\x1a\x60\x11\x64\xb0\x5d\xf2\x5b\x4a\x8b\x2b\x2c\xbe\x4a\x49\xec\x42\xb7\x30\x7b\xf3\xfe\xd3\x87\x83\x09\x71\x37\x8b\x3e\x8d\xd3\x25\x7d\x9e\x67\xef\x8d\x39\x6e\x1d\x4b\x08\x78\x7c\xc4\xea\x77\xe1\xde\x0f\xab\x8f\x93\x1b\x28\xaf\xfe\x90\x8e\xb0\xdf\xe3\xd5\xcd\x21\x46\xae\xa8\x57\xc6\x5c\x62\x37\x12\xcf\xa2\x9e\x07\x70\x85\xed\x9c\x1b\x88\x15\x8e\x3b\x30\xe9\x4e\xd2\x06\x45\x7d\xf0\xea\x29\x63\x10\xca\xf0\xac\x82\xe4\x5a\x42\x2b\xdc\x79\xf5\xc2\x2b\x73\x59\x43\x39\x91\x53\xe1\x8c\x35\xf5\x92\x08\x1d\x67\xf8\x8c\x0d\xcb\x8e\xa1\x52\x3b\x72\x74\xa2\xc3\x8a\x25\x62\xe7\x75\x04\x4d\x51\x1f\x90\x35\x79\x1e\xcc\x6e\xf4\x81\xf0\xf9\x33\xfe\xf7\xff\x51\xb2\xb2\x9b\x08\xb6\xfb\x05\xd7\xd7\x58\x2c\xf0\xe5\xcb\x5b\x74\x82\x1c\x88\x22\xde\xd4\x6f\x26\x73\xe4\x5c\xe0\x7c\x16\x77\x75\xdb\x12\xb1\xdf\x57\x5e\x4d\x77\x56\x31\x07\x91\x4c\x8a\x5f\xef\x0d\xdd\x47\x49\x8a\xbb\xdf\xee\xfe\xbc\xfd\x78\xbd\x7c\xa2\xf2\x97\xa4\x0d\xa5\xa3\xc8\x7c\x8e\xfd\x7e\x79\x20\xda\xfb\xd3\x3d\xa4\xc2\xb0\x36\x26\xbf\xf5\x81\x06\xea\x60\x6d\x9a\x60\xed\x29\xd0\xba\x13\xec\x16\xcd\x55\x53\x3f\xaf\xbe\xc3\xd2\xd1\xed\xec\xc8\xf3\x5d\x95\x68\x0a\x57\xc3\x99\x61\x4c\x89\x9d\x53\xb2\xad\xb3\x9a\x4a\x56\x73\xae\xa3\x5a\x98\x3a\xeb\xba\x09\x31\x49\x5f\x13\x93\x48\x9c\x47\xdf\xab\x6d\x85\x35\x49\xb0\x31\x38\xa6\xb9\x83\x21\xd3\x7f\xb1\xea\x65\x3e\x2d\xac\xb9\x04\x8b\xd2\x15\x9c\xca\xe4\x5b\xfb\x6f\x24\xda\x54\x7f\x2a\x41\x24\x66\x14\x56\x1f\x30\xb9\xac\x94\x6a\x49\x4a\x34\x3f\xca\x4e\xec\xd6\x81\x7e\xae\xf2\x4f\xf9\x9f\xbf\x8d\xb3\xe8\xb9\xf4\x9d\xcf\x6e\x1d\x6a\xe1\x53\x7e\xc8\x41\x06\x64\xcf\xed\xa1\x8f\x93\x63\x37\x10\x68\x4b\xe9\x41\xc7\x0a\xd1\x31\x49\x19\x46\x9c\x1e\xe8\x13\xc3\x59\x87\x4e\x2a\x3f\x1d\x49\xe2\x8b\xe3\xbf\x03\x00\x00\xff\xff\x68\x02\xdf\xab\x5b\x05\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
