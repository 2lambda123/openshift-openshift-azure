// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5d\x73\x1b\xb7\xce\xbe\x2e\x7f\x05\xba\x72\x9b\x26\x35\xb5\x76\xda\xbe\x6f\x47\xad\x33\xe3\x38\x4e\xc7\xa7\x6e\xec\x63\x27\xa7\x17\x69\x26\x43\x2d\xb1\x12\x23\x2e\xb9\xe5\x87\x64\x55\xd1\x7f\x3f\x03\xee\x4a\x96\x2c\xd9\x49\xea\xf4\xe4\xc2\x91\x48\x10\x00\xc1\x87\x78\x00\xaa\xf3\x65\xde\x57\x26\xef\x0b\x3f\x04\x8e\x57\x8c\x75\xe0\xb9\x75\x10\xd0\x07\x65\x06\x3d\xd0\x76\x00\xc2\x48\x90\xce\xd6\x20\xb4\x86\xe0\x44\x59\xaa\x02\xc2\x50\x04\x98\xd8\xa8\x25\x38\x1b\x03\xc2\x58\x09\x08\x43\x84\x4a\xf8\x80\x0e\x8e\x4f\x9f\xb2\x0e\x5c\x1c\x5f\x9e\xbd\xba\x38\x3a\xfe\xe5\xe2\xec\xd5\xf9\x41\x36\xb5\xd1\x71\x87\xde\x46\x57\x20\x1f\x38\x1b\xeb\x8c\x75\xe0\xec\xf2\xed\xf3\x7f\x3f\x7b\x71\x90\xd9\x1a\x8d\x1f\xaa\x32\x74\x77\xd6\x56\x76\xad\x17\x12\xc7\xdd\x42\xdb\x28\x33\xd6\x61\x1d\x50\x75\x10\x7d\x8d\x1e\xf8\x09\x9c\xbc\x38\x7f\xf5\x12\xb8\x87\x9d\x6f\xa4\x1a\xc0\xb7\x7e\x68\x5d\x80\x6c\xa7\xd5\x9b\xc1\x7b\x08\x42\x69\xe0\xfb\x0f\x81\xbf\x83\xd3\xb3\x5f\x80\x73\x6d\x07\xbc\x76\x58\xaa\x2b\xc8\x7e\x7d\xf5\xf4\x18\x48\x14\x9e\x5d\x9c\x9d\xf7\xb2\xfb\xe9\x27\x1d\x8c\xcd\x66\xa0\x4a\xe8\x1e\x59\x53\xaa\x41\xf7\x12\x8b\xe8\x54\x98\x9e\x8b\x50\x0c\xcf\x45\x31\x12\x03\xf4\x30\x9f\x33\x6d\x07\x03\x74\xc0\x43\x1b\x38\xee\x83\x70\x21\xd6\x5d\x3f\x84\x4c\x19\x1f\x84\xd6\xca\x0c\xc0\xa1\x04\x0a\x79\x21\x0d\x14\x49\x67\x74\x22\x28\x6b\xc0\x1a\xd8\xf9\x66\x68\x7d\x30\xa2\xc2\x87\x19\x2b\x44\x80\x27\xf9\x58\xb8\x5c\xab\x7e\x3e\x8d\x55\x5e\x68\x85\x26\xf0\x02\x5d\xe8\xd6\x58\xc1\xcf\x3f\x3f\x38\x3e\x7b\xfe\x80\x5c\x3c\x42\x17\x0e\xfd\xd3\x69\x40\xbf\xf4\x95\xc6\x54\xa9\x0a\x11\xd0\x77\x5b\x5f\x2f\xb0\xb6\x5e\x05\xeb\xa6\x69\x1a\xde\xc3\x65\x70\xe4\xd7\x7c\xce\x8e\xcf\x9e\xdf\x6e\x74\x84\xd3\x9b\x36\xcf\x9d\x1a\x8b\x80\xbf\xe2\xf4\x13\x2d\xff\x8a\xd3\x0d\xc3\x1f\x1d\xc0\xc3\x8b\x33\xf0\xed\x29\x40\xac\x25\xd9\x80\xd7\xb3\x59\xab\xcf\xff\xcb\x2a\xf3\x81\xe3\xca\x76\x21\x83\xf9\xfc\xcd\x46\xc8\x4b\xeb\x40\x84\x80\x55\x1d\x40\x19\x98\xed\x77\xbb\x3f\xcc\x7f\x02\x69\x19\xc0\x34\x56\xd0\xba\x01\x7c\x0a\xfc\x4f\xf8\x34\x9b\xc9\x24\x7c\xfd\x35\xf4\x1d\x8a\x11\x03\xb8\x73\xc3\xaf\x17\x6e\xec\xcc\xda\x4f\xf3\x37\xdb\xb7\xde\xfa\xd4\x60\xa8\x14\x4a\xa3\xcc\x18\x10\x66\x5f\xbf\x5e\x59\x0d\x5c\x07\xf8\x01\xde\xbc\xf9\x89\x6e\xb7\x01\xaf\x11\x6b\xd8\xff\x09\x50\x7b\x04\xbc\x52\x81\xbe\x94\x8a\x49\x6b\xf0\x03\xa7\xe1\xb0\xb2\xe3\x4f\x03\x33\x45\xaf\xd0\x28\x0c\x25\x1f\xe6\x2a\xe0\xae\x84\x3b\xc1\x7d\x07\x08\xd9\x6c\x86\x46\xce\xe7\x94\xe5\x0a\x87\x22\x20\x59\x0f\x42\x19\x74\x50\x47\xad\x29\x4a\x0e\x03\xab\x46\x52\x39\xe0\xf5\xb5\x32\xeb\xd4\x40\x99\xbc\x2b\x6d\x31\x42\x77\x03\xee\xeb\x93\x79\xb3\xa3\xee\x3b\x6f\xcd\x2a\xec\xbb\xcf\xd0\xa9\x31\xca\xee\x91\xad\xfa\xca\xa0\x3c\xa9\xc4\x00\xcf\xa3\xd6\x97\xc9\xea\x02\x08\x1b\x10\xd7\x86\x72\xcf\x2d\xd6\x20\x77\xd6\x86\x9c\xb6\xf4\xf2\xec\xd9\x59\x0f\x24\x6a\x0c\x98\x52\x71\x69\xb5\xb6\x13\xd2\x94\x52\x6d\xb3\x67\x8a\xb2\x28\x29\x45\xab\x00\xca\x43\x5f\x8c\x50\x82\x32\xc1\x82\x8d\x0e\xfe\xf3\x1b\x28\xf2\xcb\xb3\xb4\x46\x48\x09\xbc\x84\x76\xdb\x4c\x95\xf0\x25\x0c\x1c\xae\x44\x66\xe1\x06\x86\x22\x2f\x7d\x10\xfd\x06\x28\x0c\xc0\x4f\x7d\xc0\xaa\x08\x1a\x7c\xb0\x75\xab\x83\xa7\xd3\x8c\x75\x37\xa8\x0a\xdd\x07\xa5\x3c\xba\xb1\x2a\xf0\x36\xb9\x95\xf9\x6a\x54\xfa\xee\x55\xe9\xc9\xdd\x5c\xe2\x38\x97\xca\x8f\x72\xf1\x57\x74\x98\x2f\x29\xa7\x16\x2e\xec\x33\x00\x2c\x86\x16\x1e\xdc\x2d\x06\x1b\x7b\x04\x52\x0f\x03\x57\xff\x19\x6d\x10\x00\x7b\xb0\xf7\x00\x9e\x3c\xb9\xde\x3a\xb9\x61\xa3\x09\x37\x57\x32\x00\x87\x3e\x58\x87\x85\x35\xc0\x2f\xb6\xcc\x37\x88\x22\x4d\x2d\x8a\xa4\xc0\xca\x9a\x1b\x28\x62\x00\x19\x11\x97\x24\x24\xb9\xac\x07\xd9\x3b\x1b\x9d\x11\x5a\x66\xbb\x34\x27\x95\x27\xd6\xe2\x1a\x07\xa2\x98\x72\x87\x03\xe5\x83\x9b\x66\x3d\x08\x2e\x22\x6b\xf0\xb4\x1e\x4b\xe1\xc2\x66\x30\xb7\x0b\xdc\x38\xbb\x52\x31\xd6\x46\x26\x5d\x1e\xc2\x78\x9b\xcb\x12\xb4\x7d\xf7\x85\x95\x98\xb2\xd7\x93\x14\x6a\x43\x52\x5f\x6f\x45\x11\x86\x42\x6e\xc3\xd0\xf2\x54\x6f\x9e\x95\x2f\xbc\xda\xcf\x75\x34\x7b\xf0\xfe\x7d\xb3\xbb\xdb\x8e\x75\x45\xf4\x86\xc1\xe6\x40\x25\x96\x22\xea\xe0\x3f\xea\x40\x69\xdd\xed\xc7\x99\x66\x29\x2e\xc4\x08\xd2\x27\x36\x08\x45\xbd\xfb\xe3\xf7\xdf\x7f\x9f\xf8\xe0\x8b\xda\xd9\x60\x0f\x76\x66\xd2\x87\xaf\xbe\xda\x7d\x34\x67\x5f\xd4\xd6\x85\x66\xa0\xd3\x79\xb4\x3b\x67\x5f\x5c\x97\x1e\x87\xa9\x34\x3a\xb9\x38\xfe\xfd\xf0\xf4\xf4\xed\xe1\xe9\xe9\xd9\xef\x94\x95\x76\x92\x12\xe0\x15\x9d\x4e\x40\xe0\xbc\xf9\xff\xc5\xf1\xef\x34\xb8\x98\xe6\x92\x54\xc3\x4e\xfa\xcb\xdf\xc1\xe1\xd1\xd1\xf1\xf9\x4b\xe0\x93\x36\x57\x2f\xec\x70\x2f\xc6\xd8\x82\xcf\x4f\x7d\x93\xbe\xf2\xc5\x2c\x65\x96\x49\xca\xfc\x84\x04\x4a\x26\x86\x4e\x75\x22\xc4\x00\x4d\x48\xc5\xa1\xc1\x30\xb1\x6e\x04\x31\x28\xad\x82\x42\x0f\x03\x9b\x18\x26\x58\x70\xa2\x48\x59\x56\x2a\xca\x3c\x5d\xaa\xac\xca\xe5\x62\x17\x8d\x87\x3e\x96\xd6\x21\x48\xe3\x29\x1d\x8d\x8c\x9d\x18\x08\x36\x25\xb0\xc6\x12\x02\x1a\x09\xb1\x86\x89\x0a\x43\x20\x56\x9a\x82\x4f\x19\x92\x4d\x86\x4a\x63\x22\xac\x25\x69\x00\x97\x0f\xe1\xe0\x00\xb2\x2c\x91\x96\xb4\xd7\x94\xf5\x11\x14\x45\x40\xa6\x3d\x6e\x62\xf9\xb2\x91\x82\xf9\xfc\x6e\xbe\xbf\xfb\x46\x5c\x6b\xb9\x1f\xa5\x7f\xb4\x95\x4f\x65\xf6\xff\xdb\xbb\x8d\xda\xa9\xea\x7e\x71\xf6\xf2\xb8\x07\x27\x06\xca\x18\xa2\xc3\x5d\xa8\xec\x18\x9b\x5e\x40\x99\xd2\xba\xaa\x65\xf1\x18\xbc\x92\x08\xb6\x04\x34\x63\xe5\xac\xa9\xe8\xb8\xc7\xc2\xa9\x06\x53\x1d\xe6\x31\xc0\xb7\x57\x0c\xaf\x12\x3a\x2f\x0f\x2f\x5f\x5d\x9c\x1c\x3c\x58\xd9\xca\x6f\x29\x12\xed\x4e\x9a\x79\x98\xcf\x1f\xa4\x85\xfc\x6a\x91\x78\x5c\x34\xc0\x79\xed\xd4\x58\x69\x1c\xa0\x04\xce\xa9\x48\xe0\x0b\x48\x12\x2a\x80\x8f\x21\xef\xe5\xf4\xb1\xf7\x17\x70\x6c\xad\xdd\x1d\xb7\xf6\x04\x58\x34\x64\xb0\x59\xc1\x58\x53\x3c\xf1\x42\xf0\xe0\xa2\x0f\x74\x37\x3c\x86\x74\x2b\x62\x0d\x03\x34\x38\x16\xe9\x34\x69\xc4\x07\x51\x8c\x40\x78\xf0\x96\x38\xd7\x27\x48\xaf\x97\x3b\xca\x83\x16\x4a\x52\xc0\xa0\x3f\x65\x9d\x24\xd2\x9a\xbe\xae\x4d\x76\x9b\x95\xda\x7a\x74\x10\x86\x2a\x5d\x94\xf6\x8a\xdc\x22\x5c\x59\x87\xac\x43\xae\x78\x28\x9d\xad\xd6\x64\x6b\x67\x0b\xf4\x9e\x6e\xd6\x44\x51\xd5\x33\x54\x35\xe9\x6b\xfc\x67\x8d\x1b\x1e\xc1\x0f\x9b\xfe\x2e\x52\x5d\x56\x20\x08\x90\x62\x0a\xd6\xe8\x29\xed\xa6\x4e\xce\x20\x41\xd1\xb3\x3c\x7a\x97\x6b\x5b\x08\x9d\xfa\x49\xf1\x97\xc7\x42\xb6\x9b\xa5\xea\xa5\x2f\x3c\x6a\x65\xe8\x76\xc2\xf9\xfe\xb3\x0f\xca\x7b\x5b\x86\x89\x70\x1f\x2d\x5f\x68\x51\x89\xf1\x42\x9a\x75\x00\x0d\x21\x2d\xa5\xa7\x86\xc2\xd6\x4f\xa5\xa5\x3a\xcf\xae\x99\x2e\x9a\x4a\xf8\x11\x54\xd2\xcb\x05\x13\x42\x63\x67\xfd\x6b\x65\xcd\xf5\x48\xa9\x23\x9a\xb0\xfc\xbe\xa2\xae\x75\xe0\x73\xa9\x6b\x36\x71\x3f\x6d\xac\x03\xe7\xca\xc0\x28\xf6\xb1\x89\x5c\x42\x51\xf4\x08\x29\xb2\x20\x6a\xc5\x49\x16\x1d\xf3\x74\x95\x14\x70\x87\x90\xf9\xce\x37\xf0\xa8\x19\xef\xc1\xc3\xee\xa3\xce\x1f\xfb\xc3\x10\x6a\xdf\xcb\xf3\x95\x5a\xbd\x93\x35\xfc\xdd\x96\xa7\x4d\x22\xcb\x97\x1d\x3d\x6f\x06\xba\xd7\xc6\xef\x6f\x83\xe8\x21\xfd\xf9\xfc\x5a\xbd\x34\xf7\x57\x9a\x2a\xf3\xa4\xa6\xed\x09\x18\x9b\xcd\x38\x25\x62\x83\xb0\xd3\x7d\x2a\x8a\x51\xac\x9f\x6a\xdb\x7f\x41\xbc\x95\x65\x1f\x7c\x0f\x58\x52\x30\x55\x1e\x63\x74\xd3\x8d\x7e\x89\x12\x52\x20\xb6\x83\x01\x86\x74\x3d\xfb\xc9\x4a\x6a\x9d\x2e\xca\xf5\x4a\x25\x7f\xc4\x88\x0a\xc8\x8f\x67\xca\x1d\xac\xcf\xb5\xeb\x9a\x56\x68\x67\x45\xee\x6f\x33\xe8\x71\x28\x64\xb3\xe7\x7b\x92\xe8\x9a\xa2\x7f\x92\x47\xd7\x0d\x7d\x3e\x2a\xbd\xd3\x4f\x69\x27\x46\x5b\x21\x29\x88\xcd\x21\x64\xeb\x6c\xb7\x49\x70\x7f\x30\x48\x24\xb7\x71\xff\x7a\x9b\x43\xdb\x84\xd3\xbb\x5a\xed\xec\x58\x49\x74\x79\x2f\x7f\x2b\x45\x10\xf9\x5b\x62\xa5\x56\x7a\x15\x00\xbd\xdc\x46\x62\x52\x9a\xfa\x50\xcc\x08\x4a\xcd\x26\x1a\x4d\xbc\xdf\xc2\xfd\x80\x56\xde\xb8\x01\xf3\x79\x2b\x24\xd3\xf3\x63\xa2\xc8\x03\x32\xd6\x82\xb1\x2b\xfb\xad\x80\x28\xd2\xdc\x22\x54\x77\x07\xb4\xb5\xbf\x10\xa6\x23\x5c\x5c\x93\xc7\x8b\x42\xfe\xef\x62\xba\xa9\x52\x68\xcf\xf7\xc4\xf4\x9a\xa2\x7f\x12\xd3\xeb\x86\xfe\x47\x98\x6e\xa2\x9c\xe8\xd7\x88\xda\x0f\x6d\xf8\x24\x4c\x13\x8a\x7a\xcb\x4f\xcb\xa9\xd5\x7c\xd5\x5b\xff\xd6\xa0\x93\x23\x1c\xbf\x3c\x7a\x76\xf4\xf2\xf4\xed\xe1\xf9\xc9\x41\xf6\x5d\x76\x0b\x68\xd7\x83\x42\x32\xa4\x25\xf1\x6e\xeb\xef\x02\x28\x6b\x37\x61\x03\x97\x74\x6f\x38\x25\xcc\xf5\x5c\x6a\x70\xd2\x0a\xa4\x0e\x65\x25\x63\xb7\xc3\xca\xa8\xa0\x84\xe6\x85\x8e\xe9\x8e\x66\x6d\x0c\xf7\xd2\xbf\x83\x05\xbf\xac\x8d\xf6\x1e\x7f\xf7\xe3\xde\xee\xea\xd0\xfe\x56\xc1\xfd\x4d\xc1\xc7\x5b\x05\x1f\x27\xc1\x6c\xbb\x4b\x3c\xd8\x11\x9a\x14\x16\x5e\x5a\xc7\x53\x6b\x7d\x43\x54\xc8\x31\xba\xa0\x3c\xf2\x1a\xd1\xf1\xe8\xb4\x87\x2d\xd4\x98\xcc\x30\x56\x8d\x37\xa3\x94\x3f\xba\x31\xb6\xf1\xe4\xb7\x8c\xe7\x1a\x25\xad\xb5\xe3\x37\xf4\x7e\x0c\x32\x31\xf5\x86\x59\xa2\x67\x6a\x36\xe7\x73\xc6\x42\x34\x28\xb9\x90\x15\xd5\xcb\x25\xf5\x99\xd7\xc5\x0c\x55\xdb\xce\x6a\x5e\x6b\x91\x5a\x23\x2a\xa5\x85\xf6\x16\x0c\xa2\xbc\x96\xeb\xa6\xba\xaa\x3b\xb6\x3a\x56\xe8\x81\x80\xd1\xbc\x3b\xca\x45\xd7\x7b\x55\x7a\x68\x5e\x93\x0a\xea\x75\xa9\x21\x5e\xbc\x3e\x56\xb0\xf7\xff\x3f\xec\x6d\x7b\x85\xbc\x45\x3f\xf9\xd1\x3c\x00\xa5\x12\xc1\x4f\xbd\xb6\x03\xf0\x8a\x4a\xf7\x09\x42\x25\x8c\x18\x20\x20\xd5\x0d\x61\x48\x22\x61\xe8\x6c\x1c\x0c\x61\xf1\x86\xb4\x52\x6e\xb6\x0f\x49\x0b\x2d\x5b\x0b\x52\x5b\x6f\x4c\xb3\x0e\x18\x1b\xb0\x07\x22\xd8\x4a\x15\xfc\x3a\x62\xa9\x95\x2f\x9c\xf0\x43\xd0\xd6\xd6\x1e\xa2\x09\x4a\x2f\x7e\x2d\x52\x1e\x62\xbd\x59\x3c\x6f\xd5\xb2\x34\xf6\x39\x7e\x61\xf1\xc5\x10\x65\x4c\x01\x5b\xbd\x95\x0e\xfb\xd6\x06\xaa\x8e\x0b\x5b\xd5\xe9\x41\x75\xdb\x23\x7a\xc6\xfc\x30\x06\x22\x16\x4a\x61\xcd\x9a\x6f\x1f\xb3\xd9\x8c\x52\xe4\x7c\xbe\x51\xbe\xdf\xb9\x9f\xe5\x3b\xd6\xe2\x95\xfa\xbf\x01\x00\x00\xff\xff\x9e\x43\xe6\x53\x9c\x1b\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x6f\xdb\xc8\x15\x7d\x9f\x5f\x71\x56\x5a\xc4\x5d\x6c\x28\x25\x05\xd2\x02\xce\x26\x40\x9a\x64\x81\x74\xd1\xb5\x61\x6f\xdb\x87\x20\x0f\x23\xce\x25\x35\xab\xe1\x5c\x66\x3e\x24\x2b\x8a\xfe\x7b\x71\x49\x2a\x96\x2d\x5b\x4e\x90\xbe\x49\xe4\x9d\xfb\x79\xee\x39\xc3\xf1\x0f\xd3\x99\xf5\xd3\x99\x8e\x73\x14\x74\xa5\xd4\x66\x03\x5b\x61\xf2\x9a\x7d\x65\xeb\xc9\x25\x95\x39\xd8\xb4\x3e\xd7\xa9\x9c\x9f\xeb\x72\xa1\x6b\x8a\xd8\x6e\x95\xe3\xba\xa6\x80\x22\xc1\xb3\xa1\x22\x26\x1d\x52\x6e\x27\x71\x8e\x91\xf5\x31\x69\xe7\xac\xaf\x11\xc8\x60\xae\x13\x4a\xe3\x51\x76\x1e\x73\xd0\xc9\xb2\x07\x7b\xfc\xf8\x97\x39\xc7\xe4\x75\x43\x3f\x8d\x54\xa9\x13\x5e\x4e\x97\x3a\x4c\x9d\x9d\x4d\xd7\xb9\x99\x96\xce\x92\x4f\x45\x49\x21\x4d\x5a\x6a\xf0\xcb\x2f\x27\x6f\xcf\x7e\x3d\x91\x04\x5f\x53\x48\xaf\xe2\x3f\xd6\x89\xe2\x97\x4c\xe5\x99\xad\x6c\xa9\x13\xc5\xc9\x90\xe9\x05\xb5\x1c\x6d\xe2\xb0\xee\x5e\xe3\x33\x2e\x53\x90\xbc\xb6\x5b\xf5\xf6\xec\xd7\xfb\x83\x2e\x68\x7d\x3b\xe6\x79\xb0\x4b\x9d\xe8\x37\x5a\x7f\x63\xe4\xdf\x68\x7d\x10\xf8\x2b\xdb\xf7\xea\xe2\x0c\x71\x98\x00\x72\x6b\x24\x02\xde\x6f\x36\x83\xb7\xf8\x4f\xb6\xfe\x81\x51\x8d\x1e\x63\x84\xed\xf6\xc3\x41\xc3\x2b\x0e\xd0\x29\x51\xd3\x26\x58\x8f\xcd\xd3\xc9\xe4\xd9\xf6\x39\x0c\x2b\x60\x9d\x1b\x0c\x69\xa0\x58\xa3\xf8\x88\x6f\x8b\xd9\x85\xc4\xa3\x47\x98\x05\xd2\x0b\x05\x1c\x29\xf7\xfd\x2e\x89\x1f\x37\xc3\xaf\xed\x87\xbb\x0b\x1f\x32\xea\xf1\x53\x69\xeb\xc8\x8c\x14\x04\xad\xef\xdf\xef\x9d\x46\xe1\x12\x9e\xe1\xc3\x87\xe7\x48\x73\xf2\x88\x8e\xa8\xc5\xd3\xe7\x20\x17\x09\x74\x65\x93\xfc\xa9\xac\x32\xec\xe9\xe8\x24\x02\x35\xbc\xfc\x36\x18\x4b\xe7\x4a\x47\xda\x43\x3b\xa7\x42\x83\x22\x54\x38\x0a\xeb\x23\xf0\x53\x9b\x0d\x79\xb3\xdd\x2a\x35\x46\x19\x48\x27\x92\xe8\x49\x5b\x4f\x01\x6d\x76\x4e\x7a\x14\x28\xa9\x66\x61\x6c\x40\xd1\x5e\x3b\xe3\x60\x6b\xeb\xa7\x13\xc3\xe5\x82\xc2\x2d\xa0\xdf\x7c\x39\xed\x2b\x9a\xfc\x19\xd9\xef\x03\x7e\xf2\x86\x82\x5d\x92\x99\xbc\xe6\x66\x66\x3d\x99\x77\x8d\xae\xe9\x3c\x3b\x77\xd9\x45\xdd\x81\xe0\x00\xdc\xce\xa3\x88\xf7\xa5\x82\x69\x60\x4e\x53\x29\xe9\x8f\xb3\x37\x67\xa7\x30\xe4\x28\x91\x8c\x0a\x15\x3b\xc7\x2b\xf1\x54\x07\xce\x6d\x5f\xb3\x74\x59\x57\x89\x02\x6c\x82\x8d\x98\xe9\x05\x19\x58\x9f\x18\x9c\x03\xfe\xf3\x2f\x58\xc9\x2b\xaa\xee\x8c\x36\x06\x45\x85\xa1\x6c\x65\x2b\xfc\x80\x3a\xd0\x5e\x67\x76\x69\x50\x2a\xa7\x55\x4c\x7a\xd6\xc3\x44\x01\x71\x1d\x13\x35\x65\x72\x88\x89\xdb\xc1\x47\xd1\x4d\x33\xb7\x93\x64\x1b\x0a\x0f\x5a\x45\x0a\x4b\x5b\xd2\x7d\x76\x7b\xef\x9b\x45\x15\x27\x57\x55\x94\x74\xa7\x86\x96\x53\x63\xe3\x62\xaa\x3f\xe5\x40\xd3\x40\x91\x73\x28\xa9\x68\x75\x48\x4f\x15\x40\xe5\x9c\x71\x72\xdc\x0c\x07\x35\x42\xdc\xa3\x0e\xed\xc7\xcc\x49\x03\x4f\xf0\xe4\x04\x2f\x5f\x5e\x97\x2e\x69\x70\xf6\xe9\xf6\x49\x05\x04\x8a\x89\x03\x95\xec\x51\x5c\x1c\xbc\xdf\x6c\x0a\xd9\x3b\xfa\x88\xc9\x05\x3b\x12\xd2\xaa\x82\x96\xad\x57\x40\x0f\x36\x09\x32\x00\xcc\x68\x6a\xd8\xdf\x02\x98\x02\x46\x8e\xeb\xc2\x08\xc8\xc2\xe8\x14\xa3\x3f\x39\x07\xaf\x9d\x19\x3d\x96\x77\xc6\x46\x3d\x73\x54\x38\xaa\x75\xb9\x2e\x02\xd5\x36\xa6\xb0\x1e\x9d\x22\x85\x4c\xaa\x87\x9a\xe4\x41\xde\xf4\x71\xf7\x3b\xae\x43\x3a\x6c\xf9\xdd\x06\xb7\x26\x5c\x59\xa5\x86\xfe\x75\x2b\x26\x9b\x30\xb0\x5d\xb7\x00\x71\xf2\x3b\x1b\xea\xf8\xed\x65\x37\x10\x2f\x56\x8f\x04\xd0\xab\x8e\x6e\xc4\xb5\x60\x58\xe8\x04\x2b\xad\x6b\xf2\x09\xda\x1b\x78\x4a\x2b\x0e\x0b\xe4\x64\x9d\x4d\x96\x22\x6a\xee\x68\x2d\x31\x82\x2e\xbb\xe5\x36\x56\x00\x3f\x51\x63\x69\xef\xee\x70\xc8\x3e\x62\x46\x15\x07\x82\xf1\x51\xb6\x60\xe1\x79\xe5\x91\xb8\xdb\x9b\x3e\x12\x75\x9d\xc8\x2d\x56\x36\xcd\x21\x54\xb8\x46\xec\x16\x53\xad\xe6\xd6\x51\xc7\x92\x5f\xb8\x0a\x85\xf9\x09\x2f\x5e\x60\x34\xea\x98\xd2\xf0\x35\x4f\x3e\xc8\x8b\xd2\x17\xa9\xf0\xb0\x35\x97\xbd\x15\xb6\xdb\xe3\x02\x73\xbc\xc1\xd7\x5e\xbe\x47\x43\xbe\x3a\xc6\xb7\x4a\xc9\xdf\x9e\xdc\xa7\x25\x63\x35\xc6\xef\x67\x7f\xbc\x3d\xc5\x3b\x8f\x2a\xa7\x1c\xe8\x31\x1a\x5e\x0a\xbd\x69\xe9\x42\xc5\xa1\x19\x84\x23\xa7\x68\x0d\x81\x2b\x90\x5f\xda\xc0\xbe\x91\x51\x2f\x75\xb0\x02\xfb\xa8\xc6\x2a\x52\xc2\xcf\x57\x8a\xae\x5a\x0e\x09\x97\xaf\x2e\xff\x7d\xf1\xee\xc5\xc9\x5e\x29\xff\xe5\xb0\xa0\x30\x54\xd2\xbf\xc7\x76\x7b\xd2\x1d\x2c\xae\x76\x28\x0e\xd9\xa3\x28\xda\x60\x97\xd6\x51\x4d\x06\x45\x21\xba\x54\xec\xe0\x28\x88\x40\xb1\xc4\xf4\x74\x2a\x3f\x4f\x3f\xa1\xa0\x21\xda\xf1\xbe\x0d\x13\x50\xd9\x4b\xc0\xfe\x84\x52\xbd\x5a\x17\xa5\x2e\x52\xc8\x31\xc9\x5e\x44\x4a\xdd\x46\xe4\x16\x35\x79\x5a\xea\x6e\x96\xf2\x24\x26\x5d\x2e\xa0\x23\x22\x0b\xcd\xc7\x0e\xce\x37\x15\xd6\x46\x38\x6d\x8d\x34\x0c\xb3\xb5\x1a\x77\x26\x43\xe8\x6b\x39\x7c\xdc\x9f\x74\x1c\x29\x20\xcd\x6d\xb7\x24\xc3\x7a\xdc\x63\xdc\x70\x20\x35\x96\x54\x22\xaa\xc0\xcd\x0d\xdb\x36\x70\x49\x31\xca\x56\xad\xac\x08\xed\xdc\xb6\xe2\xaf\xcf\x5f\xf5\x69\x44\x42\x9c\x73\x76\xa6\xeb\x31\xfb\x92\xa0\x61\xf4\x1a\xec\xdd\x5a\xaa\x69\xbb\x64\x48\xa0\x18\xd5\x34\xc7\x30\x75\x5c\x6a\xd7\xdd\xb8\xf5\xa7\x48\xa5\x19\x8a\x15\xc1\x9c\xe9\x48\xce\x7a\xd9\x4c\x9c\x3f\x7d\xf3\xa0\x7d\xe4\x2a\xad\x74\xf8\x6a\xfb\xd2\xe9\x46\x2f\x77\xd6\x6a\x0c\xf2\x82\xb4\x8e\x9a\x7a\x3e\xbc\x39\x95\x81\x37\xa3\xba\xa6\xcd\xec\x1b\x1d\x17\x68\x4c\x34\x3b\x5a\x45\x1f\xe7\xe6\xdf\x86\xfd\xf5\x93\xca\x65\xf2\xe9\xcb\xff\x3d\x77\x43\x02\xff\x2f\x77\x7d\x11\xdf\xe7\x4d\x1d\x93\xb6\x94\x3d\x99\x42\x9b\x46\xe0\x51\x09\xa5\x72\x4b\x3e\xce\x6d\x95\x0a\x01\x57\x60\x57\xb4\x4e\x7b\xea\x75\x49\x28\xe2\x81\x53\xc2\x64\xfb\x22\x26\x22\x42\xd0\x2e\x32\x3c\x91\xb9\xb6\x9c\x74\x83\x9d\x2c\xd9\xe5\x86\x22\xe4\xba\xd7\xdf\x08\xcd\x4e\x18\x44\xeb\x7b\x9d\x2f\x45\x0e\x44\x33\x76\xf7\xc2\x06\x4f\xfe\xfe\xec\xc9\x5d\xf7\xc3\x7b\xfc\x4b\x1e\xbd\xfe\x76\xb7\xdf\xb8\x8e\x8e\x6b\x44\x2b\x08\x5f\x11\x1a\xed\x75\x4d\xa0\x25\x85\x75\x9a\x8b\x49\x9a\x07\xce\xf5\x1c\x3b\x09\xdf\x9b\xca\xa0\xe3\x3b\x2f\x77\xce\x8d\xdb\x83\xd7\x6a\x0c\xcf\x89\x4e\xa1\x13\x37\xb6\x2c\x6e\xf6\x0c\x65\x90\x0f\x56\xc7\xdc\x46\x64\x9f\xac\x43\xa3\x63\x77\x49\x8c\xc8\xed\x21\xc6\xee\xf4\xf2\x25\xd8\xf7\x7f\xf3\xc6\x72\x4e\x26\x77\xed\xda\xfb\x1e\x40\xa0\x19\x73\x12\xe2\x28\xb9\x69\xbb\x8b\xee\x5d\x9f\x36\x23\x15\xe7\x39\x19\x91\xf4\xa2\x18\xce\xfc\xfc\x57\xb9\xfe\xbb\x48\xdb\xed\x01\xc6\x8f\x56\x83\xcf\x9f\xfb\x2b\xd2\xee\xeb\xe1\x7f\x01\x00\x00\xff\xff\x38\xb6\xac\x3c\xe3\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
