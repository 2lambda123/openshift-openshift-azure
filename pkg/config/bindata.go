// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// data/etcd.conf.tpl
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _etcdConfTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xd1\x6e\x9c\x30\x10\x45\xdf\xfb\x15\xf9\x82\xfd\x83\x3e\x18\x7b\xa2\xb5\xd6\xf1\x26\x66\x88\x94\x27\xcb\x5d\xa6\xad\x55\x02\x92\x19\x22\x45\x51\xfe\xbd\x02\x52\x28\xf5\xd2\xbc\xcf\xb9\x33\x73\xef\x05\x94\xca\x0b\xf5\x08\x0e\x75\x09\x5e\x1a\x0d\x16\x7d\xe5\x4c\xf9\xf5\xed\xed\xe6\x20\xbb\xf6\x7b\xfc\x71\x00\xbe\xd4\x07\x51\xbf\x50\xe2\xd8\x53\x95\x9a\xfe\xe6\xfd\xfd\xcb\xc4\x4a\x70\xe8\x6f\xb5\x81\x6c\x5e\x52\xe2\xdb\xd8\xd0\x3a\x3a\x8b\x4f\x84\xa8\xf0\x98\x13\x4d\xa4\x96\x47\x4e\x0c\xfc\x73\xe1\x94\x40\xe1\x95\x76\xd9\xbc\x0a\x1c\x54\x4c\xcb\x20\x18\x90\xa8\xcf\xd6\xa3\xbe\x83\x73\x85\x19\x00\x0d\x5d\x38\x76\x2d\xc6\x67\xea\x06\x5e\xc0\x23\x08\x87\x05\x08\xf4\xda\x22\xb8\x47\x61\x32\xf4\x48\x21\xf1\x37\x0a\xac\x5b\xa6\xf4\x12\x9a\x05\xd6\x56\xa3\x16\xe6\x2f\x17\xef\x01\xdc\x75\x0f\x75\x1b\x39\x86\x66\xb1\xf2\x9e\x28\xf5\x1b\x3f\xff\xa8\x49\x53\x95\x08\xf9\xcf\x1f\x0a\xb2\x19\x7a\xa6\xf5\xf5\x13\x3c\x5d\x4f\xe1\x44\xaf\x9b\x10\x8c\x2e\x11\xec\x7f\x83\x36\xb1\x67\x6a\xe7\x30\xb6\xc7\x7d\xc0\xfb\xff\xcd\xe8\xf8\xd5\x86\xb3\xe2\x2e\xbf\xcc\x86\xe7\xf5\xac\x49\x72\xbf\x4b\xa3\x62\xd6\xa7\x99\xf9\xac\x54\x13\x7a\xbd\x58\x93\xc0\xae\x73\x23\xf8\xaf\x7b\x13\x81\x6e\x8c\x46\x79\x29\xf6\x41\x4c\x63\x3e\xb5\x0c\x1b\xfc\xa1\x3a\xa3\xf0\x85\x90\x27\xb0\xca\x17\x4f\x08\xb9\x85\x0f\x43\xc7\xa1\x08\x97\x5f\xd4\xd6\xc5\x2b\xd3\xea\xe2\x67\x7b\xb3\x9d\xbf\x03\x00\x00\xff\xff\xb1\xc6\x30\x0e\xdd\x03\x00\x00")

func etcdConfTplBytes() ([]byte, error) {
	return bindataRead(
		_etcdConfTpl,
		"etcd.conf.tpl",
	)
}

func etcdConfTpl() (*asset, error) {
	bytes, err := etcdConfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.conf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"etcd.conf.tpl": etcdConfTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"etcd.conf.tpl": {etcdConfTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
