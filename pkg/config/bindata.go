// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// data/master-config/etcd.conf
// data/master-config/master-config.yaml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterConfigEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xd1\x4f\xc2\x30\x10\xc6\xdf\xfd\x3b\x7c\xd0\x44\xd9\x98\x08\x8e\xa4\x0f\xa5\x3b\x43\x43\x29\xda\xdd\x48\x78\x6a\x26\x36\xc1\x28\x4a\xb6\x4a\xe2\x7f\x6f\x68\x11\x2a\x0c\xdd\xb2\x97\xfb\x7e\xdf\xdd\xee\x3e\x40\x96\x69\x9a\x4d\x41\x21\xcf\x41\x33\xc1\x41\xa2\x2e\x94\xc8\xc9\xc2\xda\x55\xdd\x8f\xa2\xf3\x8b\xc5\x47\x6d\xdf\xcb\xa5\xb9\xec\x27\x37\xbd\xf4\xcc\x79\x18\x28\xd4\xf7\x5c\x00\x89\x8c\x9d\x6f\xbe\xe7\xa8\x36\xd5\xda\x54\xad\x79\x65\xb7\x8c\xef\xe6\x50\x5a\xe0\x90\xd8\xea\xd3\x78\x29\xa3\x48\x75\xc6\x15\x89\xd6\x65\x15\xbd\xbd\x3c\xb9\x0e\x5e\x03\x01\x0c\xf9\x44\x6a\xe4\x63\x98\x14\x48\x92\xdb\x38\xf6\xd2\x10\xa8\xc2\x01\x50\xd4\x5c\x22\xa8\x29\x15\x64\xa7\x71\xc9\x91\x53\x11\x6c\xf3\x00\xa0\xfe\xda\xe5\xee\xc0\xc9\x44\x91\x23\x28\xb2\x2c\x6b\x6b\xaa\xeb\xd8\x3d\x3b\xef\xaf\xaa\x73\x5f\x85\xa5\x76\x23\xd8\x3e\x06\x93\x46\x30\x09\xfe\x67\x04\xb3\x13\xa7\x7d\x35\x5f\x1e\x11\x3c\x47\x90\x8d\x79\xc5\x2d\xf7\x06\x59\x6d\xe1\xe3\x73\xec\xd1\x9f\xd1\x92\x8e\x81\x04\x57\xf2\x55\xe7\x6c\x4a\x7c\x65\xc2\xbc\x3d\x76\x3a\x74\xa7\x37\x2c\xe7\xba\xec\x56\x73\x14\xaa\x4d\x14\x99\x66\xf4\x10\x9e\x97\xfb\x81\x8f\xc5\x04\xa9\x1e\x50\x36\x02\x99\xe9\xc1\x0c\x21\x27\x9d\x24\xed\xa4\xdd\x5e\x92\x76\x3d\xf3\x6f\xa7\xef\x00\x00\x00\xff\xff\xe0\x67\x7f\xdc\x03\x03\x00\x00")

func masterConfigEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterConfigEtcdConf,
		"master-config/etcd.conf",
	)
}

func masterConfigEtcdConf() (*asset, error) {
	bytes, err := masterConfigEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-config/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterConfigMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5b\x6f\xe3\xb8\x15\x7e\xf7\xaf\x20\x06\x05\xb6\x0d\x2a\xc9\xce\x65\x2e\x02\xfa\xe0\x26\x99\x1d\x63\x33\x19\xc3\xc9\x14\x7d\x2b\x68\xf2\x58\xe6\x9a\x22\x35\xbc\x78\xa2\xfd\xf5\x05\x2f\x92\x68\xc5\x4e\xd2\x16\xa8\xf7\x61\x23\x9e\xef\x5c\xc8\x73\xf8\xf1\x9c\xc1\xb4\x66\x5a\x33\x29\xae\xa5\xd8\xb0\xaa\x9c\x20\xd4\x70\x5b\xb1\xe4\x1b\xa1\x39\xff\x89\x5b\xbd\xb4\x9c\x2f\x6a\x5c\x81\x0e\xab\x08\x11\x8f\xb1\x0a\x1b\x26\x45\xb7\x88\xd0\x8e\x09\x5a\xa2\x1b\xd8\x60\xcb\xcd\xfc\xd0\x41\x0f\xc2\x0d\xfb\x07\x28\x27\x28\xd1\x7e\xd6\x2f\x53\xa6\xf1\x9a\x43\x89\x36\x98\x6b\xf0\xcb\x7f\xb7\x8c\xd3\x68\xed\x35\xd7\x27\xac\x86\x88\x0e\x0c\x25\xe1\xf8\xf5\x6f\x7b\x50\x8a\xd1\x57\x37\xf7\xba\x87\xde\x52\xe2\x62\x29\xe9\x52\x81\x06\xf3\xbf\x58\x7f\xe1\x44\x65\x03\x42\x6f\xd9\xc6\xe4\x4c\x16\x3e\x49\x4b\xc9\x19\x69\xff\x3b\x77\xf0\x04\xc4\x3a\xe4\xca\xf2\xe1\x40\x10\xca\x50\x8d\x0d\xd9\x7a\xfb\x73\x21\xa4\xf1\xe6\x12\x80\x83\xec\xa0\x2d\x11\xf3\x75\x92\x1f\x84\x45\x41\xb4\x59\x6f\x3a\xd1\x41\x68\x8f\xb9\x85\x12\xbd\x33\xca\xc2\xbb\x44\x22\x70\x0d\xe5\x10\x4e\x46\x41\x30\xa0\x09\x40\x8a\x15\x68\x69\x15\x81\x51\x14\x2a\x2e\x97\xa8\x91\x54\x9f\x10\xad\x5d\xba\x52\xa1\x82\xdf\x81\x98\x12\xb9\x38\x92\x65\xbd\x63\xcd\x37\xef\x89\xfb\x38\x3e\x63\xc6\xad\x82\x11\x2e\x24\x29\x39\xfc\x98\x1f\x5c\x55\x0a\x2a\x6c\xa4\x4a\xee\x98\x92\x4f\xed\x35\x67\x20\xcc\x42\x6c\x64\x88\x9d\x80\x32\x9f\x99\x2b\xfe\x41\x25\xdb\x28\x29\x4c\xe6\xf1\x39\x51\xc6\x03\x77\xd0\xbe\x88\xdb\x41\x3b\xc1\x0d\xbb\x83\x3d\x70\x5d\x4e\x32\x97\xdb\x51\xaa\xb1\x35\xdb\x21\x1c\x05\x3f\x2c\x68\xf3\x05\x30\x05\x15\x83\xf1\xc1\x5d\xcf\x4b\x94\x58\xce\x08\xee\x83\x88\x00\x59\xd7\x52\xdc\xe3\xba\x4b\x40\x76\x22\xa8\x49\x28\x2c\xa3\x70\xf0\xb2\x54\xb0\x61\x4f\x83\xd6\x3f\xb3\x15\xd4\xd2\x40\x76\xeb\x30\x99\x5f\xad\x94\xb4\x4d\x80\x3f\xc7\xfd\xea\x84\x7e\xd1\x6a\x50\xae\x52\x4e\x21\xbf\x6b\x50\x13\x22\x85\x51\x92\x73\x48\xb2\x00\x1c\xc8\x70\x21\xb8\x24\xbb\x7b\x5f\x70\x7d\xd9\x66\x35\xd6\x06\x54\x36\x28\xbb\x6a\xd1\xa0\xf6\x8c\xc0\x83\xfb\x9f\xa8\xae\x41\xc5\x5b\xad\x59\x25\xba\xe3\x4b\xb3\x19\xf1\x59\x90\xf7\x07\x98\xe4\x71\x84\x70\xf9\x4b\x5c\x96\xe8\xdd\xd9\xbb\x09\x91\x4a\xcf\x39\x97\x3f\x81\x7e\x53\xac\x62\xee\xde\x51\xa1\x87\xdd\xac\x99\xa0\x73\x4a\x15\x68\x5d\xa2\x69\xee\xff\x2b\x3f\x4e\xaf\x2e\xa2\xec\x1e\xcc\x4f\xa9\x76\x25\x32\xa4\xb9\x9c\x80\x21\xf4\xb0\x00\x09\x2e\x51\xd8\x6f\xee\x84\x43\xae\x87\x9d\x1c\x88\xbd\x72\x84\xf4\x3b\x39\x82\x70\xbb\x41\xc8\x2a\xee\x33\x93\xa1\xad\x31\x8d\x2e\x8b\xe2\x4f\x7f\xde\x4a\x6d\x5c\xe2\xfe\x52\x9e\x5f\x7c\xf8\xe4\x43\x7a\x30\x52\xe1\x0a\x86\x5d\xed\xec\x1a\x94\x00\x03\x3a\x8a\x42\xe1\x94\x89\x20\x67\xf2\x18\xf0\x90\xd9\x5c\x4e\x1f\x5c\x4e\x47\x66\x52\x8a\x3a\x02\x4b\x8d\x78\x52\x1b\x22\xdb\x48\x55\x63\x53\xa2\x5f\xce\xce\xce\xd0\xaf\xb7\xf7\xb7\xab\xf9\xe3\xed\x0d\x3a\x3b\x3b\xfb\x25\x40\x53\x16\x70\x0a\x4c\x18\x57\xa8\x7c\x05\x15\xd3\x46\xb5\x5f\xe2\xf6\x4b\x44\x25\xd9\x81\xca\x54\x14\xe4\x34\x30\x7d\xae\xf7\xa4\xbc\x9a\x4e\xa7\x93\xc0\x2d\x5f\xfd\xe1\x46\x5a\x71\xfb\xe5\x60\x9e\xe7\xf0\x74\xde\xa2\xca\xcb\xa9\x1b\x81\x42\xf6\x1a\xa9\x4c\x89\x66\xd3\xf3\xab\xe9\x64\x38\xe8\x34\x1e\xe7\x1d\x37\xcc\x5d\x0a\x50\x73\x55\xd9\x1a\x44\xf7\x5c\x13\x2e\x2d\xcd\x48\xd2\x51\x64\xa8\x00\x43\x0a\xe9\x0b\xb9\xf0\xf2\x46\xc9\x3d\xa3\xa0\x0a\xfc\x87\x55\x90\x3b\x74\xa2\xdc\x49\x7b\x92\x71\x20\xff\xb7\xb2\xc2\xb0\x1a\x46\xe6\x35\x18\xc3\x44\xa5\xf3\xdd\x47\x57\x1f\xc5\x7e\x86\x79\xb3\xc5\xb3\xbf\xf5\x94\xad\x43\x82\xb3\x35\x26\x3b\x10\xb4\x53\x74\x45\x78\x71\x00\xa8\x81\x32\x9c\x99\xb6\x81\xde\x79\xd3\x70\x46\xfc\xe3\x57\xec\x05\xcd\x93\x52\x6c\x94\x34\x72\x6d\x5d\xe8\xc3\x0d\xfe\x7f\x1e\x07\xe1\xd6\x53\x96\xa3\x12\x26\xaa\xcc\x15\x41\xb6\x71\x09\x3e\xe2\x29\xa4\xbc\x38\x60\xf5\x43\xf5\x1d\xb4\x6f\xd0\x0e\x45\x12\xbe\x17\xcb\x12\xcd\xce\x3f\x78\xfe\x99\xbd\xfe\xd4\xc5\xaa\x8b\xcf\x4b\x5a\x98\xcf\x4b\xf3\x00\x14\x7c\x6a\xb2\x05\x6a\x7b\x56\x0f\xf0\x23\x41\xf6\xb8\xfc\x77\xed\x9b\x8f\x48\xb9\xfa\xc1\xae\x05\xb8\xda\xfe\x70\x9e\x5f\x78\xce\x2c\x66\xef\x27\x41\x2b\x44\xed\xb3\xd6\xd3\xc4\x9d\x94\x8d\x2b\x99\xeb\xf8\xfc\x09\x11\xde\x90\x51\xff\x88\x09\x81\xc6\x89\x0d\x08\xf3\xd8\x36\xa0\xcb\xb7\x94\xcd\x5f\x53\x4c\x8c\x14\xa1\xb5\x55\xda\x94\xe8\xfd\x74\x3a\x89\xcd\x5c\x67\xf5\x4d\x46\xbd\xd2\x8f\x46\x97\xe8\xc2\x5b\x78\xb6\x97\xdf\xec\xba\xe3\xb5\x67\x6f\x9f\x37\x18\x6a\x35\x9e\xca\xd2\xae\x39\x23\xdf\x57\x77\xc7\xa9\x4f\x84\x67\x66\x60\x85\x58\x52\xf1\xf9\x89\x8f\x00\x61\x54\x39\x42\xc9\x67\xe7\x1f\xc3\xa1\x5f\xfa\x30\xdd\x93\x10\x52\x72\x07\xa2\x32\xdb\x12\x7d\x9a\xf8\xbe\xc1\x33\xe7\x62\x19\xad\x5c\x2f\x6e\x56\xd1\x52\x7c\xe9\x0a\xb7\xb3\xe8\x7b\xe9\x27\x98\xf0\x96\x2b\xa0\x5b\x6c\x8a\x61\x5b\x72\xaf\x33\xed\x3d\x0c\x55\x90\x58\x1d\x57\x82\x3c\xec\x94\xb0\xd6\x60\x5e\x39\x01\xd7\xb8\x60\x5f\x1b\xfd\x05\xaf\xc1\x6c\x25\x2d\x11\xb6\xc6\xbd\x32\x8c\x82\x30\xcc\xb4\xcb\x78\x8d\xe3\x56\xb8\xac\x98\x48\xba\xca\x1a\x37\x0d\x13\xd5\xd7\xa8\x4c\x38\x66\xf5\x64\xe8\x8b\x8f\xfb\xf6\x37\x2e\x21\x87\x13\x5d\xbe\x37\x96\x34\xcd\x50\x63\xc6\xd3\x56\xdf\x2f\xf4\xdf\x8c\xa6\x32\x6d\xd7\x93\x83\x1e\x3d\x91\xb9\xef\xfe\xb3\x51\xb0\x01\xa5\x80\x7e\x8f\x3d\x5a\x8a\xb4\x82\xfd\xb0\xf0\xaf\x44\x21\x5c\xed\xc5\xcd\xe9\xbd\x75\x98\x07\x20\x0a\x4e\x3c\xbe\x69\x3b\xfe\xad\x01\xb1\xb8\x59\x8c\xce\x3b\x42\xba\x9e\x24\x1e\x93\x35\x5b\xa9\xd8\x1f\x2f\x9c\xac\xfb\x19\xb9\x03\x71\x0a\x92\x21\xb2\xc5\x9c\x83\xa8\xd2\xe9\xe0\x3f\xcc\xeb\x9d\x24\x98\xa3\x06\x6b\xfd\x53\x2a\xfa\xf6\x94\x6e\x4e\x91\xdf\xd6\x78\x63\xf4\xe0\x64\xbe\x3c\x2e\xfd\xe2\x32\xfa\x39\x72\x46\x91\x05\xe7\x49\x4f\xf1\x26\x0a\xe8\x60\x2f\x00\x34\x8c\xfe\xd5\xa1\x5f\xfa\x8a\x9f\xe6\x15\x3c\x38\xce\xa1\x8e\xb2\x3a\xd6\x8b\xe2\x70\xab\xb5\x16\xe9\x62\xa8\x06\x7d\x9a\xfd\x03\x2c\xd3\x01\x97\xb7\xb8\x76\xa5\xed\x53\x99\x86\xe0\x58\x5b\xeb\x47\xb7\x3c\x0a\xe3\xe3\xfb\xcb\x18\x47\x5f\x26\xc7\x60\x57\xd3\xe9\xa4\x51\xd2\x4d\x91\x83\xdd\xd8\xcd\xdd\x4b\x0a\x0f\x7e\xe4\x90\xaa\x44\x42\x52\xc8\x94\xe4\x90\x1f\x34\xb2\x05\x91\x75\x63\x0d\x74\x7d\x8a\x06\x62\x15\x33\xad\xeb\xfc\x89\x9b\xa9\x22\x9f\x10\xdd\xaf\xac\xb0\xaf\x36\x3d\x2d\x8b\xf3\x4e\x78\x87\xd7\xc0\xf5\xd2\x8d\x59\x32\x8c\xb4\x57\x61\x54\x62\x74\xac\x37\x9b\x76\xbf\x6c\xf6\xa9\xfb\x15\x7e\x75\xa2\xa4\x75\x5d\xd4\xb0\x15\x6d\xd7\x54\xd6\x98\x9d\xb8\x00\x91\x4e\xe7\x84\x48\x9b\x12\x60\x8d\x05\xae\x80\xf6\x63\x62\xd6\x9d\x89\xff\xdb\x8f\xe1\xbe\xe0\xdc\x7a\xc3\x65\x7b\xaa\xfa\x1a\xc5\xf6\xd8\xc0\x6f\xa3\xb9\x09\x07\x7f\xee\xc5\xf3\xf2\xae\x69\xf5\x55\x1a\xc1\xd1\xef\x33\x0d\x8f\xf1\x0a\x3a\xcc\x73\x5d\x93\x72\x74\x9c\xba\xbc\x3c\x3e\x4d\x1d\xe9\x68\xb4\xef\x84\xbb\x56\xbc\x9f\xa6\xfb\xbd\x8c\x9b\x9b\x88\xef\x5a\xa9\xa7\x55\x98\xc9\xf5\x42\x7c\xe6\xac\xda\x9a\x50\x5c\xfd\xac\xfe\xc8\x6a\x90\xd6\x8c\xef\x89\x63\x10\xea\x46\x52\xb6\x71\x5d\x41\x6c\x47\xb2\x24\xbc\x23\xd7\xc3\x2b\x15\x44\x0a\xed\xea\xb1\x9f\x4f\xfb\x08\x5f\x55\x09\x41\x47\x02\xeb\x29\x35\x3b\x5a\x23\x7b\xc9\x6d\x9d\x8c\x51\xb4\x15\xb8\x66\xc4\xd3\x8e\xbb\xa4\x4c\x54\xb7\x02\xaf\x39\xd0\xc8\x98\xff\x0e\x00\x00\xff\xff\xdb\x5e\x78\xe7\xa3\x14\x00\x00")

func masterConfigMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterConfigMasterConfigYaml,
		"master-config/master-config.yaml",
	)
}

func masterConfigMasterConfigYaml() (*asset, error) {
	bytes, err := masterConfigMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-config/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-config/etcd.conf":          masterConfigEtcdConf,
	"master-config/master-config.yaml": masterConfigMasterConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-config": {nil, map[string]*bintree{
		"etcd.conf":          {masterConfigEtcdConf, map[string]*bintree{}},
		"master-config.yaml": {masterConfigMasterConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
